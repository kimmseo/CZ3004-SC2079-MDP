
MDP Group 19.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dfac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001000  0800e140  0800e140  0001e140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f140  0800f140  0002021c  2**0
                  CONTENTS
  4 .ARM          00000008  0800f140  0800f140  0001f140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f148  0800f148  0002021c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f148  0800f148  0001f148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800f14c  0800f14c  0001f14c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000021c  20000000  0800f150  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002021c  2**0
                  CONTENTS
 10 .bss          000050a0  20000220  20000220  00020220  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200052c0  200052c0  00020220  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002021c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d397  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000038fb  00000000  00000000  0003d5e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019d8  00000000  00000000  00040ee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001898  00000000  00000000  000428b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004a78  00000000  00000000  00044150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c3aa  00000000  00000000  00048bc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e6597  00000000  00000000  00064f72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014b509  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008318  00000000  00000000  0014b55c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000220 	.word	0x20000220
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e124 	.word	0x0800e124

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000224 	.word	0x20000224
 80001cc:	0800e124 	.word	0x0800e124

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f8c:	b590      	push	{r4, r7, lr}
 8000f8e:	b085      	sub	sp, #20
 8000f90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t sbuf[15] = "Hello World!\n\r";
 8000f92:	4b32      	ldr	r3, [pc, #200]	; (800105c <main+0xd0>)
 8000f94:	463c      	mov	r4, r7
 8000f96:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f98:	c407      	stmia	r4!, {r0, r1, r2}
 8000f9a:	8023      	strh	r3, [r4, #0]
 8000f9c:	3402      	adds	r4, #2
 8000f9e:	0c1b      	lsrs	r3, r3, #16
 8000fa0:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fa2:	f002 f81b 	bl	8002fdc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa6:	f000 f883 	bl	80010b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000faa:	f000 fbcd 	bl	8001748 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000fae:	f000 fba1 	bl	80016f4 <MX_USART3_UART_Init>
  MX_TIM8_Init();
 8000fb2:	f000 faf5 	bl	80015a0 <MX_TIM8_Init>
  MX_TIM1_Init();
 8000fb6:	f000 f959 	bl	800126c <MX_TIM1_Init>
  MX_TIM2_Init();
 8000fba:	f000 f9f5 	bl	80013a8 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000fbe:	f000 f927 	bl	8001210 <MX_I2C1_Init>
  MX_TIM3_Init();
 8000fc2:	f000 fa45 	bl	8001450 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000fc6:	f000 fa97 	bl	80014f8 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000fca:	f000 f8cf 	bl	800116c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  	OLED_Init();
 8000fce:	f001 fbc7 	bl	8002760 <OLED_Init>
    OLED_ShowString(40, 30, OLED_buf);*/
    //OLED_Refresh_Gram();
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000fd2:	f006 fc59 	bl	8007888 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000fd6:	4a22      	ldr	r2, [pc, #136]	; (8001060 <main+0xd4>)
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4822      	ldr	r0, [pc, #136]	; (8001064 <main+0xd8>)
 8000fdc:	f006 fc9e 	bl	800791c <osThreadNew>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	4a21      	ldr	r2, [pc, #132]	; (8001068 <main+0xdc>)
 8000fe4:	6013      	str	r3, [r2, #0]

  /* creation of Motor */
  MotorHandle = osThreadNew(motorA, NULL, &Motor_attributes);
 8000fe6:	4a21      	ldr	r2, [pc, #132]	; (800106c <main+0xe0>)
 8000fe8:	2100      	movs	r1, #0
 8000fea:	4821      	ldr	r0, [pc, #132]	; (8001070 <main+0xe4>)
 8000fec:	f006 fc96 	bl	800791c <osThreadNew>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	4a20      	ldr	r2, [pc, #128]	; (8001074 <main+0xe8>)
 8000ff4:	6013      	str	r3, [r2, #0]

  /* creation of Encoder */
  EncoderHandle = osThreadNew(encoder, NULL, &Encoder_attributes);
 8000ff6:	4a20      	ldr	r2, [pc, #128]	; (8001078 <main+0xec>)
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	4820      	ldr	r0, [pc, #128]	; (800107c <main+0xf0>)
 8000ffc:	f006 fc8e 	bl	800791c <osThreadNew>
 8001000:	4603      	mov	r3, r0
 8001002:	4a1f      	ldr	r2, [pc, #124]	; (8001080 <main+0xf4>)
 8001004:	6013      	str	r3, [r2, #0]

  /* creation of IMU */
  IMUHandle = osThreadNew(gyro_task, NULL, &IMU_attributes);
 8001006:	4a1f      	ldr	r2, [pc, #124]	; (8001084 <main+0xf8>)
 8001008:	2100      	movs	r1, #0
 800100a:	481f      	ldr	r0, [pc, #124]	; (8001088 <main+0xfc>)
 800100c:	f006 fc86 	bl	800791c <osThreadNew>
 8001010:	4603      	mov	r3, r0
 8001012:	4a1e      	ldr	r2, [pc, #120]	; (800108c <main+0x100>)
 8001014:	6013      	str	r3, [r2, #0]

  /* creation of soundSensor */
  soundSensorHandle = osThreadNew(ultrasonic_task, NULL, &soundSensor_attributes);
 8001016:	4a1e      	ldr	r2, [pc, #120]	; (8001090 <main+0x104>)
 8001018:	2100      	movs	r1, #0
 800101a:	481e      	ldr	r0, [pc, #120]	; (8001094 <main+0x108>)
 800101c:	f006 fc7e 	bl	800791c <osThreadNew>
 8001020:	4603      	mov	r3, r0
 8001022:	4a1d      	ldr	r2, [pc, #116]	; (8001098 <main+0x10c>)
 8001024:	6013      	str	r3, [r2, #0]

  /* creation of Show */
  ShowHandle = osThreadNew(show_task, NULL, &Show_attributes);
 8001026:	4a1d      	ldr	r2, [pc, #116]	; (800109c <main+0x110>)
 8001028:	2100      	movs	r1, #0
 800102a:	481d      	ldr	r0, [pc, #116]	; (80010a0 <main+0x114>)
 800102c:	f006 fc76 	bl	800791c <osThreadNew>
 8001030:	4603      	mov	r3, r0
 8001032:	4a1c      	ldr	r2, [pc, #112]	; (80010a4 <main+0x118>)
 8001034:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001036:	f006 fc4b 	bl	80078d0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800103a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800103e:	481a      	ldr	r0, [pc, #104]	; (80010a8 <main+0x11c>)
 8001040:	f002 ff29 	bl	8003e96 <HAL_GPIO_TogglePin>
	  //HAL_GPIO_TogglePin(Buzzer_GPIO_Port, Buzzer_Pin);
	  HAL_UART_Transmit(&huart3, sbuf, sizeof(sbuf), HAL_MAX_DELAY);
 8001044:	4639      	mov	r1, r7
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	220f      	movs	r2, #15
 800104c:	4817      	ldr	r0, [pc, #92]	; (80010ac <main+0x120>)
 800104e:	f006 f872 	bl	8007136 <HAL_UART_Transmit>
	  HAL_Delay(2000);
 8001052:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001056:	f002 f833 	bl	80030c0 <HAL_Delay>
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 800105a:	e7ee      	b.n	800103a <main+0xae>
 800105c:	0800e174 	.word	0x0800e174
 8001060:	0800e1dc 	.word	0x0800e1dc
 8001064:	08001d21 	.word	0x08001d21
 8001068:	20000484 	.word	0x20000484
 800106c:	0800e200 	.word	0x0800e200
 8001070:	08001d31 	.word	0x08001d31
 8001074:	20000488 	.word	0x20000488
 8001078:	0800e224 	.word	0x0800e224
 800107c:	08001de1 	.word	0x08001de1
 8001080:	2000048c 	.word	0x2000048c
 8001084:	0800e248 	.word	0x0800e248
 8001088:	08001fb1 	.word	0x08001fb1
 800108c:	20000490 	.word	0x20000490
 8001090:	0800e26c 	.word	0x0800e26c
 8001094:	08002111 	.word	0x08002111
 8001098:	20000494 	.word	0x20000494
 800109c:	0800e290 	.word	0x0800e290
 80010a0:	08002319 	.word	0x08002319
 80010a4:	20000498 	.word	0x20000498
 80010a8:	40021000 	.word	0x40021000
 80010ac:	20000440 	.word	0x20000440

080010b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b094      	sub	sp, #80	; 0x50
 80010b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010b6:	f107 0320 	add.w	r3, r7, #32
 80010ba:	2230      	movs	r2, #48	; 0x30
 80010bc:	2100      	movs	r1, #0
 80010be:	4618      	mov	r0, r3
 80010c0:	f009 fa14 	bl	800a4ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	2200      	movs	r2, #0
 80010ca:	601a      	str	r2, [r3, #0]
 80010cc:	605a      	str	r2, [r3, #4]
 80010ce:	609a      	str	r2, [r3, #8]
 80010d0:	60da      	str	r2, [r3, #12]
 80010d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010d4:	2300      	movs	r3, #0
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	4b22      	ldr	r3, [pc, #136]	; (8001164 <SystemClock_Config+0xb4>)
 80010da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010dc:	4a21      	ldr	r2, [pc, #132]	; (8001164 <SystemClock_Config+0xb4>)
 80010de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010e2:	6413      	str	r3, [r2, #64]	; 0x40
 80010e4:	4b1f      	ldr	r3, [pc, #124]	; (8001164 <SystemClock_Config+0xb4>)
 80010e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010f0:	2300      	movs	r3, #0
 80010f2:	607b      	str	r3, [r7, #4]
 80010f4:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <SystemClock_Config+0xb8>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a1b      	ldr	r2, [pc, #108]	; (8001168 <SystemClock_Config+0xb8>)
 80010fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	4b19      	ldr	r3, [pc, #100]	; (8001168 <SystemClock_Config+0xb8>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001108:	607b      	str	r3, [r7, #4]
 800110a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800110c:	2302      	movs	r3, #2
 800110e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001110:	2301      	movs	r3, #1
 8001112:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001114:	2310      	movs	r3, #16
 8001116:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001118:	2300      	movs	r3, #0
 800111a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800111c:	f107 0320 	add.w	r3, r7, #32
 8001120:	4618      	mov	r0, r3
 8001122:	f003 fe91 	bl	8004e48 <HAL_RCC_OscConfig>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800112c:	f001 f96c 	bl	8002408 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001130:	230f      	movs	r3, #15
 8001132:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001134:	2300      	movs	r3, #0
 8001136:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001138:	2300      	movs	r3, #0
 800113a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800113c:	2300      	movs	r3, #0
 800113e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001140:	2300      	movs	r3, #0
 8001142:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	2100      	movs	r1, #0
 800114a:	4618      	mov	r0, r3
 800114c:	f004 f8f4 	bl	8005338 <HAL_RCC_ClockConfig>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001156:	f001 f957 	bl	8002408 <Error_Handler>
  }
}
 800115a:	bf00      	nop
 800115c:	3750      	adds	r7, #80	; 0x50
 800115e:	46bd      	mov	sp, r7
 8001160:	bd80      	pop	{r7, pc}
 8001162:	bf00      	nop
 8001164:	40023800 	.word	0x40023800
 8001168:	40007000 	.word	0x40007000

0800116c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b084      	sub	sp, #16
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001172:	463b      	mov	r3, r7
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
 8001178:	605a      	str	r2, [r3, #4]
 800117a:	609a      	str	r2, [r3, #8]
 800117c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800117e:	4b21      	ldr	r3, [pc, #132]	; (8001204 <MX_ADC1_Init+0x98>)
 8001180:	4a21      	ldr	r2, [pc, #132]	; (8001208 <MX_ADC1_Init+0x9c>)
 8001182:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001184:	4b1f      	ldr	r3, [pc, #124]	; (8001204 <MX_ADC1_Init+0x98>)
 8001186:	2200      	movs	r2, #0
 8001188:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800118a:	4b1e      	ldr	r3, [pc, #120]	; (8001204 <MX_ADC1_Init+0x98>)
 800118c:	2200      	movs	r2, #0
 800118e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001190:	4b1c      	ldr	r3, [pc, #112]	; (8001204 <MX_ADC1_Init+0x98>)
 8001192:	2200      	movs	r2, #0
 8001194:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001196:	4b1b      	ldr	r3, [pc, #108]	; (8001204 <MX_ADC1_Init+0x98>)
 8001198:	2200      	movs	r2, #0
 800119a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800119c:	4b19      	ldr	r3, [pc, #100]	; (8001204 <MX_ADC1_Init+0x98>)
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011a4:	4b17      	ldr	r3, [pc, #92]	; (8001204 <MX_ADC1_Init+0x98>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011aa:	4b16      	ldr	r3, [pc, #88]	; (8001204 <MX_ADC1_Init+0x98>)
 80011ac:	4a17      	ldr	r2, [pc, #92]	; (800120c <MX_ADC1_Init+0xa0>)
 80011ae:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011b0:	4b14      	ldr	r3, [pc, #80]	; (8001204 <MX_ADC1_Init+0x98>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011b6:	4b13      	ldr	r3, [pc, #76]	; (8001204 <MX_ADC1_Init+0x98>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011bc:	4b11      	ldr	r3, [pc, #68]	; (8001204 <MX_ADC1_Init+0x98>)
 80011be:	2200      	movs	r2, #0
 80011c0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011c4:	4b0f      	ldr	r3, [pc, #60]	; (8001204 <MX_ADC1_Init+0x98>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011ca:	480e      	ldr	r0, [pc, #56]	; (8001204 <MX_ADC1_Init+0x98>)
 80011cc:	f001 ff9c 	bl	8003108 <HAL_ADC_Init>
 80011d0:	4603      	mov	r3, r0
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80011d6:	f001 f917 	bl	8002408 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80011da:	230a      	movs	r3, #10
 80011dc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011de:	2301      	movs	r3, #1
 80011e0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80011e2:	2300      	movs	r3, #0
 80011e4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011e6:	463b      	mov	r3, r7
 80011e8:	4619      	mov	r1, r3
 80011ea:	4806      	ldr	r0, [pc, #24]	; (8001204 <MX_ADC1_Init+0x98>)
 80011ec:	f002 f96e 	bl	80034cc <HAL_ADC_ConfigChannel>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80011f6:	f001 f907 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011fa:	bf00      	nop
 80011fc:	3710      	adds	r7, #16
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	2000023c 	.word	0x2000023c
 8001208:	40012000 	.word	0x40012000
 800120c:	0f000001 	.word	0x0f000001

08001210 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001214:	4b12      	ldr	r3, [pc, #72]	; (8001260 <MX_I2C1_Init+0x50>)
 8001216:	4a13      	ldr	r2, [pc, #76]	; (8001264 <MX_I2C1_Init+0x54>)
 8001218:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800121a:	4b11      	ldr	r3, [pc, #68]	; (8001260 <MX_I2C1_Init+0x50>)
 800121c:	4a12      	ldr	r2, [pc, #72]	; (8001268 <MX_I2C1_Init+0x58>)
 800121e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001220:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <MX_I2C1_Init+0x50>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001226:	4b0e      	ldr	r3, [pc, #56]	; (8001260 <MX_I2C1_Init+0x50>)
 8001228:	2200      	movs	r2, #0
 800122a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <MX_I2C1_Init+0x50>)
 800122e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001232:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001234:	4b0a      	ldr	r3, [pc, #40]	; (8001260 <MX_I2C1_Init+0x50>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800123a:	4b09      	ldr	r3, [pc, #36]	; (8001260 <MX_I2C1_Init+0x50>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001240:	4b07      	ldr	r3, [pc, #28]	; (8001260 <MX_I2C1_Init+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001246:	4b06      	ldr	r3, [pc, #24]	; (8001260 <MX_I2C1_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800124c:	4804      	ldr	r0, [pc, #16]	; (8001260 <MX_I2C1_Init+0x50>)
 800124e:	f002 fe3d 	bl	8003ecc <HAL_I2C_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001258:	f001 f8d6 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	20000284 	.word	0x20000284
 8001264:	40005400 	.word	0x40005400
 8001268:	000186a0 	.word	0x000186a0

0800126c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b096      	sub	sp, #88	; 0x58
 8001270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001272:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001276:	2200      	movs	r2, #0
 8001278:	601a      	str	r2, [r3, #0]
 800127a:	605a      	str	r2, [r3, #4]
 800127c:	609a      	str	r2, [r3, #8]
 800127e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001280:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800128a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]
 800129a:	615a      	str	r2, [r3, #20]
 800129c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800129e:	1d3b      	adds	r3, r7, #4
 80012a0:	2220      	movs	r2, #32
 80012a2:	2100      	movs	r1, #0
 80012a4:	4618      	mov	r0, r3
 80012a6:	f009 f921 	bl	800a4ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012aa:	4b3d      	ldr	r3, [pc, #244]	; (80013a0 <MX_TIM1_Init+0x134>)
 80012ac:	4a3d      	ldr	r2, [pc, #244]	; (80013a4 <MX_TIM1_Init+0x138>)
 80012ae:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 80012b0:	4b3b      	ldr	r3, [pc, #236]	; (80013a0 <MX_TIM1_Init+0x134>)
 80012b2:	22a0      	movs	r2, #160	; 0xa0
 80012b4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b6:	4b3a      	ldr	r3, [pc, #232]	; (80013a0 <MX_TIM1_Init+0x134>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 80012bc:	4b38      	ldr	r3, [pc, #224]	; (80013a0 <MX_TIM1_Init+0x134>)
 80012be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80012c2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c4:	4b36      	ldr	r3, [pc, #216]	; (80013a0 <MX_TIM1_Init+0x134>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012ca:	4b35      	ldr	r3, [pc, #212]	; (80013a0 <MX_TIM1_Init+0x134>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80012d0:	4b33      	ldr	r3, [pc, #204]	; (80013a0 <MX_TIM1_Init+0x134>)
 80012d2:	2280      	movs	r2, #128	; 0x80
 80012d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80012d6:	4832      	ldr	r0, [pc, #200]	; (80013a0 <MX_TIM1_Init+0x134>)
 80012d8:	f004 fa0e 	bl	80056f8 <HAL_TIM_Base_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80012e2:	f001 f891 	bl	8002408 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012ea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80012ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012f0:	4619      	mov	r1, r3
 80012f2:	482b      	ldr	r0, [pc, #172]	; (80013a0 <MX_TIM1_Init+0x134>)
 80012f4:	f005 f882 	bl	80063fc <HAL_TIM_ConfigClockSource>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012fe:	f001 f883 	bl	8002408 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001302:	4827      	ldr	r0, [pc, #156]	; (80013a0 <MX_TIM1_Init+0x134>)
 8001304:	f004 fa47 	bl	8005796 <HAL_TIM_PWM_Init>
 8001308:	4603      	mov	r3, r0
 800130a:	2b00      	cmp	r3, #0
 800130c:	d001      	beq.n	8001312 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800130e:	f001 f87b 	bl	8002408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001312:	2300      	movs	r3, #0
 8001314:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001316:	2300      	movs	r3, #0
 8001318:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800131a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800131e:	4619      	mov	r1, r3
 8001320:	481f      	ldr	r0, [pc, #124]	; (80013a0 <MX_TIM1_Init+0x134>)
 8001322:	f005 fdd9 	bl	8006ed8 <HAL_TIMEx_MasterConfigSynchronization>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800132c:	f001 f86c 	bl	8002408 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001330:	2360      	movs	r3, #96	; 0x60
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001334:	2300      	movs	r3, #0
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001338:	2300      	movs	r3, #0
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001340:	2300      	movs	r3, #0
 8001342:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001344:	2300      	movs	r3, #0
 8001346:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001348:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800134c:	220c      	movs	r2, #12
 800134e:	4619      	mov	r1, r3
 8001350:	4813      	ldr	r0, [pc, #76]	; (80013a0 <MX_TIM1_Init+0x134>)
 8001352:	f004 ff91 	bl	8006278 <HAL_TIM_PWM_ConfigChannel>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 800135c:	f001 f854 	bl	8002408 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001360:	2300      	movs	r3, #0
 8001362:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001368:	2300      	movs	r3, #0
 800136a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001370:	2300      	movs	r3, #0
 8001372:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001374:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001378:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	4619      	mov	r1, r3
 8001382:	4807      	ldr	r0, [pc, #28]	; (80013a0 <MX_TIM1_Init+0x134>)
 8001384:	f005 fe24 	bl	8006fd0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800138e:	f001 f83b 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001392:	4803      	ldr	r0, [pc, #12]	; (80013a0 <MX_TIM1_Init+0x134>)
 8001394:	f001 fc70 	bl	8002c78 <HAL_TIM_MspPostInit>

}
 8001398:	bf00      	nop
 800139a:	3758      	adds	r7, #88	; 0x58
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	200002d8 	.word	0x200002d8
 80013a4:	40010000 	.word	0x40010000

080013a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b08c      	sub	sp, #48	; 0x30
 80013ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013ae:	f107 030c 	add.w	r3, r7, #12
 80013b2:	2224      	movs	r2, #36	; 0x24
 80013b4:	2100      	movs	r1, #0
 80013b6:	4618      	mov	r0, r3
 80013b8:	f009 f898 	bl	800a4ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013bc:	1d3b      	adds	r3, r7, #4
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013c4:	4b21      	ldr	r3, [pc, #132]	; (800144c <MX_TIM2_Init+0xa4>)
 80013c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013cc:	4b1f      	ldr	r3, [pc, #124]	; (800144c <MX_TIM2_Init+0xa4>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d2:	4b1e      	ldr	r3, [pc, #120]	; (800144c <MX_TIM2_Init+0xa4>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80013d8:	4b1c      	ldr	r3, [pc, #112]	; (800144c <MX_TIM2_Init+0xa4>)
 80013da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013e0:	4b1a      	ldr	r3, [pc, #104]	; (800144c <MX_TIM2_Init+0xa4>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e6:	4b19      	ldr	r3, [pc, #100]	; (800144c <MX_TIM2_Init+0xa4>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013ec:	2303      	movs	r3, #3
 80013ee:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013f0:	2300      	movs	r3, #0
 80013f2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013f4:	2301      	movs	r3, #1
 80013f6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80013fc:	230a      	movs	r3, #10
 80013fe:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001400:	2300      	movs	r3, #0
 8001402:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001404:	2301      	movs	r3, #1
 8001406:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001408:	2300      	movs	r3, #0
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 800140c:	230a      	movs	r3, #10
 800140e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001410:	f107 030c 	add.w	r3, r7, #12
 8001414:	4619      	mov	r1, r3
 8001416:	480d      	ldr	r0, [pc, #52]	; (800144c <MX_TIM2_Init+0xa4>)
 8001418:	f004 fc56 	bl	8005cc8 <HAL_TIM_Encoder_Init>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001422:	f000 fff1 	bl	8002408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800142e:	1d3b      	adds	r3, r7, #4
 8001430:	4619      	mov	r1, r3
 8001432:	4806      	ldr	r0, [pc, #24]	; (800144c <MX_TIM2_Init+0xa4>)
 8001434:	f005 fd50 	bl	8006ed8 <HAL_TIMEx_MasterConfigSynchronization>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d001      	beq.n	8001442 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800143e:	f000 ffe3 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001442:	bf00      	nop
 8001444:	3730      	adds	r7, #48	; 0x30
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000320 	.word	0x20000320

08001450 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08c      	sub	sp, #48	; 0x30
 8001454:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001456:	f107 030c 	add.w	r3, r7, #12
 800145a:	2224      	movs	r2, #36	; 0x24
 800145c:	2100      	movs	r1, #0
 800145e:	4618      	mov	r0, r3
 8001460:	f009 f844 	bl	800a4ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]
 800146a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800146c:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <MX_TIM3_Init+0xa0>)
 800146e:	4a21      	ldr	r2, [pc, #132]	; (80014f4 <MX_TIM3_Init+0xa4>)
 8001470:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001472:	4b1f      	ldr	r3, [pc, #124]	; (80014f0 <MX_TIM3_Init+0xa0>)
 8001474:	2200      	movs	r2, #0
 8001476:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001478:	4b1d      	ldr	r3, [pc, #116]	; (80014f0 <MX_TIM3_Init+0xa0>)
 800147a:	2200      	movs	r2, #0
 800147c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800147e:	4b1c      	ldr	r3, [pc, #112]	; (80014f0 <MX_TIM3_Init+0xa0>)
 8001480:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001484:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001486:	4b1a      	ldr	r3, [pc, #104]	; (80014f0 <MX_TIM3_Init+0xa0>)
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800148c:	4b18      	ldr	r3, [pc, #96]	; (80014f0 <MX_TIM3_Init+0xa0>)
 800148e:	2200      	movs	r2, #0
 8001490:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001492:	2303      	movs	r3, #3
 8001494:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001496:	2300      	movs	r3, #0
 8001498:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 800149a:	2301      	movs	r3, #1
 800149c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800149e:	2300      	movs	r3, #0
 80014a0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80014a2:	230a      	movs	r3, #10
 80014a4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014a6:	2300      	movs	r3, #0
 80014a8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014aa:	2301      	movs	r3, #1
 80014ac:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014ae:	2300      	movs	r3, #0
 80014b0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80014b2:	230a      	movs	r3, #10
 80014b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80014b6:	f107 030c 	add.w	r3, r7, #12
 80014ba:	4619      	mov	r1, r3
 80014bc:	480c      	ldr	r0, [pc, #48]	; (80014f0 <MX_TIM3_Init+0xa0>)
 80014be:	f004 fc03 	bl	8005cc8 <HAL_TIM_Encoder_Init>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80014c8:	f000 ff9e 	bl	8002408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014cc:	2300      	movs	r3, #0
 80014ce:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014d0:	2300      	movs	r3, #0
 80014d2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014d4:	1d3b      	adds	r3, r7, #4
 80014d6:	4619      	mov	r1, r3
 80014d8:	4805      	ldr	r0, [pc, #20]	; (80014f0 <MX_TIM3_Init+0xa0>)
 80014da:	f005 fcfd 	bl	8006ed8 <HAL_TIMEx_MasterConfigSynchronization>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80014e4:	f000 ff90 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014e8:	bf00      	nop
 80014ea:	3730      	adds	r7, #48	; 0x30
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20000368 	.word	0x20000368
 80014f4:	40000400 	.word	0x40000400

080014f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fe:	f107 0310 	add.w	r3, r7, #16
 8001502:	2200      	movs	r2, #0
 8001504:	601a      	str	r2, [r3, #0]
 8001506:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001508:	463b      	mov	r3, r7
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001514:	4b20      	ldr	r3, [pc, #128]	; (8001598 <MX_TIM4_Init+0xa0>)
 8001516:	4a21      	ldr	r2, [pc, #132]	; (800159c <MX_TIM4_Init+0xa4>)
 8001518:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 16-1;
 800151a:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <MX_TIM4_Init+0xa0>)
 800151c:	220f      	movs	r2, #15
 800151e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001520:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <MX_TIM4_Init+0xa0>)
 8001522:	2200      	movs	r2, #0
 8001524:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001526:	4b1c      	ldr	r3, [pc, #112]	; (8001598 <MX_TIM4_Init+0xa0>)
 8001528:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800152c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800152e:	4b1a      	ldr	r3, [pc, #104]	; (8001598 <MX_TIM4_Init+0xa0>)
 8001530:	2200      	movs	r2, #0
 8001532:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001534:	4b18      	ldr	r3, [pc, #96]	; (8001598 <MX_TIM4_Init+0xa0>)
 8001536:	2200      	movs	r2, #0
 8001538:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 800153a:	4817      	ldr	r0, [pc, #92]	; (8001598 <MX_TIM4_Init+0xa0>)
 800153c:	f004 fa4c 	bl	80059d8 <HAL_TIM_IC_Init>
 8001540:	4603      	mov	r3, r0
 8001542:	2b00      	cmp	r3, #0
 8001544:	d001      	beq.n	800154a <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001546:	f000 ff5f 	bl	8002408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800154a:	2300      	movs	r3, #0
 800154c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800154e:	2300      	movs	r3, #0
 8001550:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001552:	f107 0310 	add.w	r3, r7, #16
 8001556:	4619      	mov	r1, r3
 8001558:	480f      	ldr	r0, [pc, #60]	; (8001598 <MX_TIM4_Init+0xa0>)
 800155a:	f005 fcbd 	bl	8006ed8 <HAL_TIMEx_MasterConfigSynchronization>
 800155e:	4603      	mov	r3, r0
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001564:	f000 ff50 	bl	8002408 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001568:	2300      	movs	r3, #0
 800156a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800156c:	2301      	movs	r3, #1
 800156e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001570:	2300      	movs	r3, #0
 8001572:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001578:	463b      	mov	r3, r7
 800157a:	2200      	movs	r2, #0
 800157c:	4619      	mov	r1, r3
 800157e:	4806      	ldr	r0, [pc, #24]	; (8001598 <MX_TIM4_Init+0xa0>)
 8001580:	f004 fdde 	bl	8006140 <HAL_TIM_IC_ConfigChannel>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 800158a:	f000 ff3d 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	3718      	adds	r7, #24
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200003b0 	.word	0x200003b0
 800159c:	40000800 	.word	0x40000800

080015a0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b096      	sub	sp, #88	; 0x58
 80015a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015a6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015aa:	2200      	movs	r2, #0
 80015ac:	601a      	str	r2, [r3, #0]
 80015ae:	605a      	str	r2, [r3, #4]
 80015b0:	609a      	str	r2, [r3, #8]
 80015b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]
 80015cc:	611a      	str	r2, [r3, #16]
 80015ce:	615a      	str	r2, [r3, #20]
 80015d0:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015d2:	1d3b      	adds	r3, r7, #4
 80015d4:	2220      	movs	r2, #32
 80015d6:	2100      	movs	r1, #0
 80015d8:	4618      	mov	r0, r3
 80015da:	f008 ff87 	bl	800a4ec <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80015de:	4b43      	ldr	r3, [pc, #268]	; (80016ec <MX_TIM8_Init+0x14c>)
 80015e0:	4a43      	ldr	r2, [pc, #268]	; (80016f0 <MX_TIM8_Init+0x150>)
 80015e2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80015e4:	4b41      	ldr	r3, [pc, #260]	; (80016ec <MX_TIM8_Init+0x14c>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ea:	4b40      	ldr	r3, [pc, #256]	; (80016ec <MX_TIM8_Init+0x14c>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 80015f0:	4b3e      	ldr	r3, [pc, #248]	; (80016ec <MX_TIM8_Init+0x14c>)
 80015f2:	f641 421f 	movw	r2, #7199	; 0x1c1f
 80015f6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015f8:	4b3c      	ldr	r3, [pc, #240]	; (80016ec <MX_TIM8_Init+0x14c>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80015fe:	4b3b      	ldr	r3, [pc, #236]	; (80016ec <MX_TIM8_Init+0x14c>)
 8001600:	2200      	movs	r2, #0
 8001602:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001604:	4b39      	ldr	r3, [pc, #228]	; (80016ec <MX_TIM8_Init+0x14c>)
 8001606:	2200      	movs	r2, #0
 8001608:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800160a:	4838      	ldr	r0, [pc, #224]	; (80016ec <MX_TIM8_Init+0x14c>)
 800160c:	f004 f874 	bl	80056f8 <HAL_TIM_Base_Init>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001616:	f000 fef7 	bl	8002408 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800161a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800161e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001620:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001624:	4619      	mov	r1, r3
 8001626:	4831      	ldr	r0, [pc, #196]	; (80016ec <MX_TIM8_Init+0x14c>)
 8001628:	f004 fee8 	bl	80063fc <HAL_TIM_ConfigClockSource>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001632:	f000 fee9 	bl	8002408 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001636:	482d      	ldr	r0, [pc, #180]	; (80016ec <MX_TIM8_Init+0x14c>)
 8001638:	f004 f8ad 	bl	8005796 <HAL_TIM_PWM_Init>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001642:	f000 fee1 	bl	8002408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001646:	2300      	movs	r3, #0
 8001648:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164a:	2300      	movs	r3, #0
 800164c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800164e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001652:	4619      	mov	r1, r3
 8001654:	4825      	ldr	r0, [pc, #148]	; (80016ec <MX_TIM8_Init+0x14c>)
 8001656:	f005 fc3f 	bl	8006ed8 <HAL_TIMEx_MasterConfigSynchronization>
 800165a:	4603      	mov	r3, r0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d001      	beq.n	8001664 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001660:	f000 fed2 	bl	8002408 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001664:	2360      	movs	r3, #96	; 0x60
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001668:	2300      	movs	r3, #0
 800166a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800166c:	2300      	movs	r3, #0
 800166e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001670:	2300      	movs	r3, #0
 8001672:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001674:	2300      	movs	r3, #0
 8001676:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001678:	2300      	movs	r3, #0
 800167a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800167c:	2300      	movs	r3, #0
 800167e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001680:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001684:	2200      	movs	r2, #0
 8001686:	4619      	mov	r1, r3
 8001688:	4818      	ldr	r0, [pc, #96]	; (80016ec <MX_TIM8_Init+0x14c>)
 800168a:	f004 fdf5 	bl	8006278 <HAL_TIM_PWM_ConfigChannel>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001694:	f000 feb8 	bl	8002408 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800169c:	2204      	movs	r2, #4
 800169e:	4619      	mov	r1, r3
 80016a0:	4812      	ldr	r0, [pc, #72]	; (80016ec <MX_TIM8_Init+0x14c>)
 80016a2:	f004 fde9 	bl	8006278 <HAL_TIM_PWM_ConfigChannel>
 80016a6:	4603      	mov	r3, r0
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d001      	beq.n	80016b0 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80016ac:	f000 feac 	bl	8002408 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016b8:	2300      	movs	r3, #0
 80016ba:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016c8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016ca:	2300      	movs	r3, #0
 80016cc:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80016ce:	1d3b      	adds	r3, r7, #4
 80016d0:	4619      	mov	r1, r3
 80016d2:	4806      	ldr	r0, [pc, #24]	; (80016ec <MX_TIM8_Init+0x14c>)
 80016d4:	f005 fc7c 	bl	8006fd0 <HAL_TIMEx_ConfigBreakDeadTime>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 80016de:	f000 fe93 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	3758      	adds	r7, #88	; 0x58
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	200003f8 	.word	0x200003f8
 80016f0:	40010400 	.word	0x40010400

080016f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80016f8:	4b11      	ldr	r3, [pc, #68]	; (8001740 <MX_USART3_UART_Init+0x4c>)
 80016fa:	4a12      	ldr	r2, [pc, #72]	; (8001744 <MX_USART3_UART_Init+0x50>)
 80016fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <MX_USART3_UART_Init+0x4c>)
 8001700:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001704:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001706:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <MX_USART3_UART_Init+0x4c>)
 8001708:	2200      	movs	r2, #0
 800170a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800170c:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <MX_USART3_UART_Init+0x4c>)
 800170e:	2200      	movs	r2, #0
 8001710:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001712:	4b0b      	ldr	r3, [pc, #44]	; (8001740 <MX_USART3_UART_Init+0x4c>)
 8001714:	2200      	movs	r2, #0
 8001716:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001718:	4b09      	ldr	r3, [pc, #36]	; (8001740 <MX_USART3_UART_Init+0x4c>)
 800171a:	220c      	movs	r2, #12
 800171c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171e:	4b08      	ldr	r3, [pc, #32]	; (8001740 <MX_USART3_UART_Init+0x4c>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001724:	4b06      	ldr	r3, [pc, #24]	; (8001740 <MX_USART3_UART_Init+0x4c>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800172a:	4805      	ldr	r0, [pc, #20]	; (8001740 <MX_USART3_UART_Init+0x4c>)
 800172c:	f005 fcb6 	bl	800709c <HAL_UART_Init>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001736:	f000 fe67 	bl	8002408 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20000440 	.word	0x20000440
 8001744:	40004800 	.word	0x40004800

08001748 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b08a      	sub	sp, #40	; 0x28
 800174c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174e:	f107 0314 	add.w	r3, r7, #20
 8001752:	2200      	movs	r2, #0
 8001754:	601a      	str	r2, [r3, #0]
 8001756:	605a      	str	r2, [r3, #4]
 8001758:	609a      	str	r2, [r3, #8]
 800175a:	60da      	str	r2, [r3, #12]
 800175c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800175e:	2300      	movs	r3, #0
 8001760:	613b      	str	r3, [r7, #16]
 8001762:	4b48      	ldr	r3, [pc, #288]	; (8001884 <MX_GPIO_Init+0x13c>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	4a47      	ldr	r2, [pc, #284]	; (8001884 <MX_GPIO_Init+0x13c>)
 8001768:	f043 0310 	orr.w	r3, r3, #16
 800176c:	6313      	str	r3, [r2, #48]	; 0x30
 800176e:	4b45      	ldr	r3, [pc, #276]	; (8001884 <MX_GPIO_Init+0x13c>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	f003 0310 	and.w	r3, r3, #16
 8001776:	613b      	str	r3, [r7, #16]
 8001778:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
 800177e:	4b41      	ldr	r3, [pc, #260]	; (8001884 <MX_GPIO_Init+0x13c>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	4a40      	ldr	r2, [pc, #256]	; (8001884 <MX_GPIO_Init+0x13c>)
 8001784:	f043 0304 	orr.w	r3, r3, #4
 8001788:	6313      	str	r3, [r2, #48]	; 0x30
 800178a:	4b3e      	ldr	r3, [pc, #248]	; (8001884 <MX_GPIO_Init+0x13c>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	f003 0304 	and.w	r3, r3, #4
 8001792:	60fb      	str	r3, [r7, #12]
 8001794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	60bb      	str	r3, [r7, #8]
 800179a:	4b3a      	ldr	r3, [pc, #232]	; (8001884 <MX_GPIO_Init+0x13c>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4a39      	ldr	r2, [pc, #228]	; (8001884 <MX_GPIO_Init+0x13c>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4b37      	ldr	r3, [pc, #220]	; (8001884 <MX_GPIO_Init+0x13c>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	607b      	str	r3, [r7, #4]
 80017b6:	4b33      	ldr	r3, [pc, #204]	; (8001884 <MX_GPIO_Init+0x13c>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ba:	4a32      	ldr	r2, [pc, #200]	; (8001884 <MX_GPIO_Init+0x13c>)
 80017bc:	f043 0302 	orr.w	r3, r3, #2
 80017c0:	6313      	str	r3, [r2, #48]	; 0x30
 80017c2:	4b30      	ldr	r3, [pc, #192]	; (8001884 <MX_GPIO_Init+0x13c>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	603b      	str	r3, [r7, #0]
 80017d2:	4b2c      	ldr	r3, [pc, #176]	; (8001884 <MX_GPIO_Init+0x13c>)
 80017d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d6:	4a2b      	ldr	r2, [pc, #172]	; (8001884 <MX_GPIO_Init+0x13c>)
 80017d8:	f043 0308 	orr.w	r3, r3, #8
 80017dc:	6313      	str	r3, [r2, #48]	; 0x30
 80017de:	4b29      	ldr	r3, [pc, #164]	; (8001884 <MX_GPIO_Init+0x13c>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	f003 0308 	and.w	r3, r3, #8
 80017e6:	603b      	str	r3, [r7, #0]
 80017e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SCLK_Pin|SDIN_Pin|RESET__Pin|DC_Pin
 80017ea:	2200      	movs	r2, #0
 80017ec:	f44f 615e 	mov.w	r1, #3552	; 0xde0
 80017f0:	4825      	ldr	r0, [pc, #148]	; (8001888 <MX_GPIO_Init+0x140>)
 80017f2:	f002 fb37 	bl	8003e64 <HAL_GPIO_WritePin>
                          |LED3_Pin|Trig_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 80017f6:	2200      	movs	r2, #0
 80017f8:	213c      	movs	r1, #60	; 0x3c
 80017fa:	4824      	ldr	r0, [pc, #144]	; (800188c <MX_GPIO_Init+0x144>)
 80017fc:	f002 fb32 	bl	8003e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8001800:	2200      	movs	r2, #0
 8001802:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001806:	4822      	ldr	r0, [pc, #136]	; (8001890 <MX_GPIO_Init+0x148>)
 8001808:	f002 fb2c 	bl	8003e64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : SCLK_Pin SDIN_Pin RESET__Pin DC_Pin
                           LED3_Pin Trig_Pin */
  GPIO_InitStruct.Pin = SCLK_Pin|SDIN_Pin|RESET__Pin|DC_Pin
 800180c:	f44f 635e 	mov.w	r3, #3552	; 0xde0
 8001810:	617b      	str	r3, [r7, #20]
                          |LED3_Pin|Trig_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001812:	2301      	movs	r3, #1
 8001814:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001816:	2300      	movs	r3, #0
 8001818:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800181a:	2300      	movs	r3, #0
 800181c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800181e:	f107 0314 	add.w	r3, r7, #20
 8001822:	4619      	mov	r1, r3
 8001824:	4818      	ldr	r0, [pc, #96]	; (8001888 <MX_GPIO_Init+0x140>)
 8001826:	f002 f981 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 800182a:	233c      	movs	r3, #60	; 0x3c
 800182c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182e:	2301      	movs	r3, #1
 8001830:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001832:	2300      	movs	r3, #0
 8001834:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001836:	2302      	movs	r3, #2
 8001838:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800183a:	f107 0314 	add.w	r3, r7, #20
 800183e:	4619      	mov	r1, r3
 8001840:	4812      	ldr	r0, [pc, #72]	; (800188c <MX_GPIO_Init+0x144>)
 8001842:	f002 f973 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 8001846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800184a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800184c:	2301      	movs	r3, #1
 800184e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001850:	2300      	movs	r3, #0
 8001852:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001854:	2300      	movs	r3, #0
 8001856:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001858:	f107 0314 	add.w	r3, r7, #20
 800185c:	4619      	mov	r1, r3
 800185e:	480c      	ldr	r0, [pc, #48]	; (8001890 <MX_GPIO_Init+0x148>)
 8001860:	f002 f964 	bl	8003b2c <HAL_GPIO_Init>

  /*Configure GPIO pin : INT_Pin */
  GPIO_InitStruct.Pin = INT_Pin;
 8001864:	2302      	movs	r3, #2
 8001866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001868:	2300      	movs	r3, #0
 800186a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2300      	movs	r3, #0
 800186e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INT_GPIO_Port, &GPIO_InitStruct);
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	4619      	mov	r1, r3
 8001876:	4804      	ldr	r0, [pc, #16]	; (8001888 <MX_GPIO_Init+0x140>)
 8001878:	f002 f958 	bl	8003b2c <HAL_GPIO_Init>

}
 800187c:	bf00      	nop
 800187e:	3728      	adds	r7, #40	; 0x28
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40023800 	.word	0x40023800
 8001888:	40021000 	.word	0x40021000
 800188c:	40020000 	.word	0x40020000
 8001890:	40020400 	.word	0x40020400

08001894 <stop>:

/* USER CODE BEGIN 4 */
void stop()
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
	//Stop both wheels
	motor_dir = 0;
 8001898:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <stop+0x24>)
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);
 800189e:	4b07      	ldr	r3, [pc, #28]	; (80018bc <stop+0x28>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2200      	movs	r2, #0
 80018a4:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,0);
 80018a6:	4b05      	ldr	r3, [pc, #20]	; (80018bc <stop+0x28>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2200      	movs	r2, #0
 80018ac:	639a      	str	r2, [r3, #56]	; 0x38
}
 80018ae:	bf00      	nop
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	200004ec 	.word	0x200004ec
 80018bc:	200003f8 	.word	0x200003f8

080018c0 <forward>:

void forward()
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
	//PID
	//pwmvalR = pwmval;
	//pwmvalL = pwmval;
	motor_dir = 1;
 80018c4:	4b16      	ldr	r3, [pc, #88]	; (8001920 <forward+0x60>)
 80018c6:	2201      	movs	r2, #1
 80018c8:	601a      	str	r2, [r3, #0]
	//Left motor
	//servomotor_center(); //Center before starting
    HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_RESET);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2104      	movs	r1, #4
 80018ce:	4815      	ldr	r0, [pc, #84]	; (8001924 <forward+0x64>)
 80018d0:	f002 fac8 	bl	8003e64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_SET);
 80018d4:	2201      	movs	r2, #1
 80018d6:	2108      	movs	r1, #8
 80018d8:	4812      	ldr	r0, [pc, #72]	; (8001924 <forward+0x64>)
 80018da:	f002 fac3 	bl	8003e64 <HAL_GPIO_WritePin>
//	pwmval=PIDController_Update(&motorL_PID,pwmval,spdL);
	//__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmvalL);
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwm_L_f/pwm_L_div);
 80018de:	4b12      	ldr	r3, [pc, #72]	; (8001928 <forward+0x68>)
 80018e0:	681a      	ldr	r2, [r3, #0]
 80018e2:	4b12      	ldr	r3, [pc, #72]	; (800192c <forward+0x6c>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	fb92 f2f3 	sdiv	r2, r2, r3
 80018ea:	4b11      	ldr	r3, [pc, #68]	; (8001930 <forward+0x70>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	635a      	str	r2, [r3, #52]	; 0x34


	//Right motor
	HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_RESET);
 80018f0:	2200      	movs	r2, #0
 80018f2:	2120      	movs	r1, #32
 80018f4:	480b      	ldr	r0, [pc, #44]	; (8001924 <forward+0x64>)
 80018f6:	f002 fab5 	bl	8003e64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_SET);
 80018fa:	2201      	movs	r2, #1
 80018fc:	2110      	movs	r1, #16
 80018fe:	4809      	ldr	r0, [pc, #36]	; (8001924 <forward+0x64>)
 8001900:	f002 fab0 	bl	8003e64 <HAL_GPIO_WritePin>
	//__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmvalR);
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwm_R_f/pwm_R_div);
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <forward+0x74>)
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	4b0b      	ldr	r3, [pc, #44]	; (8001938 <forward+0x78>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	fb92 f2f3 	sdiv	r2, r2, r3
 8001910:	4b07      	ldr	r3, [pc, #28]	; (8001930 <forward+0x70>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	639a      	str	r2, [r3, #56]	; 0x38

	HAL_Delay(10);
 8001916:	200a      	movs	r0, #10
 8001918:	f001 fbd2 	bl	80030c0 <HAL_Delay>
}
 800191c:	bf00      	nop
 800191e:	bd80      	pop	{r7, pc}
 8001920:	200004ec 	.word	0x200004ec
 8001924:	40020000 	.word	0x40020000
 8001928:	20000000 	.word	0x20000000
 800192c:	20000008 	.word	0x20000008
 8001930:	200003f8 	.word	0x200003f8
 8001934:	20000004 	.word	0x20000004
 8001938:	2000000c 	.word	0x2000000c

0800193c <servomotor_right>:
	HAL_Delay(10);

}

void servomotor_right()
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b082      	sub	sp, #8
 8001940:	af00      	add	r7, sp, #0
	// default: 225
	uint32_t value = 200;
 8001942:	23c8      	movs	r3, #200	; 0xc8
 8001944:	607b      	str	r3, [r7, #4]
	if (htim1.Instance->CCR4 == value){
 8001946:	4b0b      	ldr	r3, [pc, #44]	; (8001974 <servomotor_right+0x38>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	687a      	ldr	r2, [r7, #4]
 800194e:	429a      	cmp	r2, r3
 8001950:	d00b      	beq.n	800196a <servomotor_right+0x2e>
			return;
	}
	htim1.Instance->CCR4 = value;
 8001952:	4b08      	ldr	r3, [pc, #32]	; (8001974 <servomotor_right+0x38>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	687a      	ldr	r2, [r7, #4]
 8001958:	641a      	str	r2, [r3, #64]	; 0x40
	servo_dir = -1;
 800195a:	4b07      	ldr	r3, [pc, #28]	; (8001978 <servomotor_right+0x3c>)
 800195c:	f04f 32ff 	mov.w	r2, #4294967295
 8001960:	601a      	str	r2, [r3, #0]
	osDelay(200);
 8001962:	20c8      	movs	r0, #200	; 0xc8
 8001964:	f006 f86c 	bl	8007a40 <osDelay>
 8001968:	e000      	b.n	800196c <servomotor_right+0x30>
			return;
 800196a:	bf00      	nop
}
 800196c:	3708      	adds	r7, #8
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	200002d8 	.word	0x200002d8
 8001978:	200004f0 	.word	0x200004f0

0800197c <servomotor_center>:

void servomotor_center()
{
 800197c:	b580      	push	{r7, lr}
 800197e:	b082      	sub	sp, #8
 8001980:	af00      	add	r7, sp, #0
	// default: 150
	uint32_t value;
	if (htim1.Instance->CCR4 == 96)
 8001982:	4b0f      	ldr	r3, [pc, #60]	; (80019c0 <servomotor_center+0x44>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001988:	2b60      	cmp	r3, #96	; 0x60
 800198a:	d102      	bne.n	8001992 <servomotor_center+0x16>
		value = 145;
 800198c:	2391      	movs	r3, #145	; 0x91
 800198e:	607b      	str	r3, [r7, #4]
 8001990:	e001      	b.n	8001996 <servomotor_center+0x1a>
	else
		value = 127;
 8001992:	237f      	movs	r3, #127	; 0x7f
 8001994:	607b      	str	r3, [r7, #4]
	if (htim1.Instance->CCR4 == value){
 8001996:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <servomotor_center+0x44>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800199c:	687a      	ldr	r2, [r7, #4]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d00a      	beq.n	80019b8 <servomotor_center+0x3c>
		return;
	}
	htim1.Instance->CCR4 = value;
 80019a2:	4b07      	ldr	r3, [pc, #28]	; (80019c0 <servomotor_center+0x44>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	687a      	ldr	r2, [r7, #4]
 80019a8:	641a      	str	r2, [r3, #64]	; 0x40
	servo_dir = 0;
 80019aa:	4b06      	ldr	r3, [pc, #24]	; (80019c4 <servomotor_center+0x48>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	601a      	str	r2, [r3, #0]
	osDelay(200);
 80019b0:	20c8      	movs	r0, #200	; 0xc8
 80019b2:	f006 f845 	bl	8007a40 <osDelay>
 80019b6:	e000      	b.n	80019ba <servomotor_center+0x3e>
		return;
 80019b8:	bf00      	nop
}
 80019ba:	3708      	adds	r7, #8
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	200002d8 	.word	0x200002d8
 80019c4:	200004f0 	.word	0x200004f0

080019c8 <right_turn>:
	servo_dir = 1;
	osDelay(200);
}

void right_turn(int angle) //Keep for debugging purpose
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b082      	sub	sp, #8
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
	//Prep the servomotor to right
	servomotor_right();
 80019d0:	f7ff ffb4 	bl	800193c <servomotor_right>

	osDelay(250);
 80019d4:	20fa      	movs	r0, #250	; 0xfa
 80019d6:	f006 f833 	bl	8007a40 <osDelay>

	TURNING_ANGLE = 0;
 80019da:	4912      	ldr	r1, [pc, #72]	; (8001a24 <right_turn+0x5c>)
 80019dc:	f04f 0200 	mov.w	r2, #0
 80019e0:	f04f 0300 	mov.w	r3, #0
 80019e4:	e9c1 2300 	strd	r2, r3, [r1]
	forward();
 80019e8:	f7ff ff6a 	bl	80018c0 <forward>
	//Start the motor
	//__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 3500);
	//__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 3500);

	while (TURNING_ANGLE > -1*angle){ //while it is still turning to the correct angle
 80019ec:	e004      	b.n	80019f8 <right_turn+0x30>
		servomotor_right();
 80019ee:	f7ff ffa5 	bl	800193c <servomotor_right>
		osDelay(10);
 80019f2:	200a      	movs	r0, #10
 80019f4:	f006 f824 	bl	8007a40 <osDelay>
	while (TURNING_ANGLE > -1*angle){ //while it is still turning to the correct angle
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	425b      	negs	r3, r3
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fd91 	bl	8000524 <__aeabi_i2d>
 8001a02:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <right_turn+0x5c>)
 8001a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a08:	f7ff f868 	bl	8000adc <__aeabi_dcmplt>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d1ed      	bne.n	80019ee <right_turn+0x26>


	//Stop the Motor are completing the turn
	//__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
	//__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0);
	stop();
 8001a12:	f7ff ff3f 	bl	8001894 <stop>

	servomotor_center();
 8001a16:	f7ff ffb1 	bl	800197c <servomotor_center>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000528 	.word	0x20000528

08001a28 <gyroInit>:
	servomotor_center();

}

void gyroInit()
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
	writeByte(0x06, 0x00);
 8001a2c:	2100      	movs	r1, #0
 8001a2e:	2006      	movs	r0, #6
 8001a30:	f000 f84c 	bl	8001acc <writeByte>
	osDelayUntil(10);
 8001a34:	200a      	movs	r0, #10
 8001a36:	f006 f81e 	bl	8007a76 <osDelayUntil>
	writeByte(0x03, 0x80);
 8001a3a:	2180      	movs	r1, #128	; 0x80
 8001a3c:	2003      	movs	r0, #3
 8001a3e:	f000 f845 	bl	8001acc <writeByte>
	osDelayUntil(10);
 8001a42:	200a      	movs	r0, #10
 8001a44:	f006 f817 	bl	8007a76 <osDelayUntil>
	writeByte(0x07, 0x3F);
 8001a48:	213f      	movs	r1, #63	; 0x3f
 8001a4a:	2007      	movs	r0, #7
 8001a4c:	f000 f83e 	bl	8001acc <writeByte>
	osDelayUntil(10);
 8001a50:	200a      	movs	r0, #10
 8001a52:	f006 f810 	bl	8007a76 <osDelayUntil>
	writeByte(0x06, 0x01);
 8001a56:	2101      	movs	r1, #1
 8001a58:	2006      	movs	r0, #6
 8001a5a:	f000 f837 	bl	8001acc <writeByte>
	osDelayUntil(10);
 8001a5e:	200a      	movs	r0, #10
 8001a60:	f006 f809 	bl	8007a76 <osDelayUntil>
	writeByte(0x7F, 0x20); // go to bank 2
 8001a64:	2120      	movs	r1, #32
 8001a66:	207f      	movs	r0, #127	; 0x7f
 8001a68:	f000 f830 	bl	8001acc <writeByte>
	osDelayUntil(10);
 8001a6c:	200a      	movs	r0, #10
 8001a6e:	f006 f802 	bl	8007a76 <osDelayUntil>
	writeByte(0x01, 0x2F); // config gyro, enable gyro, dlpf, set gyro to +-2000dps; gyro lpf = 3'b101
 8001a72:	212f      	movs	r1, #47	; 0x2f
 8001a74:	2001      	movs	r0, #1
 8001a76:	f000 f829 	bl	8001acc <writeByte>
	osDelayUntil(10);
 8001a7a:	200a      	movs	r0, #10
 8001a7c:	f005 fffb 	bl	8007a76 <osDelayUntil>
	writeByte(0x00, 0x00); // set gyro sample rate divider = 1 + 0(GYRO_SMPLRT_DIV[7:0])
 8001a80:	2100      	movs	r1, #0
 8001a82:	2000      	movs	r0, #0
 8001a84:	f000 f822 	bl	8001acc <writeByte>
	osDelayUntil(10);
 8001a88:	200a      	movs	r0, #10
 8001a8a:	f005 fff4 	bl	8007a76 <osDelayUntil>
	writeByte(0x01, 0x2F); // config accel, enable gyro, dlpf, set gyro to +-2000dps; gyro lpf = 3'b101
 8001a8e:	212f      	movs	r1, #47	; 0x2f
 8001a90:	2001      	movs	r0, #1
 8001a92:	f000 f81b 	bl	8001acc <writeByte>
	osDelayUntil(10);
 8001a96:	200a      	movs	r0, #10
 8001a98:	f005 ffed 	bl	8007a76 <osDelayUntil>
	writeByte(0x00, 0x00); // set gyro sample rate divider = 1 + 0(GYRO_SMPLRT_DIV[7:0])
 8001a9c:	2100      	movs	r1, #0
 8001a9e:	2000      	movs	r0, #0
 8001aa0:	f000 f814 	bl	8001acc <writeByte>
	osDelayUntil(10);
 8001aa4:	200a      	movs	r0, #10
 8001aa6:	f005 ffe6 	bl	8007a76 <osDelayUntil>
	writeByte(0x7F, 0x00); // return to bank 1
 8001aaa:	2100      	movs	r1, #0
 8001aac:	207f      	movs	r0, #127	; 0x7f
 8001aae:	f000 f80d 	bl	8001acc <writeByte>
	osDelayUntil(10);
 8001ab2:	200a      	movs	r0, #10
 8001ab4:	f005 ffdf 	bl	8007a76 <osDelayUntil>
	writeByte(0x07, 0x00);
 8001ab8:	2100      	movs	r1, #0
 8001aba:	2007      	movs	r0, #7
 8001abc:	f000 f806 	bl	8001acc <writeByte>
	osDelayUntil(10);
 8001ac0:	200a      	movs	r0, #10
 8001ac2:	f005 ffd8 	bl	8007a76 <osDelayUntil>
}
 8001ac6:	bf00      	nop
 8001ac8:	bd80      	pop	{r7, pc}
	...

08001acc <writeByte>:

void writeByte(uint8_t addr, uint8_t data)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b084      	sub	sp, #16
 8001ad0:	af02      	add	r7, sp, #8
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	460a      	mov	r2, r1
 8001ad6:	71fb      	strb	r3, [r7, #7]
 8001ad8:	4613      	mov	r3, r2
 8001ada:	71bb      	strb	r3, [r7, #6]
	buff[0] = addr;
 8001adc:	4a0a      	ldr	r2, [pc, #40]	; (8001b08 <writeByte+0x3c>)
 8001ade:	79fb      	ldrb	r3, [r7, #7]
 8001ae0:	7013      	strb	r3, [r2, #0]
	buff[1] = data;
 8001ae2:	4a09      	ldr	r2, [pc, #36]	; (8001b08 <writeByte+0x3c>)
 8001ae4:	79bb      	ldrb	r3, [r7, #6]
 8001ae6:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, ICM_ADDR<<1, buff, 2, 20);
 8001ae8:	4b08      	ldr	r3, [pc, #32]	; (8001b0c <writeByte+0x40>)
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	b29b      	uxth	r3, r3
 8001aee:	005b      	lsls	r3, r3, #1
 8001af0:	b299      	uxth	r1, r3
 8001af2:	2314      	movs	r3, #20
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	2302      	movs	r3, #2
 8001af8:	4a03      	ldr	r2, [pc, #12]	; (8001b08 <writeByte+0x3c>)
 8001afa:	4805      	ldr	r0, [pc, #20]	; (8001b10 <writeByte+0x44>)
 8001afc:	f002 fb2a 	bl	8004154 <HAL_I2C_Master_Transmit>
}
 8001b00:	bf00      	nop
 8001b02:	3708      	adds	r7, #8
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20000508 	.word	0x20000508
 8001b0c:	20000028 	.word	0x20000028
 8001b10:	20000284 	.word	0x20000284

08001b14 <readByte>:

void readByte(uint8_t addr, uint8_t *data)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af02      	add	r7, sp, #8
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	6039      	str	r1, [r7, #0]
 8001b1e:	71fb      	strb	r3, [r7, #7]
	buff[0] = addr;
 8001b20:	4a0f      	ldr	r2, [pc, #60]	; (8001b60 <readByte+0x4c>)
 8001b22:	79fb      	ldrb	r3, [r7, #7]
 8001b24:	7013      	strb	r3, [r2, #0]
	// Tell we want to read from the register
	HAL_I2C_Master_Transmit(&hi2c1, ICM_ADDR<<1, buff, 1, 10);
 8001b26:	4b0f      	ldr	r3, [pc, #60]	; (8001b64 <readByte+0x50>)
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	b29b      	uxth	r3, r3
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	b299      	uxth	r1, r3
 8001b30:	230a      	movs	r3, #10
 8001b32:	9300      	str	r3, [sp, #0]
 8001b34:	2301      	movs	r3, #1
 8001b36:	4a0a      	ldr	r2, [pc, #40]	; (8001b60 <readByte+0x4c>)
 8001b38:	480b      	ldr	r0, [pc, #44]	; (8001b68 <readByte+0x54>)
 8001b3a:	f002 fb0b 	bl	8004154 <HAL_I2C_Master_Transmit>
	// Read 2 byte from z dir register
	HAL_I2C_Master_Receive(&hi2c1, ICM_ADDR<<1, data, 2, 20);
 8001b3e:	4b09      	ldr	r3, [pc, #36]	; (8001b64 <readByte+0x50>)
 8001b40:	781b      	ldrb	r3, [r3, #0]
 8001b42:	b29b      	uxth	r3, r3
 8001b44:	005b      	lsls	r3, r3, #1
 8001b46:	b299      	uxth	r1, r3
 8001b48:	2314      	movs	r3, #20
 8001b4a:	9300      	str	r3, [sp, #0]
 8001b4c:	2302      	movs	r3, #2
 8001b4e:	683a      	ldr	r2, [r7, #0]
 8001b50:	4805      	ldr	r0, [pc, #20]	; (8001b68 <readByte+0x54>)
 8001b52:	f002 fbfd 	bl	8004350 <HAL_I2C_Master_Receive>
}
 8001b56:	bf00      	nop
 8001b58:	3708      	adds	r7, #8
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000508 	.word	0x20000508
 8001b64:	20000028 	.word	0x20000028
 8001b68:	20000284 	.word	0x20000284

08001b6c <delay_us>:

void delay_us(uint16_t us)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4,0);  // set the counter value a 0
 8001b76:	4b09      	ldr	r3, [pc, #36]	; (8001b9c <delay_us+0x30>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < us);  // wait for the counter to reach the us input in the parameter
 8001b7e:	bf00      	nop
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <delay_us+0x30>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b86:	88fb      	ldrh	r3, [r7, #6]
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d3f9      	bcc.n	8001b80 <delay_us+0x14>
}
 8001b8c:	bf00      	nop
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	200003b0 	.word	0x200003b0

08001ba0 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	7f1b      	ldrb	r3, [r3, #28]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	f040 8083 	bne.w	8001cb8 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8001bb2:	4b45      	ldr	r3, [pc, #276]	; (8001cc8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d11a      	bne.n	8001bf0 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			Echo_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8001bba:	2100      	movs	r1, #0
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f004 fce5 	bl	800658c <HAL_TIM_ReadCapturedValue>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	4a41      	ldr	r2, [pc, #260]	; (8001ccc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001bc6:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8001bc8:	4b3f      	ldr	r3, [pc, #252]	; (8001cc8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001bca:	2201      	movs	r2, #1
 8001bcc:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6a1a      	ldr	r2, [r3, #32]
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f022 020a 	bic.w	r2, r2, #10
 8001bdc:	621a      	str	r2, [r3, #32]
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	6a1a      	ldr	r2, [r3, #32]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f042 0202 	orr.w	r2, r2, #2
 8001bec:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
		}
	}
}
 8001bee:	e063      	b.n	8001cb8 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8001bf0:	4b35      	ldr	r3, [pc, #212]	; (8001cc8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d15f      	bne.n	8001cb8 <HAL_TIM_IC_CaptureCallback+0x118>
			Echo_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f004 fcc6 	bl	800658c <HAL_TIM_ReadCapturedValue>
 8001c00:	4603      	mov	r3, r0
 8001c02:	4a33      	ldr	r2, [pc, #204]	; (8001cd0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001c04:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	625a      	str	r2, [r3, #36]	; 0x24
			if (Echo_Val2 > Echo_Val1)
 8001c0e:	4b30      	ldr	r3, [pc, #192]	; (8001cd0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	4b2e      	ldr	r3, [pc, #184]	; (8001ccc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	429a      	cmp	r2, r3
 8001c18:	d907      	bls.n	8001c2a <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = Echo_Val2-Echo_Val1;
 8001c1a:	4b2d      	ldr	r3, [pc, #180]	; (8001cd0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001c1c:	681a      	ldr	r2, [r3, #0]
 8001c1e:	4b2b      	ldr	r3, [pc, #172]	; (8001ccc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	4a2b      	ldr	r2, [pc, #172]	; (8001cd4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001c26:	6013      	str	r3, [r2, #0]
 8001c28:	e00f      	b.n	8001c4a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (Echo_Val1 > Echo_Val2)
 8001c2a:	4b28      	ldr	r3, [pc, #160]	; (8001ccc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	4b28      	ldr	r3, [pc, #160]	; (8001cd0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d909      	bls.n	8001c4a <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - Echo_Val1) + Echo_Val2;
 8001c36:	4b26      	ldr	r3, [pc, #152]	; (8001cd0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	4b24      	ldr	r3, [pc, #144]	; (8001ccc <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8001c44:	33ff      	adds	r3, #255	; 0xff
 8001c46:	4a23      	ldr	r2, [pc, #140]	; (8001cd4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001c48:	6013      	str	r3, [r2, #0]
			UD = (Difference * 0.034)/2;
 8001c4a:	4b22      	ldr	r3, [pc, #136]	; (8001cd4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f7fe fc58 	bl	8000504 <__aeabi_ui2d>
 8001c54:	a31a      	add	r3, pc, #104	; (adr r3, 8001cc0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c5a:	f7fe fccd 	bl	80005f8 <__aeabi_dmul>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	460b      	mov	r3, r1
 8001c62:	4610      	mov	r0, r2
 8001c64:	4619      	mov	r1, r3
 8001c66:	f04f 0200 	mov.w	r2, #0
 8001c6a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8001c6e:	f7fe fded 	bl	800084c <__aeabi_ddiv>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4610      	mov	r0, r2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f7fe ff95 	bl	8000ba8 <__aeabi_d2uiz>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	b2da      	uxtb	r2, r3
 8001c82:	4b15      	ldr	r3, [pc, #84]	; (8001cd8 <HAL_TIM_IC_CaptureCallback+0x138>)
 8001c84:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8001c86:	4b10      	ldr	r3, [pc, #64]	; (8001cc8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	6a1a      	ldr	r2, [r3, #32]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f022 020a 	bic.w	r2, r2, #10
 8001c9a:	621a      	str	r2, [r3, #32]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	6a12      	ldr	r2, [r2, #32]
 8001ca6:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	68da      	ldr	r2, [r3, #12]
 8001cae:	4b0b      	ldr	r3, [pc, #44]	; (8001cdc <HAL_TIM_IC_CaptureCallback+0x13c>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f022 0202 	bic.w	r2, r2, #2
 8001cb6:	60da      	str	r2, [r3, #12]
}
 8001cb8:	bf00      	nop
 8001cba:	3708      	adds	r7, #8
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	b020c49c 	.word	0xb020c49c
 8001cc4:	3fa16872 	.word	0x3fa16872
 8001cc8:	2000053c 	.word	0x2000053c
 8001ccc:	20000530 	.word	0x20000530
 8001cd0:	20000534 	.word	0x20000534
 8001cd4:	20000538 	.word	0x20000538
 8001cd8:	20000039 	.word	0x20000039
 8001cdc:	200003b0 	.word	0x200003b0

08001ce0 <HCSR04_Read>:

void HCSR04_Read (void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	af00      	add	r7, sp, #0
	//	delay_us(10);  // wait for 10 us
	//	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
	//
	//	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);

	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8001ce4:	2201      	movs	r2, #1
 8001ce6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cea:	480b      	ldr	r0, [pc, #44]	; (8001d18 <HCSR04_Read+0x38>)
 8001cec:	f002 f8ba 	bl	8003e64 <HAL_GPIO_WritePin>
	delay_us(10);  // wait f or 10 us
 8001cf0:	200a      	movs	r0, #10
 8001cf2:	f7ff ff3b 	bl	8001b6c <delay_us>
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001cfc:	4806      	ldr	r0, [pc, #24]	; (8001d18 <HCSR04_Read+0x38>)
 8001cfe:	f002 f8b1 	bl	8003e64 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 8001d02:	4b06      	ldr	r3, [pc, #24]	; (8001d1c <HCSR04_Read+0x3c>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	68da      	ldr	r2, [r3, #12]
 8001d08:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <HCSR04_Read+0x3c>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f042 0202 	orr.w	r2, r2, #2
 8001d10:	60da      	str	r2, [r3, #12]
}
 8001d12:	bf00      	nop
 8001d14:	bd80      	pop	{r7, pc}
 8001d16:	bf00      	nop
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	200003b0 	.word	0x200003b0

08001d20 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001d28:	2001      	movs	r0, #1
 8001d2a:	f005 fe89 	bl	8007a40 <osDelay>
 8001d2e:	e7fb      	b.n	8001d28 <StartDefaultTask+0x8>

08001d30 <motorA>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_motorA */
void motorA(void *argument)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b0b2      	sub	sp, #200	; 0xc8
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN motorA */
	//uint16_t pwmVal =0;

	HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_1);
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4822      	ldr	r0, [pc, #136]	; (8001dc4 <motorA+0x94>)
 8001d3c:	f003 fd84 	bl	8005848 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8,TIM_CHANNEL_2);
 8001d40:	2104      	movs	r1, #4
 8001d42:	4820      	ldr	r0, [pc, #128]	; (8001dc4 <motorA+0x94>)
 8001d44:	f003 fd80 	bl	8005848 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1,TIM_CHANNEL_4);
 8001d48:	210c      	movs	r1, #12
 8001d4a:	481f      	ldr	r0, [pc, #124]	; (8001dc8 <motorA+0x98>)
 8001d4c:	f003 fd7c 	bl	8005848 <HAL_TIM_PWM_Start>
	servomotor_center();
 8001d50:	f7ff fe14 	bl	800197c <servomotor_center>
	forward();
 8001d54:	f7ff fdb4 	bl	80018c0 <forward>
	osDelay(2000);
 8001d58:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001d5c:	f005 fe70 	bl	8007a40 <osDelay>
	right_turn(TARGET_ANGLE);
 8001d60:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <motorA+0x9c>)
 8001d62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d66:	4610      	mov	r0, r2
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f7fe fef5 	bl	8000b58 <__aeabi_d2iz>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	4618      	mov	r0, r3
 8001d72:	f7ff fe29 	bl	80019c8 <right_turn>
	while (1){
		if (LEFTWHEEL_DIST >= distance || RIGHTWHEEL_DIST >= distance) stop();
 8001d76:	4b16      	ldr	r3, [pc, #88]	; (8001dd0 <motorA+0xa0>)
 8001d78:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d7c:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <motorA+0xa4>)
 8001d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d82:	f7fe febf 	bl	8000b04 <__aeabi_dcmpge>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d10a      	bne.n	8001da2 <motorA+0x72>
 8001d8c:	4b12      	ldr	r3, [pc, #72]	; (8001dd8 <motorA+0xa8>)
 8001d8e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001d92:	4b10      	ldr	r3, [pc, #64]	; (8001dd4 <motorA+0xa4>)
 8001d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d98:	f7fe feb4 	bl	8000b04 <__aeabi_dcmpge>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d001      	beq.n	8001da6 <motorA+0x76>
 8001da2:	f7ff fd77 	bl	8001894 <stop>
		if (TURNING_ANGLE >= TARGET_ANGLE) servomotor_center();
 8001da6:	4b0d      	ldr	r3, [pc, #52]	; (8001ddc <motorA+0xac>)
 8001da8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001dac:	4b07      	ldr	r3, [pc, #28]	; (8001dcc <motorA+0x9c>)
 8001dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db2:	f7fe fea7 	bl	8000b04 <__aeabi_dcmpge>
 8001db6:	4603      	mov	r3, r0
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d001      	beq.n	8001dc0 <motorA+0x90>
 8001dbc:	f7ff fdde 	bl	800197c <servomotor_center>
		if (LEFTWHEEL_DIST >= distance || RIGHTWHEEL_DIST >= distance) stop();
 8001dc0:	e7d9      	b.n	8001d76 <motorA+0x46>
 8001dc2:	bf00      	nop
 8001dc4:	200003f8 	.word	0x200003f8
 8001dc8:	200002d8 	.word	0x200002d8
 8001dcc:	20000030 	.word	0x20000030
 8001dd0:	200004f8 	.word	0x200004f8
 8001dd4:	20000020 	.word	0x20000020
 8001dd8:	20000500 	.word	0x20000500
 8001ddc:	20000528 	.word	0x20000528

08001de0 <encoder>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_encoder */
void encoder(void *argument)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b08c      	sub	sp, #48	; 0x30
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN encoder */
  /* Infinite loop */
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 8001de8:	213c      	movs	r1, #60	; 0x3c
 8001dea:	486b      	ldr	r0, [pc, #428]	; (8001f98 <encoder+0x1b8>)
 8001dec:	f004 f812 	bl	8005e14 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8001df0:	213c      	movs	r1, #60	; 0x3c
 8001df2:	486a      	ldr	r0, [pc, #424]	; (8001f9c <encoder+0x1bc>)
 8001df4:	f004 f80e 	bl	8005e14 <HAL_TIM_Encoder_Start>

	int cnt1A, cnt2A;
	int cnt1B, cnt2B;
	int diffA = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	627b      	str	r3, [r7, #36]	; 0x24
	int diffB = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	623b      	str	r3, [r7, #32]
	uint32_t tick, cur_tick, T;
	uint16_t dirA, dirB;

	LEFTWHEEL_DIST = 0;
 8001e00:	4967      	ldr	r1, [pc, #412]	; (8001fa0 <encoder+0x1c0>)
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	f04f 0300 	mov.w	r3, #0
 8001e0a:	e9c1 2300 	strd	r2, r3, [r1]
	RIGHTWHEEL_DIST = 0;
 8001e0e:	4965      	ldr	r1, [pc, #404]	; (8001fa4 <encoder+0x1c4>)
 8001e10:	f04f 0200 	mov.w	r2, #0
 8001e14:	f04f 0300 	mov.w	r3, #0
 8001e18:	e9c1 2300 	strd	r2, r3, [r1]
	cnt1A = __HAL_TIM_GET_COUNTER(&htim2);
 8001e1c:	4b5e      	ldr	r3, [pc, #376]	; (8001f98 <encoder+0x1b8>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e22:	62fb      	str	r3, [r7, #44]	; 0x2c
	cnt1B = __HAL_TIM_GET_COUNTER(&htim3);
 8001e24:	4b5d      	ldr	r3, [pc, #372]	; (8001f9c <encoder+0x1bc>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e2a:	62bb      	str	r3, [r7, #40]	; 0x28
	tick = HAL_GetTick();
 8001e2c:	f001 f93c 	bl	80030a8 <HAL_GetTick>
 8001e30:	61f8      	str	r0, [r7, #28]

  for(;;)
  {
	  cur_tick = HAL_GetTick();
 8001e32:	f001 f939 	bl	80030a8 <HAL_GetTick>
 8001e36:	61b8      	str	r0, [r7, #24]
	  if (cur_tick - tick > 50L){ //every 0.05 second
 8001e38:	69ba      	ldr	r2, [r7, #24]
 8001e3a:	69fb      	ldr	r3, [r7, #28]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b32      	cmp	r3, #50	; 0x32
 8001e40:	f240 80a5 	bls.w	8001f8e <encoder+0x1ae>
	  		  cnt2A = __HAL_TIM_GET_COUNTER(&htim2);
 8001e44:	4b54      	ldr	r3, [pc, #336]	; (8001f98 <encoder+0x1b8>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4a:	617b      	str	r3, [r7, #20]
	  		  cnt2B = __HAL_TIM_GET_COUNTER(&htim3);
 8001e4c:	4b53      	ldr	r3, [pc, #332]	; (8001f9c <encoder+0x1bc>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e52:	613b      	str	r3, [r7, #16]
	  		  //Left encoder
	  		  if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 8001e54:	4b50      	ldr	r3, [pc, #320]	; (8001f98 <encoder+0x1b8>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f003 0310 	and.w	r3, r3, #16
 8001e5e:	2b10      	cmp	r3, #16
 8001e60:	d110      	bne.n	8001e84 <encoder+0xa4>
	  			  if(cnt2A <= cnt1A){
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e66:	429a      	cmp	r2, r3
 8001e68:	dc04      	bgt.n	8001e74 <encoder+0x94>
	  				  diffA = cnt1A - cnt2A;
 8001e6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	1ad3      	subs	r3, r2, r3
 8001e70:	627b      	str	r3, [r7, #36]	; 0x24
 8001e72:	e017      	b.n	8001ea4 <encoder+0xc4>
	  			  }
	  			  else {
	  				  diffA = (65535 - cnt2A) + cnt1A; //handle overflow situation
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001e7a:	33ff      	adds	r3, #255	; 0xff
 8001e7c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001e7e:	4413      	add	r3, r2
 8001e80:	627b      	str	r3, [r7, #36]	; 0x24
 8001e82:	e00f      	b.n	8001ea4 <encoder+0xc4>
	  			  }
	  			  //dir_L = 1;
	  		  }
	  		  else {
	  			  if(cnt2A >= cnt1A){
 8001e84:	697a      	ldr	r2, [r7, #20]
 8001e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	db04      	blt.n	8001e96 <encoder+0xb6>
	  				  diffA = cnt2A - cnt1A;
 8001e8c:	697a      	ldr	r2, [r7, #20]
 8001e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	627b      	str	r3, [r7, #36]	; 0x24
 8001e94:	e006      	b.n	8001ea4 <encoder+0xc4>
	  			  }
	  			  else {
	  				  diffA = (65535 - cnt1A) + cnt2A;
 8001e96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001e98:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001e9c:	33ff      	adds	r3, #255	; 0xff
 8001e9e:	697a      	ldr	r2, [r7, #20]
 8001ea0:	4413      	add	r3, r2
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24
	  			  }
	  			  //dir_L = -1;
	  		  }
	  		  //Right encoder
	  		  if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)){
 8001ea4:	4b3d      	ldr	r3, [pc, #244]	; (8001f9c <encoder+0x1bc>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f003 0310 	and.w	r3, r3, #16
 8001eae:	2b10      	cmp	r3, #16
 8001eb0:	d110      	bne.n	8001ed4 <encoder+0xf4>
	  			  if(cnt2B <= cnt1B){
 8001eb2:	693a      	ldr	r2, [r7, #16]
 8001eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	dc04      	bgt.n	8001ec4 <encoder+0xe4>
	  				  diffB = cnt1B - cnt2B;
 8001eba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	1ad3      	subs	r3, r2, r3
 8001ec0:	623b      	str	r3, [r7, #32]
 8001ec2:	e017      	b.n	8001ef4 <encoder+0x114>
	  			  }
	  			  else {
	  				  diffB = (65535 - cnt2B) + cnt1B; //handle overflow situation
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001eca:	33ff      	adds	r3, #255	; 0xff
 8001ecc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ece:	4413      	add	r3, r2
 8001ed0:	623b      	str	r3, [r7, #32]
 8001ed2:	e00f      	b.n	8001ef4 <encoder+0x114>
	  			  }
	  			  //dir_R = -1;
	  		  }
	  		  else {
	  			  if(cnt2B >= cnt1B){
 8001ed4:	693a      	ldr	r2, [r7, #16]
 8001ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	db04      	blt.n	8001ee6 <encoder+0x106>
	  				  diffB = cnt2B - cnt1B;
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	623b      	str	r3, [r7, #32]
 8001ee4:	e006      	b.n	8001ef4 <encoder+0x114>
	  			  }
	  			  else {
	  				  diffB = (65535 - cnt1B) + cnt2B;
 8001ee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ee8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001eec:	33ff      	adds	r3, #255	; 0xff
 8001eee:	693a      	ldr	r2, [r7, #16]
 8001ef0:	4413      	add	r3, r2
 8001ef2:	623b      	str	r3, [r7, #32]
	  			  }
	  			  //dir_R = 1;
	  		  }
		  T = cur_tick - tick;
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	60fb      	str	r3, [r7, #12]
		  //right_speed = diffB * (1000/T);

		  //Calculate distance traveled
		  //distInt_L += left_diff * dir_L;
		  //distInt_R += right_diff * dir_R;
		  LEFTWHEEL_DIST += diffA/full_rotation_wheel*circumference_wheel;
 8001efc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001efe:	f7fe fb11 	bl	8000524 <__aeabi_i2d>
 8001f02:	4b29      	ldr	r3, [pc, #164]	; (8001fa8 <encoder+0x1c8>)
 8001f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f08:	f7fe fca0 	bl	800084c <__aeabi_ddiv>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4610      	mov	r0, r2
 8001f12:	4619      	mov	r1, r3
 8001f14:	4b25      	ldr	r3, [pc, #148]	; (8001fac <encoder+0x1cc>)
 8001f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1a:	f7fe fb6d 	bl	80005f8 <__aeabi_dmul>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	4610      	mov	r0, r2
 8001f24:	4619      	mov	r1, r3
 8001f26:	4b1e      	ldr	r3, [pc, #120]	; (8001fa0 <encoder+0x1c0>)
 8001f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f2c:	f7fe f9ae 	bl	800028c <__adddf3>
 8001f30:	4602      	mov	r2, r0
 8001f32:	460b      	mov	r3, r1
 8001f34:	491a      	ldr	r1, [pc, #104]	; (8001fa0 <encoder+0x1c0>)
 8001f36:	e9c1 2300 	strd	r2, r3, [r1]
		  RIGHTWHEEL_DIST += diffB/full_rotation_wheel*circumference_wheel;
 8001f3a:	6a38      	ldr	r0, [r7, #32]
 8001f3c:	f7fe faf2 	bl	8000524 <__aeabi_i2d>
 8001f40:	4b19      	ldr	r3, [pc, #100]	; (8001fa8 <encoder+0x1c8>)
 8001f42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f46:	f7fe fc81 	bl	800084c <__aeabi_ddiv>
 8001f4a:	4602      	mov	r2, r0
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	4610      	mov	r0, r2
 8001f50:	4619      	mov	r1, r3
 8001f52:	4b16      	ldr	r3, [pc, #88]	; (8001fac <encoder+0x1cc>)
 8001f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f58:	f7fe fb4e 	bl	80005f8 <__aeabi_dmul>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	460b      	mov	r3, r1
 8001f60:	4610      	mov	r0, r2
 8001f62:	4619      	mov	r1, r3
 8001f64:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <encoder+0x1c4>)
 8001f66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f6a:	f7fe f98f 	bl	800028c <__adddf3>
 8001f6e:	4602      	mov	r2, r0
 8001f70:	460b      	mov	r3, r1
 8001f72:	490c      	ldr	r1, [pc, #48]	; (8001fa4 <encoder+0x1c4>)
 8001f74:	e9c1 2300 	strd	r2, r3, [r1]
		  //		  dirA = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2);
		  //		  dirB = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3);
		  //sprintf(motorA, "direction:%5d\0", motor_dir);
		  //OLED_ShowString(10,40,motorA); //move to show task
		  cnt1A = __HAL_TIM_GET_COUNTER(&htim2);
 8001f78:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <encoder+0x1b8>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
		  cnt1B = __HAL_TIM_GET_COUNTER(&htim3);
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <encoder+0x1bc>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f86:	62bb      	str	r3, [r7, #40]	; 0x28
		  tick = HAL_GetTick();
 8001f88:	f001 f88e 	bl	80030a8 <HAL_GetTick>
 8001f8c:	61f8      	str	r0, [r7, #28]
		  //OLED_Refresh_Gram();
	  }
    osDelay(1);
 8001f8e:	2001      	movs	r0, #1
 8001f90:	f005 fd56 	bl	8007a40 <osDelay>
	  cur_tick = HAL_GetTick();
 8001f94:	e74d      	b.n	8001e32 <encoder+0x52>
 8001f96:	bf00      	nop
 8001f98:	20000320 	.word	0x20000320
 8001f9c:	20000368 	.word	0x20000368
 8001fa0:	200004f8 	.word	0x200004f8
 8001fa4:	20000500 	.word	0x20000500
 8001fa8:	20000010 	.word	0x20000010
 8001fac:	20000018 	.word	0x20000018

08001fb0 <gyro_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_gyro_task */
void gyro_task(void *argument)
{
 8001fb0:	b5b0      	push	{r4, r5, r7, lr}
 8001fb2:	b08c      	sub	sp, #48	; 0x30
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN gyro_task */
  /* Infinite loop */
	//uint8_t Angle[20];
	//uint8_t motorB[20];
	double offset = 7.848882995;//High power offset 7.85 //Low power offset 7.8475
 8001fb8:	a351      	add	r3, pc, #324	; (adr r3, 8002100 <gyro_task+0x150>)
 8001fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fbe:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double angle;
	for(;;)
	{
		uint8_t val[2] = {0, 0};
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	81bb      	strh	r3, [r7, #12]
		int16_t angular_speed = 0;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	83fb      	strh	r3, [r7, #30]

		uint32_t tick = 0;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	62fb      	str	r3, [r7, #44]	; 0x2c
		gyroInit();
 8001fce:	f7ff fd2b 	bl	8001a28 <gyroInit>

		tick = HAL_GetTick();
 8001fd2:	f001 f869 	bl	80030a8 <HAL_GetTick>
 8001fd6:	62f8      	str	r0, [r7, #44]	; 0x2c
		osDelayUntil(10);
 8001fd8:	200a      	movs	r0, #10
 8001fda:	f005 fd4c 	bl	8007a76 <osDelayUntil>

		for (;;)
		{

			osDelay(10);
 8001fde:	200a      	movs	r0, #10
 8001fe0:	f005 fd2e 	bl	8007a40 <osDelay>
			if (HAL_GetTick() - tick >= 50L)
 8001fe4:	f001 f860 	bl	80030a8 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b31      	cmp	r3, #49	; 0x31
 8001ff0:	d9f5      	bls.n	8001fde <gyro_task+0x2e>
			{
				readByte(0x37, val);
 8001ff2:	f107 030c 	add.w	r3, r7, #12
 8001ff6:	4619      	mov	r1, r3
 8001ff8:	2037      	movs	r0, #55	; 0x37
 8001ffa:	f7ff fd8b 	bl	8001b14 <readByte>
				angular_speed = (val[0] << 8) | val[1];
 8001ffe:	7b3b      	ldrb	r3, [r7, #12]
 8002000:	021b      	lsls	r3, r3, #8
 8002002:	b21a      	sxth	r2, r3
 8002004:	7b7b      	ldrb	r3, [r7, #13]
 8002006:	b21b      	sxth	r3, r3
 8002008:	4313      	orrs	r3, r2
 800200a:	83fb      	strh	r3, [r7, #30]

				//	      if (motor_dir == 0){
				//	    	  offset = (offset-(double)(angular_speed))/2;
				//	      }

				angle = ((double)(angular_speed)+offset) * ((HAL_GetTick() - tick) / 16400.0);
 800200c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002010:	4618      	mov	r0, r3
 8002012:	f7fe fa87 	bl	8000524 <__aeabi_i2d>
 8002016:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800201a:	f7fe f937 	bl	800028c <__adddf3>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4614      	mov	r4, r2
 8002024:	461d      	mov	r5, r3
 8002026:	f001 f83f 	bl	80030a8 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	4618      	mov	r0, r3
 8002032:	f7fe fa67 	bl	8000504 <__aeabi_ui2d>
 8002036:	a334      	add	r3, pc, #208	; (adr r3, 8002108 <gyro_task+0x158>)
 8002038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800203c:	f7fe fc06 	bl	800084c <__aeabi_ddiv>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4620      	mov	r0, r4
 8002046:	4629      	mov	r1, r5
 8002048:	f7fe fad6 	bl	80005f8 <__aeabi_dmul>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	e9c7 2304 	strd	r2, r3, [r7, #16]
				//	      if (motor_dir == 0) angle = 0;
				TOTAL_ANGLE += angle;
 8002054:	4b26      	ldr	r3, [pc, #152]	; (80020f0 <gyro_task+0x140>)
 8002056:	e9d3 0100 	ldrd	r0, r1, [r3]
 800205a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800205e:	f7fe f915 	bl	800028c <__adddf3>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	4922      	ldr	r1, [pc, #136]	; (80020f0 <gyro_task+0x140>)
 8002068:	e9c1 2300 	strd	r2, r3, [r1]
				TURNING_ANGLE += angle;
 800206c:	4b21      	ldr	r3, [pc, #132]	; (80020f4 <gyro_task+0x144>)
 800206e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002072:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002076:	f7fe f909 	bl	800028c <__adddf3>
 800207a:	4602      	mov	r2, r0
 800207c:	460b      	mov	r3, r1
 800207e:	491d      	ldr	r1, [pc, #116]	; (80020f4 <gyro_task+0x144>)
 8002080:	e9c1 2300 	strd	r2, r3, [r1]

				// prevSpeed = angular_speed;
				if (TOTAL_ANGLE >= 720)
 8002084:	4b1a      	ldr	r3, [pc, #104]	; (80020f0 <gyro_task+0x140>)
 8002086:	e9d3 0100 	ldrd	r0, r1, [r3]
 800208a:	f04f 0200 	mov.w	r2, #0
 800208e:	4b1a      	ldr	r3, [pc, #104]	; (80020f8 <gyro_task+0x148>)
 8002090:	f7fe fd38 	bl	8000b04 <__aeabi_dcmpge>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d00c      	beq.n	80020b4 <gyro_task+0x104>
				{
					TOTAL_ANGLE -= 720;
 800209a:	4b15      	ldr	r3, [pc, #84]	; (80020f0 <gyro_task+0x140>)
 800209c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020a0:	f04f 0200 	mov.w	r2, #0
 80020a4:	4b14      	ldr	r3, [pc, #80]	; (80020f8 <gyro_task+0x148>)
 80020a6:	f7fe f8ef 	bl	8000288 <__aeabi_dsub>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	4910      	ldr	r1, [pc, #64]	; (80020f0 <gyro_task+0x140>)
 80020b0:	e9c1 2300 	strd	r2, r3, [r1]
				}
				if (TOTAL_ANGLE <= -720)
 80020b4:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <gyro_task+0x140>)
 80020b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020ba:	f04f 0200 	mov.w	r2, #0
 80020be:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <gyro_task+0x14c>)
 80020c0:	f7fe fd16 	bl	8000af0 <__aeabi_dcmple>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d00c      	beq.n	80020e4 <gyro_task+0x134>
				{
					TOTAL_ANGLE += 720;
 80020ca:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <gyro_task+0x140>)
 80020cc:	e9d3 0100 	ldrd	r0, r1, [r3]
 80020d0:	f04f 0200 	mov.w	r2, #0
 80020d4:	4b08      	ldr	r3, [pc, #32]	; (80020f8 <gyro_task+0x148>)
 80020d6:	f7fe f8d9 	bl	800028c <__adddf3>
 80020da:	4602      	mov	r2, r0
 80020dc:	460b      	mov	r3, r1
 80020de:	4904      	ldr	r1, [pc, #16]	; (80020f0 <gyro_task+0x140>)
 80020e0:	e9c1 2300 	strd	r2, r3, [r1]
				}
				//	      sprintf(OLED_Row_1, "OFSET: %6d\0", (int)((offset*10000)));
				//sprintf(Angle, "ANGLE: %6d\0", (int)(TOTAL_ANGLE));
				//sprintf(OLED_Row_5, "A_100: %6d\0", (int)(100*TOTAL_ANGLE));

				tick = HAL_GetTick();
 80020e4:	f000 ffe0 	bl	80030a8 <HAL_GetTick>
 80020e8:	62f8      	str	r0, [r7, #44]	; 0x2c
			osDelay(10);
 80020ea:	e778      	b.n	8001fde <gyro_task+0x2e>
 80020ec:	f3af 8000 	nop.w
 80020f0:	20000520 	.word	0x20000520
 80020f4:	20000528 	.word	0x20000528
 80020f8:	40868000 	.word	0x40868000
 80020fc:	c0868000 	.word	0xc0868000
 8002100:	95769f44 	.word	0x95769f44
 8002104:	401f6541 	.word	0x401f6541
 8002108:	00000000 	.word	0x00000000
 800210c:	40d00400 	.word	0x40d00400

08002110 <ultrasonic_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_ultrasonic_task */
void ultrasonic_task(void *argument)
{
 8002110:	b590      	push	{r4, r7, lr}
 8002112:	b08f      	sub	sp, #60	; 0x3c
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN ultrasonic_task */
  /* Infinite loop */
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8002118:	2100      	movs	r1, #0
 800211a:	4877      	ldr	r0, [pc, #476]	; (80022f8 <ultrasonic_task+0x1e8>)
 800211c:	f003 fcac 	bl	8005a78 <HAL_TIM_IC_Start_IT>
	int s1=0;
 8002120:	2300      	movs	r3, #0
 8002122:	637b      	str	r3, [r7, #52]	; 0x34
	int s2=0;
 8002124:	2300      	movs	r3, #0
 8002126:	633b      	str	r3, [r7, #48]	; 0x30
	int s3=0;
 8002128:	2300      	movs	r3, #0
 800212a:	62fb      	str	r3, [r7, #44]	; 0x2c
	int s1c=0;
 800212c:	2300      	movs	r3, #0
 800212e:	62bb      	str	r3, [r7, #40]	; 0x28
	int s2c=0;
 8002130:	2300      	movs	r3, #0
 8002132:	627b      	str	r3, [r7, #36]	; 0x24
	int s3c=0;
 8002134:	2300      	movs	r3, #0
 8002136:	623b      	str	r3, [r7, #32]
	//uint8_t dist[20];

	for(;;)
	{
		osDelay(5);
 8002138:	2005      	movs	r0, #5
 800213a:	f005 fc81 	bl	8007a40 <osDelay>
		HAL_ADC_Start(&hadc1);
 800213e:	486f      	ldr	r0, [pc, #444]	; (80022fc <ultrasonic_task+0x1ec>)
 8002140:	f001 f826 	bl	8003190 <HAL_ADC_Start>
		//HAL_ADC_Start(&hadc2);
		HAL_ADC_PollForConversion(&hadc1, 1); // trivial waiting time, dont bother with dma or whatever
 8002144:	2101      	movs	r1, #1
 8002146:	486d      	ldr	r0, [pc, #436]	; (80022fc <ultrasonic_task+0x1ec>)
 8002148:	f001 f927 	bl	800339a <HAL_ADC_PollForConversion>
		uint32_t IR = HAL_ADC_GetValue(&hadc1);
 800214c:	486b      	ldr	r0, [pc, #428]	; (80022fc <ultrasonic_task+0x1ec>)
 800214e:	f001 f9af 	bl	80034b0 <HAL_ADC_GetValue>
 8002152:	6138      	str	r0, [r7, #16]
		//HAL_ADC_PollForConversion(&hadc2, 1); // trivial waiting time, dont bother with dma or whatever
		//uint32_t IR2 = HAL_ADC_GetValue(&hadc2);
		HAL_ADC_Stop(&hadc1);
 8002154:	4869      	ldr	r0, [pc, #420]	; (80022fc <ultrasonic_task+0x1ec>)
 8002156:	f001 f8ed 	bl	8003334 <HAL_ADC_Stop>
		//HAL_ADC_Stop(&hadc2);
		float volt = (float) (IR * 5) / 4095;
 800215a:	693a      	ldr	r2, [r7, #16]
 800215c:	4613      	mov	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	ee07 3a90 	vmov	s15, r3
 8002166:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800216a:	eddf 6a65 	vldr	s13, [pc, #404]	; 8002300 <ultrasonic_task+0x1f0>
 800216e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002172:	edc7 7a03 	vstr	s15, [r7, #12]
		irBufferL[bufferIndex] = roundf(29.988 * pow(volt, -1.173));
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f7fe f9e6 	bl	8000548 <__aeabi_f2d>
 800217c:	4602      	mov	r2, r0
 800217e:	460b      	mov	r3, r1
 8002180:	ed9f 1b59 	vldr	d1, [pc, #356]	; 80022e8 <ultrasonic_task+0x1d8>
 8002184:	ec43 2b10 	vmov	d0, r2, r3
 8002188:	f00b f8b0 	bl	800d2ec <pow>
 800218c:	ec51 0b10 	vmov	r0, r1, d0
 8002190:	a357      	add	r3, pc, #348	; (adr r3, 80022f0 <ultrasonic_task+0x1e0>)
 8002192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002196:	f7fe fa2f 	bl	80005f8 <__aeabi_dmul>
 800219a:	4602      	mov	r2, r0
 800219c:	460b      	mov	r3, r1
 800219e:	4610      	mov	r0, r2
 80021a0:	4619      	mov	r1, r3
 80021a2:	f7fe fd21 	bl	8000be8 <__aeabi_d2f>
 80021a6:	4602      	mov	r2, r0
 80021a8:	4b56      	ldr	r3, [pc, #344]	; (8002304 <ultrasonic_task+0x1f4>)
 80021aa:	681c      	ldr	r4, [r3, #0]
 80021ac:	ee00 2a10 	vmov	s0, r2
 80021b0:	f00b f878 	bl	800d2a4 <roundf>
 80021b4:	eef0 7a40 	vmov.f32	s15, s0
 80021b8:	4a53      	ldr	r2, [pc, #332]	; (8002308 <ultrasonic_task+0x1f8>)
 80021ba:	00a3      	lsls	r3, r4, #2
 80021bc:	4413      	add	r3, r2
 80021be:	edc3 7a00 	vstr	s15, [r3]
		//volt = (float) (IR2 * 5) / 4095;
		//irBufferR[bufferIndex] = roundf(29.988 * pow(volt, -1.173));


		float sumL = 0, sumR = 0;
 80021c2:	f04f 0300 	mov.w	r3, #0
 80021c6:	61fb      	str	r3, [r7, #28]
 80021c8:	f04f 0300 	mov.w	r3, #0
 80021cc:	60bb      	str	r3, [r7, #8]
		for (int i = 0; i < BUFFER_SIZE; i++) {
 80021ce:	2300      	movs	r3, #0
 80021d0:	61bb      	str	r3, [r7, #24]
 80021d2:	e00e      	b.n	80021f2 <ultrasonic_task+0xe2>
			sumL += irBufferL[i];
 80021d4:	4a4c      	ldr	r2, [pc, #304]	; (8002308 <ultrasonic_task+0x1f8>)
 80021d6:	69bb      	ldr	r3, [r7, #24]
 80021d8:	009b      	lsls	r3, r3, #2
 80021da:	4413      	add	r3, r2
 80021dc:	edd3 7a00 	vldr	s15, [r3]
 80021e0:	ed97 7a07 	vldr	s14, [r7, #28]
 80021e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021e8:	edc7 7a07 	vstr	s15, [r7, #28]
		for (int i = 0; i < BUFFER_SIZE; i++) {
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	3301      	adds	r3, #1
 80021f0:	61bb      	str	r3, [r7, #24]
 80021f2:	69bb      	ldr	r3, [r7, #24]
 80021f4:	2b03      	cmp	r3, #3
 80021f6:	dded      	ble.n	80021d4 <ultrasonic_task+0xc4>
			//sumR += irBufferR[i];
		}
		for(int sc=0;sc<30;sc++)
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	e030      	b.n	8002260 <ultrasonic_task+0x150>
		{
			HCSR04_Read();
 80021fe:	f7ff fd6f 	bl	8001ce0 <HCSR04_Read>
			s1 = UD;
 8002202:	4b42      	ldr	r3, [pc, #264]	; (800230c <ultrasonic_task+0x1fc>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	637b      	str	r3, [r7, #52]	; 0x34
			if(UD==s1)
 8002208:	4b40      	ldr	r3, [pc, #256]	; (800230c <ultrasonic_task+0x1fc>)
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	461a      	mov	r2, r3
 800220e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002210:	4293      	cmp	r3, r2
 8002212:	d103      	bne.n	800221c <ultrasonic_task+0x10c>
			{
				s1c++;
 8002214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002216:	3301      	adds	r3, #1
 8002218:	62bb      	str	r3, [r7, #40]	; 0x28
 800221a:	e01e      	b.n	800225a <ultrasonic_task+0x14a>
			}
			else if(UD!=s1)
 800221c:	4b3b      	ldr	r3, [pc, #236]	; (800230c <ultrasonic_task+0x1fc>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	461a      	mov	r2, r3
 8002222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002224:	4293      	cmp	r3, r2
 8002226:	d006      	beq.n	8002236 <ultrasonic_task+0x126>
			{
				s2 = UD;
 8002228:	4b38      	ldr	r3, [pc, #224]	; (800230c <ultrasonic_task+0x1fc>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	633b      	str	r3, [r7, #48]	; 0x30
				s2c++;
 800222e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002230:	3301      	adds	r3, #1
 8002232:	627b      	str	r3, [r7, #36]	; 0x24
 8002234:	e011      	b.n	800225a <ultrasonic_task+0x14a>
			}
			else if(UD!=s1 && UD!=s2)
 8002236:	4b35      	ldr	r3, [pc, #212]	; (800230c <ultrasonic_task+0x1fc>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	461a      	mov	r2, r3
 800223c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800223e:	4293      	cmp	r3, r2
 8002240:	d00b      	beq.n	800225a <ultrasonic_task+0x14a>
 8002242:	4b32      	ldr	r3, [pc, #200]	; (800230c <ultrasonic_task+0x1fc>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	461a      	mov	r2, r3
 8002248:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800224a:	4293      	cmp	r3, r2
 800224c:	d005      	beq.n	800225a <ultrasonic_task+0x14a>
			{
				s3 = UD;
 800224e:	4b2f      	ldr	r3, [pc, #188]	; (800230c <ultrasonic_task+0x1fc>)
 8002250:	781b      	ldrb	r3, [r3, #0]
 8002252:	62fb      	str	r3, [r7, #44]	; 0x2c
				s3c++;
 8002254:	6a3b      	ldr	r3, [r7, #32]
 8002256:	3301      	adds	r3, #1
 8002258:	623b      	str	r3, [r7, #32]
		for(int sc=0;sc<30;sc++)
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	3301      	adds	r3, #1
 800225e:	617b      	str	r3, [r7, #20]
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	2b1d      	cmp	r3, #29
 8002264:	ddcb      	ble.n	80021fe <ultrasonic_task+0xee>
			}
		}
		if(s1c>s2c && s1c>s3c)
 8002266:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800226a:	429a      	cmp	r2, r3
 800226c:	dd08      	ble.n	8002280 <ultrasonic_task+0x170>
 800226e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002270:	6a3b      	ldr	r3, [r7, #32]
 8002272:	429a      	cmp	r2, r3
 8002274:	dd04      	ble.n	8002280 <ultrasonic_task+0x170>
		{
			Distance=s1;
 8002276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002278:	b2da      	uxtb	r2, r3
 800227a:	4b25      	ldr	r3, [pc, #148]	; (8002310 <ultrasonic_task+0x200>)
 800227c:	701a      	strb	r2, [r3, #0]
 800227e:	e018      	b.n	80022b2 <ultrasonic_task+0x1a2>
		}
		else if(s2c>s1c && s2c>s3c)
 8002280:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002284:	429a      	cmp	r2, r3
 8002286:	dd08      	ble.n	800229a <ultrasonic_task+0x18a>
 8002288:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800228a:	6a3b      	ldr	r3, [r7, #32]
 800228c:	429a      	cmp	r2, r3
 800228e:	dd04      	ble.n	800229a <ultrasonic_task+0x18a>
		{
			Distance=s2;
 8002290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002292:	b2da      	uxtb	r2, r3
 8002294:	4b1e      	ldr	r3, [pc, #120]	; (8002310 <ultrasonic_task+0x200>)
 8002296:	701a      	strb	r2, [r3, #0]
 8002298:	e00b      	b.n	80022b2 <ultrasonic_task+0x1a2>
		}
		else if(s3c>s1c && s3c>s2c)
 800229a:	6a3a      	ldr	r2, [r7, #32]
 800229c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800229e:	429a      	cmp	r2, r3
 80022a0:	dd07      	ble.n	80022b2 <ultrasonic_task+0x1a2>
 80022a2:	6a3a      	ldr	r2, [r7, #32]
 80022a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022a6:	429a      	cmp	r2, r3
 80022a8:	dd03      	ble.n	80022b2 <ultrasonic_task+0x1a2>
		{
			Distance=s3;
 80022aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	4b18      	ldr	r3, [pc, #96]	; (8002310 <ultrasonic_task+0x200>)
 80022b0:	701a      	strb	r2, [r3, #0]
		}
		//sprintf(dist, "DIST: %5d CM", Distance);
		//OLED_ShowString(10,50,dist);
		ir_distL_Avg = sumL / BUFFER_SIZE;
 80022b2:	ed97 7a07 	vldr	s14, [r7, #28]
 80022b6:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 80022ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022be:	4b15      	ldr	r3, [pc, #84]	; (8002314 <ultrasonic_task+0x204>)
 80022c0:	edc3 7a00 	vstr	s15, [r3]
		//ir_distR_Avg = sumR / BUFFER_SIZE;

		bufferIndex = (bufferIndex + 1) % BUFFER_SIZE; // Update buffer index
 80022c4:	4b0f      	ldr	r3, [pc, #60]	; (8002304 <ultrasonic_task+0x1f4>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	3301      	adds	r3, #1
 80022ca:	425a      	negs	r2, r3
 80022cc:	f003 0303 	and.w	r3, r3, #3
 80022d0:	f002 0203 	and.w	r2, r2, #3
 80022d4:	bf58      	it	pl
 80022d6:	4253      	negpl	r3, r2
 80022d8:	4a0a      	ldr	r2, [pc, #40]	; (8002304 <ultrasonic_task+0x1f4>)
 80022da:	6013      	str	r3, [r2, #0]
		osDelay(10);
 80022dc:	200a      	movs	r0, #10
 80022de:	f005 fbaf 	bl	8007a40 <osDelay>
	{
 80022e2:	e729      	b.n	8002138 <ultrasonic_task+0x28>
 80022e4:	f3af 8000 	nop.w
 80022e8:	a5e353f8 	.word	0xa5e353f8
 80022ec:	bff2c49b 	.word	0xbff2c49b
 80022f0:	916872b0 	.word	0x916872b0
 80022f4:	403dfced 	.word	0x403dfced
 80022f8:	200003b0 	.word	0x200003b0
 80022fc:	2000023c 	.word	0x2000023c
 8002300:	457ff000 	.word	0x457ff000
 8002304:	20000550 	.word	0x20000550
 8002308:	20000540 	.word	0x20000540
 800230c:	20000039 	.word	0x20000039
 8002310:	20000038 	.word	0x20000038
 8002314:	20000554 	.word	0x20000554

08002318 <show_task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_show_task */
void show_task(void *argument)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b088      	sub	sp, #32
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN show_task */
	uint8_t motorA[20];
  /* Infinite loop */
  for(;;)
  {
	  sprintf(motorA, "DST L: %5d\0", (int)LEFTWHEEL_DIST);
 8002320:	4b2b      	ldr	r3, [pc, #172]	; (80023d0 <show_task+0xb8>)
 8002322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002326:	4610      	mov	r0, r2
 8002328:	4619      	mov	r1, r3
 800232a:	f7fe fc15 	bl	8000b58 <__aeabi_d2iz>
 800232e:	4602      	mov	r2, r0
 8002330:	f107 030c 	add.w	r3, r7, #12
 8002334:	4927      	ldr	r1, [pc, #156]	; (80023d4 <show_task+0xbc>)
 8002336:	4618      	mov	r0, r3
 8002338:	f008 fd4a 	bl	800add0 <siprintf>
	  sprintf(motorB, "DST R: %5d\0", (int)RIGHTWHEEL_DIST);
 800233c:	4b26      	ldr	r3, [pc, #152]	; (80023d8 <show_task+0xc0>)
 800233e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002342:	4610      	mov	r0, r2
 8002344:	4619      	mov	r1, r3
 8002346:	f7fe fc07 	bl	8000b58 <__aeabi_d2iz>
 800234a:	4603      	mov	r3, r0
 800234c:	461a      	mov	r2, r3
 800234e:	4923      	ldr	r1, [pc, #140]	; (80023dc <show_task+0xc4>)
 8002350:	4823      	ldr	r0, [pc, #140]	; (80023e0 <show_task+0xc8>)
 8002352:	f008 fd3d 	bl	800add0 <siprintf>
	  sprintf(Angle, "ANGLE: %6d\0", (int)(TURNING_ANGLE));
 8002356:	4b23      	ldr	r3, [pc, #140]	; (80023e4 <show_task+0xcc>)
 8002358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800235c:	4610      	mov	r0, r2
 800235e:	4619      	mov	r1, r3
 8002360:	f7fe fbfa 	bl	8000b58 <__aeabi_d2iz>
 8002364:	4603      	mov	r3, r0
 8002366:	461a      	mov	r2, r3
 8002368:	491f      	ldr	r1, [pc, #124]	; (80023e8 <show_task+0xd0>)
 800236a:	4820      	ldr	r0, [pc, #128]	; (80023ec <show_task+0xd4>)
 800236c:	f008 fd30 	bl	800add0 <siprintf>
	  sprintf(dist, "DIST: %5d CM", Distance);
 8002370:	4b1f      	ldr	r3, [pc, #124]	; (80023f0 <show_task+0xd8>)
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	461a      	mov	r2, r3
 8002376:	491f      	ldr	r1, [pc, #124]	; (80023f4 <show_task+0xdc>)
 8002378:	481f      	ldr	r0, [pc, #124]	; (80023f8 <show_task+0xe0>)
 800237a:	f008 fd29 	bl	800add0 <siprintf>
	  sprintf(IRleft, "IR_L: %5d\0", (int)ir_distL_Avg);
 800237e:	4b1f      	ldr	r3, [pc, #124]	; (80023fc <show_task+0xe4>)
 8002380:	edd3 7a00 	vldr	s15, [r3]
 8002384:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002388:	ee17 2a90 	vmov	r2, s15
 800238c:	491c      	ldr	r1, [pc, #112]	; (8002400 <show_task+0xe8>)
 800238e:	481d      	ldr	r0, [pc, #116]	; (8002404 <show_task+0xec>)
 8002390:	f008 fd1e 	bl	800add0 <siprintf>
	  //sprintf(IRleft, "IR_L: ");
	  OLED_ShowString(0,0,motorA);	//move to show task
 8002394:	f107 030c 	add.w	r3, r7, #12
 8002398:	461a      	mov	r2, r3
 800239a:	2100      	movs	r1, #0
 800239c:	2000      	movs	r0, #0
 800239e:	f000 f9ad 	bl	80026fc <OLED_ShowString>
	  OLED_ShowString(0,10,motorB);	//move to show task
 80023a2:	4a0f      	ldr	r2, [pc, #60]	; (80023e0 <show_task+0xc8>)
 80023a4:	210a      	movs	r1, #10
 80023a6:	2000      	movs	r0, #0
 80023a8:	f000 f9a8 	bl	80026fc <OLED_ShowString>
	  OLED_ShowString(0,20,Angle);
 80023ac:	4a0f      	ldr	r2, [pc, #60]	; (80023ec <show_task+0xd4>)
 80023ae:	2114      	movs	r1, #20
 80023b0:	2000      	movs	r0, #0
 80023b2:	f000 f9a3 	bl	80026fc <OLED_ShowString>
	  OLED_ShowString(10,30,dist);
 80023b6:	4a10      	ldr	r2, [pc, #64]	; (80023f8 <show_task+0xe0>)
 80023b8:	211e      	movs	r1, #30
 80023ba:	200a      	movs	r0, #10
 80023bc:	f000 f99e 	bl	80026fc <OLED_ShowString>
	  OLED_ShowString(10,40,IRleft);
 80023c0:	4a10      	ldr	r2, [pc, #64]	; (8002404 <show_task+0xec>)
 80023c2:	2128      	movs	r1, #40	; 0x28
 80023c4:	200a      	movs	r0, #10
 80023c6:	f000 f999 	bl	80026fc <OLED_ShowString>
	  OLED_Refresh_Gram();
 80023ca:	f000 f823 	bl	8002414 <OLED_Refresh_Gram>
  {
 80023ce:	e7a7      	b.n	8002320 <show_task+0x8>
 80023d0:	200004f8 	.word	0x200004f8
 80023d4:	0800e184 	.word	0x0800e184
 80023d8:	20000500 	.word	0x20000500
 80023dc:	0800e190 	.word	0x0800e190
 80023e0:	2000049c 	.word	0x2000049c
 80023e4:	20000528 	.word	0x20000528
 80023e8:	0800e19c 	.word	0x0800e19c
 80023ec:	200004b0 	.word	0x200004b0
 80023f0:	20000038 	.word	0x20000038
 80023f4:	0800e1a8 	.word	0x0800e1a8
 80023f8:	200004c4 	.word	0x200004c4
 80023fc:	20000554 	.word	0x20000554
 8002400:	0800e1b8 	.word	0x0800e1b8
 8002404:	200004d8 	.word	0x200004d8

08002408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800240c:	b672      	cpsid	i
}
 800240e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002410:	e7fe      	b.n	8002410 <Error_Handler+0x8>
	...

08002414 <OLED_Refresh_Gram>:

#include "oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800241a:	2300      	movs	r3, #0
 800241c:	71fb      	strb	r3, [r7, #7]
 800241e:	e026      	b.n	800246e <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8002420:	79fb      	ldrb	r3, [r7, #7]
 8002422:	3b50      	subs	r3, #80	; 0x50
 8002424:	b2db      	uxtb	r3, r3
 8002426:	2100      	movs	r1, #0
 8002428:	4618      	mov	r0, r3
 800242a:	f000 f82b 	bl	8002484 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800242e:	2100      	movs	r1, #0
 8002430:	2000      	movs	r0, #0
 8002432:	f000 f827 	bl	8002484 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 8002436:	2100      	movs	r1, #0
 8002438:	2010      	movs	r0, #16
 800243a:	f000 f823 	bl	8002484 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800243e:	2300      	movs	r3, #0
 8002440:	71bb      	strb	r3, [r7, #6]
 8002442:	e00d      	b.n	8002460 <OLED_Refresh_Gram+0x4c>
 8002444:	79ba      	ldrb	r2, [r7, #6]
 8002446:	79fb      	ldrb	r3, [r7, #7]
 8002448:	490d      	ldr	r1, [pc, #52]	; (8002480 <OLED_Refresh_Gram+0x6c>)
 800244a:	00d2      	lsls	r2, r2, #3
 800244c:	440a      	add	r2, r1
 800244e:	4413      	add	r3, r2
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2101      	movs	r1, #1
 8002454:	4618      	mov	r0, r3
 8002456:	f000 f815 	bl	8002484 <OLED_WR_Byte>
 800245a:	79bb      	ldrb	r3, [r7, #6]
 800245c:	3301      	adds	r3, #1
 800245e:	71bb      	strb	r3, [r7, #6]
 8002460:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002464:	2b00      	cmp	r3, #0
 8002466:	daed      	bge.n	8002444 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 8002468:	79fb      	ldrb	r3, [r7, #7]
 800246a:	3301      	adds	r3, #1
 800246c:	71fb      	strb	r3, [r7, #7]
 800246e:	79fb      	ldrb	r3, [r7, #7]
 8002470:	2b07      	cmp	r3, #7
 8002472:	d9d5      	bls.n	8002420 <OLED_Refresh_Gram+0xc>
	}   
}
 8002474:	bf00      	nop
 8002476:	bf00      	nop
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	20000558 	.word	0x20000558

08002484 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 8002484:	b580      	push	{r7, lr}
 8002486:	b084      	sub	sp, #16
 8002488:	af00      	add	r7, sp, #0
 800248a:	4603      	mov	r3, r0
 800248c:	460a      	mov	r2, r1
 800248e:	71fb      	strb	r3, [r7, #7]
 8002490:	4613      	mov	r3, r2
 8002492:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 8002494:	79bb      	ldrb	r3, [r7, #6]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d006      	beq.n	80024a8 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800249a:	2201      	movs	r2, #1
 800249c:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024a0:	481c      	ldr	r0, [pc, #112]	; (8002514 <OLED_WR_Byte+0x90>)
 80024a2:	f001 fcdf 	bl	8003e64 <HAL_GPIO_WritePin>
 80024a6:	e005      	b.n	80024b4 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 80024a8:	2200      	movs	r2, #0
 80024aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024ae:	4819      	ldr	r0, [pc, #100]	; (8002514 <OLED_WR_Byte+0x90>)
 80024b0:	f001 fcd8 	bl	8003e64 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 80024b4:	2300      	movs	r3, #0
 80024b6:	73fb      	strb	r3, [r7, #15]
 80024b8:	e01e      	b.n	80024f8 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 80024ba:	2200      	movs	r2, #0
 80024bc:	2120      	movs	r1, #32
 80024be:	4815      	ldr	r0, [pc, #84]	; (8002514 <OLED_WR_Byte+0x90>)
 80024c0:	f001 fcd0 	bl	8003e64 <HAL_GPIO_WritePin>
		if(dat&0x80)
 80024c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	da05      	bge.n	80024d8 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 80024cc:	2201      	movs	r2, #1
 80024ce:	2140      	movs	r1, #64	; 0x40
 80024d0:	4810      	ldr	r0, [pc, #64]	; (8002514 <OLED_WR_Byte+0x90>)
 80024d2:	f001 fcc7 	bl	8003e64 <HAL_GPIO_WritePin>
 80024d6:	e004      	b.n	80024e2 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 80024d8:	2200      	movs	r2, #0
 80024da:	2140      	movs	r1, #64	; 0x40
 80024dc:	480d      	ldr	r0, [pc, #52]	; (8002514 <OLED_WR_Byte+0x90>)
 80024de:	f001 fcc1 	bl	8003e64 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 80024e2:	2201      	movs	r2, #1
 80024e4:	2120      	movs	r1, #32
 80024e6:	480b      	ldr	r0, [pc, #44]	; (8002514 <OLED_WR_Byte+0x90>)
 80024e8:	f001 fcbc 	bl	8003e64 <HAL_GPIO_WritePin>
		dat<<=1;   
 80024ec:	79fb      	ldrb	r3, [r7, #7]
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 80024f2:	7bfb      	ldrb	r3, [r7, #15]
 80024f4:	3301      	adds	r3, #1
 80024f6:	73fb      	strb	r3, [r7, #15]
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
 80024fa:	2b07      	cmp	r3, #7
 80024fc:	d9dd      	bls.n	80024ba <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 80024fe:	2201      	movs	r2, #1
 8002500:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002504:	4803      	ldr	r0, [pc, #12]	; (8002514 <OLED_WR_Byte+0x90>)
 8002506:	f001 fcad 	bl	8003e64 <HAL_GPIO_WritePin>
} 
 800250a:	bf00      	nop
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}
 8002512:	bf00      	nop
 8002514:	40021000 	.word	0x40021000

08002518 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800251e:	2300      	movs	r3, #0
 8002520:	71fb      	strb	r3, [r7, #7]
 8002522:	e014      	b.n	800254e <OLED_Clear+0x36>
 8002524:	2300      	movs	r3, #0
 8002526:	71bb      	strb	r3, [r7, #6]
 8002528:	e00a      	b.n	8002540 <OLED_Clear+0x28>
 800252a:	79ba      	ldrb	r2, [r7, #6]
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	490c      	ldr	r1, [pc, #48]	; (8002560 <OLED_Clear+0x48>)
 8002530:	00d2      	lsls	r2, r2, #3
 8002532:	440a      	add	r2, r1
 8002534:	4413      	add	r3, r2
 8002536:	2200      	movs	r2, #0
 8002538:	701a      	strb	r2, [r3, #0]
 800253a:	79bb      	ldrb	r3, [r7, #6]
 800253c:	3301      	adds	r3, #1
 800253e:	71bb      	strb	r3, [r7, #6]
 8002540:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002544:	2b00      	cmp	r3, #0
 8002546:	daf0      	bge.n	800252a <OLED_Clear+0x12>
 8002548:	79fb      	ldrb	r3, [r7, #7]
 800254a:	3301      	adds	r3, #1
 800254c:	71fb      	strb	r3, [r7, #7]
 800254e:	79fb      	ldrb	r3, [r7, #7]
 8002550:	2b07      	cmp	r3, #7
 8002552:	d9e7      	bls.n	8002524 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8002554:	f7ff ff5e 	bl	8002414 <OLED_Refresh_Gram>
}
 8002558:	bf00      	nop
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	20000558 	.word	0x20000558

08002564 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	4603      	mov	r3, r0
 800256c:	71fb      	strb	r3, [r7, #7]
 800256e:	460b      	mov	r3, r1
 8002570:	71bb      	strb	r3, [r7, #6]
 8002572:	4613      	mov	r3, r2
 8002574:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 8002576:	2300      	movs	r3, #0
 8002578:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800257a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257e:	2b00      	cmp	r3, #0
 8002580:	db41      	blt.n	8002606 <OLED_DrawPoint+0xa2>
 8002582:	79bb      	ldrb	r3, [r7, #6]
 8002584:	2b3f      	cmp	r3, #63	; 0x3f
 8002586:	d83e      	bhi.n	8002606 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8002588:	79bb      	ldrb	r3, [r7, #6]
 800258a:	08db      	lsrs	r3, r3, #3
 800258c:	b2db      	uxtb	r3, r3
 800258e:	f1c3 0307 	rsb	r3, r3, #7
 8002592:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8002594:	79bb      	ldrb	r3, [r7, #6]
 8002596:	f003 0307 	and.w	r3, r3, #7
 800259a:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800259c:	7b7b      	ldrb	r3, [r7, #13]
 800259e:	f1c3 0307 	rsb	r3, r3, #7
 80025a2:	2201      	movs	r2, #1
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 80025aa:	797b      	ldrb	r3, [r7, #5]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d012      	beq.n	80025d6 <OLED_DrawPoint+0x72>
 80025b0:	79fa      	ldrb	r2, [r7, #7]
 80025b2:	7bbb      	ldrb	r3, [r7, #14]
 80025b4:	4917      	ldr	r1, [pc, #92]	; (8002614 <OLED_DrawPoint+0xb0>)
 80025b6:	00d2      	lsls	r2, r2, #3
 80025b8:	440a      	add	r2, r1
 80025ba:	4413      	add	r3, r2
 80025bc:	7818      	ldrb	r0, [r3, #0]
 80025be:	79fa      	ldrb	r2, [r7, #7]
 80025c0:	7bbb      	ldrb	r3, [r7, #14]
 80025c2:	7bf9      	ldrb	r1, [r7, #15]
 80025c4:	4301      	orrs	r1, r0
 80025c6:	b2c8      	uxtb	r0, r1
 80025c8:	4912      	ldr	r1, [pc, #72]	; (8002614 <OLED_DrawPoint+0xb0>)
 80025ca:	00d2      	lsls	r2, r2, #3
 80025cc:	440a      	add	r2, r1
 80025ce:	4413      	add	r3, r2
 80025d0:	4602      	mov	r2, r0
 80025d2:	701a      	strb	r2, [r3, #0]
 80025d4:	e018      	b.n	8002608 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 80025d6:	79fa      	ldrb	r2, [r7, #7]
 80025d8:	7bbb      	ldrb	r3, [r7, #14]
 80025da:	490e      	ldr	r1, [pc, #56]	; (8002614 <OLED_DrawPoint+0xb0>)
 80025dc:	00d2      	lsls	r2, r2, #3
 80025de:	440a      	add	r2, r1
 80025e0:	4413      	add	r3, r2
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	b25a      	sxtb	r2, r3
 80025e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ea:	43db      	mvns	r3, r3
 80025ec:	b25b      	sxtb	r3, r3
 80025ee:	4013      	ands	r3, r2
 80025f0:	b259      	sxtb	r1, r3
 80025f2:	79fa      	ldrb	r2, [r7, #7]
 80025f4:	7bbb      	ldrb	r3, [r7, #14]
 80025f6:	b2c8      	uxtb	r0, r1
 80025f8:	4906      	ldr	r1, [pc, #24]	; (8002614 <OLED_DrawPoint+0xb0>)
 80025fa:	00d2      	lsls	r2, r2, #3
 80025fc:	440a      	add	r2, r1
 80025fe:	4413      	add	r3, r2
 8002600:	4602      	mov	r2, r0
 8002602:	701a      	strb	r2, [r3, #0]
 8002604:	e000      	b.n	8002608 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8002606:	bf00      	nop
}
 8002608:	3714      	adds	r7, #20
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	20000558 	.word	0x20000558

08002618 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8002618:	b590      	push	{r4, r7, lr}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	4604      	mov	r4, r0
 8002620:	4608      	mov	r0, r1
 8002622:	4611      	mov	r1, r2
 8002624:	461a      	mov	r2, r3
 8002626:	4623      	mov	r3, r4
 8002628:	71fb      	strb	r3, [r7, #7]
 800262a:	4603      	mov	r3, r0
 800262c:	71bb      	strb	r3, [r7, #6]
 800262e:	460b      	mov	r3, r1
 8002630:	717b      	strb	r3, [r7, #5]
 8002632:	4613      	mov	r3, r2
 8002634:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8002636:	79bb      	ldrb	r3, [r7, #6]
 8002638:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800263a:	797b      	ldrb	r3, [r7, #5]
 800263c:	3b20      	subs	r3, #32
 800263e:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8002640:	2300      	movs	r3, #0
 8002642:	73bb      	strb	r3, [r7, #14]
 8002644:	e04d      	b.n	80026e2 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8002646:	793b      	ldrb	r3, [r7, #4]
 8002648:	2b0c      	cmp	r3, #12
 800264a:	d10b      	bne.n	8002664 <OLED_ShowChar+0x4c>
 800264c:	797a      	ldrb	r2, [r7, #5]
 800264e:	7bb9      	ldrb	r1, [r7, #14]
 8002650:	4828      	ldr	r0, [pc, #160]	; (80026f4 <OLED_ShowChar+0xdc>)
 8002652:	4613      	mov	r3, r2
 8002654:	005b      	lsls	r3, r3, #1
 8002656:	4413      	add	r3, r2
 8002658:	009b      	lsls	r3, r3, #2
 800265a:	4403      	add	r3, r0
 800265c:	440b      	add	r3, r1
 800265e:	781b      	ldrb	r3, [r3, #0]
 8002660:	73fb      	strb	r3, [r7, #15]
 8002662:	e007      	b.n	8002674 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 8002664:	797a      	ldrb	r2, [r7, #5]
 8002666:	7bbb      	ldrb	r3, [r7, #14]
 8002668:	4923      	ldr	r1, [pc, #140]	; (80026f8 <OLED_ShowChar+0xe0>)
 800266a:	0112      	lsls	r2, r2, #4
 800266c:	440a      	add	r2, r1
 800266e:	4413      	add	r3, r2
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8002674:	2300      	movs	r3, #0
 8002676:	737b      	strb	r3, [r7, #13]
 8002678:	e02d      	b.n	80026d6 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800267a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800267e:	2b00      	cmp	r3, #0
 8002680:	da07      	bge.n	8002692 <OLED_ShowChar+0x7a>
 8002682:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002686:	79b9      	ldrb	r1, [r7, #6]
 8002688:	79fb      	ldrb	r3, [r7, #7]
 800268a:	4618      	mov	r0, r3
 800268c:	f7ff ff6a 	bl	8002564 <OLED_DrawPoint>
 8002690:	e00c      	b.n	80026ac <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8002692:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002696:	2b00      	cmp	r3, #0
 8002698:	bf0c      	ite	eq
 800269a:	2301      	moveq	r3, #1
 800269c:	2300      	movne	r3, #0
 800269e:	b2db      	uxtb	r3, r3
 80026a0:	461a      	mov	r2, r3
 80026a2:	79b9      	ldrb	r1, [r7, #6]
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	4618      	mov	r0, r3
 80026a8:	f7ff ff5c 	bl	8002564 <OLED_DrawPoint>
			temp<<=1;
 80026ac:	7bfb      	ldrb	r3, [r7, #15]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	73fb      	strb	r3, [r7, #15]
			y++;
 80026b2:	79bb      	ldrb	r3, [r7, #6]
 80026b4:	3301      	adds	r3, #1
 80026b6:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 80026b8:	79ba      	ldrb	r2, [r7, #6]
 80026ba:	7b3b      	ldrb	r3, [r7, #12]
 80026bc:	1ad2      	subs	r2, r2, r3
 80026be:	793b      	ldrb	r3, [r7, #4]
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d105      	bne.n	80026d0 <OLED_ShowChar+0xb8>
			{
				y=y0;
 80026c4:	7b3b      	ldrb	r3, [r7, #12]
 80026c6:	71bb      	strb	r3, [r7, #6]
				x++;
 80026c8:	79fb      	ldrb	r3, [r7, #7]
 80026ca:	3301      	adds	r3, #1
 80026cc:	71fb      	strb	r3, [r7, #7]
				break;
 80026ce:	e005      	b.n	80026dc <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 80026d0:	7b7b      	ldrb	r3, [r7, #13]
 80026d2:	3301      	adds	r3, #1
 80026d4:	737b      	strb	r3, [r7, #13]
 80026d6:	7b7b      	ldrb	r3, [r7, #13]
 80026d8:	2b07      	cmp	r3, #7
 80026da:	d9ce      	bls.n	800267a <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 80026dc:	7bbb      	ldrb	r3, [r7, #14]
 80026de:	3301      	adds	r3, #1
 80026e0:	73bb      	strb	r3, [r7, #14]
 80026e2:	7bba      	ldrb	r2, [r7, #14]
 80026e4:	793b      	ldrb	r3, [r7, #4]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d3ad      	bcc.n	8002646 <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 80026ea:	bf00      	nop
 80026ec:	bf00      	nop
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd90      	pop	{r4, r7, pc}
 80026f4:	0800e2b4 	.word	0x0800e2b4
 80026f8:	0800e728 	.word	0x0800e728

080026fc <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af02      	add	r7, sp, #8
 8002702:	4603      	mov	r3, r0
 8002704:	603a      	str	r2, [r7, #0]
 8002706:	71fb      	strb	r3, [r7, #7]
 8002708:	460b      	mov	r3, r1
 800270a:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 800270c:	e01f      	b.n	800274e <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800270e:	79fb      	ldrb	r3, [r7, #7]
 8002710:	2b7a      	cmp	r3, #122	; 0x7a
 8002712:	d904      	bls.n	800271e <OLED_ShowString+0x22>
 8002714:	2300      	movs	r3, #0
 8002716:	71fb      	strb	r3, [r7, #7]
 8002718:	79bb      	ldrb	r3, [r7, #6]
 800271a:	3310      	adds	r3, #16
 800271c:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800271e:	79bb      	ldrb	r3, [r7, #6]
 8002720:	2b3a      	cmp	r3, #58	; 0x3a
 8002722:	d905      	bls.n	8002730 <OLED_ShowString+0x34>
 8002724:	2300      	movs	r3, #0
 8002726:	71fb      	strb	r3, [r7, #7]
 8002728:	79fb      	ldrb	r3, [r7, #7]
 800272a:	71bb      	strb	r3, [r7, #6]
 800272c:	f7ff fef4 	bl	8002518 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	781a      	ldrb	r2, [r3, #0]
 8002734:	79b9      	ldrb	r1, [r7, #6]
 8002736:	79f8      	ldrb	r0, [r7, #7]
 8002738:	2301      	movs	r3, #1
 800273a:	9300      	str	r3, [sp, #0]
 800273c:	230c      	movs	r3, #12
 800273e:	f7ff ff6b 	bl	8002618 <OLED_ShowChar>
        x+=8;
 8002742:	79fb      	ldrb	r3, [r7, #7]
 8002744:	3308      	adds	r3, #8
 8002746:	71fb      	strb	r3, [r7, #7]
        p++;
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	3301      	adds	r3, #1
 800274c:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1db      	bne.n	800270e <OLED_ShowString+0x12>
    }  
}	 
 8002756:	bf00      	nop
 8002758:	bf00      	nop
 800275a:	3708      	adds	r7, #8
 800275c:	46bd      	mov	sp, r7
 800275e:	bd80      	pop	{r7, pc}

08002760 <OLED_Init>:

void OLED_Init(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 8002764:	f002 fb48 	bl	8004df8 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 8002768:	4b41      	ldr	r3, [pc, #260]	; (8002870 <OLED_Init+0x110>)
 800276a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800276c:	4a40      	ldr	r2, [pc, #256]	; (8002870 <OLED_Init+0x110>)
 800276e:	f023 0301 	bic.w	r3, r3, #1
 8002772:	6713      	str	r3, [r2, #112]	; 0x70
 8002774:	4b3e      	ldr	r3, [pc, #248]	; (8002870 <OLED_Init+0x110>)
 8002776:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002778:	4a3d      	ldr	r2, [pc, #244]	; (8002870 <OLED_Init+0x110>)
 800277a:	f023 0304 	bic.w	r3, r3, #4
 800277e:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 8002780:	f002 fb4e 	bl	8004e20 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 8002784:	2200      	movs	r2, #0
 8002786:	2180      	movs	r1, #128	; 0x80
 8002788:	483a      	ldr	r0, [pc, #232]	; (8002874 <OLED_Init+0x114>)
 800278a:	f001 fb6b 	bl	8003e64 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800278e:	2064      	movs	r0, #100	; 0x64
 8002790:	f000 fc96 	bl	80030c0 <HAL_Delay>
	OLED_RST_Set();
 8002794:	2201      	movs	r2, #1
 8002796:	2180      	movs	r1, #128	; 0x80
 8002798:	4836      	ldr	r0, [pc, #216]	; (8002874 <OLED_Init+0x114>)
 800279a:	f001 fb63 	bl	8003e64 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800279e:	2100      	movs	r1, #0
 80027a0:	20ae      	movs	r0, #174	; 0xae
 80027a2:	f7ff fe6f 	bl	8002484 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 80027a6:	2100      	movs	r1, #0
 80027a8:	20d5      	movs	r0, #213	; 0xd5
 80027aa:	f7ff fe6b 	bl	8002484 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 80027ae:	2100      	movs	r1, #0
 80027b0:	2050      	movs	r0, #80	; 0x50
 80027b2:	f7ff fe67 	bl	8002484 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 80027b6:	2100      	movs	r1, #0
 80027b8:	20a8      	movs	r0, #168	; 0xa8
 80027ba:	f7ff fe63 	bl	8002484 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 80027be:	2100      	movs	r1, #0
 80027c0:	203f      	movs	r0, #63	; 0x3f
 80027c2:	f7ff fe5f 	bl	8002484 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 80027c6:	2100      	movs	r1, #0
 80027c8:	20d3      	movs	r0, #211	; 0xd3
 80027ca:	f7ff fe5b 	bl	8002484 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 80027ce:	2100      	movs	r1, #0
 80027d0:	2000      	movs	r0, #0
 80027d2:	f7ff fe57 	bl	8002484 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 80027d6:	2100      	movs	r1, #0
 80027d8:	2040      	movs	r0, #64	; 0x40
 80027da:	f7ff fe53 	bl	8002484 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 80027de:	2100      	movs	r1, #0
 80027e0:	208d      	movs	r0, #141	; 0x8d
 80027e2:	f7ff fe4f 	bl	8002484 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 80027e6:	2100      	movs	r1, #0
 80027e8:	2014      	movs	r0, #20
 80027ea:	f7ff fe4b 	bl	8002484 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 80027ee:	2100      	movs	r1, #0
 80027f0:	2020      	movs	r0, #32
 80027f2:	f7ff fe47 	bl	8002484 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 80027f6:	2100      	movs	r1, #0
 80027f8:	2002      	movs	r0, #2
 80027fa:	f7ff fe43 	bl	8002484 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 80027fe:	2100      	movs	r1, #0
 8002800:	20a1      	movs	r0, #161	; 0xa1
 8002802:	f7ff fe3f 	bl	8002484 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8002806:	2100      	movs	r1, #0
 8002808:	20c0      	movs	r0, #192	; 0xc0
 800280a:	f7ff fe3b 	bl	8002484 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800280e:	2100      	movs	r1, #0
 8002810:	20da      	movs	r0, #218	; 0xda
 8002812:	f7ff fe37 	bl	8002484 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8002816:	2100      	movs	r1, #0
 8002818:	2012      	movs	r0, #18
 800281a:	f7ff fe33 	bl	8002484 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800281e:	2100      	movs	r1, #0
 8002820:	2081      	movs	r0, #129	; 0x81
 8002822:	f7ff fe2f 	bl	8002484 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8002826:	2100      	movs	r1, #0
 8002828:	20ef      	movs	r0, #239	; 0xef
 800282a:	f7ff fe2b 	bl	8002484 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800282e:	2100      	movs	r1, #0
 8002830:	20d9      	movs	r0, #217	; 0xd9
 8002832:	f7ff fe27 	bl	8002484 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8002836:	2100      	movs	r1, #0
 8002838:	20f1      	movs	r0, #241	; 0xf1
 800283a:	f7ff fe23 	bl	8002484 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800283e:	2100      	movs	r1, #0
 8002840:	20db      	movs	r0, #219	; 0xdb
 8002842:	f7ff fe1f 	bl	8002484 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8002846:	2100      	movs	r1, #0
 8002848:	2030      	movs	r0, #48	; 0x30
 800284a:	f7ff fe1b 	bl	8002484 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800284e:	2100      	movs	r1, #0
 8002850:	20a4      	movs	r0, #164	; 0xa4
 8002852:	f7ff fe17 	bl	8002484 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8002856:	2100      	movs	r1, #0
 8002858:	20a6      	movs	r0, #166	; 0xa6
 800285a:	f7ff fe13 	bl	8002484 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800285e:	2100      	movs	r1, #0
 8002860:	20af      	movs	r0, #175	; 0xaf
 8002862:	f7ff fe0f 	bl	8002484 <OLED_WR_Byte>
	OLED_Clear(); 
 8002866:	f7ff fe57 	bl	8002518 <OLED_Clear>
}
 800286a:	bf00      	nop
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40023800 	.word	0x40023800
 8002874:	40021000 	.word	0x40021000

08002878 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b082      	sub	sp, #8
 800287c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800287e:	2300      	movs	r3, #0
 8002880:	607b      	str	r3, [r7, #4]
 8002882:	4b12      	ldr	r3, [pc, #72]	; (80028cc <HAL_MspInit+0x54>)
 8002884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002886:	4a11      	ldr	r2, [pc, #68]	; (80028cc <HAL_MspInit+0x54>)
 8002888:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800288c:	6453      	str	r3, [r2, #68]	; 0x44
 800288e:	4b0f      	ldr	r3, [pc, #60]	; (80028cc <HAL_MspInit+0x54>)
 8002890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002892:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002896:	607b      	str	r3, [r7, #4]
 8002898:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800289a:	2300      	movs	r3, #0
 800289c:	603b      	str	r3, [r7, #0]
 800289e:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <HAL_MspInit+0x54>)
 80028a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a2:	4a0a      	ldr	r2, [pc, #40]	; (80028cc <HAL_MspInit+0x54>)
 80028a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a8:	6413      	str	r3, [r2, #64]	; 0x40
 80028aa:	4b08      	ldr	r3, [pc, #32]	; (80028cc <HAL_MspInit+0x54>)
 80028ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028b2:	603b      	str	r3, [r7, #0]
 80028b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80028b6:	2200      	movs	r2, #0
 80028b8:	210f      	movs	r1, #15
 80028ba:	f06f 0001 	mvn.w	r0, #1
 80028be:	f001 f8fe 	bl	8003abe <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028c2:	bf00      	nop
 80028c4:	3708      	adds	r7, #8
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	40023800 	.word	0x40023800

080028d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b08a      	sub	sp, #40	; 0x28
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d8:	f107 0314 	add.w	r3, r7, #20
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	605a      	str	r2, [r3, #4]
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	60da      	str	r2, [r3, #12]
 80028e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a17      	ldr	r2, [pc, #92]	; (800294c <HAL_ADC_MspInit+0x7c>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d127      	bne.n	8002942 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	613b      	str	r3, [r7, #16]
 80028f6:	4b16      	ldr	r3, [pc, #88]	; (8002950 <HAL_ADC_MspInit+0x80>)
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	4a15      	ldr	r2, [pc, #84]	; (8002950 <HAL_ADC_MspInit+0x80>)
 80028fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002900:	6453      	str	r3, [r2, #68]	; 0x44
 8002902:	4b13      	ldr	r3, [pc, #76]	; (8002950 <HAL_ADC_MspInit+0x80>)
 8002904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002906:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	4b0f      	ldr	r3, [pc, #60]	; (8002950 <HAL_ADC_MspInit+0x80>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	4a0e      	ldr	r2, [pc, #56]	; (8002950 <HAL_ADC_MspInit+0x80>)
 8002918:	f043 0304 	orr.w	r3, r3, #4
 800291c:	6313      	str	r3, [r2, #48]	; 0x30
 800291e:	4b0c      	ldr	r3, [pc, #48]	; (8002950 <HAL_ADC_MspInit+0x80>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	f003 0304 	and.w	r3, r3, #4
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800292a:	2301      	movs	r3, #1
 800292c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800292e:	2303      	movs	r3, #3
 8002930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002932:	2300      	movs	r3, #0
 8002934:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002936:	f107 0314 	add.w	r3, r7, #20
 800293a:	4619      	mov	r1, r3
 800293c:	4805      	ldr	r0, [pc, #20]	; (8002954 <HAL_ADC_MspInit+0x84>)
 800293e:	f001 f8f5 	bl	8003b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002942:	bf00      	nop
 8002944:	3728      	adds	r7, #40	; 0x28
 8002946:	46bd      	mov	sp, r7
 8002948:	bd80      	pop	{r7, pc}
 800294a:	bf00      	nop
 800294c:	40012000 	.word	0x40012000
 8002950:	40023800 	.word	0x40023800
 8002954:	40020800 	.word	0x40020800

08002958 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b08a      	sub	sp, #40	; 0x28
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	605a      	str	r2, [r3, #4]
 800296a:	609a      	str	r2, [r3, #8]
 800296c:	60da      	str	r2, [r3, #12]
 800296e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a19      	ldr	r2, [pc, #100]	; (80029dc <HAL_I2C_MspInit+0x84>)
 8002976:	4293      	cmp	r3, r2
 8002978:	d12c      	bne.n	80029d4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	4b18      	ldr	r3, [pc, #96]	; (80029e0 <HAL_I2C_MspInit+0x88>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002982:	4a17      	ldr	r2, [pc, #92]	; (80029e0 <HAL_I2C_MspInit+0x88>)
 8002984:	f043 0302 	orr.w	r3, r3, #2
 8002988:	6313      	str	r3, [r2, #48]	; 0x30
 800298a:	4b15      	ldr	r3, [pc, #84]	; (80029e0 <HAL_I2C_MspInit+0x88>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	613b      	str	r3, [r7, #16]
 8002994:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002996:	f44f 7340 	mov.w	r3, #768	; 0x300
 800299a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800299c:	2312      	movs	r3, #18
 800299e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a4:	2303      	movs	r3, #3
 80029a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80029a8:	2304      	movs	r3, #4
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ac:	f107 0314 	add.w	r3, r7, #20
 80029b0:	4619      	mov	r1, r3
 80029b2:	480c      	ldr	r0, [pc, #48]	; (80029e4 <HAL_I2C_MspInit+0x8c>)
 80029b4:	f001 f8ba 	bl	8003b2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80029b8:	2300      	movs	r3, #0
 80029ba:	60fb      	str	r3, [r7, #12]
 80029bc:	4b08      	ldr	r3, [pc, #32]	; (80029e0 <HAL_I2C_MspInit+0x88>)
 80029be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029c0:	4a07      	ldr	r2, [pc, #28]	; (80029e0 <HAL_I2C_MspInit+0x88>)
 80029c2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80029c6:	6413      	str	r3, [r2, #64]	; 0x40
 80029c8:	4b05      	ldr	r3, [pc, #20]	; (80029e0 <HAL_I2C_MspInit+0x88>)
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80029d4:	bf00      	nop
 80029d6:	3728      	adds	r7, #40	; 0x28
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	40005400 	.word	0x40005400
 80029e0:	40023800 	.word	0x40023800
 80029e4:	40020400 	.word	0x40020400

080029e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b08a      	sub	sp, #40	; 0x28
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029f0:	f107 0314 	add.w	r3, r7, #20
 80029f4:	2200      	movs	r2, #0
 80029f6:	601a      	str	r2, [r3, #0]
 80029f8:	605a      	str	r2, [r3, #4]
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	60da      	str	r2, [r3, #12]
 80029fe:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	4a23      	ldr	r2, [pc, #140]	; (8002a94 <HAL_TIM_Base_MspInit+0xac>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d10e      	bne.n	8002a28 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	613b      	str	r3, [r7, #16]
 8002a0e:	4b22      	ldr	r3, [pc, #136]	; (8002a98 <HAL_TIM_Base_MspInit+0xb0>)
 8002a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a12:	4a21      	ldr	r2, [pc, #132]	; (8002a98 <HAL_TIM_Base_MspInit+0xb0>)
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	6453      	str	r3, [r2, #68]	; 0x44
 8002a1a:	4b1f      	ldr	r3, [pc, #124]	; (8002a98 <HAL_TIM_Base_MspInit+0xb0>)
 8002a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	613b      	str	r3, [r7, #16]
 8002a24:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002a26:	e030      	b.n	8002a8a <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM8)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a1b      	ldr	r2, [pc, #108]	; (8002a9c <HAL_TIM_Base_MspInit+0xb4>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d12b      	bne.n	8002a8a <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	60fb      	str	r3, [r7, #12]
 8002a36:	4b18      	ldr	r3, [pc, #96]	; (8002a98 <HAL_TIM_Base_MspInit+0xb0>)
 8002a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a3a:	4a17      	ldr	r2, [pc, #92]	; (8002a98 <HAL_TIM_Base_MspInit+0xb0>)
 8002a3c:	f043 0302 	orr.w	r3, r3, #2
 8002a40:	6453      	str	r3, [r2, #68]	; 0x44
 8002a42:	4b15      	ldr	r3, [pc, #84]	; (8002a98 <HAL_TIM_Base_MspInit+0xb0>)
 8002a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a46:	f003 0302 	and.w	r3, r3, #2
 8002a4a:	60fb      	str	r3, [r7, #12]
 8002a4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	4b11      	ldr	r3, [pc, #68]	; (8002a98 <HAL_TIM_Base_MspInit+0xb0>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a56:	4a10      	ldr	r2, [pc, #64]	; (8002a98 <HAL_TIM_Base_MspInit+0xb0>)
 8002a58:	f043 0304 	orr.w	r3, r3, #4
 8002a5c:	6313      	str	r3, [r2, #48]	; 0x30
 8002a5e:	4b0e      	ldr	r3, [pc, #56]	; (8002a98 <HAL_TIM_Base_MspInit+0xb0>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a62:	f003 0304 	and.w	r3, r3, #4
 8002a66:	60bb      	str	r3, [r7, #8]
 8002a68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a6a:	23c0      	movs	r3, #192	; 0xc0
 8002a6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a72:	2300      	movs	r3, #0
 8002a74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a76:	2300      	movs	r3, #0
 8002a78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002a7a:	2303      	movs	r3, #3
 8002a7c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a7e:	f107 0314 	add.w	r3, r7, #20
 8002a82:	4619      	mov	r1, r3
 8002a84:	4806      	ldr	r0, [pc, #24]	; (8002aa0 <HAL_TIM_Base_MspInit+0xb8>)
 8002a86:	f001 f851 	bl	8003b2c <HAL_GPIO_Init>
}
 8002a8a:	bf00      	nop
 8002a8c:	3728      	adds	r7, #40	; 0x28
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}
 8002a92:	bf00      	nop
 8002a94:	40010000 	.word	0x40010000
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	40010400 	.word	0x40010400
 8002aa0:	40020800 	.word	0x40020800

08002aa4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b08c      	sub	sp, #48	; 0x30
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aac:	f107 031c 	add.w	r3, r7, #28
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	601a      	str	r2, [r3, #0]
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	609a      	str	r2, [r3, #8]
 8002ab8:	60da      	str	r2, [r3, #12]
 8002aba:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ac4:	d14b      	bne.n	8002b5e <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	61bb      	str	r3, [r7, #24]
 8002aca:	4b3f      	ldr	r3, [pc, #252]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ace:	4a3e      	ldr	r2, [pc, #248]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	6413      	str	r3, [r2, #64]	; 0x40
 8002ad6:	4b3c      	ldr	r3, [pc, #240]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ada:	f003 0301 	and.w	r3, r3, #1
 8002ade:	61bb      	str	r3, [r7, #24]
 8002ae0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	4b38      	ldr	r3, [pc, #224]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aea:	4a37      	ldr	r2, [pc, #220]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	6313      	str	r3, [r2, #48]	; 0x30
 8002af2:	4b35      	ldr	r3, [pc, #212]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002af4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	617b      	str	r3, [r7, #20]
 8002afc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002afe:	2300      	movs	r3, #0
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	4b31      	ldr	r3, [pc, #196]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b06:	4a30      	ldr	r2, [pc, #192]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b08:	f043 0302 	orr.w	r3, r3, #2
 8002b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b0e:	4b2e      	ldr	r3, [pc, #184]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	613b      	str	r3, [r7, #16]
 8002b18:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002b1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b1e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b20:	2302      	movs	r3, #2
 8002b22:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b24:	2300      	movs	r3, #0
 8002b26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b30:	f107 031c 	add.w	r3, r7, #28
 8002b34:	4619      	mov	r1, r3
 8002b36:	4825      	ldr	r0, [pc, #148]	; (8002bcc <HAL_TIM_Encoder_MspInit+0x128>)
 8002b38:	f000 fff8 	bl	8003b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002b3c:	2308      	movs	r3, #8
 8002b3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b40:	2302      	movs	r3, #2
 8002b42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b44:	2300      	movs	r3, #0
 8002b46:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b50:	f107 031c 	add.w	r3, r7, #28
 8002b54:	4619      	mov	r1, r3
 8002b56:	481e      	ldr	r0, [pc, #120]	; (8002bd0 <HAL_TIM_Encoder_MspInit+0x12c>)
 8002b58:	f000 ffe8 	bl	8003b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002b5c:	e030      	b.n	8002bc0 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a1c      	ldr	r2, [pc, #112]	; (8002bd4 <HAL_TIM_Encoder_MspInit+0x130>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	d12b      	bne.n	8002bc0 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b68:	2300      	movs	r3, #0
 8002b6a:	60fb      	str	r3, [r7, #12]
 8002b6c:	4b16      	ldr	r3, [pc, #88]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b70:	4a15      	ldr	r2, [pc, #84]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b72:	f043 0302 	orr.w	r3, r3, #2
 8002b76:	6413      	str	r3, [r2, #64]	; 0x40
 8002b78:	4b13      	ldr	r3, [pc, #76]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b84:	2300      	movs	r3, #0
 8002b86:	60bb      	str	r3, [r7, #8]
 8002b88:	4b0f      	ldr	r3, [pc, #60]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b8c:	4a0e      	ldr	r2, [pc, #56]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b8e:	f043 0301 	orr.w	r3, r3, #1
 8002b92:	6313      	str	r3, [r2, #48]	; 0x30
 8002b94:	4b0c      	ldr	r3, [pc, #48]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x124>)
 8002b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b98:	f003 0301 	and.w	r3, r3, #1
 8002b9c:	60bb      	str	r3, [r7, #8]
 8002b9e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002ba0:	23c0      	movs	r3, #192	; 0xc0
 8002ba2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bac:	2300      	movs	r3, #0
 8002bae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb4:	f107 031c 	add.w	r3, r7, #28
 8002bb8:	4619      	mov	r1, r3
 8002bba:	4804      	ldr	r0, [pc, #16]	; (8002bcc <HAL_TIM_Encoder_MspInit+0x128>)
 8002bbc:	f000 ffb6 	bl	8003b2c <HAL_GPIO_Init>
}
 8002bc0:	bf00      	nop
 8002bc2:	3730      	adds	r7, #48	; 0x30
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	bd80      	pop	{r7, pc}
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	40020000 	.word	0x40020000
 8002bd0:	40020400 	.word	0x40020400
 8002bd4:	40000400 	.word	0x40000400

08002bd8 <HAL_TIM_IC_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_ic: TIM_IC handle pointer
* @retval None
*/
void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* htim_ic)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b08a      	sub	sp, #40	; 0x28
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002be0:	f107 0314 	add.w	r3, r7, #20
 8002be4:	2200      	movs	r2, #0
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	605a      	str	r2, [r3, #4]
 8002bea:	609a      	str	r2, [r3, #8]
 8002bec:	60da      	str	r2, [r3, #12]
 8002bee:	611a      	str	r2, [r3, #16]
  if(htim_ic->Instance==TIM4)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a1d      	ldr	r2, [pc, #116]	; (8002c6c <HAL_TIM_IC_MspInit+0x94>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d134      	bne.n	8002c64 <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	613b      	str	r3, [r7, #16]
 8002bfe:	4b1c      	ldr	r3, [pc, #112]	; (8002c70 <HAL_TIM_IC_MspInit+0x98>)
 8002c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c02:	4a1b      	ldr	r2, [pc, #108]	; (8002c70 <HAL_TIM_IC_MspInit+0x98>)
 8002c04:	f043 0304 	orr.w	r3, r3, #4
 8002c08:	6413      	str	r3, [r2, #64]	; 0x40
 8002c0a:	4b19      	ldr	r3, [pc, #100]	; (8002c70 <HAL_TIM_IC_MspInit+0x98>)
 8002c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0e:	f003 0304 	and.w	r3, r3, #4
 8002c12:	613b      	str	r3, [r7, #16]
 8002c14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c16:	2300      	movs	r3, #0
 8002c18:	60fb      	str	r3, [r7, #12]
 8002c1a:	4b15      	ldr	r3, [pc, #84]	; (8002c70 <HAL_TIM_IC_MspInit+0x98>)
 8002c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c1e:	4a14      	ldr	r2, [pc, #80]	; (8002c70 <HAL_TIM_IC_MspInit+0x98>)
 8002c20:	f043 0308 	orr.w	r3, r3, #8
 8002c24:	6313      	str	r3, [r2, #48]	; 0x30
 8002c26:	4b12      	ldr	r3, [pc, #72]	; (8002c70 <HAL_TIM_IC_MspInit+0x98>)
 8002c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	68fb      	ldr	r3, [r7, #12]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = Echo_Pin;
 8002c32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c38:	2302      	movs	r3, #2
 8002c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c40:	2300      	movs	r3, #0
 8002c42:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002c44:	2302      	movs	r3, #2
 8002c46:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8002c48:	f107 0314 	add.w	r3, r7, #20
 8002c4c:	4619      	mov	r1, r3
 8002c4e:	4809      	ldr	r0, [pc, #36]	; (8002c74 <HAL_TIM_IC_MspInit+0x9c>)
 8002c50:	f000 ff6c 	bl	8003b2c <HAL_GPIO_Init>

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8002c54:	2200      	movs	r2, #0
 8002c56:	2105      	movs	r1, #5
 8002c58:	201e      	movs	r0, #30
 8002c5a:	f000 ff30 	bl	8003abe <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002c5e:	201e      	movs	r0, #30
 8002c60:	f000 ff49 	bl	8003af6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002c64:	bf00      	nop
 8002c66:	3728      	adds	r7, #40	; 0x28
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40000800 	.word	0x40000800
 8002c70:	40023800 	.word	0x40023800
 8002c74:	40020c00 	.word	0x40020c00

08002c78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b088      	sub	sp, #32
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c80:	f107 030c 	add.w	r3, r7, #12
 8002c84:	2200      	movs	r2, #0
 8002c86:	601a      	str	r2, [r3, #0]
 8002c88:	605a      	str	r2, [r3, #4]
 8002c8a:	609a      	str	r2, [r3, #8]
 8002c8c:	60da      	str	r2, [r3, #12]
 8002c8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a12      	ldr	r2, [pc, #72]	; (8002ce0 <HAL_TIM_MspPostInit+0x68>)
 8002c96:	4293      	cmp	r3, r2
 8002c98:	d11e      	bne.n	8002cd8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	60bb      	str	r3, [r7, #8]
 8002c9e:	4b11      	ldr	r3, [pc, #68]	; (8002ce4 <HAL_TIM_MspPostInit+0x6c>)
 8002ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ca2:	4a10      	ldr	r2, [pc, #64]	; (8002ce4 <HAL_TIM_MspPostInit+0x6c>)
 8002ca4:	f043 0310 	orr.w	r3, r3, #16
 8002ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8002caa:	4b0e      	ldr	r3, [pc, #56]	; (8002ce4 <HAL_TIM_MspPostInit+0x6c>)
 8002cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cae:	f003 0310 	and.w	r3, r3, #16
 8002cb2:	60bb      	str	r3, [r7, #8]
 8002cb4:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002cb6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002cba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cc0:	2300      	movs	r3, #0
 8002cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002ccc:	f107 030c 	add.w	r3, r7, #12
 8002cd0:	4619      	mov	r1, r3
 8002cd2:	4805      	ldr	r0, [pc, #20]	; (8002ce8 <HAL_TIM_MspPostInit+0x70>)
 8002cd4:	f000 ff2a 	bl	8003b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8002cd8:	bf00      	nop
 8002cda:	3720      	adds	r7, #32
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}
 8002ce0:	40010000 	.word	0x40010000
 8002ce4:	40023800 	.word	0x40023800
 8002ce8:	40021000 	.word	0x40021000

08002cec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08a      	sub	sp, #40	; 0x28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf4:	f107 0314 	add.w	r3, r7, #20
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]
 8002cfc:	605a      	str	r2, [r3, #4]
 8002cfe:	609a      	str	r2, [r3, #8]
 8002d00:	60da      	str	r2, [r3, #12]
 8002d02:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a19      	ldr	r2, [pc, #100]	; (8002d70 <HAL_UART_MspInit+0x84>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d12c      	bne.n	8002d68 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d0e:	2300      	movs	r3, #0
 8002d10:	613b      	str	r3, [r7, #16]
 8002d12:	4b18      	ldr	r3, [pc, #96]	; (8002d74 <HAL_UART_MspInit+0x88>)
 8002d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d16:	4a17      	ldr	r2, [pc, #92]	; (8002d74 <HAL_UART_MspInit+0x88>)
 8002d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d1c:	6413      	str	r3, [r2, #64]	; 0x40
 8002d1e:	4b15      	ldr	r3, [pc, #84]	; (8002d74 <HAL_UART_MspInit+0x88>)
 8002d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d26:	613b      	str	r3, [r7, #16]
 8002d28:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	60fb      	str	r3, [r7, #12]
 8002d2e:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <HAL_UART_MspInit+0x88>)
 8002d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d32:	4a10      	ldr	r2, [pc, #64]	; (8002d74 <HAL_UART_MspInit+0x88>)
 8002d34:	f043 0304 	orr.w	r3, r3, #4
 8002d38:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3a:	4b0e      	ldr	r3, [pc, #56]	; (8002d74 <HAL_UART_MspInit+0x88>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d3e:	f003 0304 	and.w	r3, r3, #4
 8002d42:	60fb      	str	r3, [r7, #12]
 8002d44:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002d46:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002d4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4c:	2302      	movs	r3, #2
 8002d4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d50:	2300      	movs	r3, #0
 8002d52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d54:	2303      	movs	r3, #3
 8002d56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d58:	2307      	movs	r3, #7
 8002d5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002d5c:	f107 0314 	add.w	r3, r7, #20
 8002d60:	4619      	mov	r1, r3
 8002d62:	4805      	ldr	r0, [pc, #20]	; (8002d78 <HAL_UART_MspInit+0x8c>)
 8002d64:	f000 fee2 	bl	8003b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002d68:	bf00      	nop
 8002d6a:	3728      	adds	r7, #40	; 0x28
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40004800 	.word	0x40004800
 8002d74:	40023800 	.word	0x40023800
 8002d78:	40020800 	.word	0x40020800

08002d7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002d80:	e7fe      	b.n	8002d80 <NMI_Handler+0x4>

08002d82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d82:	b480      	push	{r7}
 8002d84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d86:	e7fe      	b.n	8002d86 <HardFault_Handler+0x4>

08002d88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d8c:	e7fe      	b.n	8002d8c <MemManage_Handler+0x4>

08002d8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d8e:	b480      	push	{r7}
 8002d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d92:	e7fe      	b.n	8002d92 <BusFault_Handler+0x4>

08002d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d98:	e7fe      	b.n	8002d98 <UsageFault_Handler+0x4>

08002d9a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d9e:	bf00      	nop
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr

08002da8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002da8:	b580      	push	{r7, lr}
 8002daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002dac:	f000 f968 	bl	8003080 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8002db0:	f006 fafe 	bl	80093b0 <xTaskGetSchedulerState>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b01      	cmp	r3, #1
 8002db8:	d001      	beq.n	8002dbe <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002dba:	f007 f8e5 	bl	8009f88 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002dbe:	bf00      	nop
 8002dc0:	bd80      	pop	{r7, pc}
	...

08002dc4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002dc8:	4802      	ldr	r0, [pc, #8]	; (8002dd4 <TIM4_IRQHandler+0x10>)
 8002dca:	f003 f8b1 	bl	8005f30 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002dce:	bf00      	nop
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	200003b0 	.word	0x200003b0

08002dd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
	return 1;
 8002ddc:	2301      	movs	r3, #1
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	46bd      	mov	sp, r7
 8002de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de6:	4770      	bx	lr

08002de8 <_kill>:

int _kill(int pid, int sig)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b082      	sub	sp, #8
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
 8002df0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002df2:	f007 fb43 	bl	800a47c <__errno>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2216      	movs	r2, #22
 8002dfa:	601a      	str	r2, [r3, #0]
	return -1;
 8002dfc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3708      	adds	r7, #8
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}

08002e08 <_exit>:

void _exit (int status)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002e10:	f04f 31ff 	mov.w	r1, #4294967295
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7ff ffe7 	bl	8002de8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002e1a:	e7fe      	b.n	8002e1a <_exit+0x12>

08002e1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b086      	sub	sp, #24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e28:	2300      	movs	r3, #0
 8002e2a:	617b      	str	r3, [r7, #20]
 8002e2c:	e00a      	b.n	8002e44 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002e2e:	f3af 8000 	nop.w
 8002e32:	4601      	mov	r1, r0
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	1c5a      	adds	r2, r3, #1
 8002e38:	60ba      	str	r2, [r7, #8]
 8002e3a:	b2ca      	uxtb	r2, r1
 8002e3c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	3301      	adds	r3, #1
 8002e42:	617b      	str	r3, [r7, #20]
 8002e44:	697a      	ldr	r2, [r7, #20]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	dbf0      	blt.n	8002e2e <_read+0x12>
	}

return len;
 8002e4c:	687b      	ldr	r3, [r7, #4]
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b086      	sub	sp, #24
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	60b9      	str	r1, [r7, #8]
 8002e60:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e62:	2300      	movs	r3, #0
 8002e64:	617b      	str	r3, [r7, #20]
 8002e66:	e009      	b.n	8002e7c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002e68:	68bb      	ldr	r3, [r7, #8]
 8002e6a:	1c5a      	adds	r2, r3, #1
 8002e6c:	60ba      	str	r2, [r7, #8]
 8002e6e:	781b      	ldrb	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	3301      	adds	r3, #1
 8002e7a:	617b      	str	r3, [r7, #20]
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	dbf1      	blt.n	8002e68 <_write+0x12>
	}
	return len;
 8002e84:	687b      	ldr	r3, [r7, #4]
}
 8002e86:	4618      	mov	r0, r3
 8002e88:	3718      	adds	r7, #24
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}

08002e8e <_close>:

int _close(int file)
{
 8002e8e:	b480      	push	{r7}
 8002e90:	b083      	sub	sp, #12
 8002e92:	af00      	add	r7, sp, #0
 8002e94:	6078      	str	r0, [r7, #4]
	return -1;
 8002e96:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	370c      	adds	r7, #12
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr

08002ea6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
 8002eae:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002eb6:	605a      	str	r2, [r3, #4]
	return 0;
 8002eb8:	2300      	movs	r3, #0
}
 8002eba:	4618      	mov	r0, r3
 8002ebc:	370c      	adds	r7, #12
 8002ebe:	46bd      	mov	sp, r7
 8002ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec4:	4770      	bx	lr

08002ec6 <_isatty>:

int _isatty(int file)
{
 8002ec6:	b480      	push	{r7}
 8002ec8:	b083      	sub	sp, #12
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	6078      	str	r0, [r7, #4]
	return 1;
 8002ece:	2301      	movs	r3, #1
}
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b085      	sub	sp, #20
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	60f8      	str	r0, [r7, #12]
 8002ee4:	60b9      	str	r1, [r7, #8]
 8002ee6:	607a      	str	r2, [r7, #4]
	return 0;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3714      	adds	r7, #20
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
	...

08002ef8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f00:	4a14      	ldr	r2, [pc, #80]	; (8002f54 <_sbrk+0x5c>)
 8002f02:	4b15      	ldr	r3, [pc, #84]	; (8002f58 <_sbrk+0x60>)
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002f0c:	4b13      	ldr	r3, [pc, #76]	; (8002f5c <_sbrk+0x64>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d102      	bne.n	8002f1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002f14:	4b11      	ldr	r3, [pc, #68]	; (8002f5c <_sbrk+0x64>)
 8002f16:	4a12      	ldr	r2, [pc, #72]	; (8002f60 <_sbrk+0x68>)
 8002f18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002f1a:	4b10      	ldr	r3, [pc, #64]	; (8002f5c <_sbrk+0x64>)
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4413      	add	r3, r2
 8002f22:	693a      	ldr	r2, [r7, #16]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d207      	bcs.n	8002f38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002f28:	f007 faa8 	bl	800a47c <__errno>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	220c      	movs	r2, #12
 8002f30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002f32:	f04f 33ff 	mov.w	r3, #4294967295
 8002f36:	e009      	b.n	8002f4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002f38:	4b08      	ldr	r3, [pc, #32]	; (8002f5c <_sbrk+0x64>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002f3e:	4b07      	ldr	r3, [pc, #28]	; (8002f5c <_sbrk+0x64>)
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4413      	add	r3, r2
 8002f46:	4a05      	ldr	r2, [pc, #20]	; (8002f5c <_sbrk+0x64>)
 8002f48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3718      	adds	r7, #24
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}
 8002f54:	20020000 	.word	0x20020000
 8002f58:	00000400 	.word	0x00000400
 8002f5c:	20000958 	.word	0x20000958
 8002f60:	200052c0 	.word	0x200052c0

08002f64 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002f64:	b480      	push	{r7}
 8002f66:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002f68:	4b06      	ldr	r3, [pc, #24]	; (8002f84 <SystemInit+0x20>)
 8002f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f6e:	4a05      	ldr	r2, [pc, #20]	; (8002f84 <SystemInit+0x20>)
 8002f70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002f78:	bf00      	nop
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	e000ed00 	.word	0xe000ed00

08002f88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002fc0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f8c:	480d      	ldr	r0, [pc, #52]	; (8002fc4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002f8e:	490e      	ldr	r1, [pc, #56]	; (8002fc8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002f90:	4a0e      	ldr	r2, [pc, #56]	; (8002fcc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002f92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f94:	e002      	b.n	8002f9c <LoopCopyDataInit>

08002f96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f9a:	3304      	adds	r3, #4

08002f9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002fa0:	d3f9      	bcc.n	8002f96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002fa2:	4a0b      	ldr	r2, [pc, #44]	; (8002fd0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002fa4:	4c0b      	ldr	r4, [pc, #44]	; (8002fd4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002fa6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002fa8:	e001      	b.n	8002fae <LoopFillZerobss>

08002faa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002faa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002fac:	3204      	adds	r2, #4

08002fae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002fae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002fb0:	d3fb      	bcc.n	8002faa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002fb2:	f7ff ffd7 	bl	8002f64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002fb6:	f007 fa67 	bl	800a488 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002fba:	f7fd ffe7 	bl	8000f8c <main>
  bx  lr    
 8002fbe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002fc0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002fc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002fc8:	2000021c 	.word	0x2000021c
  ldr r2, =_sidata
 8002fcc:	0800f150 	.word	0x0800f150
  ldr r2, =_sbss
 8002fd0:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8002fd4:	200052c0 	.word	0x200052c0

08002fd8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002fd8:	e7fe      	b.n	8002fd8 <ADC_IRQHandler>
	...

08002fdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002fdc:	b580      	push	{r7, lr}
 8002fde:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002fe0:	4b0e      	ldr	r3, [pc, #56]	; (800301c <HAL_Init+0x40>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	4a0d      	ldr	r2, [pc, #52]	; (800301c <HAL_Init+0x40>)
 8002fe6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002fea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002fec:	4b0b      	ldr	r3, [pc, #44]	; (800301c <HAL_Init+0x40>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a0a      	ldr	r2, [pc, #40]	; (800301c <HAL_Init+0x40>)
 8002ff2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002ff6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ff8:	4b08      	ldr	r3, [pc, #32]	; (800301c <HAL_Init+0x40>)
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a07      	ldr	r2, [pc, #28]	; (800301c <HAL_Init+0x40>)
 8002ffe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003002:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003004:	2003      	movs	r0, #3
 8003006:	f000 fd4f 	bl	8003aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800300a:	200f      	movs	r0, #15
 800300c:	f000 f808 	bl	8003020 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003010:	f7ff fc32 	bl	8002878 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003014:	2300      	movs	r3, #0
}
 8003016:	4618      	mov	r0, r3
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	40023c00 	.word	0x40023c00

08003020 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b082      	sub	sp, #8
 8003024:	af00      	add	r7, sp, #0
 8003026:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003028:	4b12      	ldr	r3, [pc, #72]	; (8003074 <HAL_InitTick+0x54>)
 800302a:	681a      	ldr	r2, [r3, #0]
 800302c:	4b12      	ldr	r3, [pc, #72]	; (8003078 <HAL_InitTick+0x58>)
 800302e:	781b      	ldrb	r3, [r3, #0]
 8003030:	4619      	mov	r1, r3
 8003032:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003036:	fbb3 f3f1 	udiv	r3, r3, r1
 800303a:	fbb2 f3f3 	udiv	r3, r2, r3
 800303e:	4618      	mov	r0, r3
 8003040:	f000 fd67 	bl	8003b12 <HAL_SYSTICK_Config>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d001      	beq.n	800304e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800304a:	2301      	movs	r3, #1
 800304c:	e00e      	b.n	800306c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2b0f      	cmp	r3, #15
 8003052:	d80a      	bhi.n	800306a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003054:	2200      	movs	r2, #0
 8003056:	6879      	ldr	r1, [r7, #4]
 8003058:	f04f 30ff 	mov.w	r0, #4294967295
 800305c:	f000 fd2f 	bl	8003abe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003060:	4a06      	ldr	r2, [pc, #24]	; (800307c <HAL_InitTick+0x5c>)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003066:	2300      	movs	r3, #0
 8003068:	e000      	b.n	800306c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800306a:	2301      	movs	r3, #1
}
 800306c:	4618      	mov	r0, r3
 800306e:	3708      	adds	r7, #8
 8003070:	46bd      	mov	sp, r7
 8003072:	bd80      	pop	{r7, pc}
 8003074:	2000003c 	.word	0x2000003c
 8003078:	20000044 	.word	0x20000044
 800307c:	20000040 	.word	0x20000040

08003080 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003080:	b480      	push	{r7}
 8003082:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003084:	4b06      	ldr	r3, [pc, #24]	; (80030a0 <HAL_IncTick+0x20>)
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	461a      	mov	r2, r3
 800308a:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <HAL_IncTick+0x24>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4413      	add	r3, r2
 8003090:	4a04      	ldr	r2, [pc, #16]	; (80030a4 <HAL_IncTick+0x24>)
 8003092:	6013      	str	r3, [r2, #0]
}
 8003094:	bf00      	nop
 8003096:	46bd      	mov	sp, r7
 8003098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309c:	4770      	bx	lr
 800309e:	bf00      	nop
 80030a0:	20000044 	.word	0x20000044
 80030a4:	2000095c 	.word	0x2000095c

080030a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80030a8:	b480      	push	{r7}
 80030aa:	af00      	add	r7, sp, #0
  return uwTick;
 80030ac:	4b03      	ldr	r3, [pc, #12]	; (80030bc <HAL_GetTick+0x14>)
 80030ae:	681b      	ldr	r3, [r3, #0]
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	2000095c 	.word	0x2000095c

080030c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b084      	sub	sp, #16
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80030c8:	f7ff ffee 	bl	80030a8 <HAL_GetTick>
 80030cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030d8:	d005      	beq.n	80030e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80030da:	4b0a      	ldr	r3, [pc, #40]	; (8003104 <HAL_Delay+0x44>)
 80030dc:	781b      	ldrb	r3, [r3, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	4413      	add	r3, r2
 80030e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80030e6:	bf00      	nop
 80030e8:	f7ff ffde 	bl	80030a8 <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	68fa      	ldr	r2, [r7, #12]
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d8f7      	bhi.n	80030e8 <HAL_Delay+0x28>
  {
  }
}
 80030f8:	bf00      	nop
 80030fa:	bf00      	nop
 80030fc:	3710      	adds	r7, #16
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	20000044 	.word	0x20000044

08003108 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003110:	2300      	movs	r3, #0
 8003112:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e033      	b.n	8003186 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003122:	2b00      	cmp	r3, #0
 8003124:	d109      	bne.n	800313a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f7ff fbd2 	bl	80028d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2200      	movs	r2, #0
 8003136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	f003 0310 	and.w	r3, r3, #16
 8003142:	2b00      	cmp	r3, #0
 8003144:	d118      	bne.n	8003178 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800314e:	f023 0302 	bic.w	r3, r3, #2
 8003152:	f043 0202 	orr.w	r2, r3, #2
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 fad8 	bl	8003710 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2200      	movs	r2, #0
 8003164:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316a:	f023 0303 	bic.w	r3, r3, #3
 800316e:	f043 0201 	orr.w	r2, r3, #1
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	641a      	str	r2, [r3, #64]	; 0x40
 8003176:	e001      	b.n	800317c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003178:	2301      	movs	r3, #1
 800317a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003184:	7bfb      	ldrb	r3, [r7, #15]
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
	...

08003190 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003198:	2300      	movs	r3, #0
 800319a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_ADC_Start+0x1a>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e0b2      	b.n	8003310 <HAL_ADC_Start+0x180>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	689b      	ldr	r3, [r3, #8]
 80031b8:	f003 0301 	and.w	r3, r3, #1
 80031bc:	2b01      	cmp	r3, #1
 80031be:	d018      	beq.n	80031f2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689a      	ldr	r2, [r3, #8]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f042 0201 	orr.w	r2, r2, #1
 80031ce:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80031d0:	4b52      	ldr	r3, [pc, #328]	; (800331c <HAL_ADC_Start+0x18c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4a52      	ldr	r2, [pc, #328]	; (8003320 <HAL_ADC_Start+0x190>)
 80031d6:	fba2 2303 	umull	r2, r3, r2, r3
 80031da:	0c9a      	lsrs	r2, r3, #18
 80031dc:	4613      	mov	r3, r2
 80031de:	005b      	lsls	r3, r3, #1
 80031e0:	4413      	add	r3, r2
 80031e2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80031e4:	e002      	b.n	80031ec <HAL_ADC_Start+0x5c>
    {
      counter--;
 80031e6:	68bb      	ldr	r3, [r7, #8]
 80031e8:	3b01      	subs	r3, #1
 80031ea:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d1f9      	bne.n	80031e6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	f003 0301 	and.w	r3, r3, #1
 80031fc:	2b01      	cmp	r3, #1
 80031fe:	d17a      	bne.n	80032f6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003204:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003208:	f023 0301 	bic.w	r3, r3, #1
 800320c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800321e:	2b00      	cmp	r3, #0
 8003220:	d007      	beq.n	8003232 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003226:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800322a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800323a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800323e:	d106      	bne.n	800324e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003244:	f023 0206 	bic.w	r2, r3, #6
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	645a      	str	r2, [r3, #68]	; 0x44
 800324c:	e002      	b.n	8003254 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	2200      	movs	r2, #0
 8003252:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2200      	movs	r2, #0
 8003258:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800325c:	4b31      	ldr	r3, [pc, #196]	; (8003324 <HAL_ADC_Start+0x194>)
 800325e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003268:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	f003 031f 	and.w	r3, r3, #31
 8003272:	2b00      	cmp	r3, #0
 8003274:	d12a      	bne.n	80032cc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a2b      	ldr	r2, [pc, #172]	; (8003328 <HAL_ADC_Start+0x198>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d015      	beq.n	80032ac <HAL_ADC_Start+0x11c>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	4a29      	ldr	r2, [pc, #164]	; (800332c <HAL_ADC_Start+0x19c>)
 8003286:	4293      	cmp	r3, r2
 8003288:	d105      	bne.n	8003296 <HAL_ADC_Start+0x106>
 800328a:	4b26      	ldr	r3, [pc, #152]	; (8003324 <HAL_ADC_Start+0x194>)
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f003 031f 	and.w	r3, r3, #31
 8003292:	2b00      	cmp	r3, #0
 8003294:	d00a      	beq.n	80032ac <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4a25      	ldr	r2, [pc, #148]	; (8003330 <HAL_ADC_Start+0x1a0>)
 800329c:	4293      	cmp	r3, r2
 800329e:	d136      	bne.n	800330e <HAL_ADC_Start+0x17e>
 80032a0:	4b20      	ldr	r3, [pc, #128]	; (8003324 <HAL_ADC_Start+0x194>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 0310 	and.w	r3, r3, #16
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d130      	bne.n	800330e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	689b      	ldr	r3, [r3, #8]
 80032b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d129      	bne.n	800330e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80032c8:	609a      	str	r2, [r3, #8]
 80032ca:	e020      	b.n	800330e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a15      	ldr	r2, [pc, #84]	; (8003328 <HAL_ADC_Start+0x198>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d11b      	bne.n	800330e <HAL_ADC_Start+0x17e>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d114      	bne.n	800330e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	689a      	ldr	r2, [r3, #8]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80032f2:	609a      	str	r2, [r3, #8]
 80032f4:	e00b      	b.n	800330e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032fa:	f043 0210 	orr.w	r2, r3, #16
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003306:	f043 0201 	orr.w	r2, r3, #1
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3714      	adds	r7, #20
 8003314:	46bd      	mov	sp, r7
 8003316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331a:	4770      	bx	lr
 800331c:	2000003c 	.word	0x2000003c
 8003320:	431bde83 	.word	0x431bde83
 8003324:	40012300 	.word	0x40012300
 8003328:	40012000 	.word	0x40012000
 800332c:	40012100 	.word	0x40012100
 8003330:	40012200 	.word	0x40012200

08003334 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8003334:	b480      	push	{r7}
 8003336:	b083      	sub	sp, #12
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003342:	2b01      	cmp	r3, #1
 8003344:	d101      	bne.n	800334a <HAL_ADC_Stop+0x16>
 8003346:	2302      	movs	r3, #2
 8003348:	e021      	b.n	800338e <HAL_ADC_Stop+0x5a>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2201      	movs	r2, #1
 800334e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	689a      	ldr	r2, [r3, #8]
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0201 	bic.w	r2, r2, #1
 8003360:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b00      	cmp	r3, #0
 800336e:	d109      	bne.n	8003384 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003374:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003378:	f023 0301 	bic.w	r3, r3, #1
 800337c:	f043 0201 	orr.w	r2, r3, #1
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2200      	movs	r2, #0
 8003388:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	370c      	adds	r7, #12
 8003392:	46bd      	mov	sp, r7
 8003394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003398:	4770      	bx	lr

0800339a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b084      	sub	sp, #16
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
 80033a2:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80033a4:	2300      	movs	r3, #0
 80033a6:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033b6:	d113      	bne.n	80033e0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	689b      	ldr	r3, [r3, #8]
 80033be:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80033c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80033c6:	d10b      	bne.n	80033e0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	f043 0220 	orr.w	r2, r3, #32
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e063      	b.n	80034a8 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80033e0:	f7ff fe62 	bl	80030a8 <HAL_GetTick>
 80033e4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80033e6:	e021      	b.n	800342c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033ee:	d01d      	beq.n	800342c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d007      	beq.n	8003406 <HAL_ADC_PollForConversion+0x6c>
 80033f6:	f7ff fe57 	bl	80030a8 <HAL_GetTick>
 80033fa:	4602      	mov	r2, r0
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	1ad3      	subs	r3, r2, r3
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d212      	bcs.n	800342c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b02      	cmp	r3, #2
 8003412:	d00b      	beq.n	800342c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003418:	f043 0204 	orr.w	r2, r3, #4
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2200      	movs	r2, #0
 8003424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e03d      	b.n	80034a8 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b02      	cmp	r3, #2
 8003438:	d1d6      	bne.n	80033e8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f06f 0212 	mvn.w	r2, #18
 8003442:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003448:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d123      	bne.n	80034a6 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003462:	2b00      	cmp	r3, #0
 8003464:	d11f      	bne.n	80034a6 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800346c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003470:	2b00      	cmp	r3, #0
 8003472:	d006      	beq.n	8003482 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800347e:	2b00      	cmp	r3, #0
 8003480:	d111      	bne.n	80034a6 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003486:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003492:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003496:	2b00      	cmp	r3, #0
 8003498:	d105      	bne.n	80034a6 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800349e:	f043 0201 	orr.w	r2, r3, #1
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80034a6:	2300      	movs	r3, #0
}
 80034a8:	4618      	mov	r0, r3
 80034aa:	3710      	adds	r7, #16
 80034ac:	46bd      	mov	sp, r7
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80034be:	4618      	mov	r0, r3
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
	...

080034cc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b085      	sub	sp, #20
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80034d6:	2300      	movs	r3, #0
 80034d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d101      	bne.n	80034e8 <HAL_ADC_ConfigChannel+0x1c>
 80034e4:	2302      	movs	r3, #2
 80034e6:	e105      	b.n	80036f4 <HAL_ADC_ConfigChannel+0x228>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2201      	movs	r2, #1
 80034ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	2b09      	cmp	r3, #9
 80034f6:	d925      	bls.n	8003544 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	68d9      	ldr	r1, [r3, #12]
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	b29b      	uxth	r3, r3
 8003504:	461a      	mov	r2, r3
 8003506:	4613      	mov	r3, r2
 8003508:	005b      	lsls	r3, r3, #1
 800350a:	4413      	add	r3, r2
 800350c:	3b1e      	subs	r3, #30
 800350e:	2207      	movs	r2, #7
 8003510:	fa02 f303 	lsl.w	r3, r2, r3
 8003514:	43da      	mvns	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	400a      	ands	r2, r1
 800351c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68d9      	ldr	r1, [r3, #12]
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	689a      	ldr	r2, [r3, #8]
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	b29b      	uxth	r3, r3
 800352e:	4618      	mov	r0, r3
 8003530:	4603      	mov	r3, r0
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	4403      	add	r3, r0
 8003536:	3b1e      	subs	r3, #30
 8003538:	409a      	lsls	r2, r3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	430a      	orrs	r2, r1
 8003540:	60da      	str	r2, [r3, #12]
 8003542:	e022      	b.n	800358a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6919      	ldr	r1, [r3, #16]
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	b29b      	uxth	r3, r3
 8003550:	461a      	mov	r2, r3
 8003552:	4613      	mov	r3, r2
 8003554:	005b      	lsls	r3, r3, #1
 8003556:	4413      	add	r3, r2
 8003558:	2207      	movs	r2, #7
 800355a:	fa02 f303 	lsl.w	r3, r2, r3
 800355e:	43da      	mvns	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	400a      	ands	r2, r1
 8003566:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	6919      	ldr	r1, [r3, #16]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	689a      	ldr	r2, [r3, #8]
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	b29b      	uxth	r3, r3
 8003578:	4618      	mov	r0, r3
 800357a:	4603      	mov	r3, r0
 800357c:	005b      	lsls	r3, r3, #1
 800357e:	4403      	add	r3, r0
 8003580:	409a      	lsls	r2, r3
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	2b06      	cmp	r3, #6
 8003590:	d824      	bhi.n	80035dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	4613      	mov	r3, r2
 800359e:	009b      	lsls	r3, r3, #2
 80035a0:	4413      	add	r3, r2
 80035a2:	3b05      	subs	r3, #5
 80035a4:	221f      	movs	r2, #31
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	43da      	mvns	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	400a      	ands	r2, r1
 80035b2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035ba:	683b      	ldr	r3, [r7, #0]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	b29b      	uxth	r3, r3
 80035c0:	4618      	mov	r0, r3
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	685a      	ldr	r2, [r3, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	009b      	lsls	r3, r3, #2
 80035ca:	4413      	add	r3, r2
 80035cc:	3b05      	subs	r3, #5
 80035ce:	fa00 f203 	lsl.w	r2, r0, r3
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	635a      	str	r2, [r3, #52]	; 0x34
 80035da:	e04c      	b.n	8003676 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	2b0c      	cmp	r3, #12
 80035e2:	d824      	bhi.n	800362e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035ea:	683b      	ldr	r3, [r7, #0]
 80035ec:	685a      	ldr	r2, [r3, #4]
 80035ee:	4613      	mov	r3, r2
 80035f0:	009b      	lsls	r3, r3, #2
 80035f2:	4413      	add	r3, r2
 80035f4:	3b23      	subs	r3, #35	; 0x23
 80035f6:	221f      	movs	r2, #31
 80035f8:	fa02 f303 	lsl.w	r3, r2, r3
 80035fc:	43da      	mvns	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	400a      	ands	r2, r1
 8003604:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800360c:	683b      	ldr	r3, [r7, #0]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	b29b      	uxth	r3, r3
 8003612:	4618      	mov	r0, r3
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	685a      	ldr	r2, [r3, #4]
 8003618:	4613      	mov	r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	4413      	add	r3, r2
 800361e:	3b23      	subs	r3, #35	; 0x23
 8003620:	fa00 f203 	lsl.w	r2, r0, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	430a      	orrs	r2, r1
 800362a:	631a      	str	r2, [r3, #48]	; 0x30
 800362c:	e023      	b.n	8003676 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685a      	ldr	r2, [r3, #4]
 8003638:	4613      	mov	r3, r2
 800363a:	009b      	lsls	r3, r3, #2
 800363c:	4413      	add	r3, r2
 800363e:	3b41      	subs	r3, #65	; 0x41
 8003640:	221f      	movs	r2, #31
 8003642:	fa02 f303 	lsl.w	r3, r2, r3
 8003646:	43da      	mvns	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	400a      	ands	r2, r1
 800364e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	b29b      	uxth	r3, r3
 800365c:	4618      	mov	r0, r3
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	4613      	mov	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	4413      	add	r3, r2
 8003668:	3b41      	subs	r3, #65	; 0x41
 800366a:	fa00 f203 	lsl.w	r2, r0, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	430a      	orrs	r2, r1
 8003674:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003676:	4b22      	ldr	r3, [pc, #136]	; (8003700 <HAL_ADC_ConfigChannel+0x234>)
 8003678:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	4a21      	ldr	r2, [pc, #132]	; (8003704 <HAL_ADC_ConfigChannel+0x238>)
 8003680:	4293      	cmp	r3, r2
 8003682:	d109      	bne.n	8003698 <HAL_ADC_ConfigChannel+0x1cc>
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2b12      	cmp	r3, #18
 800368a:	d105      	bne.n	8003698 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	4a19      	ldr	r2, [pc, #100]	; (8003704 <HAL_ADC_ConfigChannel+0x238>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	d123      	bne.n	80036ea <HAL_ADC_ConfigChannel+0x21e>
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2b10      	cmp	r3, #16
 80036a8:	d003      	beq.n	80036b2 <HAL_ADC_ConfigChannel+0x1e6>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	2b11      	cmp	r3, #17
 80036b0:	d11b      	bne.n	80036ea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	2b10      	cmp	r3, #16
 80036c4:	d111      	bne.n	80036ea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80036c6:	4b10      	ldr	r3, [pc, #64]	; (8003708 <HAL_ADC_ConfigChannel+0x23c>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	4a10      	ldr	r2, [pc, #64]	; (800370c <HAL_ADC_ConfigChannel+0x240>)
 80036cc:	fba2 2303 	umull	r2, r3, r2, r3
 80036d0:	0c9a      	lsrs	r2, r3, #18
 80036d2:	4613      	mov	r3, r2
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	4413      	add	r3, r2
 80036d8:	005b      	lsls	r3, r3, #1
 80036da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80036dc:	e002      	b.n	80036e4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	3b01      	subs	r3, #1
 80036e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d1f9      	bne.n	80036de <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2200      	movs	r2, #0
 80036ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3714      	adds	r7, #20
 80036f8:	46bd      	mov	sp, r7
 80036fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fe:	4770      	bx	lr
 8003700:	40012300 	.word	0x40012300
 8003704:	40012000 	.word	0x40012000
 8003708:	2000003c 	.word	0x2000003c
 800370c:	431bde83 	.word	0x431bde83

08003710 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003718:	4b79      	ldr	r3, [pc, #484]	; (8003900 <ADC_Init+0x1f0>)
 800371a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	685a      	ldr	r2, [r3, #4]
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	431a      	orrs	r2, r3
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	685a      	ldr	r2, [r3, #4]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003744:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6859      	ldr	r1, [r3, #4]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	021a      	lsls	r2, r3, #8
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003768:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	6859      	ldr	r1, [r3, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	689a      	ldr	r2, [r3, #8]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	430a      	orrs	r2, r1
 800377a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689a      	ldr	r2, [r3, #8]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800378a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	6899      	ldr	r1, [r3, #8]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	430a      	orrs	r2, r1
 800379c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a2:	4a58      	ldr	r2, [pc, #352]	; (8003904 <ADC_Init+0x1f4>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d022      	beq.n	80037ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	689a      	ldr	r2, [r3, #8]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	6899      	ldr	r1, [r3, #8]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689a      	ldr	r2, [r3, #8]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80037d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	6899      	ldr	r1, [r3, #8]
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	430a      	orrs	r2, r1
 80037ea:	609a      	str	r2, [r3, #8]
 80037ec:	e00f      	b.n	800380e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	689a      	ldr	r2, [r3, #8]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800380c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	689a      	ldr	r2, [r3, #8]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0202 	bic.w	r2, r2, #2
 800381c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	6899      	ldr	r1, [r3, #8]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	7e1b      	ldrb	r3, [r3, #24]
 8003828:	005a      	lsls	r2, r3, #1
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d01b      	beq.n	8003874 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800384a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	685a      	ldr	r2, [r3, #4]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800385a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6859      	ldr	r1, [r3, #4]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003866:	3b01      	subs	r3, #1
 8003868:	035a      	lsls	r2, r3, #13
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	430a      	orrs	r2, r1
 8003870:	605a      	str	r2, [r3, #4]
 8003872:	e007      	b.n	8003884 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003882:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003892:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	3b01      	subs	r3, #1
 80038a0:	051a      	lsls	r2, r3, #20
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	6899      	ldr	r1, [r3, #8]
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038c6:	025a      	lsls	r2, r3, #9
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	430a      	orrs	r2, r1
 80038ce:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	689a      	ldr	r2, [r3, #8]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	6899      	ldr	r1, [r3, #8]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	695b      	ldr	r3, [r3, #20]
 80038ea:	029a      	lsls	r2, r3, #10
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	430a      	orrs	r2, r1
 80038f2:	609a      	str	r2, [r3, #8]
}
 80038f4:	bf00      	nop
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	40012300 	.word	0x40012300
 8003904:	0f000001 	.word	0x0f000001

08003908 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003908:	b480      	push	{r7}
 800390a:	b085      	sub	sp, #20
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	f003 0307 	and.w	r3, r3, #7
 8003916:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003918:	4b0c      	ldr	r3, [pc, #48]	; (800394c <__NVIC_SetPriorityGrouping+0x44>)
 800391a:	68db      	ldr	r3, [r3, #12]
 800391c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800391e:	68ba      	ldr	r2, [r7, #8]
 8003920:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003924:	4013      	ands	r3, r2
 8003926:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800392c:	68bb      	ldr	r3, [r7, #8]
 800392e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003930:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003934:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003938:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800393a:	4a04      	ldr	r2, [pc, #16]	; (800394c <__NVIC_SetPriorityGrouping+0x44>)
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	60d3      	str	r3, [r2, #12]
}
 8003940:	bf00      	nop
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	e000ed00 	.word	0xe000ed00

08003950 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003950:	b480      	push	{r7}
 8003952:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003954:	4b04      	ldr	r3, [pc, #16]	; (8003968 <__NVIC_GetPriorityGrouping+0x18>)
 8003956:	68db      	ldr	r3, [r3, #12]
 8003958:	0a1b      	lsrs	r3, r3, #8
 800395a:	f003 0307 	and.w	r3, r3, #7
}
 800395e:	4618      	mov	r0, r3
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	e000ed00 	.word	0xe000ed00

0800396c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800396c:	b480      	push	{r7}
 800396e:	b083      	sub	sp, #12
 8003970:	af00      	add	r7, sp, #0
 8003972:	4603      	mov	r3, r0
 8003974:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397a:	2b00      	cmp	r3, #0
 800397c:	db0b      	blt.n	8003996 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800397e:	79fb      	ldrb	r3, [r7, #7]
 8003980:	f003 021f 	and.w	r2, r3, #31
 8003984:	4907      	ldr	r1, [pc, #28]	; (80039a4 <__NVIC_EnableIRQ+0x38>)
 8003986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800398a:	095b      	lsrs	r3, r3, #5
 800398c:	2001      	movs	r0, #1
 800398e:	fa00 f202 	lsl.w	r2, r0, r2
 8003992:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
 80039a2:	bf00      	nop
 80039a4:	e000e100 	.word	0xe000e100

080039a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b083      	sub	sp, #12
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	4603      	mov	r3, r0
 80039b0:	6039      	str	r1, [r7, #0]
 80039b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	db0a      	blt.n	80039d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	b2da      	uxtb	r2, r3
 80039c0:	490c      	ldr	r1, [pc, #48]	; (80039f4 <__NVIC_SetPriority+0x4c>)
 80039c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039c6:	0112      	lsls	r2, r2, #4
 80039c8:	b2d2      	uxtb	r2, r2
 80039ca:	440b      	add	r3, r1
 80039cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80039d0:	e00a      	b.n	80039e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	b2da      	uxtb	r2, r3
 80039d6:	4908      	ldr	r1, [pc, #32]	; (80039f8 <__NVIC_SetPriority+0x50>)
 80039d8:	79fb      	ldrb	r3, [r7, #7]
 80039da:	f003 030f 	and.w	r3, r3, #15
 80039de:	3b04      	subs	r3, #4
 80039e0:	0112      	lsls	r2, r2, #4
 80039e2:	b2d2      	uxtb	r2, r2
 80039e4:	440b      	add	r3, r1
 80039e6:	761a      	strb	r2, [r3, #24]
}
 80039e8:	bf00      	nop
 80039ea:	370c      	adds	r7, #12
 80039ec:	46bd      	mov	sp, r7
 80039ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f2:	4770      	bx	lr
 80039f4:	e000e100 	.word	0xe000e100
 80039f8:	e000ed00 	.word	0xe000ed00

080039fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039fc:	b480      	push	{r7}
 80039fe:	b089      	sub	sp, #36	; 0x24
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f003 0307 	and.w	r3, r3, #7
 8003a0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	f1c3 0307 	rsb	r3, r3, #7
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	bf28      	it	cs
 8003a1a:	2304      	movcs	r3, #4
 8003a1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	3304      	adds	r3, #4
 8003a22:	2b06      	cmp	r3, #6
 8003a24:	d902      	bls.n	8003a2c <NVIC_EncodePriority+0x30>
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	3b03      	subs	r3, #3
 8003a2a:	e000      	b.n	8003a2e <NVIC_EncodePriority+0x32>
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a30:	f04f 32ff 	mov.w	r2, #4294967295
 8003a34:	69bb      	ldr	r3, [r7, #24]
 8003a36:	fa02 f303 	lsl.w	r3, r2, r3
 8003a3a:	43da      	mvns	r2, r3
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	401a      	ands	r2, r3
 8003a40:	697b      	ldr	r3, [r7, #20]
 8003a42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a44:	f04f 31ff 	mov.w	r1, #4294967295
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4e:	43d9      	mvns	r1, r3
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a54:	4313      	orrs	r3, r2
         );
}
 8003a56:	4618      	mov	r0, r3
 8003a58:	3724      	adds	r7, #36	; 0x24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
	...

08003a64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b082      	sub	sp, #8
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003a74:	d301      	bcc.n	8003a7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003a76:	2301      	movs	r3, #1
 8003a78:	e00f      	b.n	8003a9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003a7a:	4a0a      	ldr	r2, [pc, #40]	; (8003aa4 <SysTick_Config+0x40>)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003a82:	210f      	movs	r1, #15
 8003a84:	f04f 30ff 	mov.w	r0, #4294967295
 8003a88:	f7ff ff8e 	bl	80039a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003a8c:	4b05      	ldr	r3, [pc, #20]	; (8003aa4 <SysTick_Config+0x40>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003a92:	4b04      	ldr	r3, [pc, #16]	; (8003aa4 <SysTick_Config+0x40>)
 8003a94:	2207      	movs	r2, #7
 8003a96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003a98:	2300      	movs	r3, #0
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	e000e010 	.word	0xe000e010

08003aa8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f7ff ff29 	bl	8003908 <__NVIC_SetPriorityGrouping>
}
 8003ab6:	bf00      	nop
 8003ab8:	3708      	adds	r7, #8
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bd80      	pop	{r7, pc}

08003abe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b086      	sub	sp, #24
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	60b9      	str	r1, [r7, #8]
 8003ac8:	607a      	str	r2, [r7, #4]
 8003aca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ad0:	f7ff ff3e 	bl	8003950 <__NVIC_GetPriorityGrouping>
 8003ad4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	68b9      	ldr	r1, [r7, #8]
 8003ada:	6978      	ldr	r0, [r7, #20]
 8003adc:	f7ff ff8e 	bl	80039fc <NVIC_EncodePriority>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ae6:	4611      	mov	r1, r2
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f7ff ff5d 	bl	80039a8 <__NVIC_SetPriority>
}
 8003aee:	bf00      	nop
 8003af0:	3718      	adds	r7, #24
 8003af2:	46bd      	mov	sp, r7
 8003af4:	bd80      	pop	{r7, pc}

08003af6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b082      	sub	sp, #8
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	4603      	mov	r3, r0
 8003afe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003b00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b04:	4618      	mov	r0, r3
 8003b06:	f7ff ff31 	bl	800396c <__NVIC_EnableIRQ>
}
 8003b0a:	bf00      	nop
 8003b0c:	3708      	adds	r7, #8
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003b12:	b580      	push	{r7, lr}
 8003b14:	b082      	sub	sp, #8
 8003b16:	af00      	add	r7, sp, #0
 8003b18:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7ff ffa2 	bl	8003a64 <SysTick_Config>
 8003b20:	4603      	mov	r3, r0
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
	...

08003b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b089      	sub	sp, #36	; 0x24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b42:	2300      	movs	r3, #0
 8003b44:	61fb      	str	r3, [r7, #28]
 8003b46:	e16b      	b.n	8003e20 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003b48:	2201      	movs	r2, #1
 8003b4a:	69fb      	ldr	r3, [r7, #28]
 8003b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b52:	683b      	ldr	r3, [r7, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	697a      	ldr	r2, [r7, #20]
 8003b58:	4013      	ands	r3, r2
 8003b5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003b5c:	693a      	ldr	r2, [r7, #16]
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	429a      	cmp	r2, r3
 8003b62:	f040 815a 	bne.w	8003e1a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f003 0303 	and.w	r3, r3, #3
 8003b6e:	2b01      	cmp	r3, #1
 8003b70:	d005      	beq.n	8003b7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003b7a:	2b02      	cmp	r3, #2
 8003b7c:	d130      	bne.n	8003be0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	005b      	lsls	r3, r3, #1
 8003b88:	2203      	movs	r2, #3
 8003b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b8e:	43db      	mvns	r3, r3
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	4013      	ands	r3, r2
 8003b94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68da      	ldr	r2, [r3, #12]
 8003b9a:	69fb      	ldr	r3, [r7, #28]
 8003b9c:	005b      	lsls	r3, r3, #1
 8003b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	69ba      	ldr	r2, [r7, #24]
 8003bac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	69fb      	ldr	r3, [r7, #28]
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	43db      	mvns	r3, r3
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	4013      	ands	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	091b      	lsrs	r3, r3, #4
 8003bca:	f003 0201 	and.w	r2, r3, #1
 8003bce:	69fb      	ldr	r3, [r7, #28]
 8003bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003bd4:	69ba      	ldr	r2, [r7, #24]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f003 0303 	and.w	r3, r3, #3
 8003be8:	2b03      	cmp	r3, #3
 8003bea:	d017      	beq.n	8003c1c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	2203      	movs	r2, #3
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	4013      	ands	r3, r2
 8003c02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	69fb      	ldr	r3, [r7, #28]
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	69ba      	ldr	r2, [r7, #24]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f003 0303 	and.w	r3, r3, #3
 8003c24:	2b02      	cmp	r3, #2
 8003c26:	d123      	bne.n	8003c70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003c28:	69fb      	ldr	r3, [r7, #28]
 8003c2a:	08da      	lsrs	r2, r3, #3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3208      	adds	r2, #8
 8003c30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003c36:	69fb      	ldr	r3, [r7, #28]
 8003c38:	f003 0307 	and.w	r3, r3, #7
 8003c3c:	009b      	lsls	r3, r3, #2
 8003c3e:	220f      	movs	r2, #15
 8003c40:	fa02 f303 	lsl.w	r3, r2, r3
 8003c44:	43db      	mvns	r3, r3
 8003c46:	69ba      	ldr	r2, [r7, #24]
 8003c48:	4013      	ands	r3, r2
 8003c4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	fa02 f303 	lsl.w	r3, r2, r3
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003c62:	69fb      	ldr	r3, [r7, #28]
 8003c64:	08da      	lsrs	r2, r3, #3
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3208      	adds	r2, #8
 8003c6a:	69b9      	ldr	r1, [r7, #24]
 8003c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003c76:	69fb      	ldr	r3, [r7, #28]
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	2203      	movs	r2, #3
 8003c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c80:	43db      	mvns	r3, r3
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	4013      	ands	r3, r2
 8003c86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	f003 0203 	and.w	r2, r3, #3
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	005b      	lsls	r3, r3, #1
 8003c94:	fa02 f303 	lsl.w	r3, r2, r3
 8003c98:	69ba      	ldr	r2, [r7, #24]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	69ba      	ldr	r2, [r7, #24]
 8003ca2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 80b4 	beq.w	8003e1a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	60fb      	str	r3, [r7, #12]
 8003cb6:	4b60      	ldr	r3, [pc, #384]	; (8003e38 <HAL_GPIO_Init+0x30c>)
 8003cb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cba:	4a5f      	ldr	r2, [pc, #380]	; (8003e38 <HAL_GPIO_Init+0x30c>)
 8003cbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cc0:	6453      	str	r3, [r2, #68]	; 0x44
 8003cc2:	4b5d      	ldr	r3, [pc, #372]	; (8003e38 <HAL_GPIO_Init+0x30c>)
 8003cc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003cce:	4a5b      	ldr	r2, [pc, #364]	; (8003e3c <HAL_GPIO_Init+0x310>)
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	089b      	lsrs	r3, r3, #2
 8003cd4:	3302      	adds	r3, #2
 8003cd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	220f      	movs	r2, #15
 8003ce6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cea:	43db      	mvns	r3, r3
 8003cec:	69ba      	ldr	r2, [r7, #24]
 8003cee:	4013      	ands	r3, r2
 8003cf0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a52      	ldr	r2, [pc, #328]	; (8003e40 <HAL_GPIO_Init+0x314>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d02b      	beq.n	8003d52 <HAL_GPIO_Init+0x226>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a51      	ldr	r2, [pc, #324]	; (8003e44 <HAL_GPIO_Init+0x318>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d025      	beq.n	8003d4e <HAL_GPIO_Init+0x222>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a50      	ldr	r2, [pc, #320]	; (8003e48 <HAL_GPIO_Init+0x31c>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d01f      	beq.n	8003d4a <HAL_GPIO_Init+0x21e>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	4a4f      	ldr	r2, [pc, #316]	; (8003e4c <HAL_GPIO_Init+0x320>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d019      	beq.n	8003d46 <HAL_GPIO_Init+0x21a>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a4e      	ldr	r2, [pc, #312]	; (8003e50 <HAL_GPIO_Init+0x324>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d013      	beq.n	8003d42 <HAL_GPIO_Init+0x216>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a4d      	ldr	r2, [pc, #308]	; (8003e54 <HAL_GPIO_Init+0x328>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d00d      	beq.n	8003d3e <HAL_GPIO_Init+0x212>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a4c      	ldr	r2, [pc, #304]	; (8003e58 <HAL_GPIO_Init+0x32c>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d007      	beq.n	8003d3a <HAL_GPIO_Init+0x20e>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a4b      	ldr	r2, [pc, #300]	; (8003e5c <HAL_GPIO_Init+0x330>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d101      	bne.n	8003d36 <HAL_GPIO_Init+0x20a>
 8003d32:	2307      	movs	r3, #7
 8003d34:	e00e      	b.n	8003d54 <HAL_GPIO_Init+0x228>
 8003d36:	2308      	movs	r3, #8
 8003d38:	e00c      	b.n	8003d54 <HAL_GPIO_Init+0x228>
 8003d3a:	2306      	movs	r3, #6
 8003d3c:	e00a      	b.n	8003d54 <HAL_GPIO_Init+0x228>
 8003d3e:	2305      	movs	r3, #5
 8003d40:	e008      	b.n	8003d54 <HAL_GPIO_Init+0x228>
 8003d42:	2304      	movs	r3, #4
 8003d44:	e006      	b.n	8003d54 <HAL_GPIO_Init+0x228>
 8003d46:	2303      	movs	r3, #3
 8003d48:	e004      	b.n	8003d54 <HAL_GPIO_Init+0x228>
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	e002      	b.n	8003d54 <HAL_GPIO_Init+0x228>
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e000      	b.n	8003d54 <HAL_GPIO_Init+0x228>
 8003d52:	2300      	movs	r3, #0
 8003d54:	69fa      	ldr	r2, [r7, #28]
 8003d56:	f002 0203 	and.w	r2, r2, #3
 8003d5a:	0092      	lsls	r2, r2, #2
 8003d5c:	4093      	lsls	r3, r2
 8003d5e:	69ba      	ldr	r2, [r7, #24]
 8003d60:	4313      	orrs	r3, r2
 8003d62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003d64:	4935      	ldr	r1, [pc, #212]	; (8003e3c <HAL_GPIO_Init+0x310>)
 8003d66:	69fb      	ldr	r3, [r7, #28]
 8003d68:	089b      	lsrs	r3, r3, #2
 8003d6a:	3302      	adds	r3, #2
 8003d6c:	69ba      	ldr	r2, [r7, #24]
 8003d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003d72:	4b3b      	ldr	r3, [pc, #236]	; (8003e60 <HAL_GPIO_Init+0x334>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	43db      	mvns	r3, r3
 8003d7c:	69ba      	ldr	r2, [r7, #24]
 8003d7e:	4013      	ands	r3, r2
 8003d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d003      	beq.n	8003d96 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003d8e:	69ba      	ldr	r2, [r7, #24]
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	4313      	orrs	r3, r2
 8003d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003d96:	4a32      	ldr	r2, [pc, #200]	; (8003e60 <HAL_GPIO_Init+0x334>)
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003d9c:	4b30      	ldr	r3, [pc, #192]	; (8003e60 <HAL_GPIO_Init+0x334>)
 8003d9e:	68db      	ldr	r3, [r3, #12]
 8003da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	43db      	mvns	r3, r3
 8003da6:	69ba      	ldr	r2, [r7, #24]
 8003da8:	4013      	ands	r3, r2
 8003daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d003      	beq.n	8003dc0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003db8:	69ba      	ldr	r2, [r7, #24]
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003dc0:	4a27      	ldr	r2, [pc, #156]	; (8003e60 <HAL_GPIO_Init+0x334>)
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003dc6:	4b26      	ldr	r3, [pc, #152]	; (8003e60 <HAL_GPIO_Init+0x334>)
 8003dc8:	685b      	ldr	r3, [r3, #4]
 8003dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003dcc:	693b      	ldr	r3, [r7, #16]
 8003dce:	43db      	mvns	r3, r3
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	4013      	ands	r3, r2
 8003dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685b      	ldr	r3, [r3, #4]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d003      	beq.n	8003dea <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003de2:	69ba      	ldr	r2, [r7, #24]
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003dea:	4a1d      	ldr	r2, [pc, #116]	; (8003e60 <HAL_GPIO_Init+0x334>)
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003df0:	4b1b      	ldr	r3, [pc, #108]	; (8003e60 <HAL_GPIO_Init+0x334>)
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	43db      	mvns	r3, r3
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	4013      	ands	r3, r2
 8003dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003e00:	683b      	ldr	r3, [r7, #0]
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d003      	beq.n	8003e14 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003e0c:	69ba      	ldr	r2, [r7, #24]
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e14:	4a12      	ldr	r2, [pc, #72]	; (8003e60 <HAL_GPIO_Init+0x334>)
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	3301      	adds	r3, #1
 8003e1e:	61fb      	str	r3, [r7, #28]
 8003e20:	69fb      	ldr	r3, [r7, #28]
 8003e22:	2b0f      	cmp	r3, #15
 8003e24:	f67f ae90 	bls.w	8003b48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003e28:	bf00      	nop
 8003e2a:	bf00      	nop
 8003e2c:	3724      	adds	r7, #36	; 0x24
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e34:	4770      	bx	lr
 8003e36:	bf00      	nop
 8003e38:	40023800 	.word	0x40023800
 8003e3c:	40013800 	.word	0x40013800
 8003e40:	40020000 	.word	0x40020000
 8003e44:	40020400 	.word	0x40020400
 8003e48:	40020800 	.word	0x40020800
 8003e4c:	40020c00 	.word	0x40020c00
 8003e50:	40021000 	.word	0x40021000
 8003e54:	40021400 	.word	0x40021400
 8003e58:	40021800 	.word	0x40021800
 8003e5c:	40021c00 	.word	0x40021c00
 8003e60:	40013c00 	.word	0x40013c00

08003e64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	807b      	strh	r3, [r7, #2]
 8003e70:	4613      	mov	r3, r2
 8003e72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003e74:	787b      	ldrb	r3, [r7, #1]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e7a:	887a      	ldrh	r2, [r7, #2]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003e80:	e003      	b.n	8003e8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003e82:	887b      	ldrh	r3, [r7, #2]
 8003e84:	041a      	lsls	r2, r3, #16
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	619a      	str	r2, [r3, #24]
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b085      	sub	sp, #20
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
 8003e9e:	460b      	mov	r3, r1
 8003ea0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	695b      	ldr	r3, [r3, #20]
 8003ea6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ea8:	887a      	ldrh	r2, [r7, #2]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	4013      	ands	r3, r2
 8003eae:	041a      	lsls	r2, r3, #16
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	43d9      	mvns	r1, r3
 8003eb4:	887b      	ldrh	r3, [r7, #2]
 8003eb6:	400b      	ands	r3, r1
 8003eb8:	431a      	orrs	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	619a      	str	r2, [r3, #24]
}
 8003ebe:	bf00      	nop
 8003ec0:	3714      	adds	r7, #20
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr
	...

08003ecc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d101      	bne.n	8003ede <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003eda:	2301      	movs	r3, #1
 8003edc:	e12b      	b.n	8004136 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d106      	bne.n	8003ef8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7fe fd30 	bl	8002958 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2224      	movs	r2, #36	; 0x24
 8003efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	681a      	ldr	r2, [r3, #0]
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f022 0201 	bic.w	r2, r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681a      	ldr	r2, [r3, #0]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003f1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003f30:	f001 fbba 	bl	80056a8 <HAL_RCC_GetPCLK1Freq>
 8003f34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	4a81      	ldr	r2, [pc, #516]	; (8004140 <HAL_I2C_Init+0x274>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d807      	bhi.n	8003f50 <HAL_I2C_Init+0x84>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	4a80      	ldr	r2, [pc, #512]	; (8004144 <HAL_I2C_Init+0x278>)
 8003f44:	4293      	cmp	r3, r2
 8003f46:	bf94      	ite	ls
 8003f48:	2301      	movls	r3, #1
 8003f4a:	2300      	movhi	r3, #0
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	e006      	b.n	8003f5e <HAL_I2C_Init+0x92>
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	4a7d      	ldr	r2, [pc, #500]	; (8004148 <HAL_I2C_Init+0x27c>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	bf94      	ite	ls
 8003f58:	2301      	movls	r3, #1
 8003f5a:	2300      	movhi	r3, #0
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003f62:	2301      	movs	r3, #1
 8003f64:	e0e7      	b.n	8004136 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	4a78      	ldr	r2, [pc, #480]	; (800414c <HAL_I2C_Init+0x280>)
 8003f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f6e:	0c9b      	lsrs	r3, r3, #18
 8003f70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	6a1b      	ldr	r3, [r3, #32]
 8003f8c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	4a6a      	ldr	r2, [pc, #424]	; (8004140 <HAL_I2C_Init+0x274>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d802      	bhi.n	8003fa0 <HAL_I2C_Init+0xd4>
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	3301      	adds	r3, #1
 8003f9e:	e009      	b.n	8003fb4 <HAL_I2C_Init+0xe8>
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003fa6:	fb02 f303 	mul.w	r3, r2, r3
 8003faa:	4a69      	ldr	r2, [pc, #420]	; (8004150 <HAL_I2C_Init+0x284>)
 8003fac:	fba2 2303 	umull	r2, r3, r2, r3
 8003fb0:	099b      	lsrs	r3, r3, #6
 8003fb2:	3301      	adds	r3, #1
 8003fb4:	687a      	ldr	r2, [r7, #4]
 8003fb6:	6812      	ldr	r2, [r2, #0]
 8003fb8:	430b      	orrs	r3, r1
 8003fba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	69db      	ldr	r3, [r3, #28]
 8003fc2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003fc6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	495c      	ldr	r1, [pc, #368]	; (8004140 <HAL_I2C_Init+0x274>)
 8003fd0:	428b      	cmp	r3, r1
 8003fd2:	d819      	bhi.n	8004008 <HAL_I2C_Init+0x13c>
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	1e59      	subs	r1, r3, #1
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	fbb1 f3f3 	udiv	r3, r1, r3
 8003fe2:	1c59      	adds	r1, r3, #1
 8003fe4:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003fe8:	400b      	ands	r3, r1
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00a      	beq.n	8004004 <HAL_I2C_Init+0x138>
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	1e59      	subs	r1, r3, #1
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685b      	ldr	r3, [r3, #4]
 8003ff6:	005b      	lsls	r3, r3, #1
 8003ff8:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004002:	e051      	b.n	80040a8 <HAL_I2C_Init+0x1dc>
 8004004:	2304      	movs	r3, #4
 8004006:	e04f      	b.n	80040a8 <HAL_I2C_Init+0x1dc>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	2b00      	cmp	r3, #0
 800400e:	d111      	bne.n	8004034 <HAL_I2C_Init+0x168>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	1e58      	subs	r0, r3, #1
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6859      	ldr	r1, [r3, #4]
 8004018:	460b      	mov	r3, r1
 800401a:	005b      	lsls	r3, r3, #1
 800401c:	440b      	add	r3, r1
 800401e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004022:	3301      	adds	r3, #1
 8004024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004028:	2b00      	cmp	r3, #0
 800402a:	bf0c      	ite	eq
 800402c:	2301      	moveq	r3, #1
 800402e:	2300      	movne	r3, #0
 8004030:	b2db      	uxtb	r3, r3
 8004032:	e012      	b.n	800405a <HAL_I2C_Init+0x18e>
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	1e58      	subs	r0, r3, #1
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6859      	ldr	r1, [r3, #4]
 800403c:	460b      	mov	r3, r1
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	440b      	add	r3, r1
 8004042:	0099      	lsls	r1, r3, #2
 8004044:	440b      	add	r3, r1
 8004046:	fbb0 f3f3 	udiv	r3, r0, r3
 800404a:	3301      	adds	r3, #1
 800404c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004050:	2b00      	cmp	r3, #0
 8004052:	bf0c      	ite	eq
 8004054:	2301      	moveq	r3, #1
 8004056:	2300      	movne	r3, #0
 8004058:	b2db      	uxtb	r3, r3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <HAL_I2C_Init+0x196>
 800405e:	2301      	movs	r3, #1
 8004060:	e022      	b.n	80040a8 <HAL_I2C_Init+0x1dc>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10e      	bne.n	8004088 <HAL_I2C_Init+0x1bc>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	1e58      	subs	r0, r3, #1
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6859      	ldr	r1, [r3, #4]
 8004072:	460b      	mov	r3, r1
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	440b      	add	r3, r1
 8004078:	fbb0 f3f3 	udiv	r3, r0, r3
 800407c:	3301      	adds	r3, #1
 800407e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004082:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004086:	e00f      	b.n	80040a8 <HAL_I2C_Init+0x1dc>
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	1e58      	subs	r0, r3, #1
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6859      	ldr	r1, [r3, #4]
 8004090:	460b      	mov	r3, r1
 8004092:	009b      	lsls	r3, r3, #2
 8004094:	440b      	add	r3, r1
 8004096:	0099      	lsls	r1, r3, #2
 8004098:	440b      	add	r3, r1
 800409a:	fbb0 f3f3 	udiv	r3, r0, r3
 800409e:	3301      	adds	r3, #1
 80040a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80040a8:	6879      	ldr	r1, [r7, #4]
 80040aa:	6809      	ldr	r1, [r1, #0]
 80040ac:	4313      	orrs	r3, r2
 80040ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	69da      	ldr	r2, [r3, #28]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	431a      	orrs	r2, r3
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	430a      	orrs	r2, r1
 80040ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	689b      	ldr	r3, [r3, #8]
 80040d2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80040d6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	6911      	ldr	r1, [r2, #16]
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	68d2      	ldr	r2, [r2, #12]
 80040e2:	4311      	orrs	r1, r2
 80040e4:	687a      	ldr	r2, [r7, #4]
 80040e6:	6812      	ldr	r2, [r2, #0]
 80040e8:	430b      	orrs	r3, r1
 80040ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	695a      	ldr	r2, [r3, #20]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	699b      	ldr	r3, [r3, #24]
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	430a      	orrs	r2, r1
 8004106:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	681a      	ldr	r2, [r3, #0]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f042 0201 	orr.w	r2, r2, #1
 8004116:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	2220      	movs	r2, #32
 8004122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2200      	movs	r2, #0
 8004130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	000186a0 	.word	0x000186a0
 8004144:	001e847f 	.word	0x001e847f
 8004148:	003d08ff 	.word	0x003d08ff
 800414c:	431bde83 	.word	0x431bde83
 8004150:	10624dd3 	.word	0x10624dd3

08004154 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b088      	sub	sp, #32
 8004158:	af02      	add	r7, sp, #8
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	607a      	str	r2, [r7, #4]
 800415e:	461a      	mov	r2, r3
 8004160:	460b      	mov	r3, r1
 8004162:	817b      	strh	r3, [r7, #10]
 8004164:	4613      	mov	r3, r2
 8004166:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004168:	f7fe ff9e 	bl	80030a8 <HAL_GetTick>
 800416c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b20      	cmp	r3, #32
 8004178:	f040 80e0 	bne.w	800433c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	9300      	str	r3, [sp, #0]
 8004180:	2319      	movs	r3, #25
 8004182:	2201      	movs	r2, #1
 8004184:	4970      	ldr	r1, [pc, #448]	; (8004348 <HAL_I2C_Master_Transmit+0x1f4>)
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 fc58 	bl	8004a3c <I2C_WaitOnFlagUntilTimeout>
 800418c:	4603      	mov	r3, r0
 800418e:	2b00      	cmp	r3, #0
 8004190:	d001      	beq.n	8004196 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004192:	2302      	movs	r3, #2
 8004194:	e0d3      	b.n	800433e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800419c:	2b01      	cmp	r3, #1
 800419e:	d101      	bne.n	80041a4 <HAL_I2C_Master_Transmit+0x50>
 80041a0:	2302      	movs	r3, #2
 80041a2:	e0cc      	b.n	800433e <HAL_I2C_Master_Transmit+0x1ea>
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d007      	beq.n	80041ca <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f042 0201 	orr.w	r2, r2, #1
 80041c8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	681a      	ldr	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041d8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2221      	movs	r2, #33	; 0x21
 80041de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2210      	movs	r2, #16
 80041e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	893a      	ldrh	r2, [r7, #8]
 80041fa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004200:	b29a      	uxth	r2, r3
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	4a50      	ldr	r2, [pc, #320]	; (800434c <HAL_I2C_Master_Transmit+0x1f8>)
 800420a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800420c:	8979      	ldrh	r1, [r7, #10]
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	6a3a      	ldr	r2, [r7, #32]
 8004212:	68f8      	ldr	r0, [r7, #12]
 8004214:	f000 fac2 	bl	800479c <I2C_MasterRequestWrite>
 8004218:	4603      	mov	r3, r0
 800421a:	2b00      	cmp	r3, #0
 800421c:	d001      	beq.n	8004222 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	e08d      	b.n	800433e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004222:	2300      	movs	r3, #0
 8004224:	613b      	str	r3, [r7, #16]
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	695b      	ldr	r3, [r3, #20]
 800422c:	613b      	str	r3, [r7, #16]
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	699b      	ldr	r3, [r3, #24]
 8004234:	613b      	str	r3, [r7, #16]
 8004236:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004238:	e066      	b.n	8004308 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	6a39      	ldr	r1, [r7, #32]
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 fcd2 	bl	8004be8 <I2C_WaitOnTXEFlagUntilTimeout>
 8004244:	4603      	mov	r3, r0
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00d      	beq.n	8004266 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424e:	2b04      	cmp	r3, #4
 8004250:	d107      	bne.n	8004262 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	681a      	ldr	r2, [r3, #0]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004260:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004262:	2301      	movs	r3, #1
 8004264:	e06b      	b.n	800433e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426a:	781a      	ldrb	r2, [r3, #0]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004276:	1c5a      	adds	r2, r3, #1
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004280:	b29b      	uxth	r3, r3
 8004282:	3b01      	subs	r3, #1
 8004284:	b29a      	uxth	r2, r3
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800428e:	3b01      	subs	r3, #1
 8004290:	b29a      	uxth	r2, r3
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	695b      	ldr	r3, [r3, #20]
 800429c:	f003 0304 	and.w	r3, r3, #4
 80042a0:	2b04      	cmp	r3, #4
 80042a2:	d11b      	bne.n	80042dc <HAL_I2C_Master_Transmit+0x188>
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d017      	beq.n	80042dc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b0:	781a      	ldrb	r2, [r3, #0]
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	1c5a      	adds	r2, r3, #1
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c6:	b29b      	uxth	r3, r3
 80042c8:	3b01      	subs	r3, #1
 80042ca:	b29a      	uxth	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80042dc:	697a      	ldr	r2, [r7, #20]
 80042de:	6a39      	ldr	r1, [r7, #32]
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f000 fcc2 	bl	8004c6a <I2C_WaitOnBTFFlagUntilTimeout>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00d      	beq.n	8004308 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f0:	2b04      	cmp	r3, #4
 80042f2:	d107      	bne.n	8004304 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004302:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004304:	2301      	movs	r3, #1
 8004306:	e01a      	b.n	800433e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800430c:	2b00      	cmp	r3, #0
 800430e:	d194      	bne.n	800423a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800431e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2220      	movs	r2, #32
 8004324:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	2200      	movs	r2, #0
 8004334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004338:	2300      	movs	r3, #0
 800433a:	e000      	b.n	800433e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800433c:	2302      	movs	r3, #2
  }
}
 800433e:	4618      	mov	r0, r3
 8004340:	3718      	adds	r7, #24
 8004342:	46bd      	mov	sp, r7
 8004344:	bd80      	pop	{r7, pc}
 8004346:	bf00      	nop
 8004348:	00100002 	.word	0x00100002
 800434c:	ffff0000 	.word	0xffff0000

08004350 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b08c      	sub	sp, #48	; 0x30
 8004354:	af02      	add	r7, sp, #8
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	607a      	str	r2, [r7, #4]
 800435a:	461a      	mov	r2, r3
 800435c:	460b      	mov	r3, r1
 800435e:	817b      	strh	r3, [r7, #10]
 8004360:	4613      	mov	r3, r2
 8004362:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004364:	f7fe fea0 	bl	80030a8 <HAL_GetTick>
 8004368:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b20      	cmp	r3, #32
 8004374:	f040 820b 	bne.w	800478e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800437a:	9300      	str	r3, [sp, #0]
 800437c:	2319      	movs	r3, #25
 800437e:	2201      	movs	r2, #1
 8004380:	497c      	ldr	r1, [pc, #496]	; (8004574 <HAL_I2C_Master_Receive+0x224>)
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 fb5a 	bl	8004a3c <I2C_WaitOnFlagUntilTimeout>
 8004388:	4603      	mov	r3, r0
 800438a:	2b00      	cmp	r3, #0
 800438c:	d001      	beq.n	8004392 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800438e:	2302      	movs	r3, #2
 8004390:	e1fe      	b.n	8004790 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004398:	2b01      	cmp	r3, #1
 800439a:	d101      	bne.n	80043a0 <HAL_I2C_Master_Receive+0x50>
 800439c:	2302      	movs	r3, #2
 800439e:	e1f7      	b.n	8004790 <HAL_I2C_Master_Receive+0x440>
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	2201      	movs	r2, #1
 80043a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f003 0301 	and.w	r3, r3, #1
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d007      	beq.n	80043c6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	681a      	ldr	r2, [r3, #0]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f042 0201 	orr.w	r2, r2, #1
 80043c4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043d4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2222      	movs	r2, #34	; 0x22
 80043da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	2210      	movs	r2, #16
 80043e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	2200      	movs	r2, #0
 80043ea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	893a      	ldrh	r2, [r7, #8]
 80043f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fc:	b29a      	uxth	r2, r3
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	4a5c      	ldr	r2, [pc, #368]	; (8004578 <HAL_I2C_Master_Receive+0x228>)
 8004406:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004408:	8979      	ldrh	r1, [r7, #10]
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800440e:	68f8      	ldr	r0, [r7, #12]
 8004410:	f000 fa46 	bl	80048a0 <I2C_MasterRequestRead>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d001      	beq.n	800441e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e1b8      	b.n	8004790 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004422:	2b00      	cmp	r3, #0
 8004424:	d113      	bne.n	800444e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004426:	2300      	movs	r3, #0
 8004428:	623b      	str	r3, [r7, #32]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	695b      	ldr	r3, [r3, #20]
 8004430:	623b      	str	r3, [r7, #32]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	699b      	ldr	r3, [r3, #24]
 8004438:	623b      	str	r3, [r7, #32]
 800443a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	e18c      	b.n	8004768 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004452:	2b01      	cmp	r3, #1
 8004454:	d11b      	bne.n	800448e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004464:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004466:	2300      	movs	r3, #0
 8004468:	61fb      	str	r3, [r7, #28]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	695b      	ldr	r3, [r3, #20]
 8004470:	61fb      	str	r3, [r7, #28]
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	699b      	ldr	r3, [r3, #24]
 8004478:	61fb      	str	r3, [r7, #28]
 800447a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800448a:	601a      	str	r2, [r3, #0]
 800448c:	e16c      	b.n	8004768 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004492:	2b02      	cmp	r3, #2
 8004494:	d11b      	bne.n	80044ce <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044a4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044b4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044b6:	2300      	movs	r3, #0
 80044b8:	61bb      	str	r3, [r7, #24]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	695b      	ldr	r3, [r3, #20]
 80044c0:	61bb      	str	r3, [r7, #24]
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	699b      	ldr	r3, [r3, #24]
 80044c8:	61bb      	str	r3, [r7, #24]
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	e14c      	b.n	8004768 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80044dc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044de:	2300      	movs	r3, #0
 80044e0:	617b      	str	r3, [r7, #20]
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	695b      	ldr	r3, [r3, #20]
 80044e8:	617b      	str	r3, [r7, #20]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	617b      	str	r3, [r7, #20]
 80044f2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80044f4:	e138      	b.n	8004768 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044fa:	2b03      	cmp	r3, #3
 80044fc:	f200 80f1 	bhi.w	80046e2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004504:	2b01      	cmp	r3, #1
 8004506:	d123      	bne.n	8004550 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800450a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800450c:	68f8      	ldr	r0, [r7, #12]
 800450e:	f000 fbed 	bl	8004cec <I2C_WaitOnRXNEFlagUntilTimeout>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d001      	beq.n	800451c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e139      	b.n	8004790 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	691a      	ldr	r2, [r3, #16]
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004526:	b2d2      	uxtb	r2, r2
 8004528:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452e:	1c5a      	adds	r2, r3, #1
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004538:	3b01      	subs	r3, #1
 800453a:	b29a      	uxth	r2, r3
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004544:	b29b      	uxth	r3, r3
 8004546:	3b01      	subs	r3, #1
 8004548:	b29a      	uxth	r2, r3
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800454e:	e10b      	b.n	8004768 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004554:	2b02      	cmp	r3, #2
 8004556:	d14e      	bne.n	80045f6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	9300      	str	r3, [sp, #0]
 800455c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455e:	2200      	movs	r2, #0
 8004560:	4906      	ldr	r1, [pc, #24]	; (800457c <HAL_I2C_Master_Receive+0x22c>)
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 fa6a 	bl	8004a3c <I2C_WaitOnFlagUntilTimeout>
 8004568:	4603      	mov	r3, r0
 800456a:	2b00      	cmp	r3, #0
 800456c:	d008      	beq.n	8004580 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	e10e      	b.n	8004790 <HAL_I2C_Master_Receive+0x440>
 8004572:	bf00      	nop
 8004574:	00100002 	.word	0x00100002
 8004578:	ffff0000 	.word	0xffff0000
 800457c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800458e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	691a      	ldr	r2, [r3, #16]
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800459a:	b2d2      	uxtb	r2, r2
 800459c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a2:	1c5a      	adds	r2, r3, #1
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045ac:	3b01      	subs	r3, #1
 80045ae:	b29a      	uxth	r2, r3
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045b8:	b29b      	uxth	r3, r3
 80045ba:	3b01      	subs	r3, #1
 80045bc:	b29a      	uxth	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	691a      	ldr	r2, [r3, #16]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045cc:	b2d2      	uxtb	r2, r2
 80045ce:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	1c5a      	adds	r2, r3, #1
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045de:	3b01      	subs	r3, #1
 80045e0:	b29a      	uxth	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ea:	b29b      	uxth	r3, r3
 80045ec:	3b01      	subs	r3, #1
 80045ee:	b29a      	uxth	r2, r3
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80045f4:	e0b8      	b.n	8004768 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	9300      	str	r3, [sp, #0]
 80045fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045fc:	2200      	movs	r2, #0
 80045fe:	4966      	ldr	r1, [pc, #408]	; (8004798 <HAL_I2C_Master_Receive+0x448>)
 8004600:	68f8      	ldr	r0, [r7, #12]
 8004602:	f000 fa1b 	bl	8004a3c <I2C_WaitOnFlagUntilTimeout>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	e0bf      	b.n	8004790 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	681a      	ldr	r2, [r3, #0]
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800461e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	691a      	ldr	r2, [r3, #16]
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	b2d2      	uxtb	r2, r2
 800462c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	1c5a      	adds	r2, r3, #1
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800463c:	3b01      	subs	r3, #1
 800463e:	b29a      	uxth	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004648:	b29b      	uxth	r3, r3
 800464a:	3b01      	subs	r3, #1
 800464c:	b29a      	uxth	r2, r3
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004658:	2200      	movs	r2, #0
 800465a:	494f      	ldr	r1, [pc, #316]	; (8004798 <HAL_I2C_Master_Receive+0x448>)
 800465c:	68f8      	ldr	r0, [r7, #12]
 800465e:	f000 f9ed 	bl	8004a3c <I2C_WaitOnFlagUntilTimeout>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d001      	beq.n	800466c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e091      	b.n	8004790 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800467a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	691a      	ldr	r2, [r3, #16]
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004686:	b2d2      	uxtb	r2, r2
 8004688:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	1c5a      	adds	r2, r3, #1
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004698:	3b01      	subs	r3, #1
 800469a:	b29a      	uxth	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	3b01      	subs	r3, #1
 80046a8:	b29a      	uxth	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	691a      	ldr	r2, [r3, #16]
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	b2d2      	uxtb	r2, r2
 80046ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	1c5a      	adds	r2, r3, #1
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046ca:	3b01      	subs	r3, #1
 80046cc:	b29a      	uxth	r2, r3
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	3b01      	subs	r3, #1
 80046da:	b29a      	uxth	r2, r3
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	855a      	strh	r2, [r3, #42]	; 0x2a
 80046e0:	e042      	b.n	8004768 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80046e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f000 fb00 	bl	8004cec <I2C_WaitOnRXNEFlagUntilTimeout>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	e04c      	b.n	8004790 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	691a      	ldr	r2, [r3, #16]
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004700:	b2d2      	uxtb	r2, r2
 8004702:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004708:	1c5a      	adds	r2, r3, #1
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004712:	3b01      	subs	r3, #1
 8004714:	b29a      	uxth	r2, r3
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800471e:	b29b      	uxth	r3, r3
 8004720:	3b01      	subs	r3, #1
 8004722:	b29a      	uxth	r2, r3
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	695b      	ldr	r3, [r3, #20]
 800472e:	f003 0304 	and.w	r3, r3, #4
 8004732:	2b04      	cmp	r3, #4
 8004734:	d118      	bne.n	8004768 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	691a      	ldr	r2, [r3, #16]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004740:	b2d2      	uxtb	r2, r2
 8004742:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004748:	1c5a      	adds	r2, r3, #1
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004752:	3b01      	subs	r3, #1
 8004754:	b29a      	uxth	r2, r3
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800475e:	b29b      	uxth	r3, r3
 8004760:	3b01      	subs	r3, #1
 8004762:	b29a      	uxth	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800476c:	2b00      	cmp	r3, #0
 800476e:	f47f aec2 	bne.w	80044f6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2220      	movs	r2, #32
 8004776:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800478a:	2300      	movs	r3, #0
 800478c:	e000      	b.n	8004790 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800478e:	2302      	movs	r3, #2
  }
}
 8004790:	4618      	mov	r0, r3
 8004792:	3728      	adds	r7, #40	; 0x28
 8004794:	46bd      	mov	sp, r7
 8004796:	bd80      	pop	{r7, pc}
 8004798:	00010004 	.word	0x00010004

0800479c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b088      	sub	sp, #32
 80047a0:	af02      	add	r7, sp, #8
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	607a      	str	r2, [r7, #4]
 80047a6:	603b      	str	r3, [r7, #0]
 80047a8:	460b      	mov	r3, r1
 80047aa:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	2b08      	cmp	r3, #8
 80047b6:	d006      	beq.n	80047c6 <I2C_MasterRequestWrite+0x2a>
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d003      	beq.n	80047c6 <I2C_MasterRequestWrite+0x2a>
 80047be:	697b      	ldr	r3, [r7, #20]
 80047c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80047c4:	d108      	bne.n	80047d8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681a      	ldr	r2, [r3, #0]
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047d4:	601a      	str	r2, [r3, #0]
 80047d6:	e00b      	b.n	80047f0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047dc:	2b12      	cmp	r3, #18
 80047de:	d107      	bne.n	80047f0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80047ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	9300      	str	r3, [sp, #0]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80047fc:	68f8      	ldr	r0, [r7, #12]
 80047fe:	f000 f91d 	bl	8004a3c <I2C_WaitOnFlagUntilTimeout>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d00d      	beq.n	8004824 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004812:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004816:	d103      	bne.n	8004820 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800481e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004820:	2303      	movs	r3, #3
 8004822:	e035      	b.n	8004890 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800482c:	d108      	bne.n	8004840 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800482e:	897b      	ldrh	r3, [r7, #10]
 8004830:	b2db      	uxtb	r3, r3
 8004832:	461a      	mov	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800483c:	611a      	str	r2, [r3, #16]
 800483e:	e01b      	b.n	8004878 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004840:	897b      	ldrh	r3, [r7, #10]
 8004842:	11db      	asrs	r3, r3, #7
 8004844:	b2db      	uxtb	r3, r3
 8004846:	f003 0306 	and.w	r3, r3, #6
 800484a:	b2db      	uxtb	r3, r3
 800484c:	f063 030f 	orn	r3, r3, #15
 8004850:	b2da      	uxtb	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	687a      	ldr	r2, [r7, #4]
 800485c:	490e      	ldr	r1, [pc, #56]	; (8004898 <I2C_MasterRequestWrite+0xfc>)
 800485e:	68f8      	ldr	r0, [r7, #12]
 8004860:	f000 f943 	bl	8004aea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004864:	4603      	mov	r3, r0
 8004866:	2b00      	cmp	r3, #0
 8004868:	d001      	beq.n	800486e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800486a:	2301      	movs	r3, #1
 800486c:	e010      	b.n	8004890 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800486e:	897b      	ldrh	r3, [r7, #10]
 8004870:	b2da      	uxtb	r2, r3
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	4907      	ldr	r1, [pc, #28]	; (800489c <I2C_MasterRequestWrite+0x100>)
 800487e:	68f8      	ldr	r0, [r7, #12]
 8004880:	f000 f933 	bl	8004aea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004884:	4603      	mov	r3, r0
 8004886:	2b00      	cmp	r3, #0
 8004888:	d001      	beq.n	800488e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800488a:	2301      	movs	r3, #1
 800488c:	e000      	b.n	8004890 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800488e:	2300      	movs	r3, #0
}
 8004890:	4618      	mov	r0, r3
 8004892:	3718      	adds	r7, #24
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	00010008 	.word	0x00010008
 800489c:	00010002 	.word	0x00010002

080048a0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b088      	sub	sp, #32
 80048a4:	af02      	add	r7, sp, #8
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	607a      	str	r2, [r7, #4]
 80048aa:	603b      	str	r3, [r7, #0]
 80048ac:	460b      	mov	r3, r1
 80048ae:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048c4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d006      	beq.n	80048da <I2C_MasterRequestRead+0x3a>
 80048cc:	697b      	ldr	r3, [r7, #20]
 80048ce:	2b01      	cmp	r3, #1
 80048d0:	d003      	beq.n	80048da <I2C_MasterRequestRead+0x3a>
 80048d2:	697b      	ldr	r3, [r7, #20]
 80048d4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048d8:	d108      	bne.n	80048ec <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048e8:	601a      	str	r2, [r3, #0]
 80048ea:	e00b      	b.n	8004904 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f0:	2b11      	cmp	r3, #17
 80048f2:	d107      	bne.n	8004904 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681a      	ldr	r2, [r3, #0]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004902:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004910:	68f8      	ldr	r0, [r7, #12]
 8004912:	f000 f893 	bl	8004a3c <I2C_WaitOnFlagUntilTimeout>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00d      	beq.n	8004938 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004926:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800492a:	d103      	bne.n	8004934 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004932:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004934:	2303      	movs	r3, #3
 8004936:	e079      	b.n	8004a2c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	691b      	ldr	r3, [r3, #16]
 800493c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004940:	d108      	bne.n	8004954 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004942:	897b      	ldrh	r3, [r7, #10]
 8004944:	b2db      	uxtb	r3, r3
 8004946:	f043 0301 	orr.w	r3, r3, #1
 800494a:	b2da      	uxtb	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	611a      	str	r2, [r3, #16]
 8004952:	e05f      	b.n	8004a14 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004954:	897b      	ldrh	r3, [r7, #10]
 8004956:	11db      	asrs	r3, r3, #7
 8004958:	b2db      	uxtb	r3, r3
 800495a:	f003 0306 	and.w	r3, r3, #6
 800495e:	b2db      	uxtb	r3, r3
 8004960:	f063 030f 	orn	r3, r3, #15
 8004964:	b2da      	uxtb	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	687a      	ldr	r2, [r7, #4]
 8004970:	4930      	ldr	r1, [pc, #192]	; (8004a34 <I2C_MasterRequestRead+0x194>)
 8004972:	68f8      	ldr	r0, [r7, #12]
 8004974:	f000 f8b9 	bl	8004aea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e054      	b.n	8004a2c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004982:	897b      	ldrh	r3, [r7, #10]
 8004984:	b2da      	uxtb	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	4929      	ldr	r1, [pc, #164]	; (8004a38 <I2C_MasterRequestRead+0x198>)
 8004992:	68f8      	ldr	r0, [r7, #12]
 8004994:	f000 f8a9 	bl	8004aea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e044      	b.n	8004a2c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049a2:	2300      	movs	r3, #0
 80049a4:	613b      	str	r3, [r7, #16]
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	613b      	str	r3, [r7, #16]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	613b      	str	r3, [r7, #16]
 80049b6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	681a      	ldr	r2, [r3, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80049c6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	9300      	str	r3, [sp, #0]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2200      	movs	r2, #0
 80049d0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80049d4:	68f8      	ldr	r0, [r7, #12]
 80049d6:	f000 f831 	bl	8004a3c <I2C_WaitOnFlagUntilTimeout>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d00d      	beq.n	80049fc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049ee:	d103      	bne.n	80049f8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80049f6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80049f8:	2303      	movs	r3, #3
 80049fa:	e017      	b.n	8004a2c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80049fc:	897b      	ldrh	r3, [r7, #10]
 80049fe:	11db      	asrs	r3, r3, #7
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	f003 0306 	and.w	r3, r3, #6
 8004a06:	b2db      	uxtb	r3, r3
 8004a08:	f063 030e 	orn	r3, r3, #14
 8004a0c:	b2da      	uxtb	r2, r3
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	687a      	ldr	r2, [r7, #4]
 8004a18:	4907      	ldr	r1, [pc, #28]	; (8004a38 <I2C_MasterRequestRead+0x198>)
 8004a1a:	68f8      	ldr	r0, [r7, #12]
 8004a1c:	f000 f865 	bl	8004aea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a20:	4603      	mov	r3, r0
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d001      	beq.n	8004a2a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004a26:	2301      	movs	r3, #1
 8004a28:	e000      	b.n	8004a2c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3718      	adds	r7, #24
 8004a30:	46bd      	mov	sp, r7
 8004a32:	bd80      	pop	{r7, pc}
 8004a34:	00010008 	.word	0x00010008
 8004a38:	00010002 	.word	0x00010002

08004a3c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	60f8      	str	r0, [r7, #12]
 8004a44:	60b9      	str	r1, [r7, #8]
 8004a46:	603b      	str	r3, [r7, #0]
 8004a48:	4613      	mov	r3, r2
 8004a4a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a4c:	e025      	b.n	8004a9a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a54:	d021      	beq.n	8004a9a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a56:	f7fe fb27 	bl	80030a8 <HAL_GetTick>
 8004a5a:	4602      	mov	r2, r0
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	1ad3      	subs	r3, r2, r3
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	429a      	cmp	r2, r3
 8004a64:	d302      	bcc.n	8004a6c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d116      	bne.n	8004a9a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	2220      	movs	r2, #32
 8004a76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	f043 0220 	orr.w	r2, r3, #32
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2200      	movs	r2, #0
 8004a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	e023      	b.n	8004ae2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004a9a:	68bb      	ldr	r3, [r7, #8]
 8004a9c:	0c1b      	lsrs	r3, r3, #16
 8004a9e:	b2db      	uxtb	r3, r3
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d10d      	bne.n	8004ac0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	695b      	ldr	r3, [r3, #20]
 8004aaa:	43da      	mvns	r2, r3
 8004aac:	68bb      	ldr	r3, [r7, #8]
 8004aae:	4013      	ands	r3, r2
 8004ab0:	b29b      	uxth	r3, r3
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	bf0c      	ite	eq
 8004ab6:	2301      	moveq	r3, #1
 8004ab8:	2300      	movne	r3, #0
 8004aba:	b2db      	uxtb	r3, r3
 8004abc:	461a      	mov	r2, r3
 8004abe:	e00c      	b.n	8004ada <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	699b      	ldr	r3, [r3, #24]
 8004ac6:	43da      	mvns	r2, r3
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	4013      	ands	r3, r2
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	bf0c      	ite	eq
 8004ad2:	2301      	moveq	r3, #1
 8004ad4:	2300      	movne	r3, #0
 8004ad6:	b2db      	uxtb	r3, r3
 8004ad8:	461a      	mov	r2, r3
 8004ada:	79fb      	ldrb	r3, [r7, #7]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d0b6      	beq.n	8004a4e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3710      	adds	r7, #16
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b084      	sub	sp, #16
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	60f8      	str	r0, [r7, #12]
 8004af2:	60b9      	str	r1, [r7, #8]
 8004af4:	607a      	str	r2, [r7, #4]
 8004af6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004af8:	e051      	b.n	8004b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	695b      	ldr	r3, [r3, #20]
 8004b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b08:	d123      	bne.n	8004b52 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	681a      	ldr	r2, [r3, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b18:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b22:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	2220      	movs	r2, #32
 8004b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	2200      	movs	r2, #0
 8004b36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3e:	f043 0204 	orr.w	r2, r3, #4
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004b4e:	2301      	movs	r3, #1
 8004b50:	e046      	b.n	8004be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b58:	d021      	beq.n	8004b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b5a:	f7fe faa5 	bl	80030a8 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	687a      	ldr	r2, [r7, #4]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d302      	bcc.n	8004b70 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d116      	bne.n	8004b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	2200      	movs	r2, #0
 8004b82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	f043 0220 	orr.w	r2, r3, #32
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e020      	b.n	8004be0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	0c1b      	lsrs	r3, r3, #16
 8004ba2:	b2db      	uxtb	r3, r3
 8004ba4:	2b01      	cmp	r3, #1
 8004ba6:	d10c      	bne.n	8004bc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	695b      	ldr	r3, [r3, #20]
 8004bae:	43da      	mvns	r2, r3
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	4013      	ands	r3, r2
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	bf14      	ite	ne
 8004bba:	2301      	movne	r3, #1
 8004bbc:	2300      	moveq	r3, #0
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	e00b      	b.n	8004bda <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	699b      	ldr	r3, [r3, #24]
 8004bc8:	43da      	mvns	r2, r3
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	4013      	ands	r3, r2
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	bf14      	ite	ne
 8004bd4:	2301      	movne	r3, #1
 8004bd6:	2300      	moveq	r3, #0
 8004bd8:	b2db      	uxtb	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d18d      	bne.n	8004afa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3710      	adds	r7, #16
 8004be4:	46bd      	mov	sp, r7
 8004be6:	bd80      	pop	{r7, pc}

08004be8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b084      	sub	sp, #16
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bf4:	e02d      	b.n	8004c52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bf6:	68f8      	ldr	r0, [r7, #12]
 8004bf8:	f000 f8ce 	bl	8004d98 <I2C_IsAcknowledgeFailed>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e02d      	b.n	8004c62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c0c:	d021      	beq.n	8004c52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c0e:	f7fe fa4b 	bl	80030a8 <HAL_GetTick>
 8004c12:	4602      	mov	r2, r0
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	68ba      	ldr	r2, [r7, #8]
 8004c1a:	429a      	cmp	r2, r3
 8004c1c:	d302      	bcc.n	8004c24 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d116      	bne.n	8004c52 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	2200      	movs	r2, #0
 8004c28:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c3e:	f043 0220 	orr.w	r2, r3, #32
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e007      	b.n	8004c62 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695b      	ldr	r3, [r3, #20]
 8004c58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c5c:	2b80      	cmp	r3, #128	; 0x80
 8004c5e:	d1ca      	bne.n	8004bf6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3710      	adds	r7, #16
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b084      	sub	sp, #16
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	60f8      	str	r0, [r7, #12]
 8004c72:	60b9      	str	r1, [r7, #8]
 8004c74:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c76:	e02d      	b.n	8004cd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c78:	68f8      	ldr	r0, [r7, #12]
 8004c7a:	f000 f88d 	bl	8004d98 <I2C_IsAcknowledgeFailed>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d001      	beq.n	8004c88 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004c84:	2301      	movs	r3, #1
 8004c86:	e02d      	b.n	8004ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8e:	d021      	beq.n	8004cd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c90:	f7fe fa0a 	bl	80030a8 <HAL_GetTick>
 8004c94:	4602      	mov	r2, r0
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	1ad3      	subs	r3, r2, r3
 8004c9a:	68ba      	ldr	r2, [r7, #8]
 8004c9c:	429a      	cmp	r2, r3
 8004c9e:	d302      	bcc.n	8004ca6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004ca0:	68bb      	ldr	r3, [r7, #8]
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d116      	bne.n	8004cd4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc0:	f043 0220 	orr.w	r2, r3, #32
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e007      	b.n	8004ce4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	695b      	ldr	r3, [r3, #20]
 8004cda:	f003 0304 	and.w	r3, r3, #4
 8004cde:	2b04      	cmp	r3, #4
 8004ce0:	d1ca      	bne.n	8004c78 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}

08004cec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004cec:	b580      	push	{r7, lr}
 8004cee:	b084      	sub	sp, #16
 8004cf0:	af00      	add	r7, sp, #0
 8004cf2:	60f8      	str	r0, [r7, #12]
 8004cf4:	60b9      	str	r1, [r7, #8]
 8004cf6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004cf8:	e042      	b.n	8004d80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	f003 0310 	and.w	r3, r3, #16
 8004d04:	2b10      	cmp	r3, #16
 8004d06:	d119      	bne.n	8004d3c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f06f 0210 	mvn.w	r2, #16
 8004d10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2200      	movs	r2, #0
 8004d16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	2200      	movs	r2, #0
 8004d24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e029      	b.n	8004d90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d3c:	f7fe f9b4 	bl	80030a8 <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	429a      	cmp	r2, r3
 8004d4a:	d302      	bcc.n	8004d52 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d116      	bne.n	8004d80 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	2220      	movs	r2, #32
 8004d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	2200      	movs	r2, #0
 8004d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6c:	f043 0220 	orr.w	r2, r3, #32
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2200      	movs	r2, #0
 8004d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	e007      	b.n	8004d90 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d8a:	2b40      	cmp	r3, #64	; 0x40
 8004d8c:	d1b5      	bne.n	8004cfa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3710      	adds	r7, #16
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	695b      	ldr	r3, [r3, #20]
 8004da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004daa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dae:	d11b      	bne.n	8004de8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004db8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2220      	movs	r2, #32
 8004dc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd4:	f043 0204 	orr.w	r2, r3, #4
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e000      	b.n	8004dea <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
	...

08004df8 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004df8:	b480      	push	{r7}
 8004dfa:	b083      	sub	sp, #12
 8004dfc:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8004dfe:	4b06      	ldr	r3, [pc, #24]	; (8004e18 <HAL_PWR_EnableBkUpAccess+0x20>)
 8004e00:	2201      	movs	r2, #1
 8004e02:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8004e04:	4b05      	ldr	r3, [pc, #20]	; (8004e1c <HAL_PWR_EnableBkUpAccess+0x24>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8004e0a:	687b      	ldr	r3, [r7, #4]
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr
 8004e18:	420e0020 	.word	0x420e0020
 8004e1c:	40007000 	.word	0x40007000

08004e20 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8004e20:	b480      	push	{r7}
 8004e22:	b083      	sub	sp, #12
 8004e24:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8004e26:	4b06      	ldr	r3, [pc, #24]	; (8004e40 <HAL_PWR_DisableBkUpAccess+0x20>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8004e2c:	4b05      	ldr	r3, [pc, #20]	; (8004e44 <HAL_PWR_DisableBkUpAccess+0x24>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8004e32:	687b      	ldr	r3, [r7, #4]
}
 8004e34:	bf00      	nop
 8004e36:	370c      	adds	r7, #12
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr
 8004e40:	420e0020 	.word	0x420e0020
 8004e44:	40007000 	.word	0x40007000

08004e48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e267      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d075      	beq.n	8004f52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e66:	4b88      	ldr	r3, [pc, #544]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004e68:	689b      	ldr	r3, [r3, #8]
 8004e6a:	f003 030c 	and.w	r3, r3, #12
 8004e6e:	2b04      	cmp	r3, #4
 8004e70:	d00c      	beq.n	8004e8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e72:	4b85      	ldr	r3, [pc, #532]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e7a:	2b08      	cmp	r3, #8
 8004e7c:	d112      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e7e:	4b82      	ldr	r3, [pc, #520]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e8a:	d10b      	bne.n	8004ea4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e8c:	4b7e      	ldr	r3, [pc, #504]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d05b      	beq.n	8004f50 <HAL_RCC_OscConfig+0x108>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d157      	bne.n	8004f50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e242      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eac:	d106      	bne.n	8004ebc <HAL_RCC_OscConfig+0x74>
 8004eae:	4b76      	ldr	r3, [pc, #472]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	4a75      	ldr	r2, [pc, #468]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004eb8:	6013      	str	r3, [r2, #0]
 8004eba:	e01d      	b.n	8004ef8 <HAL_RCC_OscConfig+0xb0>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	685b      	ldr	r3, [r3, #4]
 8004ec0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ec4:	d10c      	bne.n	8004ee0 <HAL_RCC_OscConfig+0x98>
 8004ec6:	4b70      	ldr	r3, [pc, #448]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a6f      	ldr	r2, [pc, #444]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004ecc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004ed0:	6013      	str	r3, [r2, #0]
 8004ed2:	4b6d      	ldr	r3, [pc, #436]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a6c      	ldr	r2, [pc, #432]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004ed8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004edc:	6013      	str	r3, [r2, #0]
 8004ede:	e00b      	b.n	8004ef8 <HAL_RCC_OscConfig+0xb0>
 8004ee0:	4b69      	ldr	r3, [pc, #420]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a68      	ldr	r2, [pc, #416]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004ee6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004eea:	6013      	str	r3, [r2, #0]
 8004eec:	4b66      	ldr	r3, [pc, #408]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	4a65      	ldr	r2, [pc, #404]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004ef2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004ef6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d013      	beq.n	8004f28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f00:	f7fe f8d2 	bl	80030a8 <HAL_GetTick>
 8004f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f06:	e008      	b.n	8004f1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f08:	f7fe f8ce 	bl	80030a8 <HAL_GetTick>
 8004f0c:	4602      	mov	r2, r0
 8004f0e:	693b      	ldr	r3, [r7, #16]
 8004f10:	1ad3      	subs	r3, r2, r3
 8004f12:	2b64      	cmp	r3, #100	; 0x64
 8004f14:	d901      	bls.n	8004f1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f16:	2303      	movs	r3, #3
 8004f18:	e207      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f1a:	4b5b      	ldr	r3, [pc, #364]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d0f0      	beq.n	8004f08 <HAL_RCC_OscConfig+0xc0>
 8004f26:	e014      	b.n	8004f52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f28:	f7fe f8be 	bl	80030a8 <HAL_GetTick>
 8004f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f2e:	e008      	b.n	8004f42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f30:	f7fe f8ba 	bl	80030a8 <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b64      	cmp	r3, #100	; 0x64
 8004f3c:	d901      	bls.n	8004f42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e1f3      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f42:	4b51      	ldr	r3, [pc, #324]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1f0      	bne.n	8004f30 <HAL_RCC_OscConfig+0xe8>
 8004f4e:	e000      	b.n	8004f52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 0302 	and.w	r3, r3, #2
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d063      	beq.n	8005026 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f5e:	4b4a      	ldr	r3, [pc, #296]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 030c 	and.w	r3, r3, #12
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d00b      	beq.n	8004f82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f6a:	4b47      	ldr	r3, [pc, #284]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004f72:	2b08      	cmp	r3, #8
 8004f74:	d11c      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f76:	4b44      	ldr	r3, [pc, #272]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004f78:	685b      	ldr	r3, [r3, #4]
 8004f7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d116      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f82:	4b41      	ldr	r3, [pc, #260]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d005      	beq.n	8004f9a <HAL_RCC_OscConfig+0x152>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d001      	beq.n	8004f9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e1c7      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f9a:	4b3b      	ldr	r3, [pc, #236]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	691b      	ldr	r3, [r3, #16]
 8004fa6:	00db      	lsls	r3, r3, #3
 8004fa8:	4937      	ldr	r1, [pc, #220]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fae:	e03a      	b.n	8005026 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d020      	beq.n	8004ffa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004fb8:	4b34      	ldr	r3, [pc, #208]	; (800508c <HAL_RCC_OscConfig+0x244>)
 8004fba:	2201      	movs	r2, #1
 8004fbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fbe:	f7fe f873 	bl	80030a8 <HAL_GetTick>
 8004fc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fc4:	e008      	b.n	8004fd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004fc6:	f7fe f86f 	bl	80030a8 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d901      	bls.n	8004fd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e1a8      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fd8:	4b2b      	ldr	r3, [pc, #172]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f003 0302 	and.w	r3, r3, #2
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0f0      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fe4:	4b28      	ldr	r3, [pc, #160]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	691b      	ldr	r3, [r3, #16]
 8004ff0:	00db      	lsls	r3, r3, #3
 8004ff2:	4925      	ldr	r1, [pc, #148]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	600b      	str	r3, [r1, #0]
 8004ff8:	e015      	b.n	8005026 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ffa:	4b24      	ldr	r3, [pc, #144]	; (800508c <HAL_RCC_OscConfig+0x244>)
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005000:	f7fe f852 	bl	80030a8 <HAL_GetTick>
 8005004:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005006:	e008      	b.n	800501a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005008:	f7fe f84e 	bl	80030a8 <HAL_GetTick>
 800500c:	4602      	mov	r2, r0
 800500e:	693b      	ldr	r3, [r7, #16]
 8005010:	1ad3      	subs	r3, r2, r3
 8005012:	2b02      	cmp	r3, #2
 8005014:	d901      	bls.n	800501a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e187      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800501a:	4b1b      	ldr	r3, [pc, #108]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0302 	and.w	r3, r3, #2
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1f0      	bne.n	8005008 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	f003 0308 	and.w	r3, r3, #8
 800502e:	2b00      	cmp	r3, #0
 8005030:	d036      	beq.n	80050a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	695b      	ldr	r3, [r3, #20]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d016      	beq.n	8005068 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800503a:	4b15      	ldr	r3, [pc, #84]	; (8005090 <HAL_RCC_OscConfig+0x248>)
 800503c:	2201      	movs	r2, #1
 800503e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005040:	f7fe f832 	bl	80030a8 <HAL_GetTick>
 8005044:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005046:	e008      	b.n	800505a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005048:	f7fe f82e 	bl	80030a8 <HAL_GetTick>
 800504c:	4602      	mov	r2, r0
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	1ad3      	subs	r3, r2, r3
 8005052:	2b02      	cmp	r3, #2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e167      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800505a:	4b0b      	ldr	r3, [pc, #44]	; (8005088 <HAL_RCC_OscConfig+0x240>)
 800505c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0f0      	beq.n	8005048 <HAL_RCC_OscConfig+0x200>
 8005066:	e01b      	b.n	80050a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005068:	4b09      	ldr	r3, [pc, #36]	; (8005090 <HAL_RCC_OscConfig+0x248>)
 800506a:	2200      	movs	r2, #0
 800506c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800506e:	f7fe f81b 	bl	80030a8 <HAL_GetTick>
 8005072:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005074:	e00e      	b.n	8005094 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005076:	f7fe f817 	bl	80030a8 <HAL_GetTick>
 800507a:	4602      	mov	r2, r0
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	2b02      	cmp	r3, #2
 8005082:	d907      	bls.n	8005094 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e150      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
 8005088:	40023800 	.word	0x40023800
 800508c:	42470000 	.word	0x42470000
 8005090:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005094:	4b88      	ldr	r3, [pc, #544]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 8005096:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005098:	f003 0302 	and.w	r3, r3, #2
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1ea      	bne.n	8005076 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0304 	and.w	r3, r3, #4
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 8097 	beq.w	80051dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80050ae:	2300      	movs	r3, #0
 80050b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80050b2:	4b81      	ldr	r3, [pc, #516]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 80050b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10f      	bne.n	80050de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050be:	2300      	movs	r3, #0
 80050c0:	60bb      	str	r3, [r7, #8]
 80050c2:	4b7d      	ldr	r3, [pc, #500]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 80050c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c6:	4a7c      	ldr	r2, [pc, #496]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 80050c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050cc:	6413      	str	r3, [r2, #64]	; 0x40
 80050ce:	4b7a      	ldr	r3, [pc, #488]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 80050d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050d6:	60bb      	str	r3, [r7, #8]
 80050d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050da:	2301      	movs	r3, #1
 80050dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050de:	4b77      	ldr	r3, [pc, #476]	; (80052bc <HAL_RCC_OscConfig+0x474>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d118      	bne.n	800511c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80050ea:	4b74      	ldr	r3, [pc, #464]	; (80052bc <HAL_RCC_OscConfig+0x474>)
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	4a73      	ldr	r2, [pc, #460]	; (80052bc <HAL_RCC_OscConfig+0x474>)
 80050f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80050f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050f6:	f7fd ffd7 	bl	80030a8 <HAL_GetTick>
 80050fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80050fc:	e008      	b.n	8005110 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050fe:	f7fd ffd3 	bl	80030a8 <HAL_GetTick>
 8005102:	4602      	mov	r2, r0
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	1ad3      	subs	r3, r2, r3
 8005108:	2b02      	cmp	r3, #2
 800510a:	d901      	bls.n	8005110 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800510c:	2303      	movs	r3, #3
 800510e:	e10c      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005110:	4b6a      	ldr	r3, [pc, #424]	; (80052bc <HAL_RCC_OscConfig+0x474>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005118:	2b00      	cmp	r3, #0
 800511a:	d0f0      	beq.n	80050fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	2b01      	cmp	r3, #1
 8005122:	d106      	bne.n	8005132 <HAL_RCC_OscConfig+0x2ea>
 8005124:	4b64      	ldr	r3, [pc, #400]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 8005126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005128:	4a63      	ldr	r2, [pc, #396]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 800512a:	f043 0301 	orr.w	r3, r3, #1
 800512e:	6713      	str	r3, [r2, #112]	; 0x70
 8005130:	e01c      	b.n	800516c <HAL_RCC_OscConfig+0x324>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	689b      	ldr	r3, [r3, #8]
 8005136:	2b05      	cmp	r3, #5
 8005138:	d10c      	bne.n	8005154 <HAL_RCC_OscConfig+0x30c>
 800513a:	4b5f      	ldr	r3, [pc, #380]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 800513c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513e:	4a5e      	ldr	r2, [pc, #376]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 8005140:	f043 0304 	orr.w	r3, r3, #4
 8005144:	6713      	str	r3, [r2, #112]	; 0x70
 8005146:	4b5c      	ldr	r3, [pc, #368]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 8005148:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800514a:	4a5b      	ldr	r2, [pc, #364]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 800514c:	f043 0301 	orr.w	r3, r3, #1
 8005150:	6713      	str	r3, [r2, #112]	; 0x70
 8005152:	e00b      	b.n	800516c <HAL_RCC_OscConfig+0x324>
 8005154:	4b58      	ldr	r3, [pc, #352]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 8005156:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005158:	4a57      	ldr	r2, [pc, #348]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 800515a:	f023 0301 	bic.w	r3, r3, #1
 800515e:	6713      	str	r3, [r2, #112]	; 0x70
 8005160:	4b55      	ldr	r3, [pc, #340]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 8005162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005164:	4a54      	ldr	r2, [pc, #336]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 8005166:	f023 0304 	bic.w	r3, r3, #4
 800516a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d015      	beq.n	80051a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005174:	f7fd ff98 	bl	80030a8 <HAL_GetTick>
 8005178:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800517a:	e00a      	b.n	8005192 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800517c:	f7fd ff94 	bl	80030a8 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	693b      	ldr	r3, [r7, #16]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	f241 3288 	movw	r2, #5000	; 0x1388
 800518a:	4293      	cmp	r3, r2
 800518c:	d901      	bls.n	8005192 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800518e:	2303      	movs	r3, #3
 8005190:	e0cb      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005192:	4b49      	ldr	r3, [pc, #292]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 8005194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005196:	f003 0302 	and.w	r3, r3, #2
 800519a:	2b00      	cmp	r3, #0
 800519c:	d0ee      	beq.n	800517c <HAL_RCC_OscConfig+0x334>
 800519e:	e014      	b.n	80051ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80051a0:	f7fd ff82 	bl	80030a8 <HAL_GetTick>
 80051a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051a6:	e00a      	b.n	80051be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051a8:	f7fd ff7e 	bl	80030a8 <HAL_GetTick>
 80051ac:	4602      	mov	r2, r0
 80051ae:	693b      	ldr	r3, [r7, #16]
 80051b0:	1ad3      	subs	r3, r2, r3
 80051b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80051b6:	4293      	cmp	r3, r2
 80051b8:	d901      	bls.n	80051be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80051ba:	2303      	movs	r3, #3
 80051bc:	e0b5      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80051be:	4b3e      	ldr	r3, [pc, #248]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 80051c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1ee      	bne.n	80051a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051ca:	7dfb      	ldrb	r3, [r7, #23]
 80051cc:	2b01      	cmp	r3, #1
 80051ce:	d105      	bne.n	80051dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051d0:	4b39      	ldr	r3, [pc, #228]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 80051d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d4:	4a38      	ldr	r2, [pc, #224]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 80051d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80051da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	699b      	ldr	r3, [r3, #24]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	f000 80a1 	beq.w	8005328 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80051e6:	4b34      	ldr	r3, [pc, #208]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 80051e8:	689b      	ldr	r3, [r3, #8]
 80051ea:	f003 030c 	and.w	r3, r3, #12
 80051ee:	2b08      	cmp	r3, #8
 80051f0:	d05c      	beq.n	80052ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	699b      	ldr	r3, [r3, #24]
 80051f6:	2b02      	cmp	r3, #2
 80051f8:	d141      	bne.n	800527e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051fa:	4b31      	ldr	r3, [pc, #196]	; (80052c0 <HAL_RCC_OscConfig+0x478>)
 80051fc:	2200      	movs	r2, #0
 80051fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005200:	f7fd ff52 	bl	80030a8 <HAL_GetTick>
 8005204:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005206:	e008      	b.n	800521a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005208:	f7fd ff4e 	bl	80030a8 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	2b02      	cmp	r3, #2
 8005214:	d901      	bls.n	800521a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e087      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800521a:	4b27      	ldr	r3, [pc, #156]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1f0      	bne.n	8005208 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	69da      	ldr	r2, [r3, #28]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6a1b      	ldr	r3, [r3, #32]
 800522e:	431a      	orrs	r2, r3
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005234:	019b      	lsls	r3, r3, #6
 8005236:	431a      	orrs	r2, r3
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800523c:	085b      	lsrs	r3, r3, #1
 800523e:	3b01      	subs	r3, #1
 8005240:	041b      	lsls	r3, r3, #16
 8005242:	431a      	orrs	r2, r3
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005248:	061b      	lsls	r3, r3, #24
 800524a:	491b      	ldr	r1, [pc, #108]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 800524c:	4313      	orrs	r3, r2
 800524e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005250:	4b1b      	ldr	r3, [pc, #108]	; (80052c0 <HAL_RCC_OscConfig+0x478>)
 8005252:	2201      	movs	r2, #1
 8005254:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005256:	f7fd ff27 	bl	80030a8 <HAL_GetTick>
 800525a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800525c:	e008      	b.n	8005270 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800525e:	f7fd ff23 	bl	80030a8 <HAL_GetTick>
 8005262:	4602      	mov	r2, r0
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	1ad3      	subs	r3, r2, r3
 8005268:	2b02      	cmp	r3, #2
 800526a:	d901      	bls.n	8005270 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e05c      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005270:	4b11      	ldr	r3, [pc, #68]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005278:	2b00      	cmp	r3, #0
 800527a:	d0f0      	beq.n	800525e <HAL_RCC_OscConfig+0x416>
 800527c:	e054      	b.n	8005328 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800527e:	4b10      	ldr	r3, [pc, #64]	; (80052c0 <HAL_RCC_OscConfig+0x478>)
 8005280:	2200      	movs	r2, #0
 8005282:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005284:	f7fd ff10 	bl	80030a8 <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800528a:	e008      	b.n	800529e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800528c:	f7fd ff0c 	bl	80030a8 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b02      	cmp	r3, #2
 8005298:	d901      	bls.n	800529e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e045      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800529e:	4b06      	ldr	r3, [pc, #24]	; (80052b8 <HAL_RCC_OscConfig+0x470>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1f0      	bne.n	800528c <HAL_RCC_OscConfig+0x444>
 80052aa:	e03d      	b.n	8005328 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	699b      	ldr	r3, [r3, #24]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d107      	bne.n	80052c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e038      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
 80052b8:	40023800 	.word	0x40023800
 80052bc:	40007000 	.word	0x40007000
 80052c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80052c4:	4b1b      	ldr	r3, [pc, #108]	; (8005334 <HAL_RCC_OscConfig+0x4ec>)
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	699b      	ldr	r3, [r3, #24]
 80052ce:	2b01      	cmp	r3, #1
 80052d0:	d028      	beq.n	8005324 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80052dc:	429a      	cmp	r2, r3
 80052de:	d121      	bne.n	8005324 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d11a      	bne.n	8005324 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80052ee:	68fa      	ldr	r2, [r7, #12]
 80052f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80052f4:	4013      	ands	r3, r2
 80052f6:	687a      	ldr	r2, [r7, #4]
 80052f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80052fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80052fc:	4293      	cmp	r3, r2
 80052fe:	d111      	bne.n	8005324 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800530a:	085b      	lsrs	r3, r3, #1
 800530c:	3b01      	subs	r3, #1
 800530e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005310:	429a      	cmp	r2, r3
 8005312:	d107      	bne.n	8005324 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800531e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005320:	429a      	cmp	r2, r3
 8005322:	d001      	beq.n	8005328 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005324:	2301      	movs	r3, #1
 8005326:	e000      	b.n	800532a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005328:	2300      	movs	r3, #0
}
 800532a:	4618      	mov	r0, r3
 800532c:	3718      	adds	r7, #24
 800532e:	46bd      	mov	sp, r7
 8005330:	bd80      	pop	{r7, pc}
 8005332:	bf00      	nop
 8005334:	40023800 	.word	0x40023800

08005338 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b084      	sub	sp, #16
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d101      	bne.n	800534c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e0cc      	b.n	80054e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800534c:	4b68      	ldr	r3, [pc, #416]	; (80054f0 <HAL_RCC_ClockConfig+0x1b8>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f003 0307 	and.w	r3, r3, #7
 8005354:	683a      	ldr	r2, [r7, #0]
 8005356:	429a      	cmp	r2, r3
 8005358:	d90c      	bls.n	8005374 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800535a:	4b65      	ldr	r3, [pc, #404]	; (80054f0 <HAL_RCC_ClockConfig+0x1b8>)
 800535c:	683a      	ldr	r2, [r7, #0]
 800535e:	b2d2      	uxtb	r2, r2
 8005360:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005362:	4b63      	ldr	r3, [pc, #396]	; (80054f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0307 	and.w	r3, r3, #7
 800536a:	683a      	ldr	r2, [r7, #0]
 800536c:	429a      	cmp	r2, r3
 800536e:	d001      	beq.n	8005374 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005370:	2301      	movs	r3, #1
 8005372:	e0b8      	b.n	80054e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f003 0302 	and.w	r3, r3, #2
 800537c:	2b00      	cmp	r3, #0
 800537e:	d020      	beq.n	80053c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0304 	and.w	r3, r3, #4
 8005388:	2b00      	cmp	r3, #0
 800538a:	d005      	beq.n	8005398 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800538c:	4b59      	ldr	r3, [pc, #356]	; (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	4a58      	ldr	r2, [pc, #352]	; (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005392:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005396:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0308 	and.w	r3, r3, #8
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d005      	beq.n	80053b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80053a4:	4b53      	ldr	r3, [pc, #332]	; (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	4a52      	ldr	r2, [pc, #328]	; (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 80053aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80053ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80053b0:	4b50      	ldr	r3, [pc, #320]	; (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	494d      	ldr	r1, [pc, #308]	; (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0301 	and.w	r3, r3, #1
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d044      	beq.n	8005458 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d107      	bne.n	80053e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80053d6:	4b47      	ldr	r3, [pc, #284]	; (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d119      	bne.n	8005416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e07f      	b.n	80054e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	2b02      	cmp	r3, #2
 80053ec:	d003      	beq.n	80053f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80053f2:	2b03      	cmp	r3, #3
 80053f4:	d107      	bne.n	8005406 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80053f6:	4b3f      	ldr	r3, [pc, #252]	; (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d109      	bne.n	8005416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005402:	2301      	movs	r3, #1
 8005404:	e06f      	b.n	80054e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005406:	4b3b      	ldr	r3, [pc, #236]	; (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 0302 	and.w	r3, r3, #2
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005412:	2301      	movs	r3, #1
 8005414:	e067      	b.n	80054e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005416:	4b37      	ldr	r3, [pc, #220]	; (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	f023 0203 	bic.w	r2, r3, #3
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	685b      	ldr	r3, [r3, #4]
 8005422:	4934      	ldr	r1, [pc, #208]	; (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005424:	4313      	orrs	r3, r2
 8005426:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005428:	f7fd fe3e 	bl	80030a8 <HAL_GetTick>
 800542c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800542e:	e00a      	b.n	8005446 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005430:	f7fd fe3a 	bl	80030a8 <HAL_GetTick>
 8005434:	4602      	mov	r2, r0
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	f241 3288 	movw	r2, #5000	; 0x1388
 800543e:	4293      	cmp	r3, r2
 8005440:	d901      	bls.n	8005446 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005442:	2303      	movs	r3, #3
 8005444:	e04f      	b.n	80054e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005446:	4b2b      	ldr	r3, [pc, #172]	; (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 8005448:	689b      	ldr	r3, [r3, #8]
 800544a:	f003 020c 	and.w	r2, r3, #12
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	429a      	cmp	r2, r3
 8005456:	d1eb      	bne.n	8005430 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005458:	4b25      	ldr	r3, [pc, #148]	; (80054f0 <HAL_RCC_ClockConfig+0x1b8>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0307 	and.w	r3, r3, #7
 8005460:	683a      	ldr	r2, [r7, #0]
 8005462:	429a      	cmp	r2, r3
 8005464:	d20c      	bcs.n	8005480 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005466:	4b22      	ldr	r3, [pc, #136]	; (80054f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005468:	683a      	ldr	r2, [r7, #0]
 800546a:	b2d2      	uxtb	r2, r2
 800546c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800546e:	4b20      	ldr	r3, [pc, #128]	; (80054f0 <HAL_RCC_ClockConfig+0x1b8>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0307 	and.w	r3, r3, #7
 8005476:	683a      	ldr	r2, [r7, #0]
 8005478:	429a      	cmp	r2, r3
 800547a:	d001      	beq.n	8005480 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800547c:	2301      	movs	r3, #1
 800547e:	e032      	b.n	80054e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f003 0304 	and.w	r3, r3, #4
 8005488:	2b00      	cmp	r3, #0
 800548a:	d008      	beq.n	800549e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800548c:	4b19      	ldr	r3, [pc, #100]	; (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	68db      	ldr	r3, [r3, #12]
 8005498:	4916      	ldr	r1, [pc, #88]	; (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 800549a:	4313      	orrs	r3, r2
 800549c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f003 0308 	and.w	r3, r3, #8
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d009      	beq.n	80054be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80054aa:	4b12      	ldr	r3, [pc, #72]	; (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 80054ac:	689b      	ldr	r3, [r3, #8]
 80054ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	691b      	ldr	r3, [r3, #16]
 80054b6:	00db      	lsls	r3, r3, #3
 80054b8:	490e      	ldr	r1, [pc, #56]	; (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80054be:	f000 f821 	bl	8005504 <HAL_RCC_GetSysClockFreq>
 80054c2:	4602      	mov	r2, r0
 80054c4:	4b0b      	ldr	r3, [pc, #44]	; (80054f4 <HAL_RCC_ClockConfig+0x1bc>)
 80054c6:	689b      	ldr	r3, [r3, #8]
 80054c8:	091b      	lsrs	r3, r3, #4
 80054ca:	f003 030f 	and.w	r3, r3, #15
 80054ce:	490a      	ldr	r1, [pc, #40]	; (80054f8 <HAL_RCC_ClockConfig+0x1c0>)
 80054d0:	5ccb      	ldrb	r3, [r1, r3]
 80054d2:	fa22 f303 	lsr.w	r3, r2, r3
 80054d6:	4a09      	ldr	r2, [pc, #36]	; (80054fc <HAL_RCC_ClockConfig+0x1c4>)
 80054d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80054da:	4b09      	ldr	r3, [pc, #36]	; (8005500 <HAL_RCC_ClockConfig+0x1c8>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4618      	mov	r0, r3
 80054e0:	f7fd fd9e 	bl	8003020 <HAL_InitTick>

  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3710      	adds	r7, #16
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	40023c00 	.word	0x40023c00
 80054f4:	40023800 	.word	0x40023800
 80054f8:	0800ed18 	.word	0x0800ed18
 80054fc:	2000003c 	.word	0x2000003c
 8005500:	20000040 	.word	0x20000040

08005504 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005508:	b090      	sub	sp, #64	; 0x40
 800550a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800550c:	2300      	movs	r3, #0
 800550e:	637b      	str	r3, [r7, #52]	; 0x34
 8005510:	2300      	movs	r3, #0
 8005512:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005514:	2300      	movs	r3, #0
 8005516:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005518:	2300      	movs	r3, #0
 800551a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800551c:	4b59      	ldr	r3, [pc, #356]	; (8005684 <HAL_RCC_GetSysClockFreq+0x180>)
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	f003 030c 	and.w	r3, r3, #12
 8005524:	2b08      	cmp	r3, #8
 8005526:	d00d      	beq.n	8005544 <HAL_RCC_GetSysClockFreq+0x40>
 8005528:	2b08      	cmp	r3, #8
 800552a:	f200 80a1 	bhi.w	8005670 <HAL_RCC_GetSysClockFreq+0x16c>
 800552e:	2b00      	cmp	r3, #0
 8005530:	d002      	beq.n	8005538 <HAL_RCC_GetSysClockFreq+0x34>
 8005532:	2b04      	cmp	r3, #4
 8005534:	d003      	beq.n	800553e <HAL_RCC_GetSysClockFreq+0x3a>
 8005536:	e09b      	b.n	8005670 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005538:	4b53      	ldr	r3, [pc, #332]	; (8005688 <HAL_RCC_GetSysClockFreq+0x184>)
 800553a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800553c:	e09b      	b.n	8005676 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800553e:	4b53      	ldr	r3, [pc, #332]	; (800568c <HAL_RCC_GetSysClockFreq+0x188>)
 8005540:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005542:	e098      	b.n	8005676 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005544:	4b4f      	ldr	r3, [pc, #316]	; (8005684 <HAL_RCC_GetSysClockFreq+0x180>)
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800554c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800554e:	4b4d      	ldr	r3, [pc, #308]	; (8005684 <HAL_RCC_GetSysClockFreq+0x180>)
 8005550:	685b      	ldr	r3, [r3, #4]
 8005552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005556:	2b00      	cmp	r3, #0
 8005558:	d028      	beq.n	80055ac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800555a:	4b4a      	ldr	r3, [pc, #296]	; (8005684 <HAL_RCC_GetSysClockFreq+0x180>)
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	099b      	lsrs	r3, r3, #6
 8005560:	2200      	movs	r2, #0
 8005562:	623b      	str	r3, [r7, #32]
 8005564:	627a      	str	r2, [r7, #36]	; 0x24
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800556c:	2100      	movs	r1, #0
 800556e:	4b47      	ldr	r3, [pc, #284]	; (800568c <HAL_RCC_GetSysClockFreq+0x188>)
 8005570:	fb03 f201 	mul.w	r2, r3, r1
 8005574:	2300      	movs	r3, #0
 8005576:	fb00 f303 	mul.w	r3, r0, r3
 800557a:	4413      	add	r3, r2
 800557c:	4a43      	ldr	r2, [pc, #268]	; (800568c <HAL_RCC_GetSysClockFreq+0x188>)
 800557e:	fba0 1202 	umull	r1, r2, r0, r2
 8005582:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005584:	460a      	mov	r2, r1
 8005586:	62ba      	str	r2, [r7, #40]	; 0x28
 8005588:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800558a:	4413      	add	r3, r2
 800558c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800558e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005590:	2200      	movs	r2, #0
 8005592:	61bb      	str	r3, [r7, #24]
 8005594:	61fa      	str	r2, [r7, #28]
 8005596:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800559a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800559e:	f7fb fb73 	bl	8000c88 <__aeabi_uldivmod>
 80055a2:	4602      	mov	r2, r0
 80055a4:	460b      	mov	r3, r1
 80055a6:	4613      	mov	r3, r2
 80055a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055aa:	e053      	b.n	8005654 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055ac:	4b35      	ldr	r3, [pc, #212]	; (8005684 <HAL_RCC_GetSysClockFreq+0x180>)
 80055ae:	685b      	ldr	r3, [r3, #4]
 80055b0:	099b      	lsrs	r3, r3, #6
 80055b2:	2200      	movs	r2, #0
 80055b4:	613b      	str	r3, [r7, #16]
 80055b6:	617a      	str	r2, [r7, #20]
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80055be:	f04f 0b00 	mov.w	fp, #0
 80055c2:	4652      	mov	r2, sl
 80055c4:	465b      	mov	r3, fp
 80055c6:	f04f 0000 	mov.w	r0, #0
 80055ca:	f04f 0100 	mov.w	r1, #0
 80055ce:	0159      	lsls	r1, r3, #5
 80055d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055d4:	0150      	lsls	r0, r2, #5
 80055d6:	4602      	mov	r2, r0
 80055d8:	460b      	mov	r3, r1
 80055da:	ebb2 080a 	subs.w	r8, r2, sl
 80055de:	eb63 090b 	sbc.w	r9, r3, fp
 80055e2:	f04f 0200 	mov.w	r2, #0
 80055e6:	f04f 0300 	mov.w	r3, #0
 80055ea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80055ee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80055f2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80055f6:	ebb2 0408 	subs.w	r4, r2, r8
 80055fa:	eb63 0509 	sbc.w	r5, r3, r9
 80055fe:	f04f 0200 	mov.w	r2, #0
 8005602:	f04f 0300 	mov.w	r3, #0
 8005606:	00eb      	lsls	r3, r5, #3
 8005608:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800560c:	00e2      	lsls	r2, r4, #3
 800560e:	4614      	mov	r4, r2
 8005610:	461d      	mov	r5, r3
 8005612:	eb14 030a 	adds.w	r3, r4, sl
 8005616:	603b      	str	r3, [r7, #0]
 8005618:	eb45 030b 	adc.w	r3, r5, fp
 800561c:	607b      	str	r3, [r7, #4]
 800561e:	f04f 0200 	mov.w	r2, #0
 8005622:	f04f 0300 	mov.w	r3, #0
 8005626:	e9d7 4500 	ldrd	r4, r5, [r7]
 800562a:	4629      	mov	r1, r5
 800562c:	028b      	lsls	r3, r1, #10
 800562e:	4621      	mov	r1, r4
 8005630:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005634:	4621      	mov	r1, r4
 8005636:	028a      	lsls	r2, r1, #10
 8005638:	4610      	mov	r0, r2
 800563a:	4619      	mov	r1, r3
 800563c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800563e:	2200      	movs	r2, #0
 8005640:	60bb      	str	r3, [r7, #8]
 8005642:	60fa      	str	r2, [r7, #12]
 8005644:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005648:	f7fb fb1e 	bl	8000c88 <__aeabi_uldivmod>
 800564c:	4602      	mov	r2, r0
 800564e:	460b      	mov	r3, r1
 8005650:	4613      	mov	r3, r2
 8005652:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005654:	4b0b      	ldr	r3, [pc, #44]	; (8005684 <HAL_RCC_GetSysClockFreq+0x180>)
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	0c1b      	lsrs	r3, r3, #16
 800565a:	f003 0303 	and.w	r3, r3, #3
 800565e:	3301      	adds	r3, #1
 8005660:	005b      	lsls	r3, r3, #1
 8005662:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005664:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005668:	fbb2 f3f3 	udiv	r3, r2, r3
 800566c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800566e:	e002      	b.n	8005676 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005670:	4b05      	ldr	r3, [pc, #20]	; (8005688 <HAL_RCC_GetSysClockFreq+0x184>)
 8005672:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005674:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005678:	4618      	mov	r0, r3
 800567a:	3740      	adds	r7, #64	; 0x40
 800567c:	46bd      	mov	sp, r7
 800567e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005682:	bf00      	nop
 8005684:	40023800 	.word	0x40023800
 8005688:	00f42400 	.word	0x00f42400
 800568c:	017d7840 	.word	0x017d7840

08005690 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005690:	b480      	push	{r7}
 8005692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005694:	4b03      	ldr	r3, [pc, #12]	; (80056a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8005696:	681b      	ldr	r3, [r3, #0]
}
 8005698:	4618      	mov	r0, r3
 800569a:	46bd      	mov	sp, r7
 800569c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a0:	4770      	bx	lr
 80056a2:	bf00      	nop
 80056a4:	2000003c 	.word	0x2000003c

080056a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80056ac:	f7ff fff0 	bl	8005690 <HAL_RCC_GetHCLKFreq>
 80056b0:	4602      	mov	r2, r0
 80056b2:	4b05      	ldr	r3, [pc, #20]	; (80056c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	0a9b      	lsrs	r3, r3, #10
 80056b8:	f003 0307 	and.w	r3, r3, #7
 80056bc:	4903      	ldr	r1, [pc, #12]	; (80056cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80056be:	5ccb      	ldrb	r3, [r1, r3]
 80056c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	bd80      	pop	{r7, pc}
 80056c8:	40023800 	.word	0x40023800
 80056cc:	0800ed28 	.word	0x0800ed28

080056d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80056d4:	f7ff ffdc 	bl	8005690 <HAL_RCC_GetHCLKFreq>
 80056d8:	4602      	mov	r2, r0
 80056da:	4b05      	ldr	r3, [pc, #20]	; (80056f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	0b5b      	lsrs	r3, r3, #13
 80056e0:	f003 0307 	and.w	r3, r3, #7
 80056e4:	4903      	ldr	r1, [pc, #12]	; (80056f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80056e6:	5ccb      	ldrb	r3, [r1, r3]
 80056e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056ec:	4618      	mov	r0, r3
 80056ee:	bd80      	pop	{r7, pc}
 80056f0:	40023800 	.word	0x40023800
 80056f4:	0800ed28 	.word	0x0800ed28

080056f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d101      	bne.n	800570a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	e041      	b.n	800578e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005710:	b2db      	uxtb	r3, r3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d106      	bne.n	8005724 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f7fd f962 	bl	80029e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2202      	movs	r2, #2
 8005728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	3304      	adds	r3, #4
 8005734:	4619      	mov	r1, r3
 8005736:	4610      	mov	r0, r2
 8005738:	f000 ff94 	bl	8006664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2201      	movs	r2, #1
 8005748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2201      	movs	r2, #1
 8005750:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2201      	movs	r2, #1
 8005758:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2201      	movs	r2, #1
 8005760:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800578c:	2300      	movs	r3, #0
}
 800578e:	4618      	mov	r0, r3
 8005790:	3708      	adds	r7, #8
 8005792:	46bd      	mov	sp, r7
 8005794:	bd80      	pop	{r7, pc}

08005796 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005796:	b580      	push	{r7, lr}
 8005798:	b082      	sub	sp, #8
 800579a:	af00      	add	r7, sp, #0
 800579c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d101      	bne.n	80057a8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	e041      	b.n	800582c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057ae:	b2db      	uxtb	r3, r3
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d106      	bne.n	80057c2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057bc:	6878      	ldr	r0, [r7, #4]
 80057be:	f000 f839 	bl	8005834 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2202      	movs	r2, #2
 80057c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	3304      	adds	r3, #4
 80057d2:	4619      	mov	r1, r3
 80057d4:	4610      	mov	r0, r2
 80057d6:	f000 ff45 	bl	8006664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	2201      	movs	r2, #1
 80057de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2201      	movs	r2, #1
 80057e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2201      	movs	r2, #1
 80057ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2201      	movs	r2, #1
 80057f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2201      	movs	r2, #1
 80057fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	2201      	movs	r2, #1
 800580e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2201      	movs	r2, #1
 8005816:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	2201      	movs	r2, #1
 800581e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2201      	movs	r2, #1
 8005826:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800582a:	2300      	movs	r3, #0
}
 800582c:	4618      	mov	r0, r3
 800582e:	3708      	adds	r7, #8
 8005830:	46bd      	mov	sp, r7
 8005832:	bd80      	pop	{r7, pc}

08005834 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b084      	sub	sp, #16
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
 8005850:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d109      	bne.n	800586c <HAL_TIM_PWM_Start+0x24>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800585e:	b2db      	uxtb	r3, r3
 8005860:	2b01      	cmp	r3, #1
 8005862:	bf14      	ite	ne
 8005864:	2301      	movne	r3, #1
 8005866:	2300      	moveq	r3, #0
 8005868:	b2db      	uxtb	r3, r3
 800586a:	e022      	b.n	80058b2 <HAL_TIM_PWM_Start+0x6a>
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	2b04      	cmp	r3, #4
 8005870:	d109      	bne.n	8005886 <HAL_TIM_PWM_Start+0x3e>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005878:	b2db      	uxtb	r3, r3
 800587a:	2b01      	cmp	r3, #1
 800587c:	bf14      	ite	ne
 800587e:	2301      	movne	r3, #1
 8005880:	2300      	moveq	r3, #0
 8005882:	b2db      	uxtb	r3, r3
 8005884:	e015      	b.n	80058b2 <HAL_TIM_PWM_Start+0x6a>
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	2b08      	cmp	r3, #8
 800588a:	d109      	bne.n	80058a0 <HAL_TIM_PWM_Start+0x58>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005892:	b2db      	uxtb	r3, r3
 8005894:	2b01      	cmp	r3, #1
 8005896:	bf14      	ite	ne
 8005898:	2301      	movne	r3, #1
 800589a:	2300      	moveq	r3, #0
 800589c:	b2db      	uxtb	r3, r3
 800589e:	e008      	b.n	80058b2 <HAL_TIM_PWM_Start+0x6a>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058a6:	b2db      	uxtb	r3, r3
 80058a8:	2b01      	cmp	r3, #1
 80058aa:	bf14      	ite	ne
 80058ac:	2301      	movne	r3, #1
 80058ae:	2300      	moveq	r3, #0
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d001      	beq.n	80058ba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80058b6:	2301      	movs	r3, #1
 80058b8:	e07c      	b.n	80059b4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d104      	bne.n	80058ca <HAL_TIM_PWM_Start+0x82>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2202      	movs	r2, #2
 80058c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80058c8:	e013      	b.n	80058f2 <HAL_TIM_PWM_Start+0xaa>
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	2b04      	cmp	r3, #4
 80058ce:	d104      	bne.n	80058da <HAL_TIM_PWM_Start+0x92>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2202      	movs	r2, #2
 80058d4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80058d8:	e00b      	b.n	80058f2 <HAL_TIM_PWM_Start+0xaa>
 80058da:	683b      	ldr	r3, [r7, #0]
 80058dc:	2b08      	cmp	r3, #8
 80058de:	d104      	bne.n	80058ea <HAL_TIM_PWM_Start+0xa2>
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2202      	movs	r2, #2
 80058e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80058e8:	e003      	b.n	80058f2 <HAL_TIM_PWM_Start+0xaa>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2202      	movs	r2, #2
 80058ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2201      	movs	r2, #1
 80058f8:	6839      	ldr	r1, [r7, #0]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f001 fac6 	bl	8006e8c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	4a2d      	ldr	r2, [pc, #180]	; (80059bc <HAL_TIM_PWM_Start+0x174>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d004      	beq.n	8005914 <HAL_TIM_PWM_Start+0xcc>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	4a2c      	ldr	r2, [pc, #176]	; (80059c0 <HAL_TIM_PWM_Start+0x178>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d101      	bne.n	8005918 <HAL_TIM_PWM_Start+0xd0>
 8005914:	2301      	movs	r3, #1
 8005916:	e000      	b.n	800591a <HAL_TIM_PWM_Start+0xd2>
 8005918:	2300      	movs	r3, #0
 800591a:	2b00      	cmp	r3, #0
 800591c:	d007      	beq.n	800592e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800592c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	4a22      	ldr	r2, [pc, #136]	; (80059bc <HAL_TIM_PWM_Start+0x174>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d022      	beq.n	800597e <HAL_TIM_PWM_Start+0x136>
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005940:	d01d      	beq.n	800597e <HAL_TIM_PWM_Start+0x136>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	4a1f      	ldr	r2, [pc, #124]	; (80059c4 <HAL_TIM_PWM_Start+0x17c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d018      	beq.n	800597e <HAL_TIM_PWM_Start+0x136>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	4a1d      	ldr	r2, [pc, #116]	; (80059c8 <HAL_TIM_PWM_Start+0x180>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d013      	beq.n	800597e <HAL_TIM_PWM_Start+0x136>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4a1c      	ldr	r2, [pc, #112]	; (80059cc <HAL_TIM_PWM_Start+0x184>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d00e      	beq.n	800597e <HAL_TIM_PWM_Start+0x136>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	4a16      	ldr	r2, [pc, #88]	; (80059c0 <HAL_TIM_PWM_Start+0x178>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d009      	beq.n	800597e <HAL_TIM_PWM_Start+0x136>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4a18      	ldr	r2, [pc, #96]	; (80059d0 <HAL_TIM_PWM_Start+0x188>)
 8005970:	4293      	cmp	r3, r2
 8005972:	d004      	beq.n	800597e <HAL_TIM_PWM_Start+0x136>
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4a16      	ldr	r2, [pc, #88]	; (80059d4 <HAL_TIM_PWM_Start+0x18c>)
 800597a:	4293      	cmp	r3, r2
 800597c:	d111      	bne.n	80059a2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f003 0307 	and.w	r3, r3, #7
 8005988:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2b06      	cmp	r3, #6
 800598e:	d010      	beq.n	80059b2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f042 0201 	orr.w	r2, r2, #1
 800599e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059a0:	e007      	b.n	80059b2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	681a      	ldr	r2, [r3, #0]
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f042 0201 	orr.w	r2, r2, #1
 80059b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80059b2:	2300      	movs	r3, #0
}
 80059b4:	4618      	mov	r0, r3
 80059b6:	3710      	adds	r7, #16
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}
 80059bc:	40010000 	.word	0x40010000
 80059c0:	40010400 	.word	0x40010400
 80059c4:	40000400 	.word	0x40000400
 80059c8:	40000800 	.word	0x40000800
 80059cc:	40000c00 	.word	0x40000c00
 80059d0:	40014000 	.word	0x40014000
 80059d4:	40001800 	.word	0x40001800

080059d8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80059d8:	b580      	push	{r7, lr}
 80059da:	b082      	sub	sp, #8
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d101      	bne.n	80059ea <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80059e6:	2301      	movs	r3, #1
 80059e8:	e041      	b.n	8005a6e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059f0:	b2db      	uxtb	r3, r3
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d106      	bne.n	8005a04 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7fd f8ea 	bl	8002bd8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2202      	movs	r2, #2
 8005a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	3304      	adds	r3, #4
 8005a14:	4619      	mov	r1, r3
 8005a16:	4610      	mov	r0, r2
 8005a18:	f000 fe24 	bl	8006664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2201      	movs	r2, #1
 8005a38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2201      	movs	r2, #1
 8005a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2201      	movs	r2, #1
 8005a48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2201      	movs	r2, #1
 8005a50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2201      	movs	r2, #1
 8005a58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2201      	movs	r2, #1
 8005a60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2201      	movs	r2, #1
 8005a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a6c:	2300      	movs	r3, #0
}
 8005a6e:	4618      	mov	r0, r3
 8005a70:	3708      	adds	r7, #8
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
	...

08005a78 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
 8005a80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005a82:	2300      	movs	r3, #0
 8005a84:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d104      	bne.n	8005a96 <HAL_TIM_IC_Start_IT+0x1e>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a92:	b2db      	uxtb	r3, r3
 8005a94:	e013      	b.n	8005abe <HAL_TIM_IC_Start_IT+0x46>
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	2b04      	cmp	r3, #4
 8005a9a:	d104      	bne.n	8005aa6 <HAL_TIM_IC_Start_IT+0x2e>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	e00b      	b.n	8005abe <HAL_TIM_IC_Start_IT+0x46>
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	2b08      	cmp	r3, #8
 8005aaa:	d104      	bne.n	8005ab6 <HAL_TIM_IC_Start_IT+0x3e>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	e003      	b.n	8005abe <HAL_TIM_IC_Start_IT+0x46>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d104      	bne.n	8005ad0 <HAL_TIM_IC_Start_IT+0x58>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	e013      	b.n	8005af8 <HAL_TIM_IC_Start_IT+0x80>
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	2b04      	cmp	r3, #4
 8005ad4:	d104      	bne.n	8005ae0 <HAL_TIM_IC_Start_IT+0x68>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	e00b      	b.n	8005af8 <HAL_TIM_IC_Start_IT+0x80>
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	2b08      	cmp	r3, #8
 8005ae4:	d104      	bne.n	8005af0 <HAL_TIM_IC_Start_IT+0x78>
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	e003      	b.n	8005af8 <HAL_TIM_IC_Start_IT+0x80>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005afa:	7bbb      	ldrb	r3, [r7, #14]
 8005afc:	2b01      	cmp	r3, #1
 8005afe:	d102      	bne.n	8005b06 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005b00:	7b7b      	ldrb	r3, [r7, #13]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d001      	beq.n	8005b0a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005b06:	2301      	movs	r3, #1
 8005b08:	e0cc      	b.n	8005ca4 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d104      	bne.n	8005b1a <HAL_TIM_IC_Start_IT+0xa2>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2202      	movs	r2, #2
 8005b14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b18:	e013      	b.n	8005b42 <HAL_TIM_IC_Start_IT+0xca>
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	2b04      	cmp	r3, #4
 8005b1e:	d104      	bne.n	8005b2a <HAL_TIM_IC_Start_IT+0xb2>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2202      	movs	r2, #2
 8005b24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b28:	e00b      	b.n	8005b42 <HAL_TIM_IC_Start_IT+0xca>
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	2b08      	cmp	r3, #8
 8005b2e:	d104      	bne.n	8005b3a <HAL_TIM_IC_Start_IT+0xc2>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2202      	movs	r2, #2
 8005b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b38:	e003      	b.n	8005b42 <HAL_TIM_IC_Start_IT+0xca>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2202      	movs	r2, #2
 8005b3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005b42:	683b      	ldr	r3, [r7, #0]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d104      	bne.n	8005b52 <HAL_TIM_IC_Start_IT+0xda>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2202      	movs	r2, #2
 8005b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b50:	e013      	b.n	8005b7a <HAL_TIM_IC_Start_IT+0x102>
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2b04      	cmp	r3, #4
 8005b56:	d104      	bne.n	8005b62 <HAL_TIM_IC_Start_IT+0xea>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b60:	e00b      	b.n	8005b7a <HAL_TIM_IC_Start_IT+0x102>
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b08      	cmp	r3, #8
 8005b66:	d104      	bne.n	8005b72 <HAL_TIM_IC_Start_IT+0xfa>
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b70:	e003      	b.n	8005b7a <HAL_TIM_IC_Start_IT+0x102>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2202      	movs	r2, #2
 8005b76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2b0c      	cmp	r3, #12
 8005b7e:	d841      	bhi.n	8005c04 <HAL_TIM_IC_Start_IT+0x18c>
 8005b80:	a201      	add	r2, pc, #4	; (adr r2, 8005b88 <HAL_TIM_IC_Start_IT+0x110>)
 8005b82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b86:	bf00      	nop
 8005b88:	08005bbd 	.word	0x08005bbd
 8005b8c:	08005c05 	.word	0x08005c05
 8005b90:	08005c05 	.word	0x08005c05
 8005b94:	08005c05 	.word	0x08005c05
 8005b98:	08005bcf 	.word	0x08005bcf
 8005b9c:	08005c05 	.word	0x08005c05
 8005ba0:	08005c05 	.word	0x08005c05
 8005ba4:	08005c05 	.word	0x08005c05
 8005ba8:	08005be1 	.word	0x08005be1
 8005bac:	08005c05 	.word	0x08005c05
 8005bb0:	08005c05 	.word	0x08005c05
 8005bb4:	08005c05 	.word	0x08005c05
 8005bb8:	08005bf3 	.word	0x08005bf3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	68da      	ldr	r2, [r3, #12]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f042 0202 	orr.w	r2, r2, #2
 8005bca:	60da      	str	r2, [r3, #12]
      break;
 8005bcc:	e01d      	b.n	8005c0a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	68da      	ldr	r2, [r3, #12]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f042 0204 	orr.w	r2, r2, #4
 8005bdc:	60da      	str	r2, [r3, #12]
      break;
 8005bde:	e014      	b.n	8005c0a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	68da      	ldr	r2, [r3, #12]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f042 0208 	orr.w	r2, r2, #8
 8005bee:	60da      	str	r2, [r3, #12]
      break;
 8005bf0:	e00b      	b.n	8005c0a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68da      	ldr	r2, [r3, #12]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f042 0210 	orr.w	r2, r2, #16
 8005c00:	60da      	str	r2, [r3, #12]
      break;
 8005c02:	e002      	b.n	8005c0a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8005c04:	2301      	movs	r3, #1
 8005c06:	73fb      	strb	r3, [r7, #15]
      break;
 8005c08:	bf00      	nop
  }

  if (status == HAL_OK)
 8005c0a:	7bfb      	ldrb	r3, [r7, #15]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d148      	bne.n	8005ca2 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2201      	movs	r2, #1
 8005c16:	6839      	ldr	r1, [r7, #0]
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f001 f937 	bl	8006e8c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4a22      	ldr	r2, [pc, #136]	; (8005cac <HAL_TIM_IC_Start_IT+0x234>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d022      	beq.n	8005c6e <HAL_TIM_IC_Start_IT+0x1f6>
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c30:	d01d      	beq.n	8005c6e <HAL_TIM_IC_Start_IT+0x1f6>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	4a1e      	ldr	r2, [pc, #120]	; (8005cb0 <HAL_TIM_IC_Start_IT+0x238>)
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	d018      	beq.n	8005c6e <HAL_TIM_IC_Start_IT+0x1f6>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	4a1c      	ldr	r2, [pc, #112]	; (8005cb4 <HAL_TIM_IC_Start_IT+0x23c>)
 8005c42:	4293      	cmp	r3, r2
 8005c44:	d013      	beq.n	8005c6e <HAL_TIM_IC_Start_IT+0x1f6>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	4a1b      	ldr	r2, [pc, #108]	; (8005cb8 <HAL_TIM_IC_Start_IT+0x240>)
 8005c4c:	4293      	cmp	r3, r2
 8005c4e:	d00e      	beq.n	8005c6e <HAL_TIM_IC_Start_IT+0x1f6>
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a19      	ldr	r2, [pc, #100]	; (8005cbc <HAL_TIM_IC_Start_IT+0x244>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d009      	beq.n	8005c6e <HAL_TIM_IC_Start_IT+0x1f6>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	4a18      	ldr	r2, [pc, #96]	; (8005cc0 <HAL_TIM_IC_Start_IT+0x248>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d004      	beq.n	8005c6e <HAL_TIM_IC_Start_IT+0x1f6>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a16      	ldr	r2, [pc, #88]	; (8005cc4 <HAL_TIM_IC_Start_IT+0x24c>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d111      	bne.n	8005c92 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	689b      	ldr	r3, [r3, #8]
 8005c74:	f003 0307 	and.w	r3, r3, #7
 8005c78:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	2b06      	cmp	r3, #6
 8005c7e:	d010      	beq.n	8005ca2 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0201 	orr.w	r2, r2, #1
 8005c8e:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c90:	e007      	b.n	8005ca2 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681a      	ldr	r2, [r3, #0]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	f042 0201 	orr.w	r2, r2, #1
 8005ca0:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	3710      	adds	r7, #16
 8005ca8:	46bd      	mov	sp, r7
 8005caa:	bd80      	pop	{r7, pc}
 8005cac:	40010000 	.word	0x40010000
 8005cb0:	40000400 	.word	0x40000400
 8005cb4:	40000800 	.word	0x40000800
 8005cb8:	40000c00 	.word	0x40000c00
 8005cbc:	40010400 	.word	0x40010400
 8005cc0:	40014000 	.word	0x40014000
 8005cc4:	40001800 	.word	0x40001800

08005cc8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b086      	sub	sp, #24
 8005ccc:	af00      	add	r7, sp, #0
 8005cce:	6078      	str	r0, [r7, #4]
 8005cd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d101      	bne.n	8005cdc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e097      	b.n	8005e0c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ce2:	b2db      	uxtb	r3, r3
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d106      	bne.n	8005cf6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f7fc fed7 	bl	8002aa4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2202      	movs	r2, #2
 8005cfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	689b      	ldr	r3, [r3, #8]
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	6812      	ldr	r2, [r2, #0]
 8005d08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d0c:	f023 0307 	bic.w	r3, r3, #7
 8005d10:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	3304      	adds	r3, #4
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	4610      	mov	r0, r2
 8005d1e:	f000 fca1 	bl	8006664 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	689b      	ldr	r3, [r3, #8]
 8005d28:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	699b      	ldr	r3, [r3, #24]
 8005d30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	6a1b      	ldr	r3, [r3, #32]
 8005d38:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005d44:	693b      	ldr	r3, [r7, #16]
 8005d46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d4a:	f023 0303 	bic.w	r3, r3, #3
 8005d4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	689a      	ldr	r2, [r3, #8]
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	021b      	lsls	r3, r3, #8
 8005d5a:	4313      	orrs	r3, r2
 8005d5c:	693a      	ldr	r2, [r7, #16]
 8005d5e:	4313      	orrs	r3, r2
 8005d60:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005d68:	f023 030c 	bic.w	r3, r3, #12
 8005d6c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d78:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	68da      	ldr	r2, [r3, #12]
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	69db      	ldr	r3, [r3, #28]
 8005d82:	021b      	lsls	r3, r3, #8
 8005d84:	4313      	orrs	r3, r2
 8005d86:	693a      	ldr	r2, [r7, #16]
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	691b      	ldr	r3, [r3, #16]
 8005d90:	011a      	lsls	r2, r3, #4
 8005d92:	683b      	ldr	r3, [r7, #0]
 8005d94:	6a1b      	ldr	r3, [r3, #32]
 8005d96:	031b      	lsls	r3, r3, #12
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	4313      	orrs	r3, r2
 8005d9e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005da6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005dae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	685a      	ldr	r2, [r3, #4]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	695b      	ldr	r3, [r3, #20]
 8005db8:	011b      	lsls	r3, r3, #4
 8005dba:	4313      	orrs	r3, r2
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	693a      	ldr	r2, [r7, #16]
 8005dd0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2201      	movs	r2, #1
 8005df6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e0a:	2300      	movs	r3, #0
}
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	3718      	adds	r7, #24
 8005e10:	46bd      	mov	sp, r7
 8005e12:	bd80      	pop	{r7, pc}

08005e14 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e14:	b580      	push	{r7, lr}
 8005e16:	b084      	sub	sp, #16
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e24:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005e2c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e34:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005e3c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d110      	bne.n	8005e66 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e44:	7bfb      	ldrb	r3, [r7, #15]
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d102      	bne.n	8005e50 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e4a:	7b7b      	ldrb	r3, [r7, #13]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d001      	beq.n	8005e54 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005e50:	2301      	movs	r3, #1
 8005e52:	e069      	b.n	8005f28 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2202      	movs	r2, #2
 8005e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2202      	movs	r2, #2
 8005e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e64:	e031      	b.n	8005eca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005e66:	683b      	ldr	r3, [r7, #0]
 8005e68:	2b04      	cmp	r3, #4
 8005e6a:	d110      	bne.n	8005e8e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e6c:	7bbb      	ldrb	r3, [r7, #14]
 8005e6e:	2b01      	cmp	r3, #1
 8005e70:	d102      	bne.n	8005e78 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005e72:	7b3b      	ldrb	r3, [r7, #12]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d001      	beq.n	8005e7c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	e055      	b.n	8005f28 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	2202      	movs	r2, #2
 8005e80:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	2202      	movs	r2, #2
 8005e88:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e8c:	e01d      	b.n	8005eca <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e8e:	7bfb      	ldrb	r3, [r7, #15]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d108      	bne.n	8005ea6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e94:	7bbb      	ldrb	r3, [r7, #14]
 8005e96:	2b01      	cmp	r3, #1
 8005e98:	d105      	bne.n	8005ea6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005e9a:	7b7b      	ldrb	r3, [r7, #13]
 8005e9c:	2b01      	cmp	r3, #1
 8005e9e:	d102      	bne.n	8005ea6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ea0:	7b3b      	ldrb	r3, [r7, #12]
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d001      	beq.n	8005eaa <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e03e      	b.n	8005f28 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2202      	movs	r2, #2
 8005eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	2202      	movs	r2, #2
 8005eb6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2202      	movs	r2, #2
 8005ebe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2202      	movs	r2, #2
 8005ec6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d003      	beq.n	8005ed8 <HAL_TIM_Encoder_Start+0xc4>
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	2b04      	cmp	r3, #4
 8005ed4:	d008      	beq.n	8005ee8 <HAL_TIM_Encoder_Start+0xd4>
 8005ed6:	e00f      	b.n	8005ef8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	2201      	movs	r2, #1
 8005ede:	2100      	movs	r1, #0
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f000 ffd3 	bl	8006e8c <TIM_CCxChannelCmd>
      break;
 8005ee6:	e016      	b.n	8005f16 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2201      	movs	r2, #1
 8005eee:	2104      	movs	r1, #4
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	f000 ffcb 	bl	8006e8c <TIM_CCxChannelCmd>
      break;
 8005ef6:	e00e      	b.n	8005f16 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	2201      	movs	r2, #1
 8005efe:	2100      	movs	r1, #0
 8005f00:	4618      	mov	r0, r3
 8005f02:	f000 ffc3 	bl	8006e8c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	2201      	movs	r2, #1
 8005f0c:	2104      	movs	r1, #4
 8005f0e:	4618      	mov	r0, r3
 8005f10:	f000 ffbc 	bl	8006e8c <TIM_CCxChannelCmd>
      break;
 8005f14:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f042 0201 	orr.w	r2, r2, #1
 8005f24:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3710      	adds	r7, #16
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b082      	sub	sp, #8
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	f003 0302 	and.w	r3, r3, #2
 8005f42:	2b02      	cmp	r3, #2
 8005f44:	d122      	bne.n	8005f8c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	f003 0302 	and.w	r3, r3, #2
 8005f50:	2b02      	cmp	r3, #2
 8005f52:	d11b      	bne.n	8005f8c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f06f 0202 	mvn.w	r2, #2
 8005f5c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2201      	movs	r2, #1
 8005f62:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	699b      	ldr	r3, [r3, #24]
 8005f6a:	f003 0303 	and.w	r3, r3, #3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d003      	beq.n	8005f7a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005f72:	6878      	ldr	r0, [r7, #4]
 8005f74:	f7fb fe14 	bl	8001ba0 <HAL_TIM_IC_CaptureCallback>
 8005f78:	e005      	b.n	8005f86 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 fb54 	bl	8006628 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 fb5b 	bl	800663c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	691b      	ldr	r3, [r3, #16]
 8005f92:	f003 0304 	and.w	r3, r3, #4
 8005f96:	2b04      	cmp	r3, #4
 8005f98:	d122      	bne.n	8005fe0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	68db      	ldr	r3, [r3, #12]
 8005fa0:	f003 0304 	and.w	r3, r3, #4
 8005fa4:	2b04      	cmp	r3, #4
 8005fa6:	d11b      	bne.n	8005fe0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f06f 0204 	mvn.w	r2, #4
 8005fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2202      	movs	r2, #2
 8005fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	699b      	ldr	r3, [r3, #24]
 8005fbe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d003      	beq.n	8005fce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f7fb fdea 	bl	8001ba0 <HAL_TIM_IC_CaptureCallback>
 8005fcc:	e005      	b.n	8005fda <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	f000 fb2a 	bl	8006628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 fb31 	bl	800663c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	691b      	ldr	r3, [r3, #16]
 8005fe6:	f003 0308 	and.w	r3, r3, #8
 8005fea:	2b08      	cmp	r3, #8
 8005fec:	d122      	bne.n	8006034 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	f003 0308 	and.w	r3, r3, #8
 8005ff8:	2b08      	cmp	r3, #8
 8005ffa:	d11b      	bne.n	8006034 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f06f 0208 	mvn.w	r2, #8
 8006004:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2204      	movs	r2, #4
 800600a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	69db      	ldr	r3, [r3, #28]
 8006012:	f003 0303 	and.w	r3, r3, #3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d003      	beq.n	8006022 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f7fb fdc0 	bl	8001ba0 <HAL_TIM_IC_CaptureCallback>
 8006020:	e005      	b.n	800602e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f000 fb00 	bl	8006628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006028:	6878      	ldr	r0, [r7, #4]
 800602a:	f000 fb07 	bl	800663c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2200      	movs	r2, #0
 8006032:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	691b      	ldr	r3, [r3, #16]
 800603a:	f003 0310 	and.w	r3, r3, #16
 800603e:	2b10      	cmp	r3, #16
 8006040:	d122      	bne.n	8006088 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	f003 0310 	and.w	r3, r3, #16
 800604c:	2b10      	cmp	r3, #16
 800604e:	d11b      	bne.n	8006088 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	f06f 0210 	mvn.w	r2, #16
 8006058:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2208      	movs	r2, #8
 800605e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	69db      	ldr	r3, [r3, #28]
 8006066:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800606a:	2b00      	cmp	r3, #0
 800606c:	d003      	beq.n	8006076 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800606e:	6878      	ldr	r0, [r7, #4]
 8006070:	f7fb fd96 	bl	8001ba0 <HAL_TIM_IC_CaptureCallback>
 8006074:	e005      	b.n	8006082 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f000 fad6 	bl	8006628 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 fadd 	bl	800663c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	691b      	ldr	r3, [r3, #16]
 800608e:	f003 0301 	and.w	r3, r3, #1
 8006092:	2b01      	cmp	r3, #1
 8006094:	d10e      	bne.n	80060b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d107      	bne.n	80060b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f06f 0201 	mvn.w	r2, #1
 80060ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80060ae:	6878      	ldr	r0, [r7, #4]
 80060b0:	f000 fab0 	bl	8006614 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060be:	2b80      	cmp	r3, #128	; 0x80
 80060c0:	d10e      	bne.n	80060e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060cc:	2b80      	cmp	r3, #128	; 0x80
 80060ce:	d107      	bne.n	80060e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80060d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 ffd4 	bl	8007088 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	691b      	ldr	r3, [r3, #16]
 80060e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ea:	2b40      	cmp	r3, #64	; 0x40
 80060ec:	d10e      	bne.n	800610c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060f8:	2b40      	cmp	r3, #64	; 0x40
 80060fa:	d107      	bne.n	800610c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 faa2 	bl	8006650 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	691b      	ldr	r3, [r3, #16]
 8006112:	f003 0320 	and.w	r3, r3, #32
 8006116:	2b20      	cmp	r3, #32
 8006118:	d10e      	bne.n	8006138 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	68db      	ldr	r3, [r3, #12]
 8006120:	f003 0320 	and.w	r3, r3, #32
 8006124:	2b20      	cmp	r3, #32
 8006126:	d107      	bne.n	8006138 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f06f 0220 	mvn.w	r2, #32
 8006130:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006132:	6878      	ldr	r0, [r7, #4]
 8006134:	f000 ff9e 	bl	8007074 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006138:	bf00      	nop
 800613a:	3708      	adds	r7, #8
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	60b9      	str	r1, [r7, #8]
 800614a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800614c:	2300      	movs	r3, #0
 800614e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006156:	2b01      	cmp	r3, #1
 8006158:	d101      	bne.n	800615e <HAL_TIM_IC_ConfigChannel+0x1e>
 800615a:	2302      	movs	r3, #2
 800615c:	e088      	b.n	8006270 <HAL_TIM_IC_ConfigChannel+0x130>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	2201      	movs	r2, #1
 8006162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d11b      	bne.n	80061a4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6818      	ldr	r0, [r3, #0]
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	6819      	ldr	r1, [r3, #0]
 8006174:	68bb      	ldr	r3, [r7, #8]
 8006176:	685a      	ldr	r2, [r3, #4]
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	f000 fcc2 	bl	8006b04 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	699a      	ldr	r2, [r3, #24]
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f022 020c 	bic.w	r2, r2, #12
 800618e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	6999      	ldr	r1, [r3, #24]
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	689a      	ldr	r2, [r3, #8]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	430a      	orrs	r2, r1
 80061a0:	619a      	str	r2, [r3, #24]
 80061a2:	e060      	b.n	8006266 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2b04      	cmp	r3, #4
 80061a8:	d11c      	bne.n	80061e4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6818      	ldr	r0, [r3, #0]
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	6819      	ldr	r1, [r3, #0]
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	685a      	ldr	r2, [r3, #4]
 80061b6:	68bb      	ldr	r3, [r7, #8]
 80061b8:	68db      	ldr	r3, [r3, #12]
 80061ba:	f000 fd46 	bl	8006c4a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	699a      	ldr	r2, [r3, #24]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80061cc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	6999      	ldr	r1, [r3, #24]
 80061d4:	68bb      	ldr	r3, [r7, #8]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	021a      	lsls	r2, r3, #8
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	430a      	orrs	r2, r1
 80061e0:	619a      	str	r2, [r3, #24]
 80061e2:	e040      	b.n	8006266 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b08      	cmp	r3, #8
 80061e8:	d11b      	bne.n	8006222 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6818      	ldr	r0, [r3, #0]
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	6819      	ldr	r1, [r3, #0]
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	68db      	ldr	r3, [r3, #12]
 80061fa:	f000 fd93 	bl	8006d24 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	69da      	ldr	r2, [r3, #28]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f022 020c 	bic.w	r2, r2, #12
 800620c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	69d9      	ldr	r1, [r3, #28]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	689a      	ldr	r2, [r3, #8]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	430a      	orrs	r2, r1
 800621e:	61da      	str	r2, [r3, #28]
 8006220:	e021      	b.n	8006266 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	2b0c      	cmp	r3, #12
 8006226:	d11c      	bne.n	8006262 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	6818      	ldr	r0, [r3, #0]
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	6819      	ldr	r1, [r3, #0]
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	685a      	ldr	r2, [r3, #4]
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	68db      	ldr	r3, [r3, #12]
 8006238:	f000 fdb0 	bl	8006d9c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	69da      	ldr	r2, [r3, #28]
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800624a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	69d9      	ldr	r1, [r3, #28]
 8006252:	68bb      	ldr	r3, [r7, #8]
 8006254:	689b      	ldr	r3, [r3, #8]
 8006256:	021a      	lsls	r2, r3, #8
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	430a      	orrs	r2, r1
 800625e:	61da      	str	r2, [r3, #28]
 8006260:	e001      	b.n	8006266 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800626e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006270:	4618      	mov	r0, r3
 8006272:	3718      	adds	r7, #24
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}

08006278 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006284:	2300      	movs	r3, #0
 8006286:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800628e:	2b01      	cmp	r3, #1
 8006290:	d101      	bne.n	8006296 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006292:	2302      	movs	r3, #2
 8006294:	e0ae      	b.n	80063f4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2201      	movs	r2, #1
 800629a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b0c      	cmp	r3, #12
 80062a2:	f200 809f 	bhi.w	80063e4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80062a6:	a201      	add	r2, pc, #4	; (adr r2, 80062ac <HAL_TIM_PWM_ConfigChannel+0x34>)
 80062a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062ac:	080062e1 	.word	0x080062e1
 80062b0:	080063e5 	.word	0x080063e5
 80062b4:	080063e5 	.word	0x080063e5
 80062b8:	080063e5 	.word	0x080063e5
 80062bc:	08006321 	.word	0x08006321
 80062c0:	080063e5 	.word	0x080063e5
 80062c4:	080063e5 	.word	0x080063e5
 80062c8:	080063e5 	.word	0x080063e5
 80062cc:	08006363 	.word	0x08006363
 80062d0:	080063e5 	.word	0x080063e5
 80062d4:	080063e5 	.word	0x080063e5
 80062d8:	080063e5 	.word	0x080063e5
 80062dc:	080063a3 	.word	0x080063a3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	68b9      	ldr	r1, [r7, #8]
 80062e6:	4618      	mov	r0, r3
 80062e8:	f000 fa5c 	bl	80067a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	699a      	ldr	r2, [r3, #24]
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f042 0208 	orr.w	r2, r2, #8
 80062fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	699a      	ldr	r2, [r3, #24]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f022 0204 	bic.w	r2, r2, #4
 800630a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	6999      	ldr	r1, [r3, #24]
 8006312:	68bb      	ldr	r3, [r7, #8]
 8006314:	691a      	ldr	r2, [r3, #16]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	430a      	orrs	r2, r1
 800631c:	619a      	str	r2, [r3, #24]
      break;
 800631e:	e064      	b.n	80063ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68b9      	ldr	r1, [r7, #8]
 8006326:	4618      	mov	r0, r3
 8006328:	f000 faac 	bl	8006884 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	699a      	ldr	r2, [r3, #24]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800633a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	699a      	ldr	r2, [r3, #24]
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800634a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	6999      	ldr	r1, [r3, #24]
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	021a      	lsls	r2, r3, #8
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	430a      	orrs	r2, r1
 800635e:	619a      	str	r2, [r3, #24]
      break;
 8006360:	e043      	b.n	80063ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	68b9      	ldr	r1, [r7, #8]
 8006368:	4618      	mov	r0, r3
 800636a:	f000 fb01 	bl	8006970 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	69da      	ldr	r2, [r3, #28]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f042 0208 	orr.w	r2, r2, #8
 800637c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	69da      	ldr	r2, [r3, #28]
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f022 0204 	bic.w	r2, r2, #4
 800638c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	69d9      	ldr	r1, [r3, #28]
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	691a      	ldr	r2, [r3, #16]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	430a      	orrs	r2, r1
 800639e:	61da      	str	r2, [r3, #28]
      break;
 80063a0:	e023      	b.n	80063ea <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68b9      	ldr	r1, [r7, #8]
 80063a8:	4618      	mov	r0, r3
 80063aa:	f000 fb55 	bl	8006a58 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	69da      	ldr	r2, [r3, #28]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80063bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	69da      	ldr	r2, [r3, #28]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	69d9      	ldr	r1, [r3, #28]
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	691b      	ldr	r3, [r3, #16]
 80063d8:	021a      	lsls	r2, r3, #8
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	430a      	orrs	r2, r1
 80063e0:	61da      	str	r2, [r3, #28]
      break;
 80063e2:	e002      	b.n	80063ea <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80063e4:	2301      	movs	r3, #1
 80063e6:	75fb      	strb	r3, [r7, #23]
      break;
 80063e8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80063f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	3718      	adds	r7, #24
 80063f8:	46bd      	mov	sp, r7
 80063fa:	bd80      	pop	{r7, pc}

080063fc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b084      	sub	sp, #16
 8006400:	af00      	add	r7, sp, #0
 8006402:	6078      	str	r0, [r7, #4]
 8006404:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006406:	2300      	movs	r3, #0
 8006408:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006410:	2b01      	cmp	r3, #1
 8006412:	d101      	bne.n	8006418 <HAL_TIM_ConfigClockSource+0x1c>
 8006414:	2302      	movs	r3, #2
 8006416:	e0b4      	b.n	8006582 <HAL_TIM_ConfigClockSource+0x186>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2202      	movs	r2, #2
 8006424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	689b      	ldr	r3, [r3, #8]
 800642e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006430:	68bb      	ldr	r3, [r7, #8]
 8006432:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006436:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800643e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	68ba      	ldr	r2, [r7, #8]
 8006446:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006450:	d03e      	beq.n	80064d0 <HAL_TIM_ConfigClockSource+0xd4>
 8006452:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006456:	f200 8087 	bhi.w	8006568 <HAL_TIM_ConfigClockSource+0x16c>
 800645a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800645e:	f000 8086 	beq.w	800656e <HAL_TIM_ConfigClockSource+0x172>
 8006462:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006466:	d87f      	bhi.n	8006568 <HAL_TIM_ConfigClockSource+0x16c>
 8006468:	2b70      	cmp	r3, #112	; 0x70
 800646a:	d01a      	beq.n	80064a2 <HAL_TIM_ConfigClockSource+0xa6>
 800646c:	2b70      	cmp	r3, #112	; 0x70
 800646e:	d87b      	bhi.n	8006568 <HAL_TIM_ConfigClockSource+0x16c>
 8006470:	2b60      	cmp	r3, #96	; 0x60
 8006472:	d050      	beq.n	8006516 <HAL_TIM_ConfigClockSource+0x11a>
 8006474:	2b60      	cmp	r3, #96	; 0x60
 8006476:	d877      	bhi.n	8006568 <HAL_TIM_ConfigClockSource+0x16c>
 8006478:	2b50      	cmp	r3, #80	; 0x50
 800647a:	d03c      	beq.n	80064f6 <HAL_TIM_ConfigClockSource+0xfa>
 800647c:	2b50      	cmp	r3, #80	; 0x50
 800647e:	d873      	bhi.n	8006568 <HAL_TIM_ConfigClockSource+0x16c>
 8006480:	2b40      	cmp	r3, #64	; 0x40
 8006482:	d058      	beq.n	8006536 <HAL_TIM_ConfigClockSource+0x13a>
 8006484:	2b40      	cmp	r3, #64	; 0x40
 8006486:	d86f      	bhi.n	8006568 <HAL_TIM_ConfigClockSource+0x16c>
 8006488:	2b30      	cmp	r3, #48	; 0x30
 800648a:	d064      	beq.n	8006556 <HAL_TIM_ConfigClockSource+0x15a>
 800648c:	2b30      	cmp	r3, #48	; 0x30
 800648e:	d86b      	bhi.n	8006568 <HAL_TIM_ConfigClockSource+0x16c>
 8006490:	2b20      	cmp	r3, #32
 8006492:	d060      	beq.n	8006556 <HAL_TIM_ConfigClockSource+0x15a>
 8006494:	2b20      	cmp	r3, #32
 8006496:	d867      	bhi.n	8006568 <HAL_TIM_ConfigClockSource+0x16c>
 8006498:	2b00      	cmp	r3, #0
 800649a:	d05c      	beq.n	8006556 <HAL_TIM_ConfigClockSource+0x15a>
 800649c:	2b10      	cmp	r3, #16
 800649e:	d05a      	beq.n	8006556 <HAL_TIM_ConfigClockSource+0x15a>
 80064a0:	e062      	b.n	8006568 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6818      	ldr	r0, [r3, #0]
 80064a6:	683b      	ldr	r3, [r7, #0]
 80064a8:	6899      	ldr	r1, [r3, #8]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	685a      	ldr	r2, [r3, #4]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	f000 fccb 	bl	8006e4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80064c4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68ba      	ldr	r2, [r7, #8]
 80064cc:	609a      	str	r2, [r3, #8]
      break;
 80064ce:	e04f      	b.n	8006570 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	6818      	ldr	r0, [r3, #0]
 80064d4:	683b      	ldr	r3, [r7, #0]
 80064d6:	6899      	ldr	r1, [r3, #8]
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	685a      	ldr	r2, [r3, #4]
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	68db      	ldr	r3, [r3, #12]
 80064e0:	f000 fcb4 	bl	8006e4c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	689a      	ldr	r2, [r3, #8]
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064f2:	609a      	str	r2, [r3, #8]
      break;
 80064f4:	e03c      	b.n	8006570 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6818      	ldr	r0, [r3, #0]
 80064fa:	683b      	ldr	r3, [r7, #0]
 80064fc:	6859      	ldr	r1, [r3, #4]
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	461a      	mov	r2, r3
 8006504:	f000 fb72 	bl	8006bec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2150      	movs	r1, #80	; 0x50
 800650e:	4618      	mov	r0, r3
 8006510:	f000 fc81 	bl	8006e16 <TIM_ITRx_SetConfig>
      break;
 8006514:	e02c      	b.n	8006570 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6818      	ldr	r0, [r3, #0]
 800651a:	683b      	ldr	r3, [r7, #0]
 800651c:	6859      	ldr	r1, [r3, #4]
 800651e:	683b      	ldr	r3, [r7, #0]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	461a      	mov	r2, r3
 8006524:	f000 fbce 	bl	8006cc4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	2160      	movs	r1, #96	; 0x60
 800652e:	4618      	mov	r0, r3
 8006530:	f000 fc71 	bl	8006e16 <TIM_ITRx_SetConfig>
      break;
 8006534:	e01c      	b.n	8006570 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6818      	ldr	r0, [r3, #0]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	6859      	ldr	r1, [r3, #4]
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	461a      	mov	r2, r3
 8006544:	f000 fb52 	bl	8006bec <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	2140      	movs	r1, #64	; 0x40
 800654e:	4618      	mov	r0, r3
 8006550:	f000 fc61 	bl	8006e16 <TIM_ITRx_SetConfig>
      break;
 8006554:	e00c      	b.n	8006570 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681a      	ldr	r2, [r3, #0]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4619      	mov	r1, r3
 8006560:	4610      	mov	r0, r2
 8006562:	f000 fc58 	bl	8006e16 <TIM_ITRx_SetConfig>
      break;
 8006566:	e003      	b.n	8006570 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	73fb      	strb	r3, [r7, #15]
      break;
 800656c:	e000      	b.n	8006570 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800656e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2201      	movs	r2, #1
 8006574:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2200      	movs	r2, #0
 800657c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006580:	7bfb      	ldrb	r3, [r7, #15]
}
 8006582:	4618      	mov	r0, r3
 8006584:	3710      	adds	r7, #16
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}
	...

0800658c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800658c:	b480      	push	{r7}
 800658e:	b085      	sub	sp, #20
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006596:	2300      	movs	r3, #0
 8006598:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	2b0c      	cmp	r3, #12
 800659e:	d831      	bhi.n	8006604 <HAL_TIM_ReadCapturedValue+0x78>
 80065a0:	a201      	add	r2, pc, #4	; (adr r2, 80065a8 <HAL_TIM_ReadCapturedValue+0x1c>)
 80065a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a6:	bf00      	nop
 80065a8:	080065dd 	.word	0x080065dd
 80065ac:	08006605 	.word	0x08006605
 80065b0:	08006605 	.word	0x08006605
 80065b4:	08006605 	.word	0x08006605
 80065b8:	080065e7 	.word	0x080065e7
 80065bc:	08006605 	.word	0x08006605
 80065c0:	08006605 	.word	0x08006605
 80065c4:	08006605 	.word	0x08006605
 80065c8:	080065f1 	.word	0x080065f1
 80065cc:	08006605 	.word	0x08006605
 80065d0:	08006605 	.word	0x08006605
 80065d4:	08006605 	.word	0x08006605
 80065d8:	080065fb 	.word	0x080065fb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065e2:	60fb      	str	r3, [r7, #12]

      break;
 80065e4:	e00f      	b.n	8006606 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ec:	60fb      	str	r3, [r7, #12]

      break;
 80065ee:	e00a      	b.n	8006606 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065f6:	60fb      	str	r3, [r7, #12]

      break;
 80065f8:	e005      	b.n	8006606 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006600:	60fb      	str	r3, [r7, #12]

      break;
 8006602:	e000      	b.n	8006606 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8006604:	bf00      	nop
  }

  return tmpreg;
 8006606:	68fb      	ldr	r3, [r7, #12]
}
 8006608:	4618      	mov	r0, r3
 800660a:	3714      	adds	r7, #20
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
 800661a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800661c:	bf00      	nop
 800661e:	370c      	adds	r7, #12
 8006620:	46bd      	mov	sp, r7
 8006622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006626:	4770      	bx	lr

08006628 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006628:	b480      	push	{r7}
 800662a:	b083      	sub	sp, #12
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006630:	bf00      	nop
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800663c:	b480      	push	{r7}
 800663e:	b083      	sub	sp, #12
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006644:	bf00      	nop
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006658:	bf00      	nop
 800665a:	370c      	adds	r7, #12
 800665c:	46bd      	mov	sp, r7
 800665e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006662:	4770      	bx	lr

08006664 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006664:	b480      	push	{r7}
 8006666:	b085      	sub	sp, #20
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	4a40      	ldr	r2, [pc, #256]	; (8006778 <TIM_Base_SetConfig+0x114>)
 8006678:	4293      	cmp	r3, r2
 800667a:	d013      	beq.n	80066a4 <TIM_Base_SetConfig+0x40>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006682:	d00f      	beq.n	80066a4 <TIM_Base_SetConfig+0x40>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a3d      	ldr	r2, [pc, #244]	; (800677c <TIM_Base_SetConfig+0x118>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d00b      	beq.n	80066a4 <TIM_Base_SetConfig+0x40>
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	4a3c      	ldr	r2, [pc, #240]	; (8006780 <TIM_Base_SetConfig+0x11c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d007      	beq.n	80066a4 <TIM_Base_SetConfig+0x40>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	4a3b      	ldr	r2, [pc, #236]	; (8006784 <TIM_Base_SetConfig+0x120>)
 8006698:	4293      	cmp	r3, r2
 800669a:	d003      	beq.n	80066a4 <TIM_Base_SetConfig+0x40>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	4a3a      	ldr	r2, [pc, #232]	; (8006788 <TIM_Base_SetConfig+0x124>)
 80066a0:	4293      	cmp	r3, r2
 80066a2:	d108      	bne.n	80066b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	68fa      	ldr	r2, [r7, #12]
 80066b2:	4313      	orrs	r3, r2
 80066b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	4a2f      	ldr	r2, [pc, #188]	; (8006778 <TIM_Base_SetConfig+0x114>)
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d02b      	beq.n	8006716 <TIM_Base_SetConfig+0xb2>
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80066c4:	d027      	beq.n	8006716 <TIM_Base_SetConfig+0xb2>
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	4a2c      	ldr	r2, [pc, #176]	; (800677c <TIM_Base_SetConfig+0x118>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d023      	beq.n	8006716 <TIM_Base_SetConfig+0xb2>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	4a2b      	ldr	r2, [pc, #172]	; (8006780 <TIM_Base_SetConfig+0x11c>)
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d01f      	beq.n	8006716 <TIM_Base_SetConfig+0xb2>
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a2a      	ldr	r2, [pc, #168]	; (8006784 <TIM_Base_SetConfig+0x120>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d01b      	beq.n	8006716 <TIM_Base_SetConfig+0xb2>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a29      	ldr	r2, [pc, #164]	; (8006788 <TIM_Base_SetConfig+0x124>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d017      	beq.n	8006716 <TIM_Base_SetConfig+0xb2>
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	4a28      	ldr	r2, [pc, #160]	; (800678c <TIM_Base_SetConfig+0x128>)
 80066ea:	4293      	cmp	r3, r2
 80066ec:	d013      	beq.n	8006716 <TIM_Base_SetConfig+0xb2>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a27      	ldr	r2, [pc, #156]	; (8006790 <TIM_Base_SetConfig+0x12c>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d00f      	beq.n	8006716 <TIM_Base_SetConfig+0xb2>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a26      	ldr	r2, [pc, #152]	; (8006794 <TIM_Base_SetConfig+0x130>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d00b      	beq.n	8006716 <TIM_Base_SetConfig+0xb2>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	4a25      	ldr	r2, [pc, #148]	; (8006798 <TIM_Base_SetConfig+0x134>)
 8006702:	4293      	cmp	r3, r2
 8006704:	d007      	beq.n	8006716 <TIM_Base_SetConfig+0xb2>
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	4a24      	ldr	r2, [pc, #144]	; (800679c <TIM_Base_SetConfig+0x138>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d003      	beq.n	8006716 <TIM_Base_SetConfig+0xb2>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	4a23      	ldr	r2, [pc, #140]	; (80067a0 <TIM_Base_SetConfig+0x13c>)
 8006712:	4293      	cmp	r3, r2
 8006714:	d108      	bne.n	8006728 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800671c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	4313      	orrs	r3, r2
 8006726:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	695b      	ldr	r3, [r3, #20]
 8006732:	4313      	orrs	r3, r2
 8006734:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	689a      	ldr	r2, [r3, #8]
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	4a0a      	ldr	r2, [pc, #40]	; (8006778 <TIM_Base_SetConfig+0x114>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d003      	beq.n	800675c <TIM_Base_SetConfig+0xf8>
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a0c      	ldr	r2, [pc, #48]	; (8006788 <TIM_Base_SetConfig+0x124>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d103      	bne.n	8006764 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	691a      	ldr	r2, [r3, #16]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	2201      	movs	r2, #1
 8006768:	615a      	str	r2, [r3, #20]
}
 800676a:	bf00      	nop
 800676c:	3714      	adds	r7, #20
 800676e:	46bd      	mov	sp, r7
 8006770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006774:	4770      	bx	lr
 8006776:	bf00      	nop
 8006778:	40010000 	.word	0x40010000
 800677c:	40000400 	.word	0x40000400
 8006780:	40000800 	.word	0x40000800
 8006784:	40000c00 	.word	0x40000c00
 8006788:	40010400 	.word	0x40010400
 800678c:	40014000 	.word	0x40014000
 8006790:	40014400 	.word	0x40014400
 8006794:	40014800 	.word	0x40014800
 8006798:	40001800 	.word	0x40001800
 800679c:	40001c00 	.word	0x40001c00
 80067a0:	40002000 	.word	0x40002000

080067a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067a4:	b480      	push	{r7}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a1b      	ldr	r3, [r3, #32]
 80067b2:	f023 0201 	bic.w	r2, r3, #1
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	685b      	ldr	r3, [r3, #4]
 80067c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	f023 0303 	bic.w	r3, r3, #3
 80067da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	4313      	orrs	r3, r2
 80067e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	f023 0302 	bic.w	r3, r3, #2
 80067ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	689b      	ldr	r3, [r3, #8]
 80067f2:	697a      	ldr	r2, [r7, #20]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	4a20      	ldr	r2, [pc, #128]	; (800687c <TIM_OC1_SetConfig+0xd8>)
 80067fc:	4293      	cmp	r3, r2
 80067fe:	d003      	beq.n	8006808 <TIM_OC1_SetConfig+0x64>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	4a1f      	ldr	r2, [pc, #124]	; (8006880 <TIM_OC1_SetConfig+0xdc>)
 8006804:	4293      	cmp	r3, r2
 8006806:	d10c      	bne.n	8006822 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	f023 0308 	bic.w	r3, r3, #8
 800680e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	697a      	ldr	r2, [r7, #20]
 8006816:	4313      	orrs	r3, r2
 8006818:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	f023 0304 	bic.w	r3, r3, #4
 8006820:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	4a15      	ldr	r2, [pc, #84]	; (800687c <TIM_OC1_SetConfig+0xd8>)
 8006826:	4293      	cmp	r3, r2
 8006828:	d003      	beq.n	8006832 <TIM_OC1_SetConfig+0x8e>
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a14      	ldr	r2, [pc, #80]	; (8006880 <TIM_OC1_SetConfig+0xdc>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d111      	bne.n	8006856 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006838:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800683a:	693b      	ldr	r3, [r7, #16]
 800683c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006840:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	695b      	ldr	r3, [r3, #20]
 8006846:	693a      	ldr	r2, [r7, #16]
 8006848:	4313      	orrs	r3, r2
 800684a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800684c:	683b      	ldr	r3, [r7, #0]
 800684e:	699b      	ldr	r3, [r3, #24]
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	4313      	orrs	r3, r2
 8006854:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	693a      	ldr	r2, [r7, #16]
 800685a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	68fa      	ldr	r2, [r7, #12]
 8006860:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006862:	683b      	ldr	r3, [r7, #0]
 8006864:	685a      	ldr	r2, [r3, #4]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	697a      	ldr	r2, [r7, #20]
 800686e:	621a      	str	r2, [r3, #32]
}
 8006870:	bf00      	nop
 8006872:	371c      	adds	r7, #28
 8006874:	46bd      	mov	sp, r7
 8006876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687a:	4770      	bx	lr
 800687c:	40010000 	.word	0x40010000
 8006880:	40010400 	.word	0x40010400

08006884 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006884:	b480      	push	{r7}
 8006886:	b087      	sub	sp, #28
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a1b      	ldr	r3, [r3, #32]
 8006892:	f023 0210 	bic.w	r2, r3, #16
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	699b      	ldr	r3, [r3, #24]
 80068aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068bc:	683b      	ldr	r3, [r7, #0]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	021b      	lsls	r3, r3, #8
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	4313      	orrs	r3, r2
 80068c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	f023 0320 	bic.w	r3, r3, #32
 80068ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	689b      	ldr	r3, [r3, #8]
 80068d4:	011b      	lsls	r3, r3, #4
 80068d6:	697a      	ldr	r2, [r7, #20]
 80068d8:	4313      	orrs	r3, r2
 80068da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a22      	ldr	r2, [pc, #136]	; (8006968 <TIM_OC2_SetConfig+0xe4>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d003      	beq.n	80068ec <TIM_OC2_SetConfig+0x68>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a21      	ldr	r2, [pc, #132]	; (800696c <TIM_OC2_SetConfig+0xe8>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d10d      	bne.n	8006908 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80068ec:	697b      	ldr	r3, [r7, #20]
 80068ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80068f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	011b      	lsls	r3, r3, #4
 80068fa:	697a      	ldr	r2, [r7, #20]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006906:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	4a17      	ldr	r2, [pc, #92]	; (8006968 <TIM_OC2_SetConfig+0xe4>)
 800690c:	4293      	cmp	r3, r2
 800690e:	d003      	beq.n	8006918 <TIM_OC2_SetConfig+0x94>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a16      	ldr	r2, [pc, #88]	; (800696c <TIM_OC2_SetConfig+0xe8>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d113      	bne.n	8006940 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800691e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006920:	693b      	ldr	r3, [r7, #16]
 8006922:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006926:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	695b      	ldr	r3, [r3, #20]
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	4313      	orrs	r3, r2
 8006932:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	699b      	ldr	r3, [r3, #24]
 8006938:	009b      	lsls	r3, r3, #2
 800693a:	693a      	ldr	r2, [r7, #16]
 800693c:	4313      	orrs	r3, r2
 800693e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	693a      	ldr	r2, [r7, #16]
 8006944:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	68fa      	ldr	r2, [r7, #12]
 800694a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	685a      	ldr	r2, [r3, #4]
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	697a      	ldr	r2, [r7, #20]
 8006958:	621a      	str	r2, [r3, #32]
}
 800695a:	bf00      	nop
 800695c:	371c      	adds	r7, #28
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	40010000 	.word	0x40010000
 800696c:	40010400 	.word	0x40010400

08006970 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006970:	b480      	push	{r7}
 8006972:	b087      	sub	sp, #28
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800699e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	f023 0303 	bic.w	r3, r3, #3
 80069a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68fa      	ldr	r2, [r7, #12]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	021b      	lsls	r3, r3, #8
 80069c0:	697a      	ldr	r2, [r7, #20]
 80069c2:	4313      	orrs	r3, r2
 80069c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a21      	ldr	r2, [pc, #132]	; (8006a50 <TIM_OC3_SetConfig+0xe0>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d003      	beq.n	80069d6 <TIM_OC3_SetConfig+0x66>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4a20      	ldr	r2, [pc, #128]	; (8006a54 <TIM_OC3_SetConfig+0xe4>)
 80069d2:	4293      	cmp	r3, r2
 80069d4:	d10d      	bne.n	80069f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80069d6:	697b      	ldr	r3, [r7, #20]
 80069d8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80069dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	68db      	ldr	r3, [r3, #12]
 80069e2:	021b      	lsls	r3, r3, #8
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	4313      	orrs	r3, r2
 80069e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80069ea:	697b      	ldr	r3, [r7, #20]
 80069ec:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80069f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	4a16      	ldr	r2, [pc, #88]	; (8006a50 <TIM_OC3_SetConfig+0xe0>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d003      	beq.n	8006a02 <TIM_OC3_SetConfig+0x92>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	4a15      	ldr	r2, [pc, #84]	; (8006a54 <TIM_OC3_SetConfig+0xe4>)
 80069fe:	4293      	cmp	r3, r2
 8006a00:	d113      	bne.n	8006a2a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006a02:	693b      	ldr	r3, [r7, #16]
 8006a04:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006a08:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006a0a:	693b      	ldr	r3, [r7, #16]
 8006a0c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a10:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	695b      	ldr	r3, [r3, #20]
 8006a16:	011b      	lsls	r3, r3, #4
 8006a18:	693a      	ldr	r2, [r7, #16]
 8006a1a:	4313      	orrs	r3, r2
 8006a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	011b      	lsls	r3, r3, #4
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	693a      	ldr	r2, [r7, #16]
 8006a2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	685a      	ldr	r2, [r3, #4]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	697a      	ldr	r2, [r7, #20]
 8006a42:	621a      	str	r2, [r3, #32]
}
 8006a44:	bf00      	nop
 8006a46:	371c      	adds	r7, #28
 8006a48:	46bd      	mov	sp, r7
 8006a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4e:	4770      	bx	lr
 8006a50:	40010000 	.word	0x40010000
 8006a54:	40010400 	.word	0x40010400

08006a58 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a58:	b480      	push	{r7}
 8006a5a:	b087      	sub	sp, #28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
 8006a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a1b      	ldr	r3, [r3, #32]
 8006a72:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	69db      	ldr	r3, [r3, #28]
 8006a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	021b      	lsls	r3, r3, #8
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a9c:	693b      	ldr	r3, [r7, #16]
 8006a9e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006aa2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	031b      	lsls	r3, r3, #12
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	4a12      	ldr	r2, [pc, #72]	; (8006afc <TIM_OC4_SetConfig+0xa4>)
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	d003      	beq.n	8006ac0 <TIM_OC4_SetConfig+0x68>
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	4a11      	ldr	r2, [pc, #68]	; (8006b00 <TIM_OC4_SetConfig+0xa8>)
 8006abc:	4293      	cmp	r3, r2
 8006abe:	d109      	bne.n	8006ad4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006ac6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	695b      	ldr	r3, [r3, #20]
 8006acc:	019b      	lsls	r3, r3, #6
 8006ace:	697a      	ldr	r2, [r7, #20]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	697a      	ldr	r2, [r7, #20]
 8006ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	685a      	ldr	r2, [r3, #4]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	693a      	ldr	r2, [r7, #16]
 8006aec:	621a      	str	r2, [r3, #32]
}
 8006aee:	bf00      	nop
 8006af0:	371c      	adds	r7, #28
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	40010000 	.word	0x40010000
 8006b00:	40010400 	.word	0x40010400

08006b04 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b087      	sub	sp, #28
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	60f8      	str	r0, [r7, #12]
 8006b0c:	60b9      	str	r1, [r7, #8]
 8006b0e:	607a      	str	r2, [r7, #4]
 8006b10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	6a1b      	ldr	r3, [r3, #32]
 8006b16:	f023 0201 	bic.w	r2, r3, #1
 8006b1a:	68fb      	ldr	r3, [r7, #12]
 8006b1c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b1e:	68fb      	ldr	r3, [r7, #12]
 8006b20:	699b      	ldr	r3, [r3, #24]
 8006b22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	6a1b      	ldr	r3, [r3, #32]
 8006b28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	4a28      	ldr	r2, [pc, #160]	; (8006bd0 <TIM_TI1_SetConfig+0xcc>)
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d01b      	beq.n	8006b6a <TIM_TI1_SetConfig+0x66>
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b38:	d017      	beq.n	8006b6a <TIM_TI1_SetConfig+0x66>
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	4a25      	ldr	r2, [pc, #148]	; (8006bd4 <TIM_TI1_SetConfig+0xd0>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d013      	beq.n	8006b6a <TIM_TI1_SetConfig+0x66>
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	4a24      	ldr	r2, [pc, #144]	; (8006bd8 <TIM_TI1_SetConfig+0xd4>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d00f      	beq.n	8006b6a <TIM_TI1_SetConfig+0x66>
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	4a23      	ldr	r2, [pc, #140]	; (8006bdc <TIM_TI1_SetConfig+0xd8>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d00b      	beq.n	8006b6a <TIM_TI1_SetConfig+0x66>
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	4a22      	ldr	r2, [pc, #136]	; (8006be0 <TIM_TI1_SetConfig+0xdc>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d007      	beq.n	8006b6a <TIM_TI1_SetConfig+0x66>
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	4a21      	ldr	r2, [pc, #132]	; (8006be4 <TIM_TI1_SetConfig+0xe0>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d003      	beq.n	8006b6a <TIM_TI1_SetConfig+0x66>
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	4a20      	ldr	r2, [pc, #128]	; (8006be8 <TIM_TI1_SetConfig+0xe4>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d101      	bne.n	8006b6e <TIM_TI1_SetConfig+0x6a>
 8006b6a:	2301      	movs	r3, #1
 8006b6c:	e000      	b.n	8006b70 <TIM_TI1_SetConfig+0x6c>
 8006b6e:	2300      	movs	r3, #0
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d008      	beq.n	8006b86 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	f023 0303 	bic.w	r3, r3, #3
 8006b7a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006b7c:	697a      	ldr	r2, [r7, #20]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	617b      	str	r3, [r7, #20]
 8006b84:	e003      	b.n	8006b8e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	f043 0301 	orr.w	r3, r3, #1
 8006b8c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006b8e:	697b      	ldr	r3, [r7, #20]
 8006b90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006b94:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	011b      	lsls	r3, r3, #4
 8006b9a:	b2db      	uxtb	r3, r3
 8006b9c:	697a      	ldr	r2, [r7, #20]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	f023 030a 	bic.w	r3, r3, #10
 8006ba8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	f003 030a 	and.w	r3, r3, #10
 8006bb0:	693a      	ldr	r2, [r7, #16]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	697a      	ldr	r2, [r7, #20]
 8006bba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	693a      	ldr	r2, [r7, #16]
 8006bc0:	621a      	str	r2, [r3, #32]
}
 8006bc2:	bf00      	nop
 8006bc4:	371c      	adds	r7, #28
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	40010000 	.word	0x40010000
 8006bd4:	40000400 	.word	0x40000400
 8006bd8:	40000800 	.word	0x40000800
 8006bdc:	40000c00 	.word	0x40000c00
 8006be0:	40010400 	.word	0x40010400
 8006be4:	40014000 	.word	0x40014000
 8006be8:	40001800 	.word	0x40001800

08006bec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b087      	sub	sp, #28
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	60f8      	str	r0, [r7, #12]
 8006bf4:	60b9      	str	r1, [r7, #8]
 8006bf6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6a1b      	ldr	r3, [r3, #32]
 8006bfc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	6a1b      	ldr	r3, [r3, #32]
 8006c02:	f023 0201 	bic.w	r2, r3, #1
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	699b      	ldr	r3, [r3, #24]
 8006c0e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006c16:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	011b      	lsls	r3, r3, #4
 8006c1c:	693a      	ldr	r2, [r7, #16]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	f023 030a 	bic.w	r3, r3, #10
 8006c28:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006c2a:	697a      	ldr	r2, [r7, #20]
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	693a      	ldr	r2, [r7, #16]
 8006c36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	621a      	str	r2, [r3, #32]
}
 8006c3e:	bf00      	nop
 8006c40:	371c      	adds	r7, #28
 8006c42:	46bd      	mov	sp, r7
 8006c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c48:	4770      	bx	lr

08006c4a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006c4a:	b480      	push	{r7}
 8006c4c:	b087      	sub	sp, #28
 8006c4e:	af00      	add	r7, sp, #0
 8006c50:	60f8      	str	r0, [r7, #12]
 8006c52:	60b9      	str	r1, [r7, #8]
 8006c54:	607a      	str	r2, [r7, #4]
 8006c56:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	6a1b      	ldr	r3, [r3, #32]
 8006c5c:	f023 0210 	bic.w	r2, r3, #16
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	6a1b      	ldr	r3, [r3, #32]
 8006c6e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006c70:	697b      	ldr	r3, [r7, #20]
 8006c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c76:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	021b      	lsls	r3, r3, #8
 8006c7c:	697a      	ldr	r2, [r7, #20]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006c88:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006c8a:	683b      	ldr	r3, [r7, #0]
 8006c8c:	031b      	lsls	r3, r3, #12
 8006c8e:	b29b      	uxth	r3, r3
 8006c90:	697a      	ldr	r2, [r7, #20]
 8006c92:	4313      	orrs	r3, r2
 8006c94:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006c9c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	011b      	lsls	r3, r3, #4
 8006ca2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006ca6:	693a      	ldr	r2, [r7, #16]
 8006ca8:	4313      	orrs	r3, r2
 8006caa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	697a      	ldr	r2, [r7, #20]
 8006cb0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	693a      	ldr	r2, [r7, #16]
 8006cb6:	621a      	str	r2, [r3, #32]
}
 8006cb8:	bf00      	nop
 8006cba:	371c      	adds	r7, #28
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr

08006cc4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cc4:	b480      	push	{r7}
 8006cc6:	b087      	sub	sp, #28
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	60f8      	str	r0, [r7, #12]
 8006ccc:	60b9      	str	r1, [r7, #8]
 8006cce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	6a1b      	ldr	r3, [r3, #32]
 8006cd4:	f023 0210 	bic.w	r2, r3, #16
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ce8:	697b      	ldr	r3, [r7, #20]
 8006cea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006cee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	031b      	lsls	r3, r3, #12
 8006cf4:	697a      	ldr	r2, [r7, #20]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d00:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	011b      	lsls	r3, r3, #4
 8006d06:	693a      	ldr	r2, [r7, #16]
 8006d08:	4313      	orrs	r3, r2
 8006d0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	697a      	ldr	r2, [r7, #20]
 8006d10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	693a      	ldr	r2, [r7, #16]
 8006d16:	621a      	str	r2, [r3, #32]
}
 8006d18:	bf00      	nop
 8006d1a:	371c      	adds	r7, #28
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b087      	sub	sp, #28
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
 8006d30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	6a1b      	ldr	r3, [r3, #32]
 8006d36:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	69db      	ldr	r3, [r3, #28]
 8006d42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6a1b      	ldr	r3, [r3, #32]
 8006d48:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006d4a:	697b      	ldr	r3, [r7, #20]
 8006d4c:	f023 0303 	bic.w	r3, r3, #3
 8006d50:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006d52:	697a      	ldr	r2, [r7, #20]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	4313      	orrs	r3, r2
 8006d58:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d60:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	011b      	lsls	r3, r3, #4
 8006d66:	b2db      	uxtb	r3, r3
 8006d68:	697a      	ldr	r2, [r7, #20]
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006d74:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	021b      	lsls	r3, r3, #8
 8006d7a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006d7e:	693a      	ldr	r2, [r7, #16]
 8006d80:	4313      	orrs	r3, r2
 8006d82:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	697a      	ldr	r2, [r7, #20]
 8006d88:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	693a      	ldr	r2, [r7, #16]
 8006d8e:	621a      	str	r2, [r3, #32]
}
 8006d90:	bf00      	nop
 8006d92:	371c      	adds	r7, #28
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b087      	sub	sp, #28
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	60f8      	str	r0, [r7, #12]
 8006da4:	60b9      	str	r1, [r7, #8]
 8006da6:	607a      	str	r2, [r7, #4]
 8006da8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6a1b      	ldr	r3, [r3, #32]
 8006dae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	69db      	ldr	r3, [r3, #28]
 8006dba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6a1b      	ldr	r3, [r3, #32]
 8006dc0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006dc8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	021b      	lsls	r3, r3, #8
 8006dce:	697a      	ldr	r2, [r7, #20]
 8006dd0:	4313      	orrs	r3, r2
 8006dd2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006dda:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	031b      	lsls	r3, r3, #12
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	697a      	ldr	r2, [r7, #20]
 8006de4:	4313      	orrs	r3, r2
 8006de6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006dee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	031b      	lsls	r3, r3, #12
 8006df4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006df8:	693a      	ldr	r2, [r7, #16]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	697a      	ldr	r2, [r7, #20]
 8006e02:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	693a      	ldr	r2, [r7, #16]
 8006e08:	621a      	str	r2, [r3, #32]
}
 8006e0a:	bf00      	nop
 8006e0c:	371c      	adds	r7, #28
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e14:	4770      	bx	lr

08006e16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e16:	b480      	push	{r7}
 8006e18:	b085      	sub	sp, #20
 8006e1a:	af00      	add	r7, sp, #0
 8006e1c:	6078      	str	r0, [r7, #4]
 8006e1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	689b      	ldr	r3, [r3, #8]
 8006e24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e2e:	683a      	ldr	r2, [r7, #0]
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	4313      	orrs	r3, r2
 8006e34:	f043 0307 	orr.w	r3, r3, #7
 8006e38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	609a      	str	r2, [r3, #8]
}
 8006e40:	bf00      	nop
 8006e42:	3714      	adds	r7, #20
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b087      	sub	sp, #28
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	60f8      	str	r0, [r7, #12]
 8006e54:	60b9      	str	r1, [r7, #8]
 8006e56:	607a      	str	r2, [r7, #4]
 8006e58:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	689b      	ldr	r3, [r3, #8]
 8006e5e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e66:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	021a      	lsls	r2, r3, #8
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	431a      	orrs	r2, r3
 8006e70:	68bb      	ldr	r3, [r7, #8]
 8006e72:	4313      	orrs	r3, r2
 8006e74:	697a      	ldr	r2, [r7, #20]
 8006e76:	4313      	orrs	r3, r2
 8006e78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	697a      	ldr	r2, [r7, #20]
 8006e7e:	609a      	str	r2, [r3, #8]
}
 8006e80:	bf00      	nop
 8006e82:	371c      	adds	r7, #28
 8006e84:	46bd      	mov	sp, r7
 8006e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8a:	4770      	bx	lr

08006e8c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e8c:	b480      	push	{r7}
 8006e8e:	b087      	sub	sp, #28
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	60f8      	str	r0, [r7, #12]
 8006e94:	60b9      	str	r1, [r7, #8]
 8006e96:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	f003 031f 	and.w	r3, r3, #31
 8006e9e:	2201      	movs	r2, #1
 8006ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8006ea4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6a1a      	ldr	r2, [r3, #32]
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	43db      	mvns	r3, r3
 8006eae:	401a      	ands	r2, r3
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	6a1a      	ldr	r2, [r3, #32]
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	f003 031f 	and.w	r3, r3, #31
 8006ebe:	6879      	ldr	r1, [r7, #4]
 8006ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ec4:	431a      	orrs	r2, r3
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	621a      	str	r2, [r3, #32]
}
 8006eca:	bf00      	nop
 8006ecc:	371c      	adds	r7, #28
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed4:	4770      	bx	lr
	...

08006ed8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b085      	sub	sp, #20
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	6078      	str	r0, [r7, #4]
 8006ee0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ee8:	2b01      	cmp	r3, #1
 8006eea:	d101      	bne.n	8006ef0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006eec:	2302      	movs	r3, #2
 8006eee:	e05a      	b.n	8006fa6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	2202      	movs	r2, #2
 8006efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	685b      	ldr	r3, [r3, #4]
 8006f06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68fa      	ldr	r2, [r7, #12]
 8006f28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	4a21      	ldr	r2, [pc, #132]	; (8006fb4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f30:	4293      	cmp	r3, r2
 8006f32:	d022      	beq.n	8006f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f3c:	d01d      	beq.n	8006f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a1d      	ldr	r2, [pc, #116]	; (8006fb8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d018      	beq.n	8006f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4a1b      	ldr	r2, [pc, #108]	; (8006fbc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d013      	beq.n	8006f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a1a      	ldr	r2, [pc, #104]	; (8006fc0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d00e      	beq.n	8006f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a18      	ldr	r2, [pc, #96]	; (8006fc4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d009      	beq.n	8006f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a17      	ldr	r2, [pc, #92]	; (8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d004      	beq.n	8006f7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a15      	ldr	r2, [pc, #84]	; (8006fcc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d10c      	bne.n	8006f94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f7a:	68bb      	ldr	r3, [r7, #8]
 8006f7c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	68ba      	ldr	r2, [r7, #8]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68ba      	ldr	r2, [r7, #8]
 8006f92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2201      	movs	r2, #1
 8006f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fa4:	2300      	movs	r3, #0
}
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	3714      	adds	r7, #20
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
 8006fb2:	bf00      	nop
 8006fb4:	40010000 	.word	0x40010000
 8006fb8:	40000400 	.word	0x40000400
 8006fbc:	40000800 	.word	0x40000800
 8006fc0:	40000c00 	.word	0x40000c00
 8006fc4:	40010400 	.word	0x40010400
 8006fc8:	40014000 	.word	0x40014000
 8006fcc:	40001800 	.word	0x40001800

08006fd0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006fd0:	b480      	push	{r7}
 8006fd2:	b085      	sub	sp, #20
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
 8006fd8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d101      	bne.n	8006fec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006fe8:	2302      	movs	r3, #2
 8006fea:	e03d      	b.n	8007068 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	4313      	orrs	r3, r2
 8007000:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	689b      	ldr	r3, [r3, #8]
 800700c:	4313      	orrs	r3, r2
 800700e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	685b      	ldr	r3, [r3, #4]
 800701a:	4313      	orrs	r3, r2
 800701c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007024:	683b      	ldr	r3, [r7, #0]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4313      	orrs	r3, r2
 800702a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	691b      	ldr	r3, [r3, #16]
 8007036:	4313      	orrs	r3, r2
 8007038:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	695b      	ldr	r3, [r3, #20]
 8007044:	4313      	orrs	r3, r2
 8007046:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	69db      	ldr	r3, [r3, #28]
 8007052:	4313      	orrs	r3, r2
 8007054:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007066:	2300      	movs	r3, #0
}
 8007068:	4618      	mov	r0, r3
 800706a:	3714      	adds	r7, #20
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d101      	bne.n	80070ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070aa:	2301      	movs	r3, #1
 80070ac:	e03f      	b.n	800712e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d106      	bne.n	80070c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f7fb fe12 	bl	8002cec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2224      	movs	r2, #36	; 0x24
 80070cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68da      	ldr	r2, [r3, #12]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 f929 	bl	8007338 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	691a      	ldr	r2, [r3, #16]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80070f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	695a      	ldr	r2, [r3, #20]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007104:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68da      	ldr	r2, [r3, #12]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007114:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	2200      	movs	r2, #0
 800711a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2220      	movs	r2, #32
 8007120:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2220      	movs	r2, #32
 8007128:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800712c:	2300      	movs	r3, #0
}
 800712e:	4618      	mov	r0, r3
 8007130:	3708      	adds	r7, #8
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007136:	b580      	push	{r7, lr}
 8007138:	b08a      	sub	sp, #40	; 0x28
 800713a:	af02      	add	r7, sp, #8
 800713c:	60f8      	str	r0, [r7, #12]
 800713e:	60b9      	str	r1, [r7, #8]
 8007140:	603b      	str	r3, [r7, #0]
 8007142:	4613      	mov	r3, r2
 8007144:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007146:	2300      	movs	r3, #0
 8007148:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007150:	b2db      	uxtb	r3, r3
 8007152:	2b20      	cmp	r3, #32
 8007154:	d17c      	bne.n	8007250 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007156:	68bb      	ldr	r3, [r7, #8]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d002      	beq.n	8007162 <HAL_UART_Transmit+0x2c>
 800715c:	88fb      	ldrh	r3, [r7, #6]
 800715e:	2b00      	cmp	r3, #0
 8007160:	d101      	bne.n	8007166 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007162:	2301      	movs	r3, #1
 8007164:	e075      	b.n	8007252 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800716c:	2b01      	cmp	r3, #1
 800716e:	d101      	bne.n	8007174 <HAL_UART_Transmit+0x3e>
 8007170:	2302      	movs	r3, #2
 8007172:	e06e      	b.n	8007252 <HAL_UART_Transmit+0x11c>
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2200      	movs	r2, #0
 8007180:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2221      	movs	r2, #33	; 0x21
 8007186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800718a:	f7fb ff8d 	bl	80030a8 <HAL_GetTick>
 800718e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	88fa      	ldrh	r2, [r7, #6]
 8007194:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	88fa      	ldrh	r2, [r7, #6]
 800719a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071a4:	d108      	bne.n	80071b8 <HAL_UART_Transmit+0x82>
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	691b      	ldr	r3, [r3, #16]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d104      	bne.n	80071b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80071ae:	2300      	movs	r3, #0
 80071b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80071b2:	68bb      	ldr	r3, [r7, #8]
 80071b4:	61bb      	str	r3, [r7, #24]
 80071b6:	e003      	b.n	80071c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80071b8:	68bb      	ldr	r3, [r7, #8]
 80071ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071bc:	2300      	movs	r3, #0
 80071be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2200      	movs	r2, #0
 80071c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80071c8:	e02a      	b.n	8007220 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071ca:	683b      	ldr	r3, [r7, #0]
 80071cc:	9300      	str	r3, [sp, #0]
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	2200      	movs	r2, #0
 80071d2:	2180      	movs	r1, #128	; 0x80
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f000 f840 	bl	800725a <UART_WaitOnFlagUntilTimeout>
 80071da:	4603      	mov	r3, r0
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d001      	beq.n	80071e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80071e0:	2303      	movs	r3, #3
 80071e2:	e036      	b.n	8007252 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80071e4:	69fb      	ldr	r3, [r7, #28]
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d10b      	bne.n	8007202 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071ea:	69bb      	ldr	r3, [r7, #24]
 80071ec:	881b      	ldrh	r3, [r3, #0]
 80071ee:	461a      	mov	r2, r3
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	3302      	adds	r3, #2
 80071fe:	61bb      	str	r3, [r7, #24]
 8007200:	e007      	b.n	8007212 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007202:	69fb      	ldr	r3, [r7, #28]
 8007204:	781a      	ldrb	r2, [r3, #0]
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800720c:	69fb      	ldr	r3, [r7, #28]
 800720e:	3301      	adds	r3, #1
 8007210:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007216:	b29b      	uxth	r3, r3
 8007218:	3b01      	subs	r3, #1
 800721a:	b29a      	uxth	r2, r3
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007224:	b29b      	uxth	r3, r3
 8007226:	2b00      	cmp	r3, #0
 8007228:	d1cf      	bne.n	80071ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	9300      	str	r3, [sp, #0]
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	2200      	movs	r2, #0
 8007232:	2140      	movs	r1, #64	; 0x40
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f000 f810 	bl	800725a <UART_WaitOnFlagUntilTimeout>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d001      	beq.n	8007244 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007240:	2303      	movs	r3, #3
 8007242:	e006      	b.n	8007252 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2220      	movs	r2, #32
 8007248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800724c:	2300      	movs	r3, #0
 800724e:	e000      	b.n	8007252 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007250:	2302      	movs	r3, #2
  }
}
 8007252:	4618      	mov	r0, r3
 8007254:	3720      	adds	r7, #32
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800725a:	b580      	push	{r7, lr}
 800725c:	b090      	sub	sp, #64	; 0x40
 800725e:	af00      	add	r7, sp, #0
 8007260:	60f8      	str	r0, [r7, #12]
 8007262:	60b9      	str	r1, [r7, #8]
 8007264:	603b      	str	r3, [r7, #0]
 8007266:	4613      	mov	r3, r2
 8007268:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800726a:	e050      	b.n	800730e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800726c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800726e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007272:	d04c      	beq.n	800730e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007274:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007276:	2b00      	cmp	r3, #0
 8007278:	d007      	beq.n	800728a <UART_WaitOnFlagUntilTimeout+0x30>
 800727a:	f7fb ff15 	bl	80030a8 <HAL_GetTick>
 800727e:	4602      	mov	r2, r0
 8007280:	683b      	ldr	r3, [r7, #0]
 8007282:	1ad3      	subs	r3, r2, r3
 8007284:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007286:	429a      	cmp	r2, r3
 8007288:	d241      	bcs.n	800730e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	330c      	adds	r3, #12
 8007290:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007294:	e853 3f00 	ldrex	r3, [r3]
 8007298:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800729a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800729c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072a0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	330c      	adds	r3, #12
 80072a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80072aa:	637a      	str	r2, [r7, #52]	; 0x34
 80072ac:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ae:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072b2:	e841 2300 	strex	r3, r2, [r1]
 80072b6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80072b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d1e5      	bne.n	800728a <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	3314      	adds	r3, #20
 80072c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072c6:	697b      	ldr	r3, [r7, #20]
 80072c8:	e853 3f00 	ldrex	r3, [r3]
 80072cc:	613b      	str	r3, [r7, #16]
   return(result);
 80072ce:	693b      	ldr	r3, [r7, #16]
 80072d0:	f023 0301 	bic.w	r3, r3, #1
 80072d4:	63bb      	str	r3, [r7, #56]	; 0x38
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	3314      	adds	r3, #20
 80072dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072de:	623a      	str	r2, [r7, #32]
 80072e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072e2:	69f9      	ldr	r1, [r7, #28]
 80072e4:	6a3a      	ldr	r2, [r7, #32]
 80072e6:	e841 2300 	strex	r3, r2, [r1]
 80072ea:	61bb      	str	r3, [r7, #24]
   return(result);
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d1e5      	bne.n	80072be <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2220      	movs	r2, #32
 80072f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2220      	movs	r2, #32
 80072fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2200      	movs	r2, #0
 8007306:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800730a:	2303      	movs	r3, #3
 800730c:	e00f      	b.n	800732e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	681a      	ldr	r2, [r3, #0]
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	4013      	ands	r3, r2
 8007318:	68ba      	ldr	r2, [r7, #8]
 800731a:	429a      	cmp	r2, r3
 800731c:	bf0c      	ite	eq
 800731e:	2301      	moveq	r3, #1
 8007320:	2300      	movne	r3, #0
 8007322:	b2db      	uxtb	r3, r3
 8007324:	461a      	mov	r2, r3
 8007326:	79fb      	ldrb	r3, [r7, #7]
 8007328:	429a      	cmp	r2, r3
 800732a:	d09f      	beq.n	800726c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800732c:	2300      	movs	r3, #0
}
 800732e:	4618      	mov	r0, r3
 8007330:	3740      	adds	r7, #64	; 0x40
 8007332:	46bd      	mov	sp, r7
 8007334:	bd80      	pop	{r7, pc}
	...

08007338 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007338:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800733c:	b0c0      	sub	sp, #256	; 0x100
 800733e:	af00      	add	r7, sp, #0
 8007340:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	691b      	ldr	r3, [r3, #16]
 800734c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007354:	68d9      	ldr	r1, [r3, #12]
 8007356:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	ea40 0301 	orr.w	r3, r0, r1
 8007360:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007366:	689a      	ldr	r2, [r3, #8]
 8007368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800736c:	691b      	ldr	r3, [r3, #16]
 800736e:	431a      	orrs	r2, r3
 8007370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007374:	695b      	ldr	r3, [r3, #20]
 8007376:	431a      	orrs	r2, r3
 8007378:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800737c:	69db      	ldr	r3, [r3, #28]
 800737e:	4313      	orrs	r3, r2
 8007380:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	68db      	ldr	r3, [r3, #12]
 800738c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007390:	f021 010c 	bic.w	r1, r1, #12
 8007394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800739e:	430b      	orrs	r3, r1
 80073a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80073a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	695b      	ldr	r3, [r3, #20]
 80073aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80073ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073b2:	6999      	ldr	r1, [r3, #24]
 80073b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	ea40 0301 	orr.w	r3, r0, r1
 80073be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80073c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	4b8f      	ldr	r3, [pc, #572]	; (8007604 <UART_SetConfig+0x2cc>)
 80073c8:	429a      	cmp	r2, r3
 80073ca:	d005      	beq.n	80073d8 <UART_SetConfig+0xa0>
 80073cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073d0:	681a      	ldr	r2, [r3, #0]
 80073d2:	4b8d      	ldr	r3, [pc, #564]	; (8007608 <UART_SetConfig+0x2d0>)
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d104      	bne.n	80073e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80073d8:	f7fe f97a 	bl	80056d0 <HAL_RCC_GetPCLK2Freq>
 80073dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80073e0:	e003      	b.n	80073ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80073e2:	f7fe f961 	bl	80056a8 <HAL_RCC_GetPCLK1Freq>
 80073e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073ee:	69db      	ldr	r3, [r3, #28]
 80073f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073f4:	f040 810c 	bne.w	8007610 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80073f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073fc:	2200      	movs	r2, #0
 80073fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007402:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007406:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800740a:	4622      	mov	r2, r4
 800740c:	462b      	mov	r3, r5
 800740e:	1891      	adds	r1, r2, r2
 8007410:	65b9      	str	r1, [r7, #88]	; 0x58
 8007412:	415b      	adcs	r3, r3
 8007414:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007416:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800741a:	4621      	mov	r1, r4
 800741c:	eb12 0801 	adds.w	r8, r2, r1
 8007420:	4629      	mov	r1, r5
 8007422:	eb43 0901 	adc.w	r9, r3, r1
 8007426:	f04f 0200 	mov.w	r2, #0
 800742a:	f04f 0300 	mov.w	r3, #0
 800742e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007432:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007436:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800743a:	4690      	mov	r8, r2
 800743c:	4699      	mov	r9, r3
 800743e:	4623      	mov	r3, r4
 8007440:	eb18 0303 	adds.w	r3, r8, r3
 8007444:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007448:	462b      	mov	r3, r5
 800744a:	eb49 0303 	adc.w	r3, r9, r3
 800744e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	2200      	movs	r2, #0
 800745a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800745e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007462:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007466:	460b      	mov	r3, r1
 8007468:	18db      	adds	r3, r3, r3
 800746a:	653b      	str	r3, [r7, #80]	; 0x50
 800746c:	4613      	mov	r3, r2
 800746e:	eb42 0303 	adc.w	r3, r2, r3
 8007472:	657b      	str	r3, [r7, #84]	; 0x54
 8007474:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007478:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800747c:	f7f9 fc04 	bl	8000c88 <__aeabi_uldivmod>
 8007480:	4602      	mov	r2, r0
 8007482:	460b      	mov	r3, r1
 8007484:	4b61      	ldr	r3, [pc, #388]	; (800760c <UART_SetConfig+0x2d4>)
 8007486:	fba3 2302 	umull	r2, r3, r3, r2
 800748a:	095b      	lsrs	r3, r3, #5
 800748c:	011c      	lsls	r4, r3, #4
 800748e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007492:	2200      	movs	r2, #0
 8007494:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007498:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800749c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80074a0:	4642      	mov	r2, r8
 80074a2:	464b      	mov	r3, r9
 80074a4:	1891      	adds	r1, r2, r2
 80074a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80074a8:	415b      	adcs	r3, r3
 80074aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80074ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80074b0:	4641      	mov	r1, r8
 80074b2:	eb12 0a01 	adds.w	sl, r2, r1
 80074b6:	4649      	mov	r1, r9
 80074b8:	eb43 0b01 	adc.w	fp, r3, r1
 80074bc:	f04f 0200 	mov.w	r2, #0
 80074c0:	f04f 0300 	mov.w	r3, #0
 80074c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80074c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80074cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074d0:	4692      	mov	sl, r2
 80074d2:	469b      	mov	fp, r3
 80074d4:	4643      	mov	r3, r8
 80074d6:	eb1a 0303 	adds.w	r3, sl, r3
 80074da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074de:	464b      	mov	r3, r9
 80074e0:	eb4b 0303 	adc.w	r3, fp, r3
 80074e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80074e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074ec:	685b      	ldr	r3, [r3, #4]
 80074ee:	2200      	movs	r2, #0
 80074f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80074f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80074f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80074fc:	460b      	mov	r3, r1
 80074fe:	18db      	adds	r3, r3, r3
 8007500:	643b      	str	r3, [r7, #64]	; 0x40
 8007502:	4613      	mov	r3, r2
 8007504:	eb42 0303 	adc.w	r3, r2, r3
 8007508:	647b      	str	r3, [r7, #68]	; 0x44
 800750a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800750e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007512:	f7f9 fbb9 	bl	8000c88 <__aeabi_uldivmod>
 8007516:	4602      	mov	r2, r0
 8007518:	460b      	mov	r3, r1
 800751a:	4611      	mov	r1, r2
 800751c:	4b3b      	ldr	r3, [pc, #236]	; (800760c <UART_SetConfig+0x2d4>)
 800751e:	fba3 2301 	umull	r2, r3, r3, r1
 8007522:	095b      	lsrs	r3, r3, #5
 8007524:	2264      	movs	r2, #100	; 0x64
 8007526:	fb02 f303 	mul.w	r3, r2, r3
 800752a:	1acb      	subs	r3, r1, r3
 800752c:	00db      	lsls	r3, r3, #3
 800752e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007532:	4b36      	ldr	r3, [pc, #216]	; (800760c <UART_SetConfig+0x2d4>)
 8007534:	fba3 2302 	umull	r2, r3, r3, r2
 8007538:	095b      	lsrs	r3, r3, #5
 800753a:	005b      	lsls	r3, r3, #1
 800753c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007540:	441c      	add	r4, r3
 8007542:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007546:	2200      	movs	r2, #0
 8007548:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800754c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007550:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007554:	4642      	mov	r2, r8
 8007556:	464b      	mov	r3, r9
 8007558:	1891      	adds	r1, r2, r2
 800755a:	63b9      	str	r1, [r7, #56]	; 0x38
 800755c:	415b      	adcs	r3, r3
 800755e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007560:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007564:	4641      	mov	r1, r8
 8007566:	1851      	adds	r1, r2, r1
 8007568:	6339      	str	r1, [r7, #48]	; 0x30
 800756a:	4649      	mov	r1, r9
 800756c:	414b      	adcs	r3, r1
 800756e:	637b      	str	r3, [r7, #52]	; 0x34
 8007570:	f04f 0200 	mov.w	r2, #0
 8007574:	f04f 0300 	mov.w	r3, #0
 8007578:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800757c:	4659      	mov	r1, fp
 800757e:	00cb      	lsls	r3, r1, #3
 8007580:	4651      	mov	r1, sl
 8007582:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007586:	4651      	mov	r1, sl
 8007588:	00ca      	lsls	r2, r1, #3
 800758a:	4610      	mov	r0, r2
 800758c:	4619      	mov	r1, r3
 800758e:	4603      	mov	r3, r0
 8007590:	4642      	mov	r2, r8
 8007592:	189b      	adds	r3, r3, r2
 8007594:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007598:	464b      	mov	r3, r9
 800759a:	460a      	mov	r2, r1
 800759c:	eb42 0303 	adc.w	r3, r2, r3
 80075a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80075a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	2200      	movs	r2, #0
 80075ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80075b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80075b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80075b8:	460b      	mov	r3, r1
 80075ba:	18db      	adds	r3, r3, r3
 80075bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80075be:	4613      	mov	r3, r2
 80075c0:	eb42 0303 	adc.w	r3, r2, r3
 80075c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80075c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80075ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80075ce:	f7f9 fb5b 	bl	8000c88 <__aeabi_uldivmod>
 80075d2:	4602      	mov	r2, r0
 80075d4:	460b      	mov	r3, r1
 80075d6:	4b0d      	ldr	r3, [pc, #52]	; (800760c <UART_SetConfig+0x2d4>)
 80075d8:	fba3 1302 	umull	r1, r3, r3, r2
 80075dc:	095b      	lsrs	r3, r3, #5
 80075de:	2164      	movs	r1, #100	; 0x64
 80075e0:	fb01 f303 	mul.w	r3, r1, r3
 80075e4:	1ad3      	subs	r3, r2, r3
 80075e6:	00db      	lsls	r3, r3, #3
 80075e8:	3332      	adds	r3, #50	; 0x32
 80075ea:	4a08      	ldr	r2, [pc, #32]	; (800760c <UART_SetConfig+0x2d4>)
 80075ec:	fba2 2303 	umull	r2, r3, r2, r3
 80075f0:	095b      	lsrs	r3, r3, #5
 80075f2:	f003 0207 	and.w	r2, r3, #7
 80075f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	4422      	add	r2, r4
 80075fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007600:	e105      	b.n	800780e <UART_SetConfig+0x4d6>
 8007602:	bf00      	nop
 8007604:	40011000 	.word	0x40011000
 8007608:	40011400 	.word	0x40011400
 800760c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007610:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007614:	2200      	movs	r2, #0
 8007616:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800761a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800761e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007622:	4642      	mov	r2, r8
 8007624:	464b      	mov	r3, r9
 8007626:	1891      	adds	r1, r2, r2
 8007628:	6239      	str	r1, [r7, #32]
 800762a:	415b      	adcs	r3, r3
 800762c:	627b      	str	r3, [r7, #36]	; 0x24
 800762e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007632:	4641      	mov	r1, r8
 8007634:	1854      	adds	r4, r2, r1
 8007636:	4649      	mov	r1, r9
 8007638:	eb43 0501 	adc.w	r5, r3, r1
 800763c:	f04f 0200 	mov.w	r2, #0
 8007640:	f04f 0300 	mov.w	r3, #0
 8007644:	00eb      	lsls	r3, r5, #3
 8007646:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800764a:	00e2      	lsls	r2, r4, #3
 800764c:	4614      	mov	r4, r2
 800764e:	461d      	mov	r5, r3
 8007650:	4643      	mov	r3, r8
 8007652:	18e3      	adds	r3, r4, r3
 8007654:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007658:	464b      	mov	r3, r9
 800765a:	eb45 0303 	adc.w	r3, r5, r3
 800765e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007666:	685b      	ldr	r3, [r3, #4]
 8007668:	2200      	movs	r2, #0
 800766a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800766e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007672:	f04f 0200 	mov.w	r2, #0
 8007676:	f04f 0300 	mov.w	r3, #0
 800767a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800767e:	4629      	mov	r1, r5
 8007680:	008b      	lsls	r3, r1, #2
 8007682:	4621      	mov	r1, r4
 8007684:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007688:	4621      	mov	r1, r4
 800768a:	008a      	lsls	r2, r1, #2
 800768c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007690:	f7f9 fafa 	bl	8000c88 <__aeabi_uldivmod>
 8007694:	4602      	mov	r2, r0
 8007696:	460b      	mov	r3, r1
 8007698:	4b60      	ldr	r3, [pc, #384]	; (800781c <UART_SetConfig+0x4e4>)
 800769a:	fba3 2302 	umull	r2, r3, r3, r2
 800769e:	095b      	lsrs	r3, r3, #5
 80076a0:	011c      	lsls	r4, r3, #4
 80076a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80076a6:	2200      	movs	r2, #0
 80076a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80076ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80076b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80076b4:	4642      	mov	r2, r8
 80076b6:	464b      	mov	r3, r9
 80076b8:	1891      	adds	r1, r2, r2
 80076ba:	61b9      	str	r1, [r7, #24]
 80076bc:	415b      	adcs	r3, r3
 80076be:	61fb      	str	r3, [r7, #28]
 80076c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80076c4:	4641      	mov	r1, r8
 80076c6:	1851      	adds	r1, r2, r1
 80076c8:	6139      	str	r1, [r7, #16]
 80076ca:	4649      	mov	r1, r9
 80076cc:	414b      	adcs	r3, r1
 80076ce:	617b      	str	r3, [r7, #20]
 80076d0:	f04f 0200 	mov.w	r2, #0
 80076d4:	f04f 0300 	mov.w	r3, #0
 80076d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80076dc:	4659      	mov	r1, fp
 80076de:	00cb      	lsls	r3, r1, #3
 80076e0:	4651      	mov	r1, sl
 80076e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076e6:	4651      	mov	r1, sl
 80076e8:	00ca      	lsls	r2, r1, #3
 80076ea:	4610      	mov	r0, r2
 80076ec:	4619      	mov	r1, r3
 80076ee:	4603      	mov	r3, r0
 80076f0:	4642      	mov	r2, r8
 80076f2:	189b      	adds	r3, r3, r2
 80076f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80076f8:	464b      	mov	r3, r9
 80076fa:	460a      	mov	r2, r1
 80076fc:	eb42 0303 	adc.w	r3, r2, r3
 8007700:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007708:	685b      	ldr	r3, [r3, #4]
 800770a:	2200      	movs	r2, #0
 800770c:	67bb      	str	r3, [r7, #120]	; 0x78
 800770e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007710:	f04f 0200 	mov.w	r2, #0
 8007714:	f04f 0300 	mov.w	r3, #0
 8007718:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800771c:	4649      	mov	r1, r9
 800771e:	008b      	lsls	r3, r1, #2
 8007720:	4641      	mov	r1, r8
 8007722:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007726:	4641      	mov	r1, r8
 8007728:	008a      	lsls	r2, r1, #2
 800772a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800772e:	f7f9 faab 	bl	8000c88 <__aeabi_uldivmod>
 8007732:	4602      	mov	r2, r0
 8007734:	460b      	mov	r3, r1
 8007736:	4b39      	ldr	r3, [pc, #228]	; (800781c <UART_SetConfig+0x4e4>)
 8007738:	fba3 1302 	umull	r1, r3, r3, r2
 800773c:	095b      	lsrs	r3, r3, #5
 800773e:	2164      	movs	r1, #100	; 0x64
 8007740:	fb01 f303 	mul.w	r3, r1, r3
 8007744:	1ad3      	subs	r3, r2, r3
 8007746:	011b      	lsls	r3, r3, #4
 8007748:	3332      	adds	r3, #50	; 0x32
 800774a:	4a34      	ldr	r2, [pc, #208]	; (800781c <UART_SetConfig+0x4e4>)
 800774c:	fba2 2303 	umull	r2, r3, r2, r3
 8007750:	095b      	lsrs	r3, r3, #5
 8007752:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007756:	441c      	add	r4, r3
 8007758:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800775c:	2200      	movs	r2, #0
 800775e:	673b      	str	r3, [r7, #112]	; 0x70
 8007760:	677a      	str	r2, [r7, #116]	; 0x74
 8007762:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007766:	4642      	mov	r2, r8
 8007768:	464b      	mov	r3, r9
 800776a:	1891      	adds	r1, r2, r2
 800776c:	60b9      	str	r1, [r7, #8]
 800776e:	415b      	adcs	r3, r3
 8007770:	60fb      	str	r3, [r7, #12]
 8007772:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007776:	4641      	mov	r1, r8
 8007778:	1851      	adds	r1, r2, r1
 800777a:	6039      	str	r1, [r7, #0]
 800777c:	4649      	mov	r1, r9
 800777e:	414b      	adcs	r3, r1
 8007780:	607b      	str	r3, [r7, #4]
 8007782:	f04f 0200 	mov.w	r2, #0
 8007786:	f04f 0300 	mov.w	r3, #0
 800778a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800778e:	4659      	mov	r1, fp
 8007790:	00cb      	lsls	r3, r1, #3
 8007792:	4651      	mov	r1, sl
 8007794:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007798:	4651      	mov	r1, sl
 800779a:	00ca      	lsls	r2, r1, #3
 800779c:	4610      	mov	r0, r2
 800779e:	4619      	mov	r1, r3
 80077a0:	4603      	mov	r3, r0
 80077a2:	4642      	mov	r2, r8
 80077a4:	189b      	adds	r3, r3, r2
 80077a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80077a8:	464b      	mov	r3, r9
 80077aa:	460a      	mov	r2, r1
 80077ac:	eb42 0303 	adc.w	r3, r2, r3
 80077b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80077b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077b6:	685b      	ldr	r3, [r3, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	663b      	str	r3, [r7, #96]	; 0x60
 80077bc:	667a      	str	r2, [r7, #100]	; 0x64
 80077be:	f04f 0200 	mov.w	r2, #0
 80077c2:	f04f 0300 	mov.w	r3, #0
 80077c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80077ca:	4649      	mov	r1, r9
 80077cc:	008b      	lsls	r3, r1, #2
 80077ce:	4641      	mov	r1, r8
 80077d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077d4:	4641      	mov	r1, r8
 80077d6:	008a      	lsls	r2, r1, #2
 80077d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80077dc:	f7f9 fa54 	bl	8000c88 <__aeabi_uldivmod>
 80077e0:	4602      	mov	r2, r0
 80077e2:	460b      	mov	r3, r1
 80077e4:	4b0d      	ldr	r3, [pc, #52]	; (800781c <UART_SetConfig+0x4e4>)
 80077e6:	fba3 1302 	umull	r1, r3, r3, r2
 80077ea:	095b      	lsrs	r3, r3, #5
 80077ec:	2164      	movs	r1, #100	; 0x64
 80077ee:	fb01 f303 	mul.w	r3, r1, r3
 80077f2:	1ad3      	subs	r3, r2, r3
 80077f4:	011b      	lsls	r3, r3, #4
 80077f6:	3332      	adds	r3, #50	; 0x32
 80077f8:	4a08      	ldr	r2, [pc, #32]	; (800781c <UART_SetConfig+0x4e4>)
 80077fa:	fba2 2303 	umull	r2, r3, r2, r3
 80077fe:	095b      	lsrs	r3, r3, #5
 8007800:	f003 020f 	and.w	r2, r3, #15
 8007804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4422      	add	r2, r4
 800780c:	609a      	str	r2, [r3, #8]
}
 800780e:	bf00      	nop
 8007810:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007814:	46bd      	mov	sp, r7
 8007816:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800781a:	bf00      	nop
 800781c:	51eb851f 	.word	0x51eb851f

08007820 <__NVIC_SetPriority>:
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	4603      	mov	r3, r0
 8007828:	6039      	str	r1, [r7, #0]
 800782a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800782c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007830:	2b00      	cmp	r3, #0
 8007832:	db0a      	blt.n	800784a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007834:	683b      	ldr	r3, [r7, #0]
 8007836:	b2da      	uxtb	r2, r3
 8007838:	490c      	ldr	r1, [pc, #48]	; (800786c <__NVIC_SetPriority+0x4c>)
 800783a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800783e:	0112      	lsls	r2, r2, #4
 8007840:	b2d2      	uxtb	r2, r2
 8007842:	440b      	add	r3, r1
 8007844:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8007848:	e00a      	b.n	8007860 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	b2da      	uxtb	r2, r3
 800784e:	4908      	ldr	r1, [pc, #32]	; (8007870 <__NVIC_SetPriority+0x50>)
 8007850:	79fb      	ldrb	r3, [r7, #7]
 8007852:	f003 030f 	and.w	r3, r3, #15
 8007856:	3b04      	subs	r3, #4
 8007858:	0112      	lsls	r2, r2, #4
 800785a:	b2d2      	uxtb	r2, r2
 800785c:	440b      	add	r3, r1
 800785e:	761a      	strb	r2, [r3, #24]
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr
 800786c:	e000e100 	.word	0xe000e100
 8007870:	e000ed00 	.word	0xe000ed00

08007874 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007874:	b580      	push	{r7, lr}
 8007876:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007878:	2100      	movs	r1, #0
 800787a:	f06f 0004 	mvn.w	r0, #4
 800787e:	f7ff ffcf 	bl	8007820 <__NVIC_SetPriority>
#endif
}
 8007882:	bf00      	nop
 8007884:	bd80      	pop	{r7, pc}
	...

08007888 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800788e:	f3ef 8305 	mrs	r3, IPSR
 8007892:	603b      	str	r3, [r7, #0]
  return(result);
 8007894:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007896:	2b00      	cmp	r3, #0
 8007898:	d003      	beq.n	80078a2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800789a:	f06f 0305 	mvn.w	r3, #5
 800789e:	607b      	str	r3, [r7, #4]
 80078a0:	e00c      	b.n	80078bc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80078a2:	4b0a      	ldr	r3, [pc, #40]	; (80078cc <osKernelInitialize+0x44>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d105      	bne.n	80078b6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80078aa:	4b08      	ldr	r3, [pc, #32]	; (80078cc <osKernelInitialize+0x44>)
 80078ac:	2201      	movs	r2, #1
 80078ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80078b0:	2300      	movs	r3, #0
 80078b2:	607b      	str	r3, [r7, #4]
 80078b4:	e002      	b.n	80078bc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80078b6:	f04f 33ff 	mov.w	r3, #4294967295
 80078ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80078bc:	687b      	ldr	r3, [r7, #4]
}
 80078be:	4618      	mov	r0, r3
 80078c0:	370c      	adds	r7, #12
 80078c2:	46bd      	mov	sp, r7
 80078c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c8:	4770      	bx	lr
 80078ca:	bf00      	nop
 80078cc:	20000960 	.word	0x20000960

080078d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b082      	sub	sp, #8
 80078d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80078d6:	f3ef 8305 	mrs	r3, IPSR
 80078da:	603b      	str	r3, [r7, #0]
  return(result);
 80078dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d003      	beq.n	80078ea <osKernelStart+0x1a>
    stat = osErrorISR;
 80078e2:	f06f 0305 	mvn.w	r3, #5
 80078e6:	607b      	str	r3, [r7, #4]
 80078e8:	e010      	b.n	800790c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80078ea:	4b0b      	ldr	r3, [pc, #44]	; (8007918 <osKernelStart+0x48>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2b01      	cmp	r3, #1
 80078f0:	d109      	bne.n	8007906 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80078f2:	f7ff ffbf 	bl	8007874 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80078f6:	4b08      	ldr	r3, [pc, #32]	; (8007918 <osKernelStart+0x48>)
 80078f8:	2202      	movs	r2, #2
 80078fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80078fc:	f001 f910 	bl	8008b20 <vTaskStartScheduler>
      stat = osOK;
 8007900:	2300      	movs	r3, #0
 8007902:	607b      	str	r3, [r7, #4]
 8007904:	e002      	b.n	800790c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007906:	f04f 33ff 	mov.w	r3, #4294967295
 800790a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800790c:	687b      	ldr	r3, [r7, #4]
}
 800790e:	4618      	mov	r0, r3
 8007910:	3708      	adds	r7, #8
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	20000960 	.word	0x20000960

0800791c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800791c:	b580      	push	{r7, lr}
 800791e:	b08e      	sub	sp, #56	; 0x38
 8007920:	af04      	add	r7, sp, #16
 8007922:	60f8      	str	r0, [r7, #12]
 8007924:	60b9      	str	r1, [r7, #8]
 8007926:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007928:	2300      	movs	r3, #0
 800792a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800792c:	f3ef 8305 	mrs	r3, IPSR
 8007930:	617b      	str	r3, [r7, #20]
  return(result);
 8007932:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007934:	2b00      	cmp	r3, #0
 8007936:	d17e      	bne.n	8007a36 <osThreadNew+0x11a>
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2b00      	cmp	r3, #0
 800793c:	d07b      	beq.n	8007a36 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800793e:	2380      	movs	r3, #128	; 0x80
 8007940:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007942:	2318      	movs	r3, #24
 8007944:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007946:	2300      	movs	r3, #0
 8007948:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800794a:	f04f 33ff 	mov.w	r3, #4294967295
 800794e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d045      	beq.n	80079e2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	2b00      	cmp	r3, #0
 800795c:	d002      	beq.n	8007964 <osThreadNew+0x48>
        name = attr->name;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	699b      	ldr	r3, [r3, #24]
 8007968:	2b00      	cmp	r3, #0
 800796a:	d002      	beq.n	8007972 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	699b      	ldr	r3, [r3, #24]
 8007970:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d008      	beq.n	800798a <osThreadNew+0x6e>
 8007978:	69fb      	ldr	r3, [r7, #28]
 800797a:	2b38      	cmp	r3, #56	; 0x38
 800797c:	d805      	bhi.n	800798a <osThreadNew+0x6e>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	f003 0301 	and.w	r3, r3, #1
 8007986:	2b00      	cmp	r3, #0
 8007988:	d001      	beq.n	800798e <osThreadNew+0x72>
        return (NULL);
 800798a:	2300      	movs	r3, #0
 800798c:	e054      	b.n	8007a38 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	695b      	ldr	r3, [r3, #20]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d003      	beq.n	800799e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	695b      	ldr	r3, [r3, #20]
 800799a:	089b      	lsrs	r3, r3, #2
 800799c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	689b      	ldr	r3, [r3, #8]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d00e      	beq.n	80079c4 <osThreadNew+0xa8>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	2b5b      	cmp	r3, #91	; 0x5b
 80079ac:	d90a      	bls.n	80079c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d006      	beq.n	80079c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	695b      	ldr	r3, [r3, #20]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d002      	beq.n	80079c4 <osThreadNew+0xa8>
        mem = 1;
 80079be:	2301      	movs	r3, #1
 80079c0:	61bb      	str	r3, [r7, #24]
 80079c2:	e010      	b.n	80079e6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	689b      	ldr	r3, [r3, #8]
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d10c      	bne.n	80079e6 <osThreadNew+0xca>
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	68db      	ldr	r3, [r3, #12]
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d108      	bne.n	80079e6 <osThreadNew+0xca>
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d104      	bne.n	80079e6 <osThreadNew+0xca>
          mem = 0;
 80079dc:	2300      	movs	r3, #0
 80079de:	61bb      	str	r3, [r7, #24]
 80079e0:	e001      	b.n	80079e6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80079e2:	2300      	movs	r3, #0
 80079e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80079e6:	69bb      	ldr	r3, [r7, #24]
 80079e8:	2b01      	cmp	r3, #1
 80079ea:	d110      	bne.n	8007a0e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80079f0:	687a      	ldr	r2, [r7, #4]
 80079f2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80079f4:	9202      	str	r2, [sp, #8]
 80079f6:	9301      	str	r3, [sp, #4]
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	9300      	str	r3, [sp, #0]
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	6a3a      	ldr	r2, [r7, #32]
 8007a00:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f000 fe38 	bl	8008678 <xTaskCreateStatic>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	613b      	str	r3, [r7, #16]
 8007a0c:	e013      	b.n	8007a36 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	d110      	bne.n	8007a36 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007a14:	6a3b      	ldr	r3, [r7, #32]
 8007a16:	b29a      	uxth	r2, r3
 8007a18:	f107 0310 	add.w	r3, r7, #16
 8007a1c:	9301      	str	r3, [sp, #4]
 8007a1e:	69fb      	ldr	r3, [r7, #28]
 8007a20:	9300      	str	r3, [sp, #0]
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007a26:	68f8      	ldr	r0, [r7, #12]
 8007a28:	f000 fe83 	bl	8008732 <xTaskCreate>
 8007a2c:	4603      	mov	r3, r0
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d001      	beq.n	8007a36 <osThreadNew+0x11a>
            hTask = NULL;
 8007a32:	2300      	movs	r3, #0
 8007a34:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007a36:	693b      	ldr	r3, [r7, #16]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3728      	adds	r7, #40	; 0x28
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b084      	sub	sp, #16
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a48:	f3ef 8305 	mrs	r3, IPSR
 8007a4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8007a4e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d003      	beq.n	8007a5c <osDelay+0x1c>
    stat = osErrorISR;
 8007a54:	f06f 0305 	mvn.w	r3, #5
 8007a58:	60fb      	str	r3, [r7, #12]
 8007a5a:	e007      	b.n	8007a6c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d002      	beq.n	8007a6c <osDelay+0x2c>
      vTaskDelay(ticks);
 8007a66:	6878      	ldr	r0, [r7, #4]
 8007a68:	f001 f826 	bl	8008ab8 <vTaskDelay>
    }
  }

  return (stat);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
}
 8007a6e:	4618      	mov	r0, r3
 8007a70:	3710      	adds	r7, #16
 8007a72:	46bd      	mov	sp, r7
 8007a74:	bd80      	pop	{r7, pc}

08007a76 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b086      	sub	sp, #24
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007a7e:	f3ef 8305 	mrs	r3, IPSR
 8007a82:	60fb      	str	r3, [r7, #12]
  return(result);
 8007a84:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d003      	beq.n	8007a92 <osDelayUntil+0x1c>
    stat = osErrorISR;
 8007a8a:	f06f 0305 	mvn.w	r3, #5
 8007a8e:	617b      	str	r3, [r7, #20]
 8007a90:	e019      	b.n	8007ac6 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8007a92:	2300      	movs	r3, #0
 8007a94:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8007a96:	f001 f955 	bl	8008d44 <xTaskGetTickCount>
 8007a9a:	4603      	mov	r3, r0
 8007a9c:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8007a9e:	68bb      	ldr	r3, [r7, #8]
 8007aa0:	687a      	ldr	r2, [r7, #4]
 8007aa2:	1ad3      	subs	r3, r2, r3
 8007aa4:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d009      	beq.n	8007ac0 <osDelayUntil+0x4a>
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	db06      	blt.n	8007ac0 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8007ab2:	f107 0308 	add.w	r3, r7, #8
 8007ab6:	6939      	ldr	r1, [r7, #16]
 8007ab8:	4618      	mov	r0, r3
 8007aba:	f000 ff7f 	bl	80089bc <vTaskDelayUntil>
 8007abe:	e002      	b.n	8007ac6 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8007ac0:	f06f 0303 	mvn.w	r3, #3
 8007ac4:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8007ac6:	697b      	ldr	r3, [r7, #20]
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3718      	adds	r7, #24
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	60f8      	str	r0, [r7, #12]
 8007ad8:	60b9      	str	r1, [r7, #8]
 8007ada:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	4a07      	ldr	r2, [pc, #28]	; (8007afc <vApplicationGetIdleTaskMemory+0x2c>)
 8007ae0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	4a06      	ldr	r2, [pc, #24]	; (8007b00 <vApplicationGetIdleTaskMemory+0x30>)
 8007ae6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2280      	movs	r2, #128	; 0x80
 8007aec:	601a      	str	r2, [r3, #0]
}
 8007aee:	bf00      	nop
 8007af0:	3714      	adds	r7, #20
 8007af2:	46bd      	mov	sp, r7
 8007af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af8:	4770      	bx	lr
 8007afa:	bf00      	nop
 8007afc:	20000964 	.word	0x20000964
 8007b00:	200009c0 	.word	0x200009c0

08007b04 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007b04:	b480      	push	{r7}
 8007b06:	b085      	sub	sp, #20
 8007b08:	af00      	add	r7, sp, #0
 8007b0a:	60f8      	str	r0, [r7, #12]
 8007b0c:	60b9      	str	r1, [r7, #8]
 8007b0e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007b10:	68fb      	ldr	r3, [r7, #12]
 8007b12:	4a07      	ldr	r2, [pc, #28]	; (8007b30 <vApplicationGetTimerTaskMemory+0x2c>)
 8007b14:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007b16:	68bb      	ldr	r3, [r7, #8]
 8007b18:	4a06      	ldr	r2, [pc, #24]	; (8007b34 <vApplicationGetTimerTaskMemory+0x30>)
 8007b1a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007b22:	601a      	str	r2, [r3, #0]
}
 8007b24:	bf00      	nop
 8007b26:	3714      	adds	r7, #20
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b2e:	4770      	bx	lr
 8007b30:	20000bc0 	.word	0x20000bc0
 8007b34:	20000c1c 	.word	0x20000c1c

08007b38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	f103 0208 	add.w	r2, r3, #8
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f04f 32ff 	mov.w	r2, #4294967295
 8007b50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f103 0208 	add.w	r2, r3, #8
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	f103 0208 	add.w	r2, r3, #8
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr

08007b78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007b78:	b480      	push	{r7}
 8007b7a:	b083      	sub	sp, #12
 8007b7c:	af00      	add	r7, sp, #0
 8007b7e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2200      	movs	r2, #0
 8007b84:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007b86:	bf00      	nop
 8007b88:	370c      	adds	r7, #12
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b90:	4770      	bx	lr

08007b92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007b92:	b480      	push	{r7}
 8007b94:	b085      	sub	sp, #20
 8007b96:	af00      	add	r7, sp, #0
 8007b98:	6078      	str	r0, [r7, #4]
 8007b9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	685b      	ldr	r3, [r3, #4]
 8007ba0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007ba2:	683b      	ldr	r3, [r7, #0]
 8007ba4:	68fa      	ldr	r2, [r7, #12]
 8007ba6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	689a      	ldr	r2, [r3, #8]
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	689b      	ldr	r3, [r3, #8]
 8007bb4:	683a      	ldr	r2, [r7, #0]
 8007bb6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	683a      	ldr	r2, [r7, #0]
 8007bbc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007bbe:	683b      	ldr	r3, [r7, #0]
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	1c5a      	adds	r2, r3, #1
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	601a      	str	r2, [r3, #0]
}
 8007bce:	bf00      	nop
 8007bd0:	3714      	adds	r7, #20
 8007bd2:	46bd      	mov	sp, r7
 8007bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd8:	4770      	bx	lr

08007bda <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007bda:	b480      	push	{r7}
 8007bdc:	b085      	sub	sp, #20
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007be4:	683b      	ldr	r3, [r7, #0]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bf0:	d103      	bne.n	8007bfa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	60fb      	str	r3, [r7, #12]
 8007bf8:	e00c      	b.n	8007c14 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	3308      	adds	r3, #8
 8007bfe:	60fb      	str	r3, [r7, #12]
 8007c00:	e002      	b.n	8007c08 <vListInsert+0x2e>
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	60fb      	str	r3, [r7, #12]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	685b      	ldr	r3, [r3, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	68ba      	ldr	r2, [r7, #8]
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d2f6      	bcs.n	8007c02 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	685a      	ldr	r2, [r3, #4]
 8007c18:	683b      	ldr	r3, [r7, #0]
 8007c1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	683a      	ldr	r2, [r7, #0]
 8007c22:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	68fa      	ldr	r2, [r7, #12]
 8007c28:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	683a      	ldr	r2, [r7, #0]
 8007c2e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	687a      	ldr	r2, [r7, #4]
 8007c34:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	1c5a      	adds	r2, r3, #1
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	601a      	str	r2, [r3, #0]
}
 8007c40:	bf00      	nop
 8007c42:	3714      	adds	r7, #20
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007c4c:	b480      	push	{r7}
 8007c4e:	b085      	sub	sp, #20
 8007c50:	af00      	add	r7, sp, #0
 8007c52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	691b      	ldr	r3, [r3, #16]
 8007c58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	6892      	ldr	r2, [r2, #8]
 8007c62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	689b      	ldr	r3, [r3, #8]
 8007c68:	687a      	ldr	r2, [r7, #4]
 8007c6a:	6852      	ldr	r2, [r2, #4]
 8007c6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	687a      	ldr	r2, [r7, #4]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d103      	bne.n	8007c80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	689a      	ldr	r2, [r3, #8]
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	1e5a      	subs	r2, r3, #1
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007c90:	68fb      	ldr	r3, [r7, #12]
 8007c92:	681b      	ldr	r3, [r3, #0]
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	3714      	adds	r7, #20
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	b084      	sub	sp, #16
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
 8007ca8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2b00      	cmp	r3, #0
 8007cb2:	d10a      	bne.n	8007cca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8007cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb8:	f383 8811 	msr	BASEPRI, r3
 8007cbc:	f3bf 8f6f 	isb	sy
 8007cc0:	f3bf 8f4f 	dsb	sy
 8007cc4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8007cc6:	bf00      	nop
 8007cc8:	e7fe      	b.n	8007cc8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8007cca:	f002 f8cb 	bl	8009e64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cd6:	68f9      	ldr	r1, [r7, #12]
 8007cd8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007cda:	fb01 f303 	mul.w	r3, r1, r3
 8007cde:	441a      	add	r2, r3
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007cf2:	68fb      	ldr	r3, [r7, #12]
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	68f9      	ldr	r1, [r7, #12]
 8007cfe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8007d00:	fb01 f303 	mul.w	r3, r1, r3
 8007d04:	441a      	add	r2, r3
 8007d06:	68fb      	ldr	r3, [r7, #12]
 8007d08:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	22ff      	movs	r2, #255	; 0xff
 8007d0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	22ff      	movs	r2, #255	; 0xff
 8007d16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8007d1a:	683b      	ldr	r3, [r7, #0]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d114      	bne.n	8007d4a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	691b      	ldr	r3, [r3, #16]
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d01a      	beq.n	8007d5e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	3310      	adds	r3, #16
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	f001 f981 	bl	8009034 <xTaskRemoveFromEventList>
 8007d32:	4603      	mov	r3, r0
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d012      	beq.n	8007d5e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8007d38:	4b0c      	ldr	r3, [pc, #48]	; (8007d6c <xQueueGenericReset+0xcc>)
 8007d3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d3e:	601a      	str	r2, [r3, #0]
 8007d40:	f3bf 8f4f 	dsb	sy
 8007d44:	f3bf 8f6f 	isb	sy
 8007d48:	e009      	b.n	8007d5e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	3310      	adds	r3, #16
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7ff fef2 	bl	8007b38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	3324      	adds	r3, #36	; 0x24
 8007d58:	4618      	mov	r0, r3
 8007d5a:	f7ff feed 	bl	8007b38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8007d5e:	f002 f8b1 	bl	8009ec4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8007d62:	2301      	movs	r3, #1
}
 8007d64:	4618      	mov	r0, r3
 8007d66:	3710      	adds	r7, #16
 8007d68:	46bd      	mov	sp, r7
 8007d6a:	bd80      	pop	{r7, pc}
 8007d6c:	e000ed04 	.word	0xe000ed04

08007d70 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8007d70:	b580      	push	{r7, lr}
 8007d72:	b08e      	sub	sp, #56	; 0x38
 8007d74:	af02      	add	r7, sp, #8
 8007d76:	60f8      	str	r0, [r7, #12]
 8007d78:	60b9      	str	r1, [r7, #8]
 8007d7a:	607a      	str	r2, [r7, #4]
 8007d7c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d10a      	bne.n	8007d9a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8007d84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d88:	f383 8811 	msr	BASEPRI, r3
 8007d8c:	f3bf 8f6f 	isb	sy
 8007d90:	f3bf 8f4f 	dsb	sy
 8007d94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007d96:	bf00      	nop
 8007d98:	e7fe      	b.n	8007d98 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d10a      	bne.n	8007db6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8007da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da4:	f383 8811 	msr	BASEPRI, r3
 8007da8:	f3bf 8f6f 	isb	sy
 8007dac:	f3bf 8f4f 	dsb	sy
 8007db0:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007db2:	bf00      	nop
 8007db4:	e7fe      	b.n	8007db4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d002      	beq.n	8007dc2 <xQueueGenericCreateStatic+0x52>
 8007dbc:	68bb      	ldr	r3, [r7, #8]
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d001      	beq.n	8007dc6 <xQueueGenericCreateStatic+0x56>
 8007dc2:	2301      	movs	r3, #1
 8007dc4:	e000      	b.n	8007dc8 <xQueueGenericCreateStatic+0x58>
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d10a      	bne.n	8007de2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8007dcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dd0:	f383 8811 	msr	BASEPRI, r3
 8007dd4:	f3bf 8f6f 	isb	sy
 8007dd8:	f3bf 8f4f 	dsb	sy
 8007ddc:	623b      	str	r3, [r7, #32]
}
 8007dde:	bf00      	nop
 8007de0:	e7fe      	b.n	8007de0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d102      	bne.n	8007dee <xQueueGenericCreateStatic+0x7e>
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d101      	bne.n	8007df2 <xQueueGenericCreateStatic+0x82>
 8007dee:	2301      	movs	r3, #1
 8007df0:	e000      	b.n	8007df4 <xQueueGenericCreateStatic+0x84>
 8007df2:	2300      	movs	r3, #0
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d10a      	bne.n	8007e0e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8007df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dfc:	f383 8811 	msr	BASEPRI, r3
 8007e00:	f3bf 8f6f 	isb	sy
 8007e04:	f3bf 8f4f 	dsb	sy
 8007e08:	61fb      	str	r3, [r7, #28]
}
 8007e0a:	bf00      	nop
 8007e0c:	e7fe      	b.n	8007e0c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8007e0e:	2350      	movs	r3, #80	; 0x50
 8007e10:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	2b50      	cmp	r3, #80	; 0x50
 8007e16:	d00a      	beq.n	8007e2e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8007e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e1c:	f383 8811 	msr	BASEPRI, r3
 8007e20:	f3bf 8f6f 	isb	sy
 8007e24:	f3bf 8f4f 	dsb	sy
 8007e28:	61bb      	str	r3, [r7, #24]
}
 8007e2a:	bf00      	nop
 8007e2c:	e7fe      	b.n	8007e2c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8007e2e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8007e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d00d      	beq.n	8007e56 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8007e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007e42:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8007e46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e48:	9300      	str	r3, [sp, #0]
 8007e4a:	4613      	mov	r3, r2
 8007e4c:	687a      	ldr	r2, [r7, #4]
 8007e4e:	68b9      	ldr	r1, [r7, #8]
 8007e50:	68f8      	ldr	r0, [r7, #12]
 8007e52:	f000 f805 	bl	8007e60 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8007e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8007e58:	4618      	mov	r0, r3
 8007e5a:	3730      	adds	r7, #48	; 0x30
 8007e5c:	46bd      	mov	sp, r7
 8007e5e:	bd80      	pop	{r7, pc}

08007e60 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b084      	sub	sp, #16
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	607a      	str	r2, [r7, #4]
 8007e6c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d103      	bne.n	8007e7c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007e74:	69bb      	ldr	r3, [r7, #24]
 8007e76:	69ba      	ldr	r2, [r7, #24]
 8007e78:	601a      	str	r2, [r3, #0]
 8007e7a:	e002      	b.n	8007e82 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	687a      	ldr	r2, [r7, #4]
 8007e80:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8007e82:	69bb      	ldr	r3, [r7, #24]
 8007e84:	68fa      	ldr	r2, [r7, #12]
 8007e86:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8007e88:	69bb      	ldr	r3, [r7, #24]
 8007e8a:	68ba      	ldr	r2, [r7, #8]
 8007e8c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007e8e:	2101      	movs	r1, #1
 8007e90:	69b8      	ldr	r0, [r7, #24]
 8007e92:	f7ff ff05 	bl	8007ca0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8007e96:	69bb      	ldr	r3, [r7, #24]
 8007e98:	78fa      	ldrb	r2, [r7, #3]
 8007e9a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8007e9e:	bf00      	nop
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
	...

08007ea8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b08e      	sub	sp, #56	; 0x38
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]
 8007eb4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec0:	2b00      	cmp	r3, #0
 8007ec2:	d10a      	bne.n	8007eda <xQueueGenericSend+0x32>
	__asm volatile
 8007ec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ec8:	f383 8811 	msr	BASEPRI, r3
 8007ecc:	f3bf 8f6f 	isb	sy
 8007ed0:	f3bf 8f4f 	dsb	sy
 8007ed4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8007ed6:	bf00      	nop
 8007ed8:	e7fe      	b.n	8007ed8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007eda:	68bb      	ldr	r3, [r7, #8]
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d103      	bne.n	8007ee8 <xQueueGenericSend+0x40>
 8007ee0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d101      	bne.n	8007eec <xQueueGenericSend+0x44>
 8007ee8:	2301      	movs	r3, #1
 8007eea:	e000      	b.n	8007eee <xQueueGenericSend+0x46>
 8007eec:	2300      	movs	r3, #0
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d10a      	bne.n	8007f08 <xQueueGenericSend+0x60>
	__asm volatile
 8007ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef6:	f383 8811 	msr	BASEPRI, r3
 8007efa:	f3bf 8f6f 	isb	sy
 8007efe:	f3bf 8f4f 	dsb	sy
 8007f02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8007f04:	bf00      	nop
 8007f06:	e7fe      	b.n	8007f06 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	2b02      	cmp	r3, #2
 8007f0c:	d103      	bne.n	8007f16 <xQueueGenericSend+0x6e>
 8007f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f12:	2b01      	cmp	r3, #1
 8007f14:	d101      	bne.n	8007f1a <xQueueGenericSend+0x72>
 8007f16:	2301      	movs	r3, #1
 8007f18:	e000      	b.n	8007f1c <xQueueGenericSend+0x74>
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d10a      	bne.n	8007f36 <xQueueGenericSend+0x8e>
	__asm volatile
 8007f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f24:	f383 8811 	msr	BASEPRI, r3
 8007f28:	f3bf 8f6f 	isb	sy
 8007f2c:	f3bf 8f4f 	dsb	sy
 8007f30:	623b      	str	r3, [r7, #32]
}
 8007f32:	bf00      	nop
 8007f34:	e7fe      	b.n	8007f34 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8007f36:	f001 fa3b 	bl	80093b0 <xTaskGetSchedulerState>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d102      	bne.n	8007f46 <xQueueGenericSend+0x9e>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d101      	bne.n	8007f4a <xQueueGenericSend+0xa2>
 8007f46:	2301      	movs	r3, #1
 8007f48:	e000      	b.n	8007f4c <xQueueGenericSend+0xa4>
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d10a      	bne.n	8007f66 <xQueueGenericSend+0xbe>
	__asm volatile
 8007f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f54:	f383 8811 	msr	BASEPRI, r3
 8007f58:	f3bf 8f6f 	isb	sy
 8007f5c:	f3bf 8f4f 	dsb	sy
 8007f60:	61fb      	str	r3, [r7, #28]
}
 8007f62:	bf00      	nop
 8007f64:	e7fe      	b.n	8007f64 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8007f66:	f001 ff7d 	bl	8009e64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8007f6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f72:	429a      	cmp	r2, r3
 8007f74:	d302      	bcc.n	8007f7c <xQueueGenericSend+0xd4>
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d129      	bne.n	8007fd0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8007f7c:	683a      	ldr	r2, [r7, #0]
 8007f7e:	68b9      	ldr	r1, [r7, #8]
 8007f80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8007f82:	f000 fa0b 	bl	800839c <prvCopyDataToQueue>
 8007f86:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8007f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f8c:	2b00      	cmp	r3, #0
 8007f8e:	d010      	beq.n	8007fb2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f92:	3324      	adds	r3, #36	; 0x24
 8007f94:	4618      	mov	r0, r3
 8007f96:	f001 f84d 	bl	8009034 <xTaskRemoveFromEventList>
 8007f9a:	4603      	mov	r3, r0
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d013      	beq.n	8007fc8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8007fa0:	4b3f      	ldr	r3, [pc, #252]	; (80080a0 <xQueueGenericSend+0x1f8>)
 8007fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fa6:	601a      	str	r2, [r3, #0]
 8007fa8:	f3bf 8f4f 	dsb	sy
 8007fac:	f3bf 8f6f 	isb	sy
 8007fb0:	e00a      	b.n	8007fc8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8007fb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d007      	beq.n	8007fc8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8007fb8:	4b39      	ldr	r3, [pc, #228]	; (80080a0 <xQueueGenericSend+0x1f8>)
 8007fba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007fbe:	601a      	str	r2, [r3, #0]
 8007fc0:	f3bf 8f4f 	dsb	sy
 8007fc4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8007fc8:	f001 ff7c 	bl	8009ec4 <vPortExitCritical>
				return pdPASS;
 8007fcc:	2301      	movs	r3, #1
 8007fce:	e063      	b.n	8008098 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2b00      	cmp	r3, #0
 8007fd4:	d103      	bne.n	8007fde <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8007fd6:	f001 ff75 	bl	8009ec4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	e05c      	b.n	8008098 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8007fde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d106      	bne.n	8007ff2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8007fe4:	f107 0314 	add.w	r3, r7, #20
 8007fe8:	4618      	mov	r0, r3
 8007fea:	f001 f887 	bl	80090fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007fee:	2301      	movs	r3, #1
 8007ff0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007ff2:	f001 ff67 	bl	8009ec4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8007ff6:	f000 fdf9 	bl	8008bec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007ffa:	f001 ff33 	bl	8009e64 <vPortEnterCritical>
 8007ffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008000:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008004:	b25b      	sxtb	r3, r3
 8008006:	f1b3 3fff 	cmp.w	r3, #4294967295
 800800a:	d103      	bne.n	8008014 <xQueueGenericSend+0x16c>
 800800c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800800e:	2200      	movs	r2, #0
 8008010:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008016:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800801a:	b25b      	sxtb	r3, r3
 800801c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008020:	d103      	bne.n	800802a <xQueueGenericSend+0x182>
 8008022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008024:	2200      	movs	r2, #0
 8008026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800802a:	f001 ff4b 	bl	8009ec4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800802e:	1d3a      	adds	r2, r7, #4
 8008030:	f107 0314 	add.w	r3, r7, #20
 8008034:	4611      	mov	r1, r2
 8008036:	4618      	mov	r0, r3
 8008038:	f001 f876 	bl	8009128 <xTaskCheckForTimeOut>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d124      	bne.n	800808c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008042:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008044:	f000 faa2 	bl	800858c <prvIsQueueFull>
 8008048:	4603      	mov	r3, r0
 800804a:	2b00      	cmp	r3, #0
 800804c:	d018      	beq.n	8008080 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800804e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008050:	3310      	adds	r3, #16
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	4611      	mov	r1, r2
 8008056:	4618      	mov	r0, r3
 8008058:	f000 ff9c 	bl	8008f94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800805c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800805e:	f000 fa2d 	bl	80084bc <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008062:	f000 fdd1 	bl	8008c08 <xTaskResumeAll>
 8008066:	4603      	mov	r3, r0
 8008068:	2b00      	cmp	r3, #0
 800806a:	f47f af7c 	bne.w	8007f66 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800806e:	4b0c      	ldr	r3, [pc, #48]	; (80080a0 <xQueueGenericSend+0x1f8>)
 8008070:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008074:	601a      	str	r2, [r3, #0]
 8008076:	f3bf 8f4f 	dsb	sy
 800807a:	f3bf 8f6f 	isb	sy
 800807e:	e772      	b.n	8007f66 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008080:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008082:	f000 fa1b 	bl	80084bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008086:	f000 fdbf 	bl	8008c08 <xTaskResumeAll>
 800808a:	e76c      	b.n	8007f66 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800808c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800808e:	f000 fa15 	bl	80084bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008092:	f000 fdb9 	bl	8008c08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008096:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008098:	4618      	mov	r0, r3
 800809a:	3738      	adds	r7, #56	; 0x38
 800809c:	46bd      	mov	sp, r7
 800809e:	bd80      	pop	{r7, pc}
 80080a0:	e000ed04 	.word	0xe000ed04

080080a4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	b090      	sub	sp, #64	; 0x40
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	607a      	str	r2, [r7, #4]
 80080b0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80080b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d10a      	bne.n	80080d2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80080bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c0:	f383 8811 	msr	BASEPRI, r3
 80080c4:	f3bf 8f6f 	isb	sy
 80080c8:	f3bf 8f4f 	dsb	sy
 80080cc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80080ce:	bf00      	nop
 80080d0:	e7fe      	b.n	80080d0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d103      	bne.n	80080e0 <xQueueGenericSendFromISR+0x3c>
 80080d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80080da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d101      	bne.n	80080e4 <xQueueGenericSendFromISR+0x40>
 80080e0:	2301      	movs	r3, #1
 80080e2:	e000      	b.n	80080e6 <xQueueGenericSendFromISR+0x42>
 80080e4:	2300      	movs	r3, #0
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d10a      	bne.n	8008100 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80080ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ee:	f383 8811 	msr	BASEPRI, r3
 80080f2:	f3bf 8f6f 	isb	sy
 80080f6:	f3bf 8f4f 	dsb	sy
 80080fa:	627b      	str	r3, [r7, #36]	; 0x24
}
 80080fc:	bf00      	nop
 80080fe:	e7fe      	b.n	80080fe <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	2b02      	cmp	r3, #2
 8008104:	d103      	bne.n	800810e <xQueueGenericSendFromISR+0x6a>
 8008106:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008108:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800810a:	2b01      	cmp	r3, #1
 800810c:	d101      	bne.n	8008112 <xQueueGenericSendFromISR+0x6e>
 800810e:	2301      	movs	r3, #1
 8008110:	e000      	b.n	8008114 <xQueueGenericSendFromISR+0x70>
 8008112:	2300      	movs	r3, #0
 8008114:	2b00      	cmp	r3, #0
 8008116:	d10a      	bne.n	800812e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800811c:	f383 8811 	msr	BASEPRI, r3
 8008120:	f3bf 8f6f 	isb	sy
 8008124:	f3bf 8f4f 	dsb	sy
 8008128:	623b      	str	r3, [r7, #32]
}
 800812a:	bf00      	nop
 800812c:	e7fe      	b.n	800812c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800812e:	f001 ff7b 	bl	800a028 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008132:	f3ef 8211 	mrs	r2, BASEPRI
 8008136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800813a:	f383 8811 	msr	BASEPRI, r3
 800813e:	f3bf 8f6f 	isb	sy
 8008142:	f3bf 8f4f 	dsb	sy
 8008146:	61fa      	str	r2, [r7, #28]
 8008148:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800814a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800814c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800814e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008150:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008154:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008156:	429a      	cmp	r2, r3
 8008158:	d302      	bcc.n	8008160 <xQueueGenericSendFromISR+0xbc>
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	2b02      	cmp	r3, #2
 800815e:	d12f      	bne.n	80081c0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008162:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008166:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800816a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800816c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800816e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008170:	683a      	ldr	r2, [r7, #0]
 8008172:	68b9      	ldr	r1, [r7, #8]
 8008174:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008176:	f000 f911 	bl	800839c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800817a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800817e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008182:	d112      	bne.n	80081aa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008184:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008188:	2b00      	cmp	r3, #0
 800818a:	d016      	beq.n	80081ba <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800818c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800818e:	3324      	adds	r3, #36	; 0x24
 8008190:	4618      	mov	r0, r3
 8008192:	f000 ff4f 	bl	8009034 <xTaskRemoveFromEventList>
 8008196:	4603      	mov	r3, r0
 8008198:	2b00      	cmp	r3, #0
 800819a:	d00e      	beq.n	80081ba <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d00b      	beq.n	80081ba <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2201      	movs	r2, #1
 80081a6:	601a      	str	r2, [r3, #0]
 80081a8:	e007      	b.n	80081ba <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80081aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80081ae:	3301      	adds	r3, #1
 80081b0:	b2db      	uxtb	r3, r3
 80081b2:	b25a      	sxtb	r2, r3
 80081b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80081ba:	2301      	movs	r3, #1
 80081bc:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80081be:	e001      	b.n	80081c4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80081c0:	2300      	movs	r3, #0
 80081c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80081c6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80081c8:	697b      	ldr	r3, [r7, #20]
 80081ca:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80081ce:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80081d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3740      	adds	r7, #64	; 0x40
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
	...

080081dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b08c      	sub	sp, #48	; 0x30
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80081e8:	2300      	movs	r3, #0
 80081ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80081f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d10a      	bne.n	800820c <xQueueReceive+0x30>
	__asm volatile
 80081f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081fa:	f383 8811 	msr	BASEPRI, r3
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	f3bf 8f4f 	dsb	sy
 8008206:	623b      	str	r3, [r7, #32]
}
 8008208:	bf00      	nop
 800820a:	e7fe      	b.n	800820a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d103      	bne.n	800821a <xQueueReceive+0x3e>
 8008212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008216:	2b00      	cmp	r3, #0
 8008218:	d101      	bne.n	800821e <xQueueReceive+0x42>
 800821a:	2301      	movs	r3, #1
 800821c:	e000      	b.n	8008220 <xQueueReceive+0x44>
 800821e:	2300      	movs	r3, #0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d10a      	bne.n	800823a <xQueueReceive+0x5e>
	__asm volatile
 8008224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008228:	f383 8811 	msr	BASEPRI, r3
 800822c:	f3bf 8f6f 	isb	sy
 8008230:	f3bf 8f4f 	dsb	sy
 8008234:	61fb      	str	r3, [r7, #28]
}
 8008236:	bf00      	nop
 8008238:	e7fe      	b.n	8008238 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800823a:	f001 f8b9 	bl	80093b0 <xTaskGetSchedulerState>
 800823e:	4603      	mov	r3, r0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d102      	bne.n	800824a <xQueueReceive+0x6e>
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	2b00      	cmp	r3, #0
 8008248:	d101      	bne.n	800824e <xQueueReceive+0x72>
 800824a:	2301      	movs	r3, #1
 800824c:	e000      	b.n	8008250 <xQueueReceive+0x74>
 800824e:	2300      	movs	r3, #0
 8008250:	2b00      	cmp	r3, #0
 8008252:	d10a      	bne.n	800826a <xQueueReceive+0x8e>
	__asm volatile
 8008254:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008258:	f383 8811 	msr	BASEPRI, r3
 800825c:	f3bf 8f6f 	isb	sy
 8008260:	f3bf 8f4f 	dsb	sy
 8008264:	61bb      	str	r3, [r7, #24]
}
 8008266:	bf00      	nop
 8008268:	e7fe      	b.n	8008268 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800826a:	f001 fdfb 	bl	8009e64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800826e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008272:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008276:	2b00      	cmp	r3, #0
 8008278:	d01f      	beq.n	80082ba <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800827a:	68b9      	ldr	r1, [r7, #8]
 800827c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800827e:	f000 f8f7 	bl	8008470 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008284:	1e5a      	subs	r2, r3, #1
 8008286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008288:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800828a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800828c:	691b      	ldr	r3, [r3, #16]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d00f      	beq.n	80082b2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008294:	3310      	adds	r3, #16
 8008296:	4618      	mov	r0, r3
 8008298:	f000 fecc 	bl	8009034 <xTaskRemoveFromEventList>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d007      	beq.n	80082b2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80082a2:	4b3d      	ldr	r3, [pc, #244]	; (8008398 <xQueueReceive+0x1bc>)
 80082a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80082a8:	601a      	str	r2, [r3, #0]
 80082aa:	f3bf 8f4f 	dsb	sy
 80082ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80082b2:	f001 fe07 	bl	8009ec4 <vPortExitCritical>
				return pdPASS;
 80082b6:	2301      	movs	r3, #1
 80082b8:	e069      	b.n	800838e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d103      	bne.n	80082c8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80082c0:	f001 fe00 	bl	8009ec4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80082c4:	2300      	movs	r3, #0
 80082c6:	e062      	b.n	800838e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80082c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d106      	bne.n	80082dc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80082ce:	f107 0310 	add.w	r3, r7, #16
 80082d2:	4618      	mov	r0, r3
 80082d4:	f000 ff12 	bl	80090fc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80082d8:	2301      	movs	r3, #1
 80082da:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80082dc:	f001 fdf2 	bl	8009ec4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80082e0:	f000 fc84 	bl	8008bec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80082e4:	f001 fdbe 	bl	8009e64 <vPortEnterCritical>
 80082e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082ea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80082ee:	b25b      	sxtb	r3, r3
 80082f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082f4:	d103      	bne.n	80082fe <xQueueReceive+0x122>
 80082f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082f8:	2200      	movs	r2, #0
 80082fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008300:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008304:	b25b      	sxtb	r3, r3
 8008306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800830a:	d103      	bne.n	8008314 <xQueueReceive+0x138>
 800830c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800830e:	2200      	movs	r2, #0
 8008310:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008314:	f001 fdd6 	bl	8009ec4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008318:	1d3a      	adds	r2, r7, #4
 800831a:	f107 0310 	add.w	r3, r7, #16
 800831e:	4611      	mov	r1, r2
 8008320:	4618      	mov	r0, r3
 8008322:	f000 ff01 	bl	8009128 <xTaskCheckForTimeOut>
 8008326:	4603      	mov	r3, r0
 8008328:	2b00      	cmp	r3, #0
 800832a:	d123      	bne.n	8008374 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800832c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800832e:	f000 f917 	bl	8008560 <prvIsQueueEmpty>
 8008332:	4603      	mov	r3, r0
 8008334:	2b00      	cmp	r3, #0
 8008336:	d017      	beq.n	8008368 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008338:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800833a:	3324      	adds	r3, #36	; 0x24
 800833c:	687a      	ldr	r2, [r7, #4]
 800833e:	4611      	mov	r1, r2
 8008340:	4618      	mov	r0, r3
 8008342:	f000 fe27 	bl	8008f94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008346:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008348:	f000 f8b8 	bl	80084bc <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800834c:	f000 fc5c 	bl	8008c08 <xTaskResumeAll>
 8008350:	4603      	mov	r3, r0
 8008352:	2b00      	cmp	r3, #0
 8008354:	d189      	bne.n	800826a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8008356:	4b10      	ldr	r3, [pc, #64]	; (8008398 <xQueueReceive+0x1bc>)
 8008358:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800835c:	601a      	str	r2, [r3, #0]
 800835e:	f3bf 8f4f 	dsb	sy
 8008362:	f3bf 8f6f 	isb	sy
 8008366:	e780      	b.n	800826a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008368:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800836a:	f000 f8a7 	bl	80084bc <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800836e:	f000 fc4b 	bl	8008c08 <xTaskResumeAll>
 8008372:	e77a      	b.n	800826a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008374:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008376:	f000 f8a1 	bl	80084bc <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800837a:	f000 fc45 	bl	8008c08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800837e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008380:	f000 f8ee 	bl	8008560 <prvIsQueueEmpty>
 8008384:	4603      	mov	r3, r0
 8008386:	2b00      	cmp	r3, #0
 8008388:	f43f af6f 	beq.w	800826a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800838c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800838e:	4618      	mov	r0, r3
 8008390:	3730      	adds	r7, #48	; 0x30
 8008392:	46bd      	mov	sp, r7
 8008394:	bd80      	pop	{r7, pc}
 8008396:	bf00      	nop
 8008398:	e000ed04 	.word	0xe000ed04

0800839c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b086      	sub	sp, #24
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	60b9      	str	r1, [r7, #8]
 80083a6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80083a8:	2300      	movs	r3, #0
 80083aa:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083b0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d10d      	bne.n	80083d6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d14d      	bne.n	800845e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	4618      	mov	r0, r3
 80083c8:	f001 f810 	bl	80093ec <xTaskPriorityDisinherit>
 80083cc:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	2200      	movs	r2, #0
 80083d2:	609a      	str	r2, [r3, #8]
 80083d4:	e043      	b.n	800845e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d119      	bne.n	8008410 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6858      	ldr	r0, [r3, #4]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083e4:	461a      	mov	r2, r3
 80083e6:	68b9      	ldr	r1, [r7, #8]
 80083e8:	f002 f872 	bl	800a4d0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	685a      	ldr	r2, [r3, #4]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083f4:	441a      	add	r2, r3
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	685a      	ldr	r2, [r3, #4]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	689b      	ldr	r3, [r3, #8]
 8008402:	429a      	cmp	r2, r3
 8008404:	d32b      	bcc.n	800845e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	681a      	ldr	r2, [r3, #0]
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	605a      	str	r2, [r3, #4]
 800840e:	e026      	b.n	800845e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	68d8      	ldr	r0, [r3, #12]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008418:	461a      	mov	r2, r3
 800841a:	68b9      	ldr	r1, [r7, #8]
 800841c:	f002 f858 	bl	800a4d0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	68da      	ldr	r2, [r3, #12]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008428:	425b      	negs	r3, r3
 800842a:	441a      	add	r2, r3
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	68da      	ldr	r2, [r3, #12]
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	429a      	cmp	r2, r3
 800843a:	d207      	bcs.n	800844c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	689a      	ldr	r2, [r3, #8]
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008444:	425b      	negs	r3, r3
 8008446:	441a      	add	r2, r3
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	2b02      	cmp	r3, #2
 8008450:	d105      	bne.n	800845e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d002      	beq.n	800845e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008458:	693b      	ldr	r3, [r7, #16]
 800845a:	3b01      	subs	r3, #1
 800845c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	1c5a      	adds	r2, r3, #1
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8008466:	697b      	ldr	r3, [r7, #20]
}
 8008468:	4618      	mov	r0, r3
 800846a:	3718      	adds	r7, #24
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008470:	b580      	push	{r7, lr}
 8008472:	b082      	sub	sp, #8
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
 8008478:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800847a:	687b      	ldr	r3, [r7, #4]
 800847c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847e:	2b00      	cmp	r3, #0
 8008480:	d018      	beq.n	80084b4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	68da      	ldr	r2, [r3, #12]
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800848a:	441a      	add	r2, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	68da      	ldr	r2, [r3, #12]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	429a      	cmp	r2, r3
 800849a:	d303      	bcc.n	80084a4 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	68d9      	ldr	r1, [r3, #12]
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084ac:	461a      	mov	r2, r3
 80084ae:	6838      	ldr	r0, [r7, #0]
 80084b0:	f002 f80e 	bl	800a4d0 <memcpy>
	}
}
 80084b4:	bf00      	nop
 80084b6:	3708      	adds	r7, #8
 80084b8:	46bd      	mov	sp, r7
 80084ba:	bd80      	pop	{r7, pc}

080084bc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80084bc:	b580      	push	{r7, lr}
 80084be:	b084      	sub	sp, #16
 80084c0:	af00      	add	r7, sp, #0
 80084c2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80084c4:	f001 fcce 	bl	8009e64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80084ce:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084d0:	e011      	b.n	80084f6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d012      	beq.n	8008500 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	3324      	adds	r3, #36	; 0x24
 80084de:	4618      	mov	r0, r3
 80084e0:	f000 fda8 	bl	8009034 <xTaskRemoveFromEventList>
 80084e4:	4603      	mov	r3, r0
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d001      	beq.n	80084ee <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80084ea:	f000 fe7f 	bl	80091ec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80084ee:	7bfb      	ldrb	r3, [r7, #15]
 80084f0:	3b01      	subs	r3, #1
 80084f2:	b2db      	uxtb	r3, r3
 80084f4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80084f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	dce9      	bgt.n	80084d2 <prvUnlockQueue+0x16>
 80084fe:	e000      	b.n	8008502 <prvUnlockQueue+0x46>
					break;
 8008500:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	22ff      	movs	r2, #255	; 0xff
 8008506:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800850a:	f001 fcdb 	bl	8009ec4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800850e:	f001 fca9 	bl	8009e64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008518:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800851a:	e011      	b.n	8008540 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	691b      	ldr	r3, [r3, #16]
 8008520:	2b00      	cmp	r3, #0
 8008522:	d012      	beq.n	800854a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	3310      	adds	r3, #16
 8008528:	4618      	mov	r0, r3
 800852a:	f000 fd83 	bl	8009034 <xTaskRemoveFromEventList>
 800852e:	4603      	mov	r3, r0
 8008530:	2b00      	cmp	r3, #0
 8008532:	d001      	beq.n	8008538 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008534:	f000 fe5a 	bl	80091ec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008538:	7bbb      	ldrb	r3, [r7, #14]
 800853a:	3b01      	subs	r3, #1
 800853c:	b2db      	uxtb	r3, r3
 800853e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008540:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008544:	2b00      	cmp	r3, #0
 8008546:	dce9      	bgt.n	800851c <prvUnlockQueue+0x60>
 8008548:	e000      	b.n	800854c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800854a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	22ff      	movs	r2, #255	; 0xff
 8008550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8008554:	f001 fcb6 	bl	8009ec4 <vPortExitCritical>
}
 8008558:	bf00      	nop
 800855a:	3710      	adds	r7, #16
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008560:	b580      	push	{r7, lr}
 8008562:	b084      	sub	sp, #16
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008568:	f001 fc7c 	bl	8009e64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008570:	2b00      	cmp	r3, #0
 8008572:	d102      	bne.n	800857a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008574:	2301      	movs	r3, #1
 8008576:	60fb      	str	r3, [r7, #12]
 8008578:	e001      	b.n	800857e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800857a:	2300      	movs	r3, #0
 800857c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800857e:	f001 fca1 	bl	8009ec4 <vPortExitCritical>

	return xReturn;
 8008582:	68fb      	ldr	r3, [r7, #12]
}
 8008584:	4618      	mov	r0, r3
 8008586:	3710      	adds	r7, #16
 8008588:	46bd      	mov	sp, r7
 800858a:	bd80      	pop	{r7, pc}

0800858c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800858c:	b580      	push	{r7, lr}
 800858e:	b084      	sub	sp, #16
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008594:	f001 fc66 	bl	8009e64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085a0:	429a      	cmp	r2, r3
 80085a2:	d102      	bne.n	80085aa <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80085a4:	2301      	movs	r3, #1
 80085a6:	60fb      	str	r3, [r7, #12]
 80085a8:	e001      	b.n	80085ae <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80085aa:	2300      	movs	r3, #0
 80085ac:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80085ae:	f001 fc89 	bl	8009ec4 <vPortExitCritical>

	return xReturn;
 80085b2:	68fb      	ldr	r3, [r7, #12]
}
 80085b4:	4618      	mov	r0, r3
 80085b6:	3710      	adds	r7, #16
 80085b8:	46bd      	mov	sp, r7
 80085ba:	bd80      	pop	{r7, pc}

080085bc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80085bc:	b480      	push	{r7}
 80085be:	b085      	sub	sp, #20
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085c6:	2300      	movs	r3, #0
 80085c8:	60fb      	str	r3, [r7, #12]
 80085ca:	e014      	b.n	80085f6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80085cc:	4a0f      	ldr	r2, [pc, #60]	; (800860c <vQueueAddToRegistry+0x50>)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d10b      	bne.n	80085f0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80085d8:	490c      	ldr	r1, [pc, #48]	; (800860c <vQueueAddToRegistry+0x50>)
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	683a      	ldr	r2, [r7, #0]
 80085de:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80085e2:	4a0a      	ldr	r2, [pc, #40]	; (800860c <vQueueAddToRegistry+0x50>)
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	00db      	lsls	r3, r3, #3
 80085e8:	4413      	add	r3, r2
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80085ee:	e006      	b.n	80085fe <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	3301      	adds	r3, #1
 80085f4:	60fb      	str	r3, [r7, #12]
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	2b07      	cmp	r3, #7
 80085fa:	d9e7      	bls.n	80085cc <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80085fc:	bf00      	nop
 80085fe:	bf00      	nop
 8008600:	3714      	adds	r7, #20
 8008602:	46bd      	mov	sp, r7
 8008604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008608:	4770      	bx	lr
 800860a:	bf00      	nop
 800860c:	2000101c 	.word	0x2000101c

08008610 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008610:	b580      	push	{r7, lr}
 8008612:	b086      	sub	sp, #24
 8008614:	af00      	add	r7, sp, #0
 8008616:	60f8      	str	r0, [r7, #12]
 8008618:	60b9      	str	r1, [r7, #8]
 800861a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008620:	f001 fc20 	bl	8009e64 <vPortEnterCritical>
 8008624:	697b      	ldr	r3, [r7, #20]
 8008626:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800862a:	b25b      	sxtb	r3, r3
 800862c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008630:	d103      	bne.n	800863a <vQueueWaitForMessageRestricted+0x2a>
 8008632:	697b      	ldr	r3, [r7, #20]
 8008634:	2200      	movs	r2, #0
 8008636:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800863a:	697b      	ldr	r3, [r7, #20]
 800863c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008640:	b25b      	sxtb	r3, r3
 8008642:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008646:	d103      	bne.n	8008650 <vQueueWaitForMessageRestricted+0x40>
 8008648:	697b      	ldr	r3, [r7, #20]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008650:	f001 fc38 	bl	8009ec4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008654:	697b      	ldr	r3, [r7, #20]
 8008656:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008658:	2b00      	cmp	r3, #0
 800865a:	d106      	bne.n	800866a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800865c:	697b      	ldr	r3, [r7, #20]
 800865e:	3324      	adds	r3, #36	; 0x24
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	68b9      	ldr	r1, [r7, #8]
 8008664:	4618      	mov	r0, r3
 8008666:	f000 fcb9 	bl	8008fdc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800866a:	6978      	ldr	r0, [r7, #20]
 800866c:	f7ff ff26 	bl	80084bc <prvUnlockQueue>
	}
 8008670:	bf00      	nop
 8008672:	3718      	adds	r7, #24
 8008674:	46bd      	mov	sp, r7
 8008676:	bd80      	pop	{r7, pc}

08008678 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008678:	b580      	push	{r7, lr}
 800867a:	b08e      	sub	sp, #56	; 0x38
 800867c:	af04      	add	r7, sp, #16
 800867e:	60f8      	str	r0, [r7, #12]
 8008680:	60b9      	str	r1, [r7, #8]
 8008682:	607a      	str	r2, [r7, #4]
 8008684:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008686:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008688:	2b00      	cmp	r3, #0
 800868a:	d10a      	bne.n	80086a2 <xTaskCreateStatic+0x2a>
	__asm volatile
 800868c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008690:	f383 8811 	msr	BASEPRI, r3
 8008694:	f3bf 8f6f 	isb	sy
 8008698:	f3bf 8f4f 	dsb	sy
 800869c:	623b      	str	r3, [r7, #32]
}
 800869e:	bf00      	nop
 80086a0:	e7fe      	b.n	80086a0 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80086a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d10a      	bne.n	80086be <xTaskCreateStatic+0x46>
	__asm volatile
 80086a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ac:	f383 8811 	msr	BASEPRI, r3
 80086b0:	f3bf 8f6f 	isb	sy
 80086b4:	f3bf 8f4f 	dsb	sy
 80086b8:	61fb      	str	r3, [r7, #28]
}
 80086ba:	bf00      	nop
 80086bc:	e7fe      	b.n	80086bc <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80086be:	235c      	movs	r3, #92	; 0x5c
 80086c0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	2b5c      	cmp	r3, #92	; 0x5c
 80086c6:	d00a      	beq.n	80086de <xTaskCreateStatic+0x66>
	__asm volatile
 80086c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086cc:	f383 8811 	msr	BASEPRI, r3
 80086d0:	f3bf 8f6f 	isb	sy
 80086d4:	f3bf 8f4f 	dsb	sy
 80086d8:	61bb      	str	r3, [r7, #24]
}
 80086da:	bf00      	nop
 80086dc:	e7fe      	b.n	80086dc <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80086de:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80086e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d01e      	beq.n	8008724 <xTaskCreateStatic+0xac>
 80086e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d01b      	beq.n	8008724 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086ee:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80086f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80086f4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80086f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086f8:	2202      	movs	r2, #2
 80086fa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80086fe:	2300      	movs	r3, #0
 8008700:	9303      	str	r3, [sp, #12]
 8008702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008704:	9302      	str	r3, [sp, #8]
 8008706:	f107 0314 	add.w	r3, r7, #20
 800870a:	9301      	str	r3, [sp, #4]
 800870c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800870e:	9300      	str	r3, [sp, #0]
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	68b9      	ldr	r1, [r7, #8]
 8008716:	68f8      	ldr	r0, [r7, #12]
 8008718:	f000 f850 	bl	80087bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800871c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800871e:	f000 f8dd 	bl	80088dc <prvAddNewTaskToReadyList>
 8008722:	e001      	b.n	8008728 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8008724:	2300      	movs	r3, #0
 8008726:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008728:	697b      	ldr	r3, [r7, #20]
	}
 800872a:	4618      	mov	r0, r3
 800872c:	3728      	adds	r7, #40	; 0x28
 800872e:	46bd      	mov	sp, r7
 8008730:	bd80      	pop	{r7, pc}

08008732 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008732:	b580      	push	{r7, lr}
 8008734:	b08c      	sub	sp, #48	; 0x30
 8008736:	af04      	add	r7, sp, #16
 8008738:	60f8      	str	r0, [r7, #12]
 800873a:	60b9      	str	r1, [r7, #8]
 800873c:	603b      	str	r3, [r7, #0]
 800873e:	4613      	mov	r3, r2
 8008740:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008742:	88fb      	ldrh	r3, [r7, #6]
 8008744:	009b      	lsls	r3, r3, #2
 8008746:	4618      	mov	r0, r3
 8008748:	f001 fcae 	bl	800a0a8 <pvPortMalloc>
 800874c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d00e      	beq.n	8008772 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008754:	205c      	movs	r0, #92	; 0x5c
 8008756:	f001 fca7 	bl	800a0a8 <pvPortMalloc>
 800875a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800875c:	69fb      	ldr	r3, [r7, #28]
 800875e:	2b00      	cmp	r3, #0
 8008760:	d003      	beq.n	800876a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008762:	69fb      	ldr	r3, [r7, #28]
 8008764:	697a      	ldr	r2, [r7, #20]
 8008766:	631a      	str	r2, [r3, #48]	; 0x30
 8008768:	e005      	b.n	8008776 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800876a:	6978      	ldr	r0, [r7, #20]
 800876c:	f001 fd68 	bl	800a240 <vPortFree>
 8008770:	e001      	b.n	8008776 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008772:	2300      	movs	r3, #0
 8008774:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008776:	69fb      	ldr	r3, [r7, #28]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d017      	beq.n	80087ac <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800877c:	69fb      	ldr	r3, [r7, #28]
 800877e:	2200      	movs	r2, #0
 8008780:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008784:	88fa      	ldrh	r2, [r7, #6]
 8008786:	2300      	movs	r3, #0
 8008788:	9303      	str	r3, [sp, #12]
 800878a:	69fb      	ldr	r3, [r7, #28]
 800878c:	9302      	str	r3, [sp, #8]
 800878e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008790:	9301      	str	r3, [sp, #4]
 8008792:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008794:	9300      	str	r3, [sp, #0]
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	68b9      	ldr	r1, [r7, #8]
 800879a:	68f8      	ldr	r0, [r7, #12]
 800879c:	f000 f80e 	bl	80087bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80087a0:	69f8      	ldr	r0, [r7, #28]
 80087a2:	f000 f89b 	bl	80088dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80087a6:	2301      	movs	r3, #1
 80087a8:	61bb      	str	r3, [r7, #24]
 80087aa:	e002      	b.n	80087b2 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80087ac:	f04f 33ff 	mov.w	r3, #4294967295
 80087b0:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80087b2:	69bb      	ldr	r3, [r7, #24]
	}
 80087b4:	4618      	mov	r0, r3
 80087b6:	3720      	adds	r7, #32
 80087b8:	46bd      	mov	sp, r7
 80087ba:	bd80      	pop	{r7, pc}

080087bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80087bc:	b580      	push	{r7, lr}
 80087be:	b088      	sub	sp, #32
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	60f8      	str	r0, [r7, #12]
 80087c4:	60b9      	str	r1, [r7, #8]
 80087c6:	607a      	str	r2, [r7, #4]
 80087c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80087ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087cc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	009b      	lsls	r3, r3, #2
 80087d2:	461a      	mov	r2, r3
 80087d4:	21a5      	movs	r1, #165	; 0xa5
 80087d6:	f001 fe89 	bl	800a4ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80087da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80087e4:	3b01      	subs	r3, #1
 80087e6:	009b      	lsls	r3, r3, #2
 80087e8:	4413      	add	r3, r2
 80087ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80087ec:	69bb      	ldr	r3, [r7, #24]
 80087ee:	f023 0307 	bic.w	r3, r3, #7
 80087f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80087f4:	69bb      	ldr	r3, [r7, #24]
 80087f6:	f003 0307 	and.w	r3, r3, #7
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d00a      	beq.n	8008814 <prvInitialiseNewTask+0x58>
	__asm volatile
 80087fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008802:	f383 8811 	msr	BASEPRI, r3
 8008806:	f3bf 8f6f 	isb	sy
 800880a:	f3bf 8f4f 	dsb	sy
 800880e:	617b      	str	r3, [r7, #20]
}
 8008810:	bf00      	nop
 8008812:	e7fe      	b.n	8008812 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d01f      	beq.n	800885a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800881a:	2300      	movs	r3, #0
 800881c:	61fb      	str	r3, [r7, #28]
 800881e:	e012      	b.n	8008846 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008820:	68ba      	ldr	r2, [r7, #8]
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	4413      	add	r3, r2
 8008826:	7819      	ldrb	r1, [r3, #0]
 8008828:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800882a:	69fb      	ldr	r3, [r7, #28]
 800882c:	4413      	add	r3, r2
 800882e:	3334      	adds	r3, #52	; 0x34
 8008830:	460a      	mov	r2, r1
 8008832:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008834:	68ba      	ldr	r2, [r7, #8]
 8008836:	69fb      	ldr	r3, [r7, #28]
 8008838:	4413      	add	r3, r2
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	2b00      	cmp	r3, #0
 800883e:	d006      	beq.n	800884e <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	3301      	adds	r3, #1
 8008844:	61fb      	str	r3, [r7, #28]
 8008846:	69fb      	ldr	r3, [r7, #28]
 8008848:	2b0f      	cmp	r3, #15
 800884a:	d9e9      	bls.n	8008820 <prvInitialiseNewTask+0x64>
 800884c:	e000      	b.n	8008850 <prvInitialiseNewTask+0x94>
			{
				break;
 800884e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008852:	2200      	movs	r2, #0
 8008854:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008858:	e003      	b.n	8008862 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800885a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800885c:	2200      	movs	r2, #0
 800885e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008864:	2b37      	cmp	r3, #55	; 0x37
 8008866:	d901      	bls.n	800886c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008868:	2337      	movs	r3, #55	; 0x37
 800886a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800886c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008870:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008874:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008876:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800887a:	2200      	movs	r2, #0
 800887c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800887e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008880:	3304      	adds	r3, #4
 8008882:	4618      	mov	r0, r3
 8008884:	f7ff f978 	bl	8007b78 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800888a:	3318      	adds	r3, #24
 800888c:	4618      	mov	r0, r3
 800888e:	f7ff f973 	bl	8007b78 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008892:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008896:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800889a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800889e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80088a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088a6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80088a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088aa:	2200      	movs	r2, #0
 80088ac:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80088ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b0:	2200      	movs	r2, #0
 80088b2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80088b6:	683a      	ldr	r2, [r7, #0]
 80088b8:	68f9      	ldr	r1, [r7, #12]
 80088ba:	69b8      	ldr	r0, [r7, #24]
 80088bc:	f001 f9a6 	bl	8009c0c <pxPortInitialiseStack>
 80088c0:	4602      	mov	r2, r0
 80088c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088c4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80088c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d002      	beq.n	80088d2 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80088cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80088d0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80088d2:	bf00      	nop
 80088d4:	3720      	adds	r7, #32
 80088d6:	46bd      	mov	sp, r7
 80088d8:	bd80      	pop	{r7, pc}
	...

080088dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b082      	sub	sp, #8
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80088e4:	f001 fabe 	bl	8009e64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80088e8:	4b2d      	ldr	r3, [pc, #180]	; (80089a0 <prvAddNewTaskToReadyList+0xc4>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	3301      	adds	r3, #1
 80088ee:	4a2c      	ldr	r2, [pc, #176]	; (80089a0 <prvAddNewTaskToReadyList+0xc4>)
 80088f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80088f2:	4b2c      	ldr	r3, [pc, #176]	; (80089a4 <prvAddNewTaskToReadyList+0xc8>)
 80088f4:	681b      	ldr	r3, [r3, #0]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d109      	bne.n	800890e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80088fa:	4a2a      	ldr	r2, [pc, #168]	; (80089a4 <prvAddNewTaskToReadyList+0xc8>)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008900:	4b27      	ldr	r3, [pc, #156]	; (80089a0 <prvAddNewTaskToReadyList+0xc4>)
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	2b01      	cmp	r3, #1
 8008906:	d110      	bne.n	800892a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008908:	f000 fc94 	bl	8009234 <prvInitialiseTaskLists>
 800890c:	e00d      	b.n	800892a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800890e:	4b26      	ldr	r3, [pc, #152]	; (80089a8 <prvAddNewTaskToReadyList+0xcc>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	2b00      	cmp	r3, #0
 8008914:	d109      	bne.n	800892a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008916:	4b23      	ldr	r3, [pc, #140]	; (80089a4 <prvAddNewTaskToReadyList+0xc8>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008920:	429a      	cmp	r2, r3
 8008922:	d802      	bhi.n	800892a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008924:	4a1f      	ldr	r2, [pc, #124]	; (80089a4 <prvAddNewTaskToReadyList+0xc8>)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800892a:	4b20      	ldr	r3, [pc, #128]	; (80089ac <prvAddNewTaskToReadyList+0xd0>)
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	3301      	adds	r3, #1
 8008930:	4a1e      	ldr	r2, [pc, #120]	; (80089ac <prvAddNewTaskToReadyList+0xd0>)
 8008932:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008934:	4b1d      	ldr	r3, [pc, #116]	; (80089ac <prvAddNewTaskToReadyList+0xd0>)
 8008936:	681a      	ldr	r2, [r3, #0]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008940:	4b1b      	ldr	r3, [pc, #108]	; (80089b0 <prvAddNewTaskToReadyList+0xd4>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	429a      	cmp	r2, r3
 8008946:	d903      	bls.n	8008950 <prvAddNewTaskToReadyList+0x74>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800894c:	4a18      	ldr	r2, [pc, #96]	; (80089b0 <prvAddNewTaskToReadyList+0xd4>)
 800894e:	6013      	str	r3, [r2, #0]
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008954:	4613      	mov	r3, r2
 8008956:	009b      	lsls	r3, r3, #2
 8008958:	4413      	add	r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4a15      	ldr	r2, [pc, #84]	; (80089b4 <prvAddNewTaskToReadyList+0xd8>)
 800895e:	441a      	add	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	3304      	adds	r3, #4
 8008964:	4619      	mov	r1, r3
 8008966:	4610      	mov	r0, r2
 8008968:	f7ff f913 	bl	8007b92 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800896c:	f001 faaa 	bl	8009ec4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008970:	4b0d      	ldr	r3, [pc, #52]	; (80089a8 <prvAddNewTaskToReadyList+0xcc>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2b00      	cmp	r3, #0
 8008976:	d00e      	beq.n	8008996 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008978:	4b0a      	ldr	r3, [pc, #40]	; (80089a4 <prvAddNewTaskToReadyList+0xc8>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008982:	429a      	cmp	r2, r3
 8008984:	d207      	bcs.n	8008996 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008986:	4b0c      	ldr	r3, [pc, #48]	; (80089b8 <prvAddNewTaskToReadyList+0xdc>)
 8008988:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800898c:	601a      	str	r2, [r3, #0]
 800898e:	f3bf 8f4f 	dsb	sy
 8008992:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008996:	bf00      	nop
 8008998:	3708      	adds	r7, #8
 800899a:	46bd      	mov	sp, r7
 800899c:	bd80      	pop	{r7, pc}
 800899e:	bf00      	nop
 80089a0:	20001530 	.word	0x20001530
 80089a4:	2000105c 	.word	0x2000105c
 80089a8:	2000153c 	.word	0x2000153c
 80089ac:	2000154c 	.word	0x2000154c
 80089b0:	20001538 	.word	0x20001538
 80089b4:	20001060 	.word	0x20001060
 80089b8:	e000ed04 	.word	0xe000ed04

080089bc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b08a      	sub	sp, #40	; 0x28
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
 80089c4:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80089c6:	2300      	movs	r3, #0
 80089c8:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d10a      	bne.n	80089e6 <vTaskDelayUntil+0x2a>
	__asm volatile
 80089d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d4:	f383 8811 	msr	BASEPRI, r3
 80089d8:	f3bf 8f6f 	isb	sy
 80089dc:	f3bf 8f4f 	dsb	sy
 80089e0:	617b      	str	r3, [r7, #20]
}
 80089e2:	bf00      	nop
 80089e4:	e7fe      	b.n	80089e4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d10a      	bne.n	8008a02 <vTaskDelayUntil+0x46>
	__asm volatile
 80089ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089f0:	f383 8811 	msr	BASEPRI, r3
 80089f4:	f3bf 8f6f 	isb	sy
 80089f8:	f3bf 8f4f 	dsb	sy
 80089fc:	613b      	str	r3, [r7, #16]
}
 80089fe:	bf00      	nop
 8008a00:	e7fe      	b.n	8008a00 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 8008a02:	4b2a      	ldr	r3, [pc, #168]	; (8008aac <vTaskDelayUntil+0xf0>)
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d00a      	beq.n	8008a20 <vTaskDelayUntil+0x64>
	__asm volatile
 8008a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008a0e:	f383 8811 	msr	BASEPRI, r3
 8008a12:	f3bf 8f6f 	isb	sy
 8008a16:	f3bf 8f4f 	dsb	sy
 8008a1a:	60fb      	str	r3, [r7, #12]
}
 8008a1c:	bf00      	nop
 8008a1e:	e7fe      	b.n	8008a1e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8008a20:	f000 f8e4 	bl	8008bec <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8008a24:	4b22      	ldr	r3, [pc, #136]	; (8008ab0 <vTaskDelayUntil+0xf4>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	683a      	ldr	r2, [r7, #0]
 8008a30:	4413      	add	r3, r2
 8008a32:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	6a3a      	ldr	r2, [r7, #32]
 8008a3a:	429a      	cmp	r2, r3
 8008a3c:	d20b      	bcs.n	8008a56 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	69fa      	ldr	r2, [r7, #28]
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d211      	bcs.n	8008a6c <vTaskDelayUntil+0xb0>
 8008a48:	69fa      	ldr	r2, [r7, #28]
 8008a4a:	6a3b      	ldr	r3, [r7, #32]
 8008a4c:	429a      	cmp	r2, r3
 8008a4e:	d90d      	bls.n	8008a6c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008a50:	2301      	movs	r3, #1
 8008a52:	627b      	str	r3, [r7, #36]	; 0x24
 8008a54:	e00a      	b.n	8008a6c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	69fa      	ldr	r2, [r7, #28]
 8008a5c:	429a      	cmp	r2, r3
 8008a5e:	d303      	bcc.n	8008a68 <vTaskDelayUntil+0xac>
 8008a60:	69fa      	ldr	r2, [r7, #28]
 8008a62:	6a3b      	ldr	r3, [r7, #32]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d901      	bls.n	8008a6c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	69fa      	ldr	r2, [r7, #28]
 8008a70:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 8008a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d006      	beq.n	8008a86 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8008a78:	69fa      	ldr	r2, [r7, #28]
 8008a7a:	6a3b      	ldr	r3, [r7, #32]
 8008a7c:	1ad3      	subs	r3, r2, r3
 8008a7e:	2100      	movs	r1, #0
 8008a80:	4618      	mov	r0, r3
 8008a82:	f000 fd21 	bl	80094c8 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 8008a86:	f000 f8bf 	bl	8008c08 <xTaskResumeAll>
 8008a8a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008a8c:	69bb      	ldr	r3, [r7, #24]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d107      	bne.n	8008aa2 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 8008a92:	4b08      	ldr	r3, [pc, #32]	; (8008ab4 <vTaskDelayUntil+0xf8>)
 8008a94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008a98:	601a      	str	r2, [r3, #0]
 8008a9a:	f3bf 8f4f 	dsb	sy
 8008a9e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008aa2:	bf00      	nop
 8008aa4:	3728      	adds	r7, #40	; 0x28
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	20001558 	.word	0x20001558
 8008ab0:	20001534 	.word	0x20001534
 8008ab4:	e000ed04 	.word	0xe000ed04

08008ab8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d017      	beq.n	8008afa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008aca:	4b13      	ldr	r3, [pc, #76]	; (8008b18 <vTaskDelay+0x60>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00a      	beq.n	8008ae8 <vTaskDelay+0x30>
	__asm volatile
 8008ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ad6:	f383 8811 	msr	BASEPRI, r3
 8008ada:	f3bf 8f6f 	isb	sy
 8008ade:	f3bf 8f4f 	dsb	sy
 8008ae2:	60bb      	str	r3, [r7, #8]
}
 8008ae4:	bf00      	nop
 8008ae6:	e7fe      	b.n	8008ae6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008ae8:	f000 f880 	bl	8008bec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008aec:	2100      	movs	r1, #0
 8008aee:	6878      	ldr	r0, [r7, #4]
 8008af0:	f000 fcea 	bl	80094c8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008af4:	f000 f888 	bl	8008c08 <xTaskResumeAll>
 8008af8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d107      	bne.n	8008b10 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8008b00:	4b06      	ldr	r3, [pc, #24]	; (8008b1c <vTaskDelay+0x64>)
 8008b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b06:	601a      	str	r2, [r3, #0]
 8008b08:	f3bf 8f4f 	dsb	sy
 8008b0c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008b10:	bf00      	nop
 8008b12:	3710      	adds	r7, #16
 8008b14:	46bd      	mov	sp, r7
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	20001558 	.word	0x20001558
 8008b1c:	e000ed04 	.word	0xe000ed04

08008b20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b08a      	sub	sp, #40	; 0x28
 8008b24:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008b26:	2300      	movs	r3, #0
 8008b28:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008b2e:	463a      	mov	r2, r7
 8008b30:	1d39      	adds	r1, r7, #4
 8008b32:	f107 0308 	add.w	r3, r7, #8
 8008b36:	4618      	mov	r0, r3
 8008b38:	f7fe ffca 	bl	8007ad0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008b3c:	6839      	ldr	r1, [r7, #0]
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	68ba      	ldr	r2, [r7, #8]
 8008b42:	9202      	str	r2, [sp, #8]
 8008b44:	9301      	str	r3, [sp, #4]
 8008b46:	2300      	movs	r3, #0
 8008b48:	9300      	str	r3, [sp, #0]
 8008b4a:	2300      	movs	r3, #0
 8008b4c:	460a      	mov	r2, r1
 8008b4e:	4921      	ldr	r1, [pc, #132]	; (8008bd4 <vTaskStartScheduler+0xb4>)
 8008b50:	4821      	ldr	r0, [pc, #132]	; (8008bd8 <vTaskStartScheduler+0xb8>)
 8008b52:	f7ff fd91 	bl	8008678 <xTaskCreateStatic>
 8008b56:	4603      	mov	r3, r0
 8008b58:	4a20      	ldr	r2, [pc, #128]	; (8008bdc <vTaskStartScheduler+0xbc>)
 8008b5a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008b5c:	4b1f      	ldr	r3, [pc, #124]	; (8008bdc <vTaskStartScheduler+0xbc>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d002      	beq.n	8008b6a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008b64:	2301      	movs	r3, #1
 8008b66:	617b      	str	r3, [r7, #20]
 8008b68:	e001      	b.n	8008b6e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008b6e:	697b      	ldr	r3, [r7, #20]
 8008b70:	2b01      	cmp	r3, #1
 8008b72:	d102      	bne.n	8008b7a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008b74:	f000 fcfc 	bl	8009570 <xTimerCreateTimerTask>
 8008b78:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008b7a:	697b      	ldr	r3, [r7, #20]
 8008b7c:	2b01      	cmp	r3, #1
 8008b7e:	d116      	bne.n	8008bae <vTaskStartScheduler+0x8e>
	__asm volatile
 8008b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b84:	f383 8811 	msr	BASEPRI, r3
 8008b88:	f3bf 8f6f 	isb	sy
 8008b8c:	f3bf 8f4f 	dsb	sy
 8008b90:	613b      	str	r3, [r7, #16]
}
 8008b92:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008b94:	4b12      	ldr	r3, [pc, #72]	; (8008be0 <vTaskStartScheduler+0xc0>)
 8008b96:	f04f 32ff 	mov.w	r2, #4294967295
 8008b9a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008b9c:	4b11      	ldr	r3, [pc, #68]	; (8008be4 <vTaskStartScheduler+0xc4>)
 8008b9e:	2201      	movs	r2, #1
 8008ba0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008ba2:	4b11      	ldr	r3, [pc, #68]	; (8008be8 <vTaskStartScheduler+0xc8>)
 8008ba4:	2200      	movs	r2, #0
 8008ba6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008ba8:	f001 f8ba 	bl	8009d20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008bac:	e00e      	b.n	8008bcc <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008bb4:	d10a      	bne.n	8008bcc <vTaskStartScheduler+0xac>
	__asm volatile
 8008bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008bba:	f383 8811 	msr	BASEPRI, r3
 8008bbe:	f3bf 8f6f 	isb	sy
 8008bc2:	f3bf 8f4f 	dsb	sy
 8008bc6:	60fb      	str	r3, [r7, #12]
}
 8008bc8:	bf00      	nop
 8008bca:	e7fe      	b.n	8008bca <vTaskStartScheduler+0xaa>
}
 8008bcc:	bf00      	nop
 8008bce:	3718      	adds	r7, #24
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	bd80      	pop	{r7, pc}
 8008bd4:	0800e1c4 	.word	0x0800e1c4
 8008bd8:	08009205 	.word	0x08009205
 8008bdc:	20001554 	.word	0x20001554
 8008be0:	20001550 	.word	0x20001550
 8008be4:	2000153c 	.word	0x2000153c
 8008be8:	20001534 	.word	0x20001534

08008bec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008bec:	b480      	push	{r7}
 8008bee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8008bf0:	4b04      	ldr	r3, [pc, #16]	; (8008c04 <vTaskSuspendAll+0x18>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	4a03      	ldr	r2, [pc, #12]	; (8008c04 <vTaskSuspendAll+0x18>)
 8008bf8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8008bfa:	bf00      	nop
 8008bfc:	46bd      	mov	sp, r7
 8008bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c02:	4770      	bx	lr
 8008c04:	20001558 	.word	0x20001558

08008c08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b084      	sub	sp, #16
 8008c0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008c12:	2300      	movs	r3, #0
 8008c14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8008c16:	4b42      	ldr	r3, [pc, #264]	; (8008d20 <xTaskResumeAll+0x118>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d10a      	bne.n	8008c34 <xTaskResumeAll+0x2c>
	__asm volatile
 8008c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c22:	f383 8811 	msr	BASEPRI, r3
 8008c26:	f3bf 8f6f 	isb	sy
 8008c2a:	f3bf 8f4f 	dsb	sy
 8008c2e:	603b      	str	r3, [r7, #0]
}
 8008c30:	bf00      	nop
 8008c32:	e7fe      	b.n	8008c32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8008c34:	f001 f916 	bl	8009e64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8008c38:	4b39      	ldr	r3, [pc, #228]	; (8008d20 <xTaskResumeAll+0x118>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	3b01      	subs	r3, #1
 8008c3e:	4a38      	ldr	r2, [pc, #224]	; (8008d20 <xTaskResumeAll+0x118>)
 8008c40:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c42:	4b37      	ldr	r3, [pc, #220]	; (8008d20 <xTaskResumeAll+0x118>)
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d162      	bne.n	8008d10 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008c4a:	4b36      	ldr	r3, [pc, #216]	; (8008d24 <xTaskResumeAll+0x11c>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d05e      	beq.n	8008d10 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c52:	e02f      	b.n	8008cb4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c54:	4b34      	ldr	r3, [pc, #208]	; (8008d28 <xTaskResumeAll+0x120>)
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	68db      	ldr	r3, [r3, #12]
 8008c5a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	3318      	adds	r3, #24
 8008c60:	4618      	mov	r0, r3
 8008c62:	f7fe fff3 	bl	8007c4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	3304      	adds	r3, #4
 8008c6a:	4618      	mov	r0, r3
 8008c6c:	f7fe ffee 	bl	8007c4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c74:	4b2d      	ldr	r3, [pc, #180]	; (8008d2c <xTaskResumeAll+0x124>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	429a      	cmp	r2, r3
 8008c7a:	d903      	bls.n	8008c84 <xTaskResumeAll+0x7c>
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c80:	4a2a      	ldr	r2, [pc, #168]	; (8008d2c <xTaskResumeAll+0x124>)
 8008c82:	6013      	str	r3, [r2, #0]
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c88:	4613      	mov	r3, r2
 8008c8a:	009b      	lsls	r3, r3, #2
 8008c8c:	4413      	add	r3, r2
 8008c8e:	009b      	lsls	r3, r3, #2
 8008c90:	4a27      	ldr	r2, [pc, #156]	; (8008d30 <xTaskResumeAll+0x128>)
 8008c92:	441a      	add	r2, r3
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	3304      	adds	r3, #4
 8008c98:	4619      	mov	r1, r3
 8008c9a:	4610      	mov	r0, r2
 8008c9c:	f7fe ff79 	bl	8007b92 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008ca4:	4b23      	ldr	r3, [pc, #140]	; (8008d34 <xTaskResumeAll+0x12c>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008caa:	429a      	cmp	r2, r3
 8008cac:	d302      	bcc.n	8008cb4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8008cae:	4b22      	ldr	r3, [pc, #136]	; (8008d38 <xTaskResumeAll+0x130>)
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008cb4:	4b1c      	ldr	r3, [pc, #112]	; (8008d28 <xTaskResumeAll+0x120>)
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d1cb      	bne.n	8008c54 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d001      	beq.n	8008cc6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008cc2:	f000 fb55 	bl	8009370 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008cc6:	4b1d      	ldr	r3, [pc, #116]	; (8008d3c <xTaskResumeAll+0x134>)
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d010      	beq.n	8008cf4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008cd2:	f000 f847 	bl	8008d64 <xTaskIncrementTick>
 8008cd6:	4603      	mov	r3, r0
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d002      	beq.n	8008ce2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8008cdc:	4b16      	ldr	r3, [pc, #88]	; (8008d38 <xTaskResumeAll+0x130>)
 8008cde:	2201      	movs	r2, #1
 8008ce0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	3b01      	subs	r3, #1
 8008ce6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d1f1      	bne.n	8008cd2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8008cee:	4b13      	ldr	r3, [pc, #76]	; (8008d3c <xTaskResumeAll+0x134>)
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8008cf4:	4b10      	ldr	r3, [pc, #64]	; (8008d38 <xTaskResumeAll+0x130>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d009      	beq.n	8008d10 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008d00:	4b0f      	ldr	r3, [pc, #60]	; (8008d40 <xTaskResumeAll+0x138>)
 8008d02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008d06:	601a      	str	r2, [r3, #0]
 8008d08:	f3bf 8f4f 	dsb	sy
 8008d0c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d10:	f001 f8d8 	bl	8009ec4 <vPortExitCritical>

	return xAlreadyYielded;
 8008d14:	68bb      	ldr	r3, [r7, #8]
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3710      	adds	r7, #16
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	bf00      	nop
 8008d20:	20001558 	.word	0x20001558
 8008d24:	20001530 	.word	0x20001530
 8008d28:	200014f0 	.word	0x200014f0
 8008d2c:	20001538 	.word	0x20001538
 8008d30:	20001060 	.word	0x20001060
 8008d34:	2000105c 	.word	0x2000105c
 8008d38:	20001544 	.word	0x20001544
 8008d3c:	20001540 	.word	0x20001540
 8008d40:	e000ed04 	.word	0xe000ed04

08008d44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8008d44:	b480      	push	{r7}
 8008d46:	b083      	sub	sp, #12
 8008d48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8008d4a:	4b05      	ldr	r3, [pc, #20]	; (8008d60 <xTaskGetTickCount+0x1c>)
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8008d50:	687b      	ldr	r3, [r7, #4]
}
 8008d52:	4618      	mov	r0, r3
 8008d54:	370c      	adds	r7, #12
 8008d56:	46bd      	mov	sp, r7
 8008d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d5c:	4770      	bx	lr
 8008d5e:	bf00      	nop
 8008d60:	20001534 	.word	0x20001534

08008d64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008d64:	b580      	push	{r7, lr}
 8008d66:	b086      	sub	sp, #24
 8008d68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008d6e:	4b4f      	ldr	r3, [pc, #316]	; (8008eac <xTaskIncrementTick+0x148>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	f040 808f 	bne.w	8008e96 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008d78:	4b4d      	ldr	r3, [pc, #308]	; (8008eb0 <xTaskIncrementTick+0x14c>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	3301      	adds	r3, #1
 8008d7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008d80:	4a4b      	ldr	r2, [pc, #300]	; (8008eb0 <xTaskIncrementTick+0x14c>)
 8008d82:	693b      	ldr	r3, [r7, #16]
 8008d84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008d86:	693b      	ldr	r3, [r7, #16]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d120      	bne.n	8008dce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8008d8c:	4b49      	ldr	r3, [pc, #292]	; (8008eb4 <xTaskIncrementTick+0x150>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d00a      	beq.n	8008dac <xTaskIncrementTick+0x48>
	__asm volatile
 8008d96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d9a:	f383 8811 	msr	BASEPRI, r3
 8008d9e:	f3bf 8f6f 	isb	sy
 8008da2:	f3bf 8f4f 	dsb	sy
 8008da6:	603b      	str	r3, [r7, #0]
}
 8008da8:	bf00      	nop
 8008daa:	e7fe      	b.n	8008daa <xTaskIncrementTick+0x46>
 8008dac:	4b41      	ldr	r3, [pc, #260]	; (8008eb4 <xTaskIncrementTick+0x150>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	60fb      	str	r3, [r7, #12]
 8008db2:	4b41      	ldr	r3, [pc, #260]	; (8008eb8 <xTaskIncrementTick+0x154>)
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	4a3f      	ldr	r2, [pc, #252]	; (8008eb4 <xTaskIncrementTick+0x150>)
 8008db8:	6013      	str	r3, [r2, #0]
 8008dba:	4a3f      	ldr	r2, [pc, #252]	; (8008eb8 <xTaskIncrementTick+0x154>)
 8008dbc:	68fb      	ldr	r3, [r7, #12]
 8008dbe:	6013      	str	r3, [r2, #0]
 8008dc0:	4b3e      	ldr	r3, [pc, #248]	; (8008ebc <xTaskIncrementTick+0x158>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	3301      	adds	r3, #1
 8008dc6:	4a3d      	ldr	r2, [pc, #244]	; (8008ebc <xTaskIncrementTick+0x158>)
 8008dc8:	6013      	str	r3, [r2, #0]
 8008dca:	f000 fad1 	bl	8009370 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008dce:	4b3c      	ldr	r3, [pc, #240]	; (8008ec0 <xTaskIncrementTick+0x15c>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	693a      	ldr	r2, [r7, #16]
 8008dd4:	429a      	cmp	r2, r3
 8008dd6:	d349      	bcc.n	8008e6c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008dd8:	4b36      	ldr	r3, [pc, #216]	; (8008eb4 <xTaskIncrementTick+0x150>)
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d104      	bne.n	8008dec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008de2:	4b37      	ldr	r3, [pc, #220]	; (8008ec0 <xTaskIncrementTick+0x15c>)
 8008de4:	f04f 32ff 	mov.w	r2, #4294967295
 8008de8:	601a      	str	r2, [r3, #0]
					break;
 8008dea:	e03f      	b.n	8008e6c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008dec:	4b31      	ldr	r3, [pc, #196]	; (8008eb4 <xTaskIncrementTick+0x150>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	68db      	ldr	r3, [r3, #12]
 8008df2:	68db      	ldr	r3, [r3, #12]
 8008df4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008dfc:	693a      	ldr	r2, [r7, #16]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	429a      	cmp	r2, r3
 8008e02:	d203      	bcs.n	8008e0c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8008e04:	4a2e      	ldr	r2, [pc, #184]	; (8008ec0 <xTaskIncrementTick+0x15c>)
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008e0a:	e02f      	b.n	8008e6c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008e0c:	68bb      	ldr	r3, [r7, #8]
 8008e0e:	3304      	adds	r3, #4
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7fe ff1b 	bl	8007c4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d004      	beq.n	8008e28 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	3318      	adds	r3, #24
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7fe ff12 	bl	8007c4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e2c:	4b25      	ldr	r3, [pc, #148]	; (8008ec4 <xTaskIncrementTick+0x160>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d903      	bls.n	8008e3c <xTaskIncrementTick+0xd8>
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e38:	4a22      	ldr	r2, [pc, #136]	; (8008ec4 <xTaskIncrementTick+0x160>)
 8008e3a:	6013      	str	r3, [r2, #0]
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e40:	4613      	mov	r3, r2
 8008e42:	009b      	lsls	r3, r3, #2
 8008e44:	4413      	add	r3, r2
 8008e46:	009b      	lsls	r3, r3, #2
 8008e48:	4a1f      	ldr	r2, [pc, #124]	; (8008ec8 <xTaskIncrementTick+0x164>)
 8008e4a:	441a      	add	r2, r3
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	3304      	adds	r3, #4
 8008e50:	4619      	mov	r1, r3
 8008e52:	4610      	mov	r0, r2
 8008e54:	f7fe fe9d 	bl	8007b92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e5c:	4b1b      	ldr	r3, [pc, #108]	; (8008ecc <xTaskIncrementTick+0x168>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d3b8      	bcc.n	8008dd8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8008e66:	2301      	movs	r3, #1
 8008e68:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e6a:	e7b5      	b.n	8008dd8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008e6c:	4b17      	ldr	r3, [pc, #92]	; (8008ecc <xTaskIncrementTick+0x168>)
 8008e6e:	681b      	ldr	r3, [r3, #0]
 8008e70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008e72:	4915      	ldr	r1, [pc, #84]	; (8008ec8 <xTaskIncrementTick+0x164>)
 8008e74:	4613      	mov	r3, r2
 8008e76:	009b      	lsls	r3, r3, #2
 8008e78:	4413      	add	r3, r2
 8008e7a:	009b      	lsls	r3, r3, #2
 8008e7c:	440b      	add	r3, r1
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	2b01      	cmp	r3, #1
 8008e82:	d901      	bls.n	8008e88 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008e84:	2301      	movs	r3, #1
 8008e86:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8008e88:	4b11      	ldr	r3, [pc, #68]	; (8008ed0 <xTaskIncrementTick+0x16c>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d007      	beq.n	8008ea0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008e90:	2301      	movs	r3, #1
 8008e92:	617b      	str	r3, [r7, #20]
 8008e94:	e004      	b.n	8008ea0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8008e96:	4b0f      	ldr	r3, [pc, #60]	; (8008ed4 <xTaskIncrementTick+0x170>)
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	3301      	adds	r3, #1
 8008e9c:	4a0d      	ldr	r2, [pc, #52]	; (8008ed4 <xTaskIncrementTick+0x170>)
 8008e9e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008ea0:	697b      	ldr	r3, [r7, #20]
}
 8008ea2:	4618      	mov	r0, r3
 8008ea4:	3718      	adds	r7, #24
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	bd80      	pop	{r7, pc}
 8008eaa:	bf00      	nop
 8008eac:	20001558 	.word	0x20001558
 8008eb0:	20001534 	.word	0x20001534
 8008eb4:	200014e8 	.word	0x200014e8
 8008eb8:	200014ec 	.word	0x200014ec
 8008ebc:	20001548 	.word	0x20001548
 8008ec0:	20001550 	.word	0x20001550
 8008ec4:	20001538 	.word	0x20001538
 8008ec8:	20001060 	.word	0x20001060
 8008ecc:	2000105c 	.word	0x2000105c
 8008ed0:	20001544 	.word	0x20001544
 8008ed4:	20001540 	.word	0x20001540

08008ed8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b085      	sub	sp, #20
 8008edc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008ede:	4b28      	ldr	r3, [pc, #160]	; (8008f80 <vTaskSwitchContext+0xa8>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d003      	beq.n	8008eee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8008ee6:	4b27      	ldr	r3, [pc, #156]	; (8008f84 <vTaskSwitchContext+0xac>)
 8008ee8:	2201      	movs	r2, #1
 8008eea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008eec:	e041      	b.n	8008f72 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8008eee:	4b25      	ldr	r3, [pc, #148]	; (8008f84 <vTaskSwitchContext+0xac>)
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ef4:	4b24      	ldr	r3, [pc, #144]	; (8008f88 <vTaskSwitchContext+0xb0>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	60fb      	str	r3, [r7, #12]
 8008efa:	e010      	b.n	8008f1e <vTaskSwitchContext+0x46>
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d10a      	bne.n	8008f18 <vTaskSwitchContext+0x40>
	__asm volatile
 8008f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f06:	f383 8811 	msr	BASEPRI, r3
 8008f0a:	f3bf 8f6f 	isb	sy
 8008f0e:	f3bf 8f4f 	dsb	sy
 8008f12:	607b      	str	r3, [r7, #4]
}
 8008f14:	bf00      	nop
 8008f16:	e7fe      	b.n	8008f16 <vTaskSwitchContext+0x3e>
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	3b01      	subs	r3, #1
 8008f1c:	60fb      	str	r3, [r7, #12]
 8008f1e:	491b      	ldr	r1, [pc, #108]	; (8008f8c <vTaskSwitchContext+0xb4>)
 8008f20:	68fa      	ldr	r2, [r7, #12]
 8008f22:	4613      	mov	r3, r2
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	4413      	add	r3, r2
 8008f28:	009b      	lsls	r3, r3, #2
 8008f2a:	440b      	add	r3, r1
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d0e4      	beq.n	8008efc <vTaskSwitchContext+0x24>
 8008f32:	68fa      	ldr	r2, [r7, #12]
 8008f34:	4613      	mov	r3, r2
 8008f36:	009b      	lsls	r3, r3, #2
 8008f38:	4413      	add	r3, r2
 8008f3a:	009b      	lsls	r3, r3, #2
 8008f3c:	4a13      	ldr	r2, [pc, #76]	; (8008f8c <vTaskSwitchContext+0xb4>)
 8008f3e:	4413      	add	r3, r2
 8008f40:	60bb      	str	r3, [r7, #8]
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	685b      	ldr	r3, [r3, #4]
 8008f46:	685a      	ldr	r2, [r3, #4]
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	605a      	str	r2, [r3, #4]
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	685a      	ldr	r2, [r3, #4]
 8008f50:	68bb      	ldr	r3, [r7, #8]
 8008f52:	3308      	adds	r3, #8
 8008f54:	429a      	cmp	r2, r3
 8008f56:	d104      	bne.n	8008f62 <vTaskSwitchContext+0x8a>
 8008f58:	68bb      	ldr	r3, [r7, #8]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	685a      	ldr	r2, [r3, #4]
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	605a      	str	r2, [r3, #4]
 8008f62:	68bb      	ldr	r3, [r7, #8]
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	4a09      	ldr	r2, [pc, #36]	; (8008f90 <vTaskSwitchContext+0xb8>)
 8008f6a:	6013      	str	r3, [r2, #0]
 8008f6c:	4a06      	ldr	r2, [pc, #24]	; (8008f88 <vTaskSwitchContext+0xb0>)
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	6013      	str	r3, [r2, #0]
}
 8008f72:	bf00      	nop
 8008f74:	3714      	adds	r7, #20
 8008f76:	46bd      	mov	sp, r7
 8008f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f7c:	4770      	bx	lr
 8008f7e:	bf00      	nop
 8008f80:	20001558 	.word	0x20001558
 8008f84:	20001544 	.word	0x20001544
 8008f88:	20001538 	.word	0x20001538
 8008f8c:	20001060 	.word	0x20001060
 8008f90:	2000105c 	.word	0x2000105c

08008f94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	6078      	str	r0, [r7, #4]
 8008f9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d10a      	bne.n	8008fba <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8008fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa8:	f383 8811 	msr	BASEPRI, r3
 8008fac:	f3bf 8f6f 	isb	sy
 8008fb0:	f3bf 8f4f 	dsb	sy
 8008fb4:	60fb      	str	r3, [r7, #12]
}
 8008fb6:	bf00      	nop
 8008fb8:	e7fe      	b.n	8008fb8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008fba:	4b07      	ldr	r3, [pc, #28]	; (8008fd8 <vTaskPlaceOnEventList+0x44>)
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	3318      	adds	r3, #24
 8008fc0:	4619      	mov	r1, r3
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f7fe fe09 	bl	8007bda <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008fc8:	2101      	movs	r1, #1
 8008fca:	6838      	ldr	r0, [r7, #0]
 8008fcc:	f000 fa7c 	bl	80094c8 <prvAddCurrentTaskToDelayedList>
}
 8008fd0:	bf00      	nop
 8008fd2:	3710      	adds	r7, #16
 8008fd4:	46bd      	mov	sp, r7
 8008fd6:	bd80      	pop	{r7, pc}
 8008fd8:	2000105c 	.word	0x2000105c

08008fdc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b086      	sub	sp, #24
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d10a      	bne.n	8009004 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8008fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ff2:	f383 8811 	msr	BASEPRI, r3
 8008ff6:	f3bf 8f6f 	isb	sy
 8008ffa:	f3bf 8f4f 	dsb	sy
 8008ffe:	617b      	str	r3, [r7, #20]
}
 8009000:	bf00      	nop
 8009002:	e7fe      	b.n	8009002 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009004:	4b0a      	ldr	r3, [pc, #40]	; (8009030 <vTaskPlaceOnEventListRestricted+0x54>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	3318      	adds	r3, #24
 800900a:	4619      	mov	r1, r3
 800900c:	68f8      	ldr	r0, [r7, #12]
 800900e:	f7fe fdc0 	bl	8007b92 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d002      	beq.n	800901e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8009018:	f04f 33ff 	mov.w	r3, #4294967295
 800901c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800901e:	6879      	ldr	r1, [r7, #4]
 8009020:	68b8      	ldr	r0, [r7, #8]
 8009022:	f000 fa51 	bl	80094c8 <prvAddCurrentTaskToDelayedList>
	}
 8009026:	bf00      	nop
 8009028:	3718      	adds	r7, #24
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}
 800902e:	bf00      	nop
 8009030:	2000105c 	.word	0x2000105c

08009034 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b086      	sub	sp, #24
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	68db      	ldr	r3, [r3, #12]
 8009040:	68db      	ldr	r3, [r3, #12]
 8009042:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d10a      	bne.n	8009060 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800904a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800904e:	f383 8811 	msr	BASEPRI, r3
 8009052:	f3bf 8f6f 	isb	sy
 8009056:	f3bf 8f4f 	dsb	sy
 800905a:	60fb      	str	r3, [r7, #12]
}
 800905c:	bf00      	nop
 800905e:	e7fe      	b.n	800905e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	3318      	adds	r3, #24
 8009064:	4618      	mov	r0, r3
 8009066:	f7fe fdf1 	bl	8007c4c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800906a:	4b1e      	ldr	r3, [pc, #120]	; (80090e4 <xTaskRemoveFromEventList+0xb0>)
 800906c:	681b      	ldr	r3, [r3, #0]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d11d      	bne.n	80090ae <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009072:	693b      	ldr	r3, [r7, #16]
 8009074:	3304      	adds	r3, #4
 8009076:	4618      	mov	r0, r3
 8009078:	f7fe fde8 	bl	8007c4c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800907c:	693b      	ldr	r3, [r7, #16]
 800907e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009080:	4b19      	ldr	r3, [pc, #100]	; (80090e8 <xTaskRemoveFromEventList+0xb4>)
 8009082:	681b      	ldr	r3, [r3, #0]
 8009084:	429a      	cmp	r2, r3
 8009086:	d903      	bls.n	8009090 <xTaskRemoveFromEventList+0x5c>
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800908c:	4a16      	ldr	r2, [pc, #88]	; (80090e8 <xTaskRemoveFromEventList+0xb4>)
 800908e:	6013      	str	r3, [r2, #0]
 8009090:	693b      	ldr	r3, [r7, #16]
 8009092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009094:	4613      	mov	r3, r2
 8009096:	009b      	lsls	r3, r3, #2
 8009098:	4413      	add	r3, r2
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	4a13      	ldr	r2, [pc, #76]	; (80090ec <xTaskRemoveFromEventList+0xb8>)
 800909e:	441a      	add	r2, r3
 80090a0:	693b      	ldr	r3, [r7, #16]
 80090a2:	3304      	adds	r3, #4
 80090a4:	4619      	mov	r1, r3
 80090a6:	4610      	mov	r0, r2
 80090a8:	f7fe fd73 	bl	8007b92 <vListInsertEnd>
 80090ac:	e005      	b.n	80090ba <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80090ae:	693b      	ldr	r3, [r7, #16]
 80090b0:	3318      	adds	r3, #24
 80090b2:	4619      	mov	r1, r3
 80090b4:	480e      	ldr	r0, [pc, #56]	; (80090f0 <xTaskRemoveFromEventList+0xbc>)
 80090b6:	f7fe fd6c 	bl	8007b92 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80090ba:	693b      	ldr	r3, [r7, #16]
 80090bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80090be:	4b0d      	ldr	r3, [pc, #52]	; (80090f4 <xTaskRemoveFromEventList+0xc0>)
 80090c0:	681b      	ldr	r3, [r3, #0]
 80090c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80090c4:	429a      	cmp	r2, r3
 80090c6:	d905      	bls.n	80090d4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80090c8:	2301      	movs	r3, #1
 80090ca:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80090cc:	4b0a      	ldr	r3, [pc, #40]	; (80090f8 <xTaskRemoveFromEventList+0xc4>)
 80090ce:	2201      	movs	r2, #1
 80090d0:	601a      	str	r2, [r3, #0]
 80090d2:	e001      	b.n	80090d8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80090d4:	2300      	movs	r3, #0
 80090d6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80090d8:	697b      	ldr	r3, [r7, #20]
}
 80090da:	4618      	mov	r0, r3
 80090dc:	3718      	adds	r7, #24
 80090de:	46bd      	mov	sp, r7
 80090e0:	bd80      	pop	{r7, pc}
 80090e2:	bf00      	nop
 80090e4:	20001558 	.word	0x20001558
 80090e8:	20001538 	.word	0x20001538
 80090ec:	20001060 	.word	0x20001060
 80090f0:	200014f0 	.word	0x200014f0
 80090f4:	2000105c 	.word	0x2000105c
 80090f8:	20001544 	.word	0x20001544

080090fc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80090fc:	b480      	push	{r7}
 80090fe:	b083      	sub	sp, #12
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009104:	4b06      	ldr	r3, [pc, #24]	; (8009120 <vTaskInternalSetTimeOutState+0x24>)
 8009106:	681a      	ldr	r2, [r3, #0]
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800910c:	4b05      	ldr	r3, [pc, #20]	; (8009124 <vTaskInternalSetTimeOutState+0x28>)
 800910e:	681a      	ldr	r2, [r3, #0]
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	605a      	str	r2, [r3, #4]
}
 8009114:	bf00      	nop
 8009116:	370c      	adds	r7, #12
 8009118:	46bd      	mov	sp, r7
 800911a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911e:	4770      	bx	lr
 8009120:	20001548 	.word	0x20001548
 8009124:	20001534 	.word	0x20001534

08009128 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009128:	b580      	push	{r7, lr}
 800912a:	b088      	sub	sp, #32
 800912c:	af00      	add	r7, sp, #0
 800912e:	6078      	str	r0, [r7, #4]
 8009130:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d10a      	bne.n	800914e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800913c:	f383 8811 	msr	BASEPRI, r3
 8009140:	f3bf 8f6f 	isb	sy
 8009144:	f3bf 8f4f 	dsb	sy
 8009148:	613b      	str	r3, [r7, #16]
}
 800914a:	bf00      	nop
 800914c:	e7fe      	b.n	800914c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800914e:	683b      	ldr	r3, [r7, #0]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d10a      	bne.n	800916a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009154:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009158:	f383 8811 	msr	BASEPRI, r3
 800915c:	f3bf 8f6f 	isb	sy
 8009160:	f3bf 8f4f 	dsb	sy
 8009164:	60fb      	str	r3, [r7, #12]
}
 8009166:	bf00      	nop
 8009168:	e7fe      	b.n	8009168 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800916a:	f000 fe7b 	bl	8009e64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800916e:	4b1d      	ldr	r3, [pc, #116]	; (80091e4 <xTaskCheckForTimeOut+0xbc>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	69ba      	ldr	r2, [r7, #24]
 800917a:	1ad3      	subs	r3, r2, r3
 800917c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009186:	d102      	bne.n	800918e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009188:	2300      	movs	r3, #0
 800918a:	61fb      	str	r3, [r7, #28]
 800918c:	e023      	b.n	80091d6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681a      	ldr	r2, [r3, #0]
 8009192:	4b15      	ldr	r3, [pc, #84]	; (80091e8 <xTaskCheckForTimeOut+0xc0>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	429a      	cmp	r2, r3
 8009198:	d007      	beq.n	80091aa <xTaskCheckForTimeOut+0x82>
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	685b      	ldr	r3, [r3, #4]
 800919e:	69ba      	ldr	r2, [r7, #24]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d302      	bcc.n	80091aa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80091a4:	2301      	movs	r3, #1
 80091a6:	61fb      	str	r3, [r7, #28]
 80091a8:	e015      	b.n	80091d6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80091aa:	683b      	ldr	r3, [r7, #0]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	697a      	ldr	r2, [r7, #20]
 80091b0:	429a      	cmp	r2, r3
 80091b2:	d20b      	bcs.n	80091cc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	681a      	ldr	r2, [r3, #0]
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	1ad2      	subs	r2, r2, r3
 80091bc:	683b      	ldr	r3, [r7, #0]
 80091be:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80091c0:	6878      	ldr	r0, [r7, #4]
 80091c2:	f7ff ff9b 	bl	80090fc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80091c6:	2300      	movs	r3, #0
 80091c8:	61fb      	str	r3, [r7, #28]
 80091ca:	e004      	b.n	80091d6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80091cc:	683b      	ldr	r3, [r7, #0]
 80091ce:	2200      	movs	r2, #0
 80091d0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80091d2:	2301      	movs	r3, #1
 80091d4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80091d6:	f000 fe75 	bl	8009ec4 <vPortExitCritical>

	return xReturn;
 80091da:	69fb      	ldr	r3, [r7, #28]
}
 80091dc:	4618      	mov	r0, r3
 80091de:	3720      	adds	r7, #32
 80091e0:	46bd      	mov	sp, r7
 80091e2:	bd80      	pop	{r7, pc}
 80091e4:	20001534 	.word	0x20001534
 80091e8:	20001548 	.word	0x20001548

080091ec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80091ec:	b480      	push	{r7}
 80091ee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80091f0:	4b03      	ldr	r3, [pc, #12]	; (8009200 <vTaskMissedYield+0x14>)
 80091f2:	2201      	movs	r2, #1
 80091f4:	601a      	str	r2, [r3, #0]
}
 80091f6:	bf00      	nop
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr
 8009200:	20001544 	.word	0x20001544

08009204 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009204:	b580      	push	{r7, lr}
 8009206:	b082      	sub	sp, #8
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800920c:	f000 f852 	bl	80092b4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009210:	4b06      	ldr	r3, [pc, #24]	; (800922c <prvIdleTask+0x28>)
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	2b01      	cmp	r3, #1
 8009216:	d9f9      	bls.n	800920c <prvIdleTask+0x8>
			{
				taskYIELD();
 8009218:	4b05      	ldr	r3, [pc, #20]	; (8009230 <prvIdleTask+0x2c>)
 800921a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800921e:	601a      	str	r2, [r3, #0]
 8009220:	f3bf 8f4f 	dsb	sy
 8009224:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009228:	e7f0      	b.n	800920c <prvIdleTask+0x8>
 800922a:	bf00      	nop
 800922c:	20001060 	.word	0x20001060
 8009230:	e000ed04 	.word	0xe000ed04

08009234 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b082      	sub	sp, #8
 8009238:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800923a:	2300      	movs	r3, #0
 800923c:	607b      	str	r3, [r7, #4]
 800923e:	e00c      	b.n	800925a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	4613      	mov	r3, r2
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	4413      	add	r3, r2
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	4a12      	ldr	r2, [pc, #72]	; (8009294 <prvInitialiseTaskLists+0x60>)
 800924c:	4413      	add	r3, r2
 800924e:	4618      	mov	r0, r3
 8009250:	f7fe fc72 	bl	8007b38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	3301      	adds	r3, #1
 8009258:	607b      	str	r3, [r7, #4]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	2b37      	cmp	r3, #55	; 0x37
 800925e:	d9ef      	bls.n	8009240 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009260:	480d      	ldr	r0, [pc, #52]	; (8009298 <prvInitialiseTaskLists+0x64>)
 8009262:	f7fe fc69 	bl	8007b38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009266:	480d      	ldr	r0, [pc, #52]	; (800929c <prvInitialiseTaskLists+0x68>)
 8009268:	f7fe fc66 	bl	8007b38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800926c:	480c      	ldr	r0, [pc, #48]	; (80092a0 <prvInitialiseTaskLists+0x6c>)
 800926e:	f7fe fc63 	bl	8007b38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009272:	480c      	ldr	r0, [pc, #48]	; (80092a4 <prvInitialiseTaskLists+0x70>)
 8009274:	f7fe fc60 	bl	8007b38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009278:	480b      	ldr	r0, [pc, #44]	; (80092a8 <prvInitialiseTaskLists+0x74>)
 800927a:	f7fe fc5d 	bl	8007b38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800927e:	4b0b      	ldr	r3, [pc, #44]	; (80092ac <prvInitialiseTaskLists+0x78>)
 8009280:	4a05      	ldr	r2, [pc, #20]	; (8009298 <prvInitialiseTaskLists+0x64>)
 8009282:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009284:	4b0a      	ldr	r3, [pc, #40]	; (80092b0 <prvInitialiseTaskLists+0x7c>)
 8009286:	4a05      	ldr	r2, [pc, #20]	; (800929c <prvInitialiseTaskLists+0x68>)
 8009288:	601a      	str	r2, [r3, #0]
}
 800928a:	bf00      	nop
 800928c:	3708      	adds	r7, #8
 800928e:	46bd      	mov	sp, r7
 8009290:	bd80      	pop	{r7, pc}
 8009292:	bf00      	nop
 8009294:	20001060 	.word	0x20001060
 8009298:	200014c0 	.word	0x200014c0
 800929c:	200014d4 	.word	0x200014d4
 80092a0:	200014f0 	.word	0x200014f0
 80092a4:	20001504 	.word	0x20001504
 80092a8:	2000151c 	.word	0x2000151c
 80092ac:	200014e8 	.word	0x200014e8
 80092b0:	200014ec 	.word	0x200014ec

080092b4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b082      	sub	sp, #8
 80092b8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80092ba:	e019      	b.n	80092f0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80092bc:	f000 fdd2 	bl	8009e64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80092c0:	4b10      	ldr	r3, [pc, #64]	; (8009304 <prvCheckTasksWaitingTermination+0x50>)
 80092c2:	68db      	ldr	r3, [r3, #12]
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	3304      	adds	r3, #4
 80092cc:	4618      	mov	r0, r3
 80092ce:	f7fe fcbd 	bl	8007c4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80092d2:	4b0d      	ldr	r3, [pc, #52]	; (8009308 <prvCheckTasksWaitingTermination+0x54>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	3b01      	subs	r3, #1
 80092d8:	4a0b      	ldr	r2, [pc, #44]	; (8009308 <prvCheckTasksWaitingTermination+0x54>)
 80092da:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80092dc:	4b0b      	ldr	r3, [pc, #44]	; (800930c <prvCheckTasksWaitingTermination+0x58>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	3b01      	subs	r3, #1
 80092e2:	4a0a      	ldr	r2, [pc, #40]	; (800930c <prvCheckTasksWaitingTermination+0x58>)
 80092e4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80092e6:	f000 fded 	bl	8009ec4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f000 f810 	bl	8009310 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80092f0:	4b06      	ldr	r3, [pc, #24]	; (800930c <prvCheckTasksWaitingTermination+0x58>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d1e1      	bne.n	80092bc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80092f8:	bf00      	nop
 80092fa:	bf00      	nop
 80092fc:	3708      	adds	r7, #8
 80092fe:	46bd      	mov	sp, r7
 8009300:	bd80      	pop	{r7, pc}
 8009302:	bf00      	nop
 8009304:	20001504 	.word	0x20001504
 8009308:	20001530 	.word	0x20001530
 800930c:	20001518 	.word	0x20001518

08009310 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009310:	b580      	push	{r7, lr}
 8009312:	b084      	sub	sp, #16
 8009314:	af00      	add	r7, sp, #0
 8009316:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800931e:	2b00      	cmp	r3, #0
 8009320:	d108      	bne.n	8009334 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009326:	4618      	mov	r0, r3
 8009328:	f000 ff8a 	bl	800a240 <vPortFree>
				vPortFree( pxTCB );
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 ff87 	bl	800a240 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009332:	e018      	b.n	8009366 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800933a:	2b01      	cmp	r3, #1
 800933c:	d103      	bne.n	8009346 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800933e:	6878      	ldr	r0, [r7, #4]
 8009340:	f000 ff7e 	bl	800a240 <vPortFree>
	}
 8009344:	e00f      	b.n	8009366 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800934c:	2b02      	cmp	r3, #2
 800934e:	d00a      	beq.n	8009366 <prvDeleteTCB+0x56>
	__asm volatile
 8009350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009354:	f383 8811 	msr	BASEPRI, r3
 8009358:	f3bf 8f6f 	isb	sy
 800935c:	f3bf 8f4f 	dsb	sy
 8009360:	60fb      	str	r3, [r7, #12]
}
 8009362:	bf00      	nop
 8009364:	e7fe      	b.n	8009364 <prvDeleteTCB+0x54>
	}
 8009366:	bf00      	nop
 8009368:	3710      	adds	r7, #16
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
	...

08009370 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009370:	b480      	push	{r7}
 8009372:	b083      	sub	sp, #12
 8009374:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009376:	4b0c      	ldr	r3, [pc, #48]	; (80093a8 <prvResetNextTaskUnblockTime+0x38>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d104      	bne.n	800938a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009380:	4b0a      	ldr	r3, [pc, #40]	; (80093ac <prvResetNextTaskUnblockTime+0x3c>)
 8009382:	f04f 32ff 	mov.w	r2, #4294967295
 8009386:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009388:	e008      	b.n	800939c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800938a:	4b07      	ldr	r3, [pc, #28]	; (80093a8 <prvResetNextTaskUnblockTime+0x38>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	68db      	ldr	r3, [r3, #12]
 8009390:	68db      	ldr	r3, [r3, #12]
 8009392:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	685b      	ldr	r3, [r3, #4]
 8009398:	4a04      	ldr	r2, [pc, #16]	; (80093ac <prvResetNextTaskUnblockTime+0x3c>)
 800939a:	6013      	str	r3, [r2, #0]
}
 800939c:	bf00      	nop
 800939e:	370c      	adds	r7, #12
 80093a0:	46bd      	mov	sp, r7
 80093a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a6:	4770      	bx	lr
 80093a8:	200014e8 	.word	0x200014e8
 80093ac:	20001550 	.word	0x20001550

080093b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80093b0:	b480      	push	{r7}
 80093b2:	b083      	sub	sp, #12
 80093b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80093b6:	4b0b      	ldr	r3, [pc, #44]	; (80093e4 <xTaskGetSchedulerState+0x34>)
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d102      	bne.n	80093c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80093be:	2301      	movs	r3, #1
 80093c0:	607b      	str	r3, [r7, #4]
 80093c2:	e008      	b.n	80093d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80093c4:	4b08      	ldr	r3, [pc, #32]	; (80093e8 <xTaskGetSchedulerState+0x38>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d102      	bne.n	80093d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80093cc:	2302      	movs	r3, #2
 80093ce:	607b      	str	r3, [r7, #4]
 80093d0:	e001      	b.n	80093d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80093d2:	2300      	movs	r3, #0
 80093d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80093d6:	687b      	ldr	r3, [r7, #4]
	}
 80093d8:	4618      	mov	r0, r3
 80093da:	370c      	adds	r7, #12
 80093dc:	46bd      	mov	sp, r7
 80093de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e2:	4770      	bx	lr
 80093e4:	2000153c 	.word	0x2000153c
 80093e8:	20001558 	.word	0x20001558

080093ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80093ec:	b580      	push	{r7, lr}
 80093ee:	b086      	sub	sp, #24
 80093f0:	af00      	add	r7, sp, #0
 80093f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80093f8:	2300      	movs	r3, #0
 80093fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d056      	beq.n	80094b0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009402:	4b2e      	ldr	r3, [pc, #184]	; (80094bc <xTaskPriorityDisinherit+0xd0>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	693a      	ldr	r2, [r7, #16]
 8009408:	429a      	cmp	r2, r3
 800940a:	d00a      	beq.n	8009422 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800940c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009410:	f383 8811 	msr	BASEPRI, r3
 8009414:	f3bf 8f6f 	isb	sy
 8009418:	f3bf 8f4f 	dsb	sy
 800941c:	60fb      	str	r3, [r7, #12]
}
 800941e:	bf00      	nop
 8009420:	e7fe      	b.n	8009420 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009426:	2b00      	cmp	r3, #0
 8009428:	d10a      	bne.n	8009440 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800942a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800942e:	f383 8811 	msr	BASEPRI, r3
 8009432:	f3bf 8f6f 	isb	sy
 8009436:	f3bf 8f4f 	dsb	sy
 800943a:	60bb      	str	r3, [r7, #8]
}
 800943c:	bf00      	nop
 800943e:	e7fe      	b.n	800943e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009444:	1e5a      	subs	r2, r3, #1
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800944a:	693b      	ldr	r3, [r7, #16]
 800944c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800944e:	693b      	ldr	r3, [r7, #16]
 8009450:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009452:	429a      	cmp	r2, r3
 8009454:	d02c      	beq.n	80094b0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800945a:	2b00      	cmp	r3, #0
 800945c:	d128      	bne.n	80094b0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800945e:	693b      	ldr	r3, [r7, #16]
 8009460:	3304      	adds	r3, #4
 8009462:	4618      	mov	r0, r3
 8009464:	f7fe fbf2 	bl	8007c4c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800946c:	693b      	ldr	r3, [r7, #16]
 800946e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009474:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009480:	4b0f      	ldr	r3, [pc, #60]	; (80094c0 <xTaskPriorityDisinherit+0xd4>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	429a      	cmp	r2, r3
 8009486:	d903      	bls.n	8009490 <xTaskPriorityDisinherit+0xa4>
 8009488:	693b      	ldr	r3, [r7, #16]
 800948a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800948c:	4a0c      	ldr	r2, [pc, #48]	; (80094c0 <xTaskPriorityDisinherit+0xd4>)
 800948e:	6013      	str	r3, [r2, #0]
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009494:	4613      	mov	r3, r2
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	4413      	add	r3, r2
 800949a:	009b      	lsls	r3, r3, #2
 800949c:	4a09      	ldr	r2, [pc, #36]	; (80094c4 <xTaskPriorityDisinherit+0xd8>)
 800949e:	441a      	add	r2, r3
 80094a0:	693b      	ldr	r3, [r7, #16]
 80094a2:	3304      	adds	r3, #4
 80094a4:	4619      	mov	r1, r3
 80094a6:	4610      	mov	r0, r2
 80094a8:	f7fe fb73 	bl	8007b92 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80094ac:	2301      	movs	r3, #1
 80094ae:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80094b0:	697b      	ldr	r3, [r7, #20]
	}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3718      	adds	r7, #24
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	2000105c 	.word	0x2000105c
 80094c0:	20001538 	.word	0x20001538
 80094c4:	20001060 	.word	0x20001060

080094c8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80094c8:	b580      	push	{r7, lr}
 80094ca:	b084      	sub	sp, #16
 80094cc:	af00      	add	r7, sp, #0
 80094ce:	6078      	str	r0, [r7, #4]
 80094d0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80094d2:	4b21      	ldr	r3, [pc, #132]	; (8009558 <prvAddCurrentTaskToDelayedList+0x90>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80094d8:	4b20      	ldr	r3, [pc, #128]	; (800955c <prvAddCurrentTaskToDelayedList+0x94>)
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	3304      	adds	r3, #4
 80094de:	4618      	mov	r0, r3
 80094e0:	f7fe fbb4 	bl	8007c4c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80094ea:	d10a      	bne.n	8009502 <prvAddCurrentTaskToDelayedList+0x3a>
 80094ec:	683b      	ldr	r3, [r7, #0]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d007      	beq.n	8009502 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80094f2:	4b1a      	ldr	r3, [pc, #104]	; (800955c <prvAddCurrentTaskToDelayedList+0x94>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	3304      	adds	r3, #4
 80094f8:	4619      	mov	r1, r3
 80094fa:	4819      	ldr	r0, [pc, #100]	; (8009560 <prvAddCurrentTaskToDelayedList+0x98>)
 80094fc:	f7fe fb49 	bl	8007b92 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009500:	e026      	b.n	8009550 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009502:	68fa      	ldr	r2, [r7, #12]
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	4413      	add	r3, r2
 8009508:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800950a:	4b14      	ldr	r3, [pc, #80]	; (800955c <prvAddCurrentTaskToDelayedList+0x94>)
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	68ba      	ldr	r2, [r7, #8]
 8009510:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009512:	68ba      	ldr	r2, [r7, #8]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	429a      	cmp	r2, r3
 8009518:	d209      	bcs.n	800952e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800951a:	4b12      	ldr	r3, [pc, #72]	; (8009564 <prvAddCurrentTaskToDelayedList+0x9c>)
 800951c:	681a      	ldr	r2, [r3, #0]
 800951e:	4b0f      	ldr	r3, [pc, #60]	; (800955c <prvAddCurrentTaskToDelayedList+0x94>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	3304      	adds	r3, #4
 8009524:	4619      	mov	r1, r3
 8009526:	4610      	mov	r0, r2
 8009528:	f7fe fb57 	bl	8007bda <vListInsert>
}
 800952c:	e010      	b.n	8009550 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800952e:	4b0e      	ldr	r3, [pc, #56]	; (8009568 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	4b0a      	ldr	r3, [pc, #40]	; (800955c <prvAddCurrentTaskToDelayedList+0x94>)
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	3304      	adds	r3, #4
 8009538:	4619      	mov	r1, r3
 800953a:	4610      	mov	r0, r2
 800953c:	f7fe fb4d 	bl	8007bda <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009540:	4b0a      	ldr	r3, [pc, #40]	; (800956c <prvAddCurrentTaskToDelayedList+0xa4>)
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	68ba      	ldr	r2, [r7, #8]
 8009546:	429a      	cmp	r2, r3
 8009548:	d202      	bcs.n	8009550 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800954a:	4a08      	ldr	r2, [pc, #32]	; (800956c <prvAddCurrentTaskToDelayedList+0xa4>)
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	6013      	str	r3, [r2, #0]
}
 8009550:	bf00      	nop
 8009552:	3710      	adds	r7, #16
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}
 8009558:	20001534 	.word	0x20001534
 800955c:	2000105c 	.word	0x2000105c
 8009560:	2000151c 	.word	0x2000151c
 8009564:	200014ec 	.word	0x200014ec
 8009568:	200014e8 	.word	0x200014e8
 800956c:	20001550 	.word	0x20001550

08009570 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009570:	b580      	push	{r7, lr}
 8009572:	b08a      	sub	sp, #40	; 0x28
 8009574:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009576:	2300      	movs	r3, #0
 8009578:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800957a:	f000 fb07 	bl	8009b8c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800957e:	4b1c      	ldr	r3, [pc, #112]	; (80095f0 <xTimerCreateTimerTask+0x80>)
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d021      	beq.n	80095ca <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009586:	2300      	movs	r3, #0
 8009588:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800958a:	2300      	movs	r3, #0
 800958c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800958e:	1d3a      	adds	r2, r7, #4
 8009590:	f107 0108 	add.w	r1, r7, #8
 8009594:	f107 030c 	add.w	r3, r7, #12
 8009598:	4618      	mov	r0, r3
 800959a:	f7fe fab3 	bl	8007b04 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800959e:	6879      	ldr	r1, [r7, #4]
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	68fa      	ldr	r2, [r7, #12]
 80095a4:	9202      	str	r2, [sp, #8]
 80095a6:	9301      	str	r3, [sp, #4]
 80095a8:	2302      	movs	r3, #2
 80095aa:	9300      	str	r3, [sp, #0]
 80095ac:	2300      	movs	r3, #0
 80095ae:	460a      	mov	r2, r1
 80095b0:	4910      	ldr	r1, [pc, #64]	; (80095f4 <xTimerCreateTimerTask+0x84>)
 80095b2:	4811      	ldr	r0, [pc, #68]	; (80095f8 <xTimerCreateTimerTask+0x88>)
 80095b4:	f7ff f860 	bl	8008678 <xTaskCreateStatic>
 80095b8:	4603      	mov	r3, r0
 80095ba:	4a10      	ldr	r2, [pc, #64]	; (80095fc <xTimerCreateTimerTask+0x8c>)
 80095bc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80095be:	4b0f      	ldr	r3, [pc, #60]	; (80095fc <xTimerCreateTimerTask+0x8c>)
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d001      	beq.n	80095ca <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80095c6:	2301      	movs	r3, #1
 80095c8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80095ca:	697b      	ldr	r3, [r7, #20]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d10a      	bne.n	80095e6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80095d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095d4:	f383 8811 	msr	BASEPRI, r3
 80095d8:	f3bf 8f6f 	isb	sy
 80095dc:	f3bf 8f4f 	dsb	sy
 80095e0:	613b      	str	r3, [r7, #16]
}
 80095e2:	bf00      	nop
 80095e4:	e7fe      	b.n	80095e4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80095e6:	697b      	ldr	r3, [r7, #20]
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3718      	adds	r7, #24
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}
 80095f0:	2000158c 	.word	0x2000158c
 80095f4:	0800e1cc 	.word	0x0800e1cc
 80095f8:	08009735 	.word	0x08009735
 80095fc:	20001590 	.word	0x20001590

08009600 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009600:	b580      	push	{r7, lr}
 8009602:	b08a      	sub	sp, #40	; 0x28
 8009604:	af00      	add	r7, sp, #0
 8009606:	60f8      	str	r0, [r7, #12]
 8009608:	60b9      	str	r1, [r7, #8]
 800960a:	607a      	str	r2, [r7, #4]
 800960c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800960e:	2300      	movs	r3, #0
 8009610:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	2b00      	cmp	r3, #0
 8009616:	d10a      	bne.n	800962e <xTimerGenericCommand+0x2e>
	__asm volatile
 8009618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800961c:	f383 8811 	msr	BASEPRI, r3
 8009620:	f3bf 8f6f 	isb	sy
 8009624:	f3bf 8f4f 	dsb	sy
 8009628:	623b      	str	r3, [r7, #32]
}
 800962a:	bf00      	nop
 800962c:	e7fe      	b.n	800962c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800962e:	4b1a      	ldr	r3, [pc, #104]	; (8009698 <xTimerGenericCommand+0x98>)
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d02a      	beq.n	800968c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009636:	68bb      	ldr	r3, [r7, #8]
 8009638:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	2b05      	cmp	r3, #5
 8009646:	dc18      	bgt.n	800967a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009648:	f7ff feb2 	bl	80093b0 <xTaskGetSchedulerState>
 800964c:	4603      	mov	r3, r0
 800964e:	2b02      	cmp	r3, #2
 8009650:	d109      	bne.n	8009666 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009652:	4b11      	ldr	r3, [pc, #68]	; (8009698 <xTimerGenericCommand+0x98>)
 8009654:	6818      	ldr	r0, [r3, #0]
 8009656:	f107 0110 	add.w	r1, r7, #16
 800965a:	2300      	movs	r3, #0
 800965c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800965e:	f7fe fc23 	bl	8007ea8 <xQueueGenericSend>
 8009662:	6278      	str	r0, [r7, #36]	; 0x24
 8009664:	e012      	b.n	800968c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009666:	4b0c      	ldr	r3, [pc, #48]	; (8009698 <xTimerGenericCommand+0x98>)
 8009668:	6818      	ldr	r0, [r3, #0]
 800966a:	f107 0110 	add.w	r1, r7, #16
 800966e:	2300      	movs	r3, #0
 8009670:	2200      	movs	r2, #0
 8009672:	f7fe fc19 	bl	8007ea8 <xQueueGenericSend>
 8009676:	6278      	str	r0, [r7, #36]	; 0x24
 8009678:	e008      	b.n	800968c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800967a:	4b07      	ldr	r3, [pc, #28]	; (8009698 <xTimerGenericCommand+0x98>)
 800967c:	6818      	ldr	r0, [r3, #0]
 800967e:	f107 0110 	add.w	r1, r7, #16
 8009682:	2300      	movs	r3, #0
 8009684:	683a      	ldr	r2, [r7, #0]
 8009686:	f7fe fd0d 	bl	80080a4 <xQueueGenericSendFromISR>
 800968a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800968c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800968e:	4618      	mov	r0, r3
 8009690:	3728      	adds	r7, #40	; 0x28
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}
 8009696:	bf00      	nop
 8009698:	2000158c 	.word	0x2000158c

0800969c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b088      	sub	sp, #32
 80096a0:	af02      	add	r7, sp, #8
 80096a2:	6078      	str	r0, [r7, #4]
 80096a4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096a6:	4b22      	ldr	r3, [pc, #136]	; (8009730 <prvProcessExpiredTimer+0x94>)
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	68db      	ldr	r3, [r3, #12]
 80096ac:	68db      	ldr	r3, [r3, #12]
 80096ae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80096b0:	697b      	ldr	r3, [r7, #20]
 80096b2:	3304      	adds	r3, #4
 80096b4:	4618      	mov	r0, r3
 80096b6:	f7fe fac9 	bl	8007c4c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80096c0:	f003 0304 	and.w	r3, r3, #4
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d022      	beq.n	800970e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80096c8:	697b      	ldr	r3, [r7, #20]
 80096ca:	699a      	ldr	r2, [r3, #24]
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	18d1      	adds	r1, r2, r3
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	683a      	ldr	r2, [r7, #0]
 80096d4:	6978      	ldr	r0, [r7, #20]
 80096d6:	f000 f8d1 	bl	800987c <prvInsertTimerInActiveList>
 80096da:	4603      	mov	r3, r0
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d01f      	beq.n	8009720 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80096e0:	2300      	movs	r3, #0
 80096e2:	9300      	str	r3, [sp, #0]
 80096e4:	2300      	movs	r3, #0
 80096e6:	687a      	ldr	r2, [r7, #4]
 80096e8:	2100      	movs	r1, #0
 80096ea:	6978      	ldr	r0, [r7, #20]
 80096ec:	f7ff ff88 	bl	8009600 <xTimerGenericCommand>
 80096f0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80096f2:	693b      	ldr	r3, [r7, #16]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d113      	bne.n	8009720 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80096f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096fc:	f383 8811 	msr	BASEPRI, r3
 8009700:	f3bf 8f6f 	isb	sy
 8009704:	f3bf 8f4f 	dsb	sy
 8009708:	60fb      	str	r3, [r7, #12]
}
 800970a:	bf00      	nop
 800970c:	e7fe      	b.n	800970c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800970e:	697b      	ldr	r3, [r7, #20]
 8009710:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009714:	f023 0301 	bic.w	r3, r3, #1
 8009718:	b2da      	uxtb	r2, r3
 800971a:	697b      	ldr	r3, [r7, #20]
 800971c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	6a1b      	ldr	r3, [r3, #32]
 8009724:	6978      	ldr	r0, [r7, #20]
 8009726:	4798      	blx	r3
}
 8009728:	bf00      	nop
 800972a:	3718      	adds	r7, #24
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}
 8009730:	20001584 	.word	0x20001584

08009734 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b084      	sub	sp, #16
 8009738:	af00      	add	r7, sp, #0
 800973a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800973c:	f107 0308 	add.w	r3, r7, #8
 8009740:	4618      	mov	r0, r3
 8009742:	f000 f857 	bl	80097f4 <prvGetNextExpireTime>
 8009746:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	4619      	mov	r1, r3
 800974c:	68f8      	ldr	r0, [r7, #12]
 800974e:	f000 f803 	bl	8009758 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009752:	f000 f8d5 	bl	8009900 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009756:	e7f1      	b.n	800973c <prvTimerTask+0x8>

08009758 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b084      	sub	sp, #16
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
 8009760:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009762:	f7ff fa43 	bl	8008bec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009766:	f107 0308 	add.w	r3, r7, #8
 800976a:	4618      	mov	r0, r3
 800976c:	f000 f866 	bl	800983c <prvSampleTimeNow>
 8009770:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d130      	bne.n	80097da <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	2b00      	cmp	r3, #0
 800977c:	d10a      	bne.n	8009794 <prvProcessTimerOrBlockTask+0x3c>
 800977e:	687a      	ldr	r2, [r7, #4]
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	429a      	cmp	r2, r3
 8009784:	d806      	bhi.n	8009794 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009786:	f7ff fa3f 	bl	8008c08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800978a:	68f9      	ldr	r1, [r7, #12]
 800978c:	6878      	ldr	r0, [r7, #4]
 800978e:	f7ff ff85 	bl	800969c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009792:	e024      	b.n	80097de <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009794:	683b      	ldr	r3, [r7, #0]
 8009796:	2b00      	cmp	r3, #0
 8009798:	d008      	beq.n	80097ac <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800979a:	4b13      	ldr	r3, [pc, #76]	; (80097e8 <prvProcessTimerOrBlockTask+0x90>)
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d101      	bne.n	80097a8 <prvProcessTimerOrBlockTask+0x50>
 80097a4:	2301      	movs	r3, #1
 80097a6:	e000      	b.n	80097aa <prvProcessTimerOrBlockTask+0x52>
 80097a8:	2300      	movs	r3, #0
 80097aa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80097ac:	4b0f      	ldr	r3, [pc, #60]	; (80097ec <prvProcessTimerOrBlockTask+0x94>)
 80097ae:	6818      	ldr	r0, [r3, #0]
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	1ad3      	subs	r3, r2, r3
 80097b6:	683a      	ldr	r2, [r7, #0]
 80097b8:	4619      	mov	r1, r3
 80097ba:	f7fe ff29 	bl	8008610 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80097be:	f7ff fa23 	bl	8008c08 <xTaskResumeAll>
 80097c2:	4603      	mov	r3, r0
 80097c4:	2b00      	cmp	r3, #0
 80097c6:	d10a      	bne.n	80097de <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80097c8:	4b09      	ldr	r3, [pc, #36]	; (80097f0 <prvProcessTimerOrBlockTask+0x98>)
 80097ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80097ce:	601a      	str	r2, [r3, #0]
 80097d0:	f3bf 8f4f 	dsb	sy
 80097d4:	f3bf 8f6f 	isb	sy
}
 80097d8:	e001      	b.n	80097de <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80097da:	f7ff fa15 	bl	8008c08 <xTaskResumeAll>
}
 80097de:	bf00      	nop
 80097e0:	3710      	adds	r7, #16
 80097e2:	46bd      	mov	sp, r7
 80097e4:	bd80      	pop	{r7, pc}
 80097e6:	bf00      	nop
 80097e8:	20001588 	.word	0x20001588
 80097ec:	2000158c 	.word	0x2000158c
 80097f0:	e000ed04 	.word	0xe000ed04

080097f4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80097f4:	b480      	push	{r7}
 80097f6:	b085      	sub	sp, #20
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80097fc:	4b0e      	ldr	r3, [pc, #56]	; (8009838 <prvGetNextExpireTime+0x44>)
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d101      	bne.n	800980a <prvGetNextExpireTime+0x16>
 8009806:	2201      	movs	r2, #1
 8009808:	e000      	b.n	800980c <prvGetNextExpireTime+0x18>
 800980a:	2200      	movs	r2, #0
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d105      	bne.n	8009824 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009818:	4b07      	ldr	r3, [pc, #28]	; (8009838 <prvGetNextExpireTime+0x44>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	68db      	ldr	r3, [r3, #12]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	60fb      	str	r3, [r7, #12]
 8009822:	e001      	b.n	8009828 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009824:	2300      	movs	r3, #0
 8009826:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009828:	68fb      	ldr	r3, [r7, #12]
}
 800982a:	4618      	mov	r0, r3
 800982c:	3714      	adds	r7, #20
 800982e:	46bd      	mov	sp, r7
 8009830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009834:	4770      	bx	lr
 8009836:	bf00      	nop
 8009838:	20001584 	.word	0x20001584

0800983c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b084      	sub	sp, #16
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009844:	f7ff fa7e 	bl	8008d44 <xTaskGetTickCount>
 8009848:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800984a:	4b0b      	ldr	r3, [pc, #44]	; (8009878 <prvSampleTimeNow+0x3c>)
 800984c:	681b      	ldr	r3, [r3, #0]
 800984e:	68fa      	ldr	r2, [r7, #12]
 8009850:	429a      	cmp	r2, r3
 8009852:	d205      	bcs.n	8009860 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009854:	f000 f936 	bl	8009ac4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2201      	movs	r2, #1
 800985c:	601a      	str	r2, [r3, #0]
 800985e:	e002      	b.n	8009866 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2200      	movs	r2, #0
 8009864:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009866:	4a04      	ldr	r2, [pc, #16]	; (8009878 <prvSampleTimeNow+0x3c>)
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800986c:	68fb      	ldr	r3, [r7, #12]
}
 800986e:	4618      	mov	r0, r3
 8009870:	3710      	adds	r7, #16
 8009872:	46bd      	mov	sp, r7
 8009874:	bd80      	pop	{r7, pc}
 8009876:	bf00      	nop
 8009878:	20001594 	.word	0x20001594

0800987c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800987c:	b580      	push	{r7, lr}
 800987e:	b086      	sub	sp, #24
 8009880:	af00      	add	r7, sp, #0
 8009882:	60f8      	str	r0, [r7, #12]
 8009884:	60b9      	str	r1, [r7, #8]
 8009886:	607a      	str	r2, [r7, #4]
 8009888:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800988a:	2300      	movs	r3, #0
 800988c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800988e:	68fb      	ldr	r3, [r7, #12]
 8009890:	68ba      	ldr	r2, [r7, #8]
 8009892:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	68fa      	ldr	r2, [r7, #12]
 8009898:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800989a:	68ba      	ldr	r2, [r7, #8]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	429a      	cmp	r2, r3
 80098a0:	d812      	bhi.n	80098c8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098a2:	687a      	ldr	r2, [r7, #4]
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	1ad2      	subs	r2, r2, r3
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	699b      	ldr	r3, [r3, #24]
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d302      	bcc.n	80098b6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80098b0:	2301      	movs	r3, #1
 80098b2:	617b      	str	r3, [r7, #20]
 80098b4:	e01b      	b.n	80098ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80098b6:	4b10      	ldr	r3, [pc, #64]	; (80098f8 <prvInsertTimerInActiveList+0x7c>)
 80098b8:	681a      	ldr	r2, [r3, #0]
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	3304      	adds	r3, #4
 80098be:	4619      	mov	r1, r3
 80098c0:	4610      	mov	r0, r2
 80098c2:	f7fe f98a 	bl	8007bda <vListInsert>
 80098c6:	e012      	b.n	80098ee <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80098c8:	687a      	ldr	r2, [r7, #4]
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	429a      	cmp	r2, r3
 80098ce:	d206      	bcs.n	80098de <prvInsertTimerInActiveList+0x62>
 80098d0:	68ba      	ldr	r2, [r7, #8]
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	429a      	cmp	r2, r3
 80098d6:	d302      	bcc.n	80098de <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80098d8:	2301      	movs	r3, #1
 80098da:	617b      	str	r3, [r7, #20]
 80098dc:	e007      	b.n	80098ee <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80098de:	4b07      	ldr	r3, [pc, #28]	; (80098fc <prvInsertTimerInActiveList+0x80>)
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	3304      	adds	r3, #4
 80098e6:	4619      	mov	r1, r3
 80098e8:	4610      	mov	r0, r2
 80098ea:	f7fe f976 	bl	8007bda <vListInsert>
		}
	}

	return xProcessTimerNow;
 80098ee:	697b      	ldr	r3, [r7, #20]
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	3718      	adds	r7, #24
 80098f4:	46bd      	mov	sp, r7
 80098f6:	bd80      	pop	{r7, pc}
 80098f8:	20001588 	.word	0x20001588
 80098fc:	20001584 	.word	0x20001584

08009900 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009900:	b580      	push	{r7, lr}
 8009902:	b08e      	sub	sp, #56	; 0x38
 8009904:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009906:	e0ca      	b.n	8009a9e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2b00      	cmp	r3, #0
 800990c:	da18      	bge.n	8009940 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800990e:	1d3b      	adds	r3, r7, #4
 8009910:	3304      	adds	r3, #4
 8009912:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009916:	2b00      	cmp	r3, #0
 8009918:	d10a      	bne.n	8009930 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800991a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800991e:	f383 8811 	msr	BASEPRI, r3
 8009922:	f3bf 8f6f 	isb	sy
 8009926:	f3bf 8f4f 	dsb	sy
 800992a:	61fb      	str	r3, [r7, #28]
}
 800992c:	bf00      	nop
 800992e:	e7fe      	b.n	800992e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009936:	6850      	ldr	r0, [r2, #4]
 8009938:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800993a:	6892      	ldr	r2, [r2, #8]
 800993c:	4611      	mov	r1, r2
 800993e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	2b00      	cmp	r3, #0
 8009944:	f2c0 80aa 	blt.w	8009a9c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800994c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800994e:	695b      	ldr	r3, [r3, #20]
 8009950:	2b00      	cmp	r3, #0
 8009952:	d004      	beq.n	800995e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009956:	3304      	adds	r3, #4
 8009958:	4618      	mov	r0, r3
 800995a:	f7fe f977 	bl	8007c4c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800995e:	463b      	mov	r3, r7
 8009960:	4618      	mov	r0, r3
 8009962:	f7ff ff6b 	bl	800983c <prvSampleTimeNow>
 8009966:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2b09      	cmp	r3, #9
 800996c:	f200 8097 	bhi.w	8009a9e <prvProcessReceivedCommands+0x19e>
 8009970:	a201      	add	r2, pc, #4	; (adr r2, 8009978 <prvProcessReceivedCommands+0x78>)
 8009972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009976:	bf00      	nop
 8009978:	080099a1 	.word	0x080099a1
 800997c:	080099a1 	.word	0x080099a1
 8009980:	080099a1 	.word	0x080099a1
 8009984:	08009a15 	.word	0x08009a15
 8009988:	08009a29 	.word	0x08009a29
 800998c:	08009a73 	.word	0x08009a73
 8009990:	080099a1 	.word	0x080099a1
 8009994:	080099a1 	.word	0x080099a1
 8009998:	08009a15 	.word	0x08009a15
 800999c:	08009a29 	.word	0x08009a29
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80099a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099a2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099a6:	f043 0301 	orr.w	r3, r3, #1
 80099aa:	b2da      	uxtb	r2, r3
 80099ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80099b2:	68ba      	ldr	r2, [r7, #8]
 80099b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099b6:	699b      	ldr	r3, [r3, #24]
 80099b8:	18d1      	adds	r1, r2, r3
 80099ba:	68bb      	ldr	r3, [r7, #8]
 80099bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099c0:	f7ff ff5c 	bl	800987c <prvInsertTimerInActiveList>
 80099c4:	4603      	mov	r3, r0
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d069      	beq.n	8009a9e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80099ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099cc:	6a1b      	ldr	r3, [r3, #32]
 80099ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099d0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80099d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80099d8:	f003 0304 	and.w	r3, r3, #4
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d05e      	beq.n	8009a9e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80099e0:	68ba      	ldr	r2, [r7, #8]
 80099e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099e4:	699b      	ldr	r3, [r3, #24]
 80099e6:	441a      	add	r2, r3
 80099e8:	2300      	movs	r3, #0
 80099ea:	9300      	str	r3, [sp, #0]
 80099ec:	2300      	movs	r3, #0
 80099ee:	2100      	movs	r1, #0
 80099f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80099f2:	f7ff fe05 	bl	8009600 <xTimerGenericCommand>
 80099f6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80099f8:	6a3b      	ldr	r3, [r7, #32]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d14f      	bne.n	8009a9e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80099fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a02:	f383 8811 	msr	BASEPRI, r3
 8009a06:	f3bf 8f6f 	isb	sy
 8009a0a:	f3bf 8f4f 	dsb	sy
 8009a0e:	61bb      	str	r3, [r7, #24]
}
 8009a10:	bf00      	nop
 8009a12:	e7fe      	b.n	8009a12 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a1a:	f023 0301 	bic.w	r3, r3, #1
 8009a1e:	b2da      	uxtb	r2, r3
 8009a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8009a26:	e03a      	b.n	8009a9e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a2a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a2e:	f043 0301 	orr.w	r3, r3, #1
 8009a32:	b2da      	uxtb	r2, r3
 8009a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a36:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009a3a:	68ba      	ldr	r2, [r7, #8]
 8009a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a3e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009a40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a42:	699b      	ldr	r3, [r3, #24]
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	d10a      	bne.n	8009a5e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8009a48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a4c:	f383 8811 	msr	BASEPRI, r3
 8009a50:	f3bf 8f6f 	isb	sy
 8009a54:	f3bf 8f4f 	dsb	sy
 8009a58:	617b      	str	r3, [r7, #20]
}
 8009a5a:	bf00      	nop
 8009a5c:	e7fe      	b.n	8009a5c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a60:	699a      	ldr	r2, [r3, #24]
 8009a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a64:	18d1      	adds	r1, r2, r3
 8009a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009a6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a6c:	f7ff ff06 	bl	800987c <prvInsertTimerInActiveList>
					break;
 8009a70:	e015      	b.n	8009a9e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a74:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a78:	f003 0302 	and.w	r3, r3, #2
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d103      	bne.n	8009a88 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8009a80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009a82:	f000 fbdd 	bl	800a240 <vPortFree>
 8009a86:	e00a      	b.n	8009a9e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009a8e:	f023 0301 	bic.w	r3, r3, #1
 8009a92:	b2da      	uxtb	r2, r3
 8009a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009a9a:	e000      	b.n	8009a9e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8009a9c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009a9e:	4b08      	ldr	r3, [pc, #32]	; (8009ac0 <prvProcessReceivedCommands+0x1c0>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	1d39      	adds	r1, r7, #4
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	f7fe fb98 	bl	80081dc <xQueueReceive>
 8009aac:	4603      	mov	r3, r0
 8009aae:	2b00      	cmp	r3, #0
 8009ab0:	f47f af2a 	bne.w	8009908 <prvProcessReceivedCommands+0x8>
	}
}
 8009ab4:	bf00      	nop
 8009ab6:	bf00      	nop
 8009ab8:	3730      	adds	r7, #48	; 0x30
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	2000158c 	.word	0x2000158c

08009ac4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b088      	sub	sp, #32
 8009ac8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009aca:	e048      	b.n	8009b5e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009acc:	4b2d      	ldr	r3, [pc, #180]	; (8009b84 <prvSwitchTimerLists+0xc0>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	68db      	ldr	r3, [r3, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ad6:	4b2b      	ldr	r3, [pc, #172]	; (8009b84 <prvSwitchTimerLists+0xc0>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	68db      	ldr	r3, [r3, #12]
 8009adc:	68db      	ldr	r3, [r3, #12]
 8009ade:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009ae0:	68fb      	ldr	r3, [r7, #12]
 8009ae2:	3304      	adds	r3, #4
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	f7fe f8b1 	bl	8007c4c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	6a1b      	ldr	r3, [r3, #32]
 8009aee:	68f8      	ldr	r0, [r7, #12]
 8009af0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8009af8:	f003 0304 	and.w	r3, r3, #4
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d02e      	beq.n	8009b5e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	699b      	ldr	r3, [r3, #24]
 8009b04:	693a      	ldr	r2, [r7, #16]
 8009b06:	4413      	add	r3, r2
 8009b08:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009b0a:	68ba      	ldr	r2, [r7, #8]
 8009b0c:	693b      	ldr	r3, [r7, #16]
 8009b0e:	429a      	cmp	r2, r3
 8009b10:	d90e      	bls.n	8009b30 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	68ba      	ldr	r2, [r7, #8]
 8009b16:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	68fa      	ldr	r2, [r7, #12]
 8009b1c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009b1e:	4b19      	ldr	r3, [pc, #100]	; (8009b84 <prvSwitchTimerLists+0xc0>)
 8009b20:	681a      	ldr	r2, [r3, #0]
 8009b22:	68fb      	ldr	r3, [r7, #12]
 8009b24:	3304      	adds	r3, #4
 8009b26:	4619      	mov	r1, r3
 8009b28:	4610      	mov	r0, r2
 8009b2a:	f7fe f856 	bl	8007bda <vListInsert>
 8009b2e:	e016      	b.n	8009b5e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b30:	2300      	movs	r3, #0
 8009b32:	9300      	str	r3, [sp, #0]
 8009b34:	2300      	movs	r3, #0
 8009b36:	693a      	ldr	r2, [r7, #16]
 8009b38:	2100      	movs	r1, #0
 8009b3a:	68f8      	ldr	r0, [r7, #12]
 8009b3c:	f7ff fd60 	bl	8009600 <xTimerGenericCommand>
 8009b40:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d10a      	bne.n	8009b5e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8009b48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b4c:	f383 8811 	msr	BASEPRI, r3
 8009b50:	f3bf 8f6f 	isb	sy
 8009b54:	f3bf 8f4f 	dsb	sy
 8009b58:	603b      	str	r3, [r7, #0]
}
 8009b5a:	bf00      	nop
 8009b5c:	e7fe      	b.n	8009b5c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009b5e:	4b09      	ldr	r3, [pc, #36]	; (8009b84 <prvSwitchTimerLists+0xc0>)
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	2b00      	cmp	r3, #0
 8009b66:	d1b1      	bne.n	8009acc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009b68:	4b06      	ldr	r3, [pc, #24]	; (8009b84 <prvSwitchTimerLists+0xc0>)
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009b6e:	4b06      	ldr	r3, [pc, #24]	; (8009b88 <prvSwitchTimerLists+0xc4>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	4a04      	ldr	r2, [pc, #16]	; (8009b84 <prvSwitchTimerLists+0xc0>)
 8009b74:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009b76:	4a04      	ldr	r2, [pc, #16]	; (8009b88 <prvSwitchTimerLists+0xc4>)
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	6013      	str	r3, [r2, #0]
}
 8009b7c:	bf00      	nop
 8009b7e:	3718      	adds	r7, #24
 8009b80:	46bd      	mov	sp, r7
 8009b82:	bd80      	pop	{r7, pc}
 8009b84:	20001584 	.word	0x20001584
 8009b88:	20001588 	.word	0x20001588

08009b8c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009b8c:	b580      	push	{r7, lr}
 8009b8e:	b082      	sub	sp, #8
 8009b90:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009b92:	f000 f967 	bl	8009e64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009b96:	4b15      	ldr	r3, [pc, #84]	; (8009bec <prvCheckForValidListAndQueue+0x60>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d120      	bne.n	8009be0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009b9e:	4814      	ldr	r0, [pc, #80]	; (8009bf0 <prvCheckForValidListAndQueue+0x64>)
 8009ba0:	f7fd ffca 	bl	8007b38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009ba4:	4813      	ldr	r0, [pc, #76]	; (8009bf4 <prvCheckForValidListAndQueue+0x68>)
 8009ba6:	f7fd ffc7 	bl	8007b38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8009baa:	4b13      	ldr	r3, [pc, #76]	; (8009bf8 <prvCheckForValidListAndQueue+0x6c>)
 8009bac:	4a10      	ldr	r2, [pc, #64]	; (8009bf0 <prvCheckForValidListAndQueue+0x64>)
 8009bae:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8009bb0:	4b12      	ldr	r3, [pc, #72]	; (8009bfc <prvCheckForValidListAndQueue+0x70>)
 8009bb2:	4a10      	ldr	r2, [pc, #64]	; (8009bf4 <prvCheckForValidListAndQueue+0x68>)
 8009bb4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8009bb6:	2300      	movs	r3, #0
 8009bb8:	9300      	str	r3, [sp, #0]
 8009bba:	4b11      	ldr	r3, [pc, #68]	; (8009c00 <prvCheckForValidListAndQueue+0x74>)
 8009bbc:	4a11      	ldr	r2, [pc, #68]	; (8009c04 <prvCheckForValidListAndQueue+0x78>)
 8009bbe:	2110      	movs	r1, #16
 8009bc0:	200a      	movs	r0, #10
 8009bc2:	f7fe f8d5 	bl	8007d70 <xQueueGenericCreateStatic>
 8009bc6:	4603      	mov	r3, r0
 8009bc8:	4a08      	ldr	r2, [pc, #32]	; (8009bec <prvCheckForValidListAndQueue+0x60>)
 8009bca:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8009bcc:	4b07      	ldr	r3, [pc, #28]	; (8009bec <prvCheckForValidListAndQueue+0x60>)
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d005      	beq.n	8009be0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8009bd4:	4b05      	ldr	r3, [pc, #20]	; (8009bec <prvCheckForValidListAndQueue+0x60>)
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	490b      	ldr	r1, [pc, #44]	; (8009c08 <prvCheckForValidListAndQueue+0x7c>)
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7fe fcee 	bl	80085bc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009be0:	f000 f970 	bl	8009ec4 <vPortExitCritical>
}
 8009be4:	bf00      	nop
 8009be6:	46bd      	mov	sp, r7
 8009be8:	bd80      	pop	{r7, pc}
 8009bea:	bf00      	nop
 8009bec:	2000158c 	.word	0x2000158c
 8009bf0:	2000155c 	.word	0x2000155c
 8009bf4:	20001570 	.word	0x20001570
 8009bf8:	20001584 	.word	0x20001584
 8009bfc:	20001588 	.word	0x20001588
 8009c00:	20001638 	.word	0x20001638
 8009c04:	20001598 	.word	0x20001598
 8009c08:	0800e1d4 	.word	0x0800e1d4

08009c0c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009c0c:	b480      	push	{r7}
 8009c0e:	b085      	sub	sp, #20
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	3b04      	subs	r3, #4
 8009c1c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8009c24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	3b04      	subs	r3, #4
 8009c2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	f023 0201 	bic.w	r2, r3, #1
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	3b04      	subs	r3, #4
 8009c3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8009c3c:	4a0c      	ldr	r2, [pc, #48]	; (8009c70 <pxPortInitialiseStack+0x64>)
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	3b14      	subs	r3, #20
 8009c46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8009c48:	687a      	ldr	r2, [r7, #4]
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	3b04      	subs	r3, #4
 8009c52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f06f 0202 	mvn.w	r2, #2
 8009c5a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	3b20      	subs	r3, #32
 8009c60:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8009c62:	68fb      	ldr	r3, [r7, #12]
}
 8009c64:	4618      	mov	r0, r3
 8009c66:	3714      	adds	r7, #20
 8009c68:	46bd      	mov	sp, r7
 8009c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6e:	4770      	bx	lr
 8009c70:	08009c75 	.word	0x08009c75

08009c74 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009c74:	b480      	push	{r7}
 8009c76:	b085      	sub	sp, #20
 8009c78:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8009c7e:	4b12      	ldr	r3, [pc, #72]	; (8009cc8 <prvTaskExitError+0x54>)
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c86:	d00a      	beq.n	8009c9e <prvTaskExitError+0x2a>
	__asm volatile
 8009c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c8c:	f383 8811 	msr	BASEPRI, r3
 8009c90:	f3bf 8f6f 	isb	sy
 8009c94:	f3bf 8f4f 	dsb	sy
 8009c98:	60fb      	str	r3, [r7, #12]
}
 8009c9a:	bf00      	nop
 8009c9c:	e7fe      	b.n	8009c9c <prvTaskExitError+0x28>
	__asm volatile
 8009c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ca2:	f383 8811 	msr	BASEPRI, r3
 8009ca6:	f3bf 8f6f 	isb	sy
 8009caa:	f3bf 8f4f 	dsb	sy
 8009cae:	60bb      	str	r3, [r7, #8]
}
 8009cb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8009cb2:	bf00      	nop
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	2b00      	cmp	r3, #0
 8009cb8:	d0fc      	beq.n	8009cb4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8009cba:	bf00      	nop
 8009cbc:	bf00      	nop
 8009cbe:	3714      	adds	r7, #20
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr
 8009cc8:	20000048 	.word	0x20000048
 8009ccc:	00000000 	.word	0x00000000

08009cd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009cd0:	4b07      	ldr	r3, [pc, #28]	; (8009cf0 <pxCurrentTCBConst2>)
 8009cd2:	6819      	ldr	r1, [r3, #0]
 8009cd4:	6808      	ldr	r0, [r1, #0]
 8009cd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cda:	f380 8809 	msr	PSP, r0
 8009cde:	f3bf 8f6f 	isb	sy
 8009ce2:	f04f 0000 	mov.w	r0, #0
 8009ce6:	f380 8811 	msr	BASEPRI, r0
 8009cea:	4770      	bx	lr
 8009cec:	f3af 8000 	nop.w

08009cf0 <pxCurrentTCBConst2>:
 8009cf0:	2000105c 	.word	0x2000105c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009cf4:	bf00      	nop
 8009cf6:	bf00      	nop

08009cf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8009cf8:	4808      	ldr	r0, [pc, #32]	; (8009d1c <prvPortStartFirstTask+0x24>)
 8009cfa:	6800      	ldr	r0, [r0, #0]
 8009cfc:	6800      	ldr	r0, [r0, #0]
 8009cfe:	f380 8808 	msr	MSP, r0
 8009d02:	f04f 0000 	mov.w	r0, #0
 8009d06:	f380 8814 	msr	CONTROL, r0
 8009d0a:	b662      	cpsie	i
 8009d0c:	b661      	cpsie	f
 8009d0e:	f3bf 8f4f 	dsb	sy
 8009d12:	f3bf 8f6f 	isb	sy
 8009d16:	df00      	svc	0
 8009d18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8009d1a:	bf00      	nop
 8009d1c:	e000ed08 	.word	0xe000ed08

08009d20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009d20:	b580      	push	{r7, lr}
 8009d22:	b086      	sub	sp, #24
 8009d24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009d26:	4b46      	ldr	r3, [pc, #280]	; (8009e40 <xPortStartScheduler+0x120>)
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	4a46      	ldr	r2, [pc, #280]	; (8009e44 <xPortStartScheduler+0x124>)
 8009d2c:	4293      	cmp	r3, r2
 8009d2e:	d10a      	bne.n	8009d46 <xPortStartScheduler+0x26>
	__asm volatile
 8009d30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d34:	f383 8811 	msr	BASEPRI, r3
 8009d38:	f3bf 8f6f 	isb	sy
 8009d3c:	f3bf 8f4f 	dsb	sy
 8009d40:	613b      	str	r3, [r7, #16]
}
 8009d42:	bf00      	nop
 8009d44:	e7fe      	b.n	8009d44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009d46:	4b3e      	ldr	r3, [pc, #248]	; (8009e40 <xPortStartScheduler+0x120>)
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	4a3f      	ldr	r2, [pc, #252]	; (8009e48 <xPortStartScheduler+0x128>)
 8009d4c:	4293      	cmp	r3, r2
 8009d4e:	d10a      	bne.n	8009d66 <xPortStartScheduler+0x46>
	__asm volatile
 8009d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d54:	f383 8811 	msr	BASEPRI, r3
 8009d58:	f3bf 8f6f 	isb	sy
 8009d5c:	f3bf 8f4f 	dsb	sy
 8009d60:	60fb      	str	r3, [r7, #12]
}
 8009d62:	bf00      	nop
 8009d64:	e7fe      	b.n	8009d64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009d66:	4b39      	ldr	r3, [pc, #228]	; (8009e4c <xPortStartScheduler+0x12c>)
 8009d68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009d6a:	697b      	ldr	r3, [r7, #20]
 8009d6c:	781b      	ldrb	r3, [r3, #0]
 8009d6e:	b2db      	uxtb	r3, r3
 8009d70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	22ff      	movs	r2, #255	; 0xff
 8009d76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	781b      	ldrb	r3, [r3, #0]
 8009d7c:	b2db      	uxtb	r3, r3
 8009d7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009d80:	78fb      	ldrb	r3, [r7, #3]
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009d88:	b2da      	uxtb	r2, r3
 8009d8a:	4b31      	ldr	r3, [pc, #196]	; (8009e50 <xPortStartScheduler+0x130>)
 8009d8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009d8e:	4b31      	ldr	r3, [pc, #196]	; (8009e54 <xPortStartScheduler+0x134>)
 8009d90:	2207      	movs	r2, #7
 8009d92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009d94:	e009      	b.n	8009daa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8009d96:	4b2f      	ldr	r3, [pc, #188]	; (8009e54 <xPortStartScheduler+0x134>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	3b01      	subs	r3, #1
 8009d9c:	4a2d      	ldr	r2, [pc, #180]	; (8009e54 <xPortStartScheduler+0x134>)
 8009d9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009da0:	78fb      	ldrb	r3, [r7, #3]
 8009da2:	b2db      	uxtb	r3, r3
 8009da4:	005b      	lsls	r3, r3, #1
 8009da6:	b2db      	uxtb	r3, r3
 8009da8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009daa:	78fb      	ldrb	r3, [r7, #3]
 8009dac:	b2db      	uxtb	r3, r3
 8009dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009db2:	2b80      	cmp	r3, #128	; 0x80
 8009db4:	d0ef      	beq.n	8009d96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009db6:	4b27      	ldr	r3, [pc, #156]	; (8009e54 <xPortStartScheduler+0x134>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	f1c3 0307 	rsb	r3, r3, #7
 8009dbe:	2b04      	cmp	r3, #4
 8009dc0:	d00a      	beq.n	8009dd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8009dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc6:	f383 8811 	msr	BASEPRI, r3
 8009dca:	f3bf 8f6f 	isb	sy
 8009dce:	f3bf 8f4f 	dsb	sy
 8009dd2:	60bb      	str	r3, [r7, #8]
}
 8009dd4:	bf00      	nop
 8009dd6:	e7fe      	b.n	8009dd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009dd8:	4b1e      	ldr	r3, [pc, #120]	; (8009e54 <xPortStartScheduler+0x134>)
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	021b      	lsls	r3, r3, #8
 8009dde:	4a1d      	ldr	r2, [pc, #116]	; (8009e54 <xPortStartScheduler+0x134>)
 8009de0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009de2:	4b1c      	ldr	r3, [pc, #112]	; (8009e54 <xPortStartScheduler+0x134>)
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009dea:	4a1a      	ldr	r2, [pc, #104]	; (8009e54 <xPortStartScheduler+0x134>)
 8009dec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	b2da      	uxtb	r2, r3
 8009df2:	697b      	ldr	r3, [r7, #20]
 8009df4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8009df6:	4b18      	ldr	r3, [pc, #96]	; (8009e58 <xPortStartScheduler+0x138>)
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a17      	ldr	r2, [pc, #92]	; (8009e58 <xPortStartScheduler+0x138>)
 8009dfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8009e00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8009e02:	4b15      	ldr	r3, [pc, #84]	; (8009e58 <xPortStartScheduler+0x138>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4a14      	ldr	r2, [pc, #80]	; (8009e58 <xPortStartScheduler+0x138>)
 8009e08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8009e0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009e0e:	f000 f8dd 	bl	8009fcc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8009e12:	4b12      	ldr	r3, [pc, #72]	; (8009e5c <xPortStartScheduler+0x13c>)
 8009e14:	2200      	movs	r2, #0
 8009e16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8009e18:	f000 f8fc 	bl	800a014 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009e1c:	4b10      	ldr	r3, [pc, #64]	; (8009e60 <xPortStartScheduler+0x140>)
 8009e1e:	681b      	ldr	r3, [r3, #0]
 8009e20:	4a0f      	ldr	r2, [pc, #60]	; (8009e60 <xPortStartScheduler+0x140>)
 8009e22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8009e26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8009e28:	f7ff ff66 	bl	8009cf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009e2c:	f7ff f854 	bl	8008ed8 <vTaskSwitchContext>
	prvTaskExitError();
 8009e30:	f7ff ff20 	bl	8009c74 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8009e34:	2300      	movs	r3, #0
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3718      	adds	r7, #24
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	e000ed00 	.word	0xe000ed00
 8009e44:	410fc271 	.word	0x410fc271
 8009e48:	410fc270 	.word	0x410fc270
 8009e4c:	e000e400 	.word	0xe000e400
 8009e50:	20001688 	.word	0x20001688
 8009e54:	2000168c 	.word	0x2000168c
 8009e58:	e000ed20 	.word	0xe000ed20
 8009e5c:	20000048 	.word	0x20000048
 8009e60:	e000ef34 	.word	0xe000ef34

08009e64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
	__asm volatile
 8009e6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e6e:	f383 8811 	msr	BASEPRI, r3
 8009e72:	f3bf 8f6f 	isb	sy
 8009e76:	f3bf 8f4f 	dsb	sy
 8009e7a:	607b      	str	r3, [r7, #4]
}
 8009e7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009e7e:	4b0f      	ldr	r3, [pc, #60]	; (8009ebc <vPortEnterCritical+0x58>)
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	3301      	adds	r3, #1
 8009e84:	4a0d      	ldr	r2, [pc, #52]	; (8009ebc <vPortEnterCritical+0x58>)
 8009e86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009e88:	4b0c      	ldr	r3, [pc, #48]	; (8009ebc <vPortEnterCritical+0x58>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	2b01      	cmp	r3, #1
 8009e8e:	d10f      	bne.n	8009eb0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009e90:	4b0b      	ldr	r3, [pc, #44]	; (8009ec0 <vPortEnterCritical+0x5c>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	b2db      	uxtb	r3, r3
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d00a      	beq.n	8009eb0 <vPortEnterCritical+0x4c>
	__asm volatile
 8009e9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e9e:	f383 8811 	msr	BASEPRI, r3
 8009ea2:	f3bf 8f6f 	isb	sy
 8009ea6:	f3bf 8f4f 	dsb	sy
 8009eaa:	603b      	str	r3, [r7, #0]
}
 8009eac:	bf00      	nop
 8009eae:	e7fe      	b.n	8009eae <vPortEnterCritical+0x4a>
	}
}
 8009eb0:	bf00      	nop
 8009eb2:	370c      	adds	r7, #12
 8009eb4:	46bd      	mov	sp, r7
 8009eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eba:	4770      	bx	lr
 8009ebc:	20000048 	.word	0x20000048
 8009ec0:	e000ed04 	.word	0xe000ed04

08009ec4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009ec4:	b480      	push	{r7}
 8009ec6:	b083      	sub	sp, #12
 8009ec8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009eca:	4b12      	ldr	r3, [pc, #72]	; (8009f14 <vPortExitCritical+0x50>)
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d10a      	bne.n	8009ee8 <vPortExitCritical+0x24>
	__asm volatile
 8009ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ed6:	f383 8811 	msr	BASEPRI, r3
 8009eda:	f3bf 8f6f 	isb	sy
 8009ede:	f3bf 8f4f 	dsb	sy
 8009ee2:	607b      	str	r3, [r7, #4]
}
 8009ee4:	bf00      	nop
 8009ee6:	e7fe      	b.n	8009ee6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009ee8:	4b0a      	ldr	r3, [pc, #40]	; (8009f14 <vPortExitCritical+0x50>)
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	3b01      	subs	r3, #1
 8009eee:	4a09      	ldr	r2, [pc, #36]	; (8009f14 <vPortExitCritical+0x50>)
 8009ef0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009ef2:	4b08      	ldr	r3, [pc, #32]	; (8009f14 <vPortExitCritical+0x50>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d105      	bne.n	8009f06 <vPortExitCritical+0x42>
 8009efa:	2300      	movs	r3, #0
 8009efc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009efe:	683b      	ldr	r3, [r7, #0]
 8009f00:	f383 8811 	msr	BASEPRI, r3
}
 8009f04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009f06:	bf00      	nop
 8009f08:	370c      	adds	r7, #12
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f10:	4770      	bx	lr
 8009f12:	bf00      	nop
 8009f14:	20000048 	.word	0x20000048
	...

08009f20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009f20:	f3ef 8009 	mrs	r0, PSP
 8009f24:	f3bf 8f6f 	isb	sy
 8009f28:	4b15      	ldr	r3, [pc, #84]	; (8009f80 <pxCurrentTCBConst>)
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	f01e 0f10 	tst.w	lr, #16
 8009f30:	bf08      	it	eq
 8009f32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009f36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f3a:	6010      	str	r0, [r2, #0]
 8009f3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009f40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009f44:	f380 8811 	msr	BASEPRI, r0
 8009f48:	f3bf 8f4f 	dsb	sy
 8009f4c:	f3bf 8f6f 	isb	sy
 8009f50:	f7fe ffc2 	bl	8008ed8 <vTaskSwitchContext>
 8009f54:	f04f 0000 	mov.w	r0, #0
 8009f58:	f380 8811 	msr	BASEPRI, r0
 8009f5c:	bc09      	pop	{r0, r3}
 8009f5e:	6819      	ldr	r1, [r3, #0]
 8009f60:	6808      	ldr	r0, [r1, #0]
 8009f62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f66:	f01e 0f10 	tst.w	lr, #16
 8009f6a:	bf08      	it	eq
 8009f6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009f70:	f380 8809 	msr	PSP, r0
 8009f74:	f3bf 8f6f 	isb	sy
 8009f78:	4770      	bx	lr
 8009f7a:	bf00      	nop
 8009f7c:	f3af 8000 	nop.w

08009f80 <pxCurrentTCBConst>:
 8009f80:	2000105c 	.word	0x2000105c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009f84:	bf00      	nop
 8009f86:	bf00      	nop

08009f88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b082      	sub	sp, #8
 8009f8c:	af00      	add	r7, sp, #0
	__asm volatile
 8009f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f92:	f383 8811 	msr	BASEPRI, r3
 8009f96:	f3bf 8f6f 	isb	sy
 8009f9a:	f3bf 8f4f 	dsb	sy
 8009f9e:	607b      	str	r3, [r7, #4]
}
 8009fa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009fa2:	f7fe fedf 	bl	8008d64 <xTaskIncrementTick>
 8009fa6:	4603      	mov	r3, r0
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d003      	beq.n	8009fb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009fac:	4b06      	ldr	r3, [pc, #24]	; (8009fc8 <xPortSysTickHandler+0x40>)
 8009fae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009fb2:	601a      	str	r2, [r3, #0]
 8009fb4:	2300      	movs	r3, #0
 8009fb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	f383 8811 	msr	BASEPRI, r3
}
 8009fbe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009fc0:	bf00      	nop
 8009fc2:	3708      	adds	r7, #8
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd80      	pop	{r7, pc}
 8009fc8:	e000ed04 	.word	0xe000ed04

08009fcc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8009fcc:	b480      	push	{r7}
 8009fce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009fd0:	4b0b      	ldr	r3, [pc, #44]	; (800a000 <vPortSetupTimerInterrupt+0x34>)
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009fd6:	4b0b      	ldr	r3, [pc, #44]	; (800a004 <vPortSetupTimerInterrupt+0x38>)
 8009fd8:	2200      	movs	r2, #0
 8009fda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009fdc:	4b0a      	ldr	r3, [pc, #40]	; (800a008 <vPortSetupTimerInterrupt+0x3c>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a0a      	ldr	r2, [pc, #40]	; (800a00c <vPortSetupTimerInterrupt+0x40>)
 8009fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8009fe6:	099b      	lsrs	r3, r3, #6
 8009fe8:	4a09      	ldr	r2, [pc, #36]	; (800a010 <vPortSetupTimerInterrupt+0x44>)
 8009fea:	3b01      	subs	r3, #1
 8009fec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009fee:	4b04      	ldr	r3, [pc, #16]	; (800a000 <vPortSetupTimerInterrupt+0x34>)
 8009ff0:	2207      	movs	r2, #7
 8009ff2:	601a      	str	r2, [r3, #0]
}
 8009ff4:	bf00      	nop
 8009ff6:	46bd      	mov	sp, r7
 8009ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffc:	4770      	bx	lr
 8009ffe:	bf00      	nop
 800a000:	e000e010 	.word	0xe000e010
 800a004:	e000e018 	.word	0xe000e018
 800a008:	2000003c 	.word	0x2000003c
 800a00c:	10624dd3 	.word	0x10624dd3
 800a010:	e000e014 	.word	0xe000e014

0800a014 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a014:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800a024 <vPortEnableVFP+0x10>
 800a018:	6801      	ldr	r1, [r0, #0]
 800a01a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800a01e:	6001      	str	r1, [r0, #0]
 800a020:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a022:	bf00      	nop
 800a024:	e000ed88 	.word	0xe000ed88

0800a028 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a028:	b480      	push	{r7}
 800a02a:	b085      	sub	sp, #20
 800a02c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a02e:	f3ef 8305 	mrs	r3, IPSR
 800a032:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a034:	68fb      	ldr	r3, [r7, #12]
 800a036:	2b0f      	cmp	r3, #15
 800a038:	d914      	bls.n	800a064 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a03a:	4a17      	ldr	r2, [pc, #92]	; (800a098 <vPortValidateInterruptPriority+0x70>)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	4413      	add	r3, r2
 800a040:	781b      	ldrb	r3, [r3, #0]
 800a042:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a044:	4b15      	ldr	r3, [pc, #84]	; (800a09c <vPortValidateInterruptPriority+0x74>)
 800a046:	781b      	ldrb	r3, [r3, #0]
 800a048:	7afa      	ldrb	r2, [r7, #11]
 800a04a:	429a      	cmp	r2, r3
 800a04c:	d20a      	bcs.n	800a064 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800a04e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a052:	f383 8811 	msr	BASEPRI, r3
 800a056:	f3bf 8f6f 	isb	sy
 800a05a:	f3bf 8f4f 	dsb	sy
 800a05e:	607b      	str	r3, [r7, #4]
}
 800a060:	bf00      	nop
 800a062:	e7fe      	b.n	800a062 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a064:	4b0e      	ldr	r3, [pc, #56]	; (800a0a0 <vPortValidateInterruptPriority+0x78>)
 800a066:	681b      	ldr	r3, [r3, #0]
 800a068:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a06c:	4b0d      	ldr	r3, [pc, #52]	; (800a0a4 <vPortValidateInterruptPriority+0x7c>)
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	429a      	cmp	r2, r3
 800a072:	d90a      	bls.n	800a08a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800a074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a078:	f383 8811 	msr	BASEPRI, r3
 800a07c:	f3bf 8f6f 	isb	sy
 800a080:	f3bf 8f4f 	dsb	sy
 800a084:	603b      	str	r3, [r7, #0]
}
 800a086:	bf00      	nop
 800a088:	e7fe      	b.n	800a088 <vPortValidateInterruptPriority+0x60>
	}
 800a08a:	bf00      	nop
 800a08c:	3714      	adds	r7, #20
 800a08e:	46bd      	mov	sp, r7
 800a090:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a094:	4770      	bx	lr
 800a096:	bf00      	nop
 800a098:	e000e3f0 	.word	0xe000e3f0
 800a09c:	20001688 	.word	0x20001688
 800a0a0:	e000ed0c 	.word	0xe000ed0c
 800a0a4:	2000168c 	.word	0x2000168c

0800a0a8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a0a8:	b580      	push	{r7, lr}
 800a0aa:	b08a      	sub	sp, #40	; 0x28
 800a0ac:	af00      	add	r7, sp, #0
 800a0ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a0b4:	f7fe fd9a 	bl	8008bec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a0b8:	4b5b      	ldr	r3, [pc, #364]	; (800a228 <pvPortMalloc+0x180>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	d101      	bne.n	800a0c4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a0c0:	f000 f920 	bl	800a304 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a0c4:	4b59      	ldr	r3, [pc, #356]	; (800a22c <pvPortMalloc+0x184>)
 800a0c6:	681a      	ldr	r2, [r3, #0]
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	4013      	ands	r3, r2
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	f040 8093 	bne.w	800a1f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d01d      	beq.n	800a114 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800a0d8:	2208      	movs	r2, #8
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	4413      	add	r3, r2
 800a0de:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f003 0307 	and.w	r3, r3, #7
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d014      	beq.n	800a114 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f023 0307 	bic.w	r3, r3, #7
 800a0f0:	3308      	adds	r3, #8
 800a0f2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0f4:	687b      	ldr	r3, [r7, #4]
 800a0f6:	f003 0307 	and.w	r3, r3, #7
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d00a      	beq.n	800a114 <pvPortMalloc+0x6c>
	__asm volatile
 800a0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a102:	f383 8811 	msr	BASEPRI, r3
 800a106:	f3bf 8f6f 	isb	sy
 800a10a:	f3bf 8f4f 	dsb	sy
 800a10e:	617b      	str	r3, [r7, #20]
}
 800a110:	bf00      	nop
 800a112:	e7fe      	b.n	800a112 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d06e      	beq.n	800a1f8 <pvPortMalloc+0x150>
 800a11a:	4b45      	ldr	r3, [pc, #276]	; (800a230 <pvPortMalloc+0x188>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	687a      	ldr	r2, [r7, #4]
 800a120:	429a      	cmp	r2, r3
 800a122:	d869      	bhi.n	800a1f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a124:	4b43      	ldr	r3, [pc, #268]	; (800a234 <pvPortMalloc+0x18c>)
 800a126:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a128:	4b42      	ldr	r3, [pc, #264]	; (800a234 <pvPortMalloc+0x18c>)
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a12e:	e004      	b.n	800a13a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800a130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a132:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a136:	681b      	ldr	r3, [r3, #0]
 800a138:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a13a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	687a      	ldr	r2, [r7, #4]
 800a140:	429a      	cmp	r2, r3
 800a142:	d903      	bls.n	800a14c <pvPortMalloc+0xa4>
 800a144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d1f1      	bne.n	800a130 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a14c:	4b36      	ldr	r3, [pc, #216]	; (800a228 <pvPortMalloc+0x180>)
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a152:	429a      	cmp	r2, r3
 800a154:	d050      	beq.n	800a1f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a156:	6a3b      	ldr	r3, [r7, #32]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	2208      	movs	r2, #8
 800a15c:	4413      	add	r3, r2
 800a15e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	6a3b      	ldr	r3, [r7, #32]
 800a166:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a168:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a16a:	685a      	ldr	r2, [r3, #4]
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	1ad2      	subs	r2, r2, r3
 800a170:	2308      	movs	r3, #8
 800a172:	005b      	lsls	r3, r3, #1
 800a174:	429a      	cmp	r2, r3
 800a176:	d91f      	bls.n	800a1b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	4413      	add	r3, r2
 800a17e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a180:	69bb      	ldr	r3, [r7, #24]
 800a182:	f003 0307 	and.w	r3, r3, #7
 800a186:	2b00      	cmp	r3, #0
 800a188:	d00a      	beq.n	800a1a0 <pvPortMalloc+0xf8>
	__asm volatile
 800a18a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a18e:	f383 8811 	msr	BASEPRI, r3
 800a192:	f3bf 8f6f 	isb	sy
 800a196:	f3bf 8f4f 	dsb	sy
 800a19a:	613b      	str	r3, [r7, #16]
}
 800a19c:	bf00      	nop
 800a19e:	e7fe      	b.n	800a19e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a1a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a2:	685a      	ldr	r2, [r3, #4]
 800a1a4:	687b      	ldr	r3, [r7, #4]
 800a1a6:	1ad2      	subs	r2, r2, r3
 800a1a8:	69bb      	ldr	r3, [r7, #24]
 800a1aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ae:	687a      	ldr	r2, [r7, #4]
 800a1b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a1b2:	69b8      	ldr	r0, [r7, #24]
 800a1b4:	f000 f908 	bl	800a3c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a1b8:	4b1d      	ldr	r3, [pc, #116]	; (800a230 <pvPortMalloc+0x188>)
 800a1ba:	681a      	ldr	r2, [r3, #0]
 800a1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1be:	685b      	ldr	r3, [r3, #4]
 800a1c0:	1ad3      	subs	r3, r2, r3
 800a1c2:	4a1b      	ldr	r2, [pc, #108]	; (800a230 <pvPortMalloc+0x188>)
 800a1c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a1c6:	4b1a      	ldr	r3, [pc, #104]	; (800a230 <pvPortMalloc+0x188>)
 800a1c8:	681a      	ldr	r2, [r3, #0]
 800a1ca:	4b1b      	ldr	r3, [pc, #108]	; (800a238 <pvPortMalloc+0x190>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d203      	bcs.n	800a1da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a1d2:	4b17      	ldr	r3, [pc, #92]	; (800a230 <pvPortMalloc+0x188>)
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	4a18      	ldr	r2, [pc, #96]	; (800a238 <pvPortMalloc+0x190>)
 800a1d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a1da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1dc:	685a      	ldr	r2, [r3, #4]
 800a1de:	4b13      	ldr	r3, [pc, #76]	; (800a22c <pvPortMalloc+0x184>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	431a      	orrs	r2, r3
 800a1e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a1e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1ea:	2200      	movs	r2, #0
 800a1ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a1ee:	4b13      	ldr	r3, [pc, #76]	; (800a23c <pvPortMalloc+0x194>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	3301      	adds	r3, #1
 800a1f4:	4a11      	ldr	r2, [pc, #68]	; (800a23c <pvPortMalloc+0x194>)
 800a1f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a1f8:	f7fe fd06 	bl	8008c08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a1fc:	69fb      	ldr	r3, [r7, #28]
 800a1fe:	f003 0307 	and.w	r3, r3, #7
 800a202:	2b00      	cmp	r3, #0
 800a204:	d00a      	beq.n	800a21c <pvPortMalloc+0x174>
	__asm volatile
 800a206:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a20a:	f383 8811 	msr	BASEPRI, r3
 800a20e:	f3bf 8f6f 	isb	sy
 800a212:	f3bf 8f4f 	dsb	sy
 800a216:	60fb      	str	r3, [r7, #12]
}
 800a218:	bf00      	nop
 800a21a:	e7fe      	b.n	800a21a <pvPortMalloc+0x172>
	return pvReturn;
 800a21c:	69fb      	ldr	r3, [r7, #28]
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3728      	adds	r7, #40	; 0x28
 800a222:	46bd      	mov	sp, r7
 800a224:	bd80      	pop	{r7, pc}
 800a226:	bf00      	nop
 800a228:	20005298 	.word	0x20005298
 800a22c:	200052ac 	.word	0x200052ac
 800a230:	2000529c 	.word	0x2000529c
 800a234:	20005290 	.word	0x20005290
 800a238:	200052a0 	.word	0x200052a0
 800a23c:	200052a4 	.word	0x200052a4

0800a240 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a240:	b580      	push	{r7, lr}
 800a242:	b086      	sub	sp, #24
 800a244:	af00      	add	r7, sp, #0
 800a246:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d04d      	beq.n	800a2ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a252:	2308      	movs	r3, #8
 800a254:	425b      	negs	r3, r3
 800a256:	697a      	ldr	r2, [r7, #20]
 800a258:	4413      	add	r3, r2
 800a25a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a25c:	697b      	ldr	r3, [r7, #20]
 800a25e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a260:	693b      	ldr	r3, [r7, #16]
 800a262:	685a      	ldr	r2, [r3, #4]
 800a264:	4b24      	ldr	r3, [pc, #144]	; (800a2f8 <vPortFree+0xb8>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4013      	ands	r3, r2
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d10a      	bne.n	800a284 <vPortFree+0x44>
	__asm volatile
 800a26e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a272:	f383 8811 	msr	BASEPRI, r3
 800a276:	f3bf 8f6f 	isb	sy
 800a27a:	f3bf 8f4f 	dsb	sy
 800a27e:	60fb      	str	r3, [r7, #12]
}
 800a280:	bf00      	nop
 800a282:	e7fe      	b.n	800a282 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a284:	693b      	ldr	r3, [r7, #16]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d00a      	beq.n	800a2a2 <vPortFree+0x62>
	__asm volatile
 800a28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a290:	f383 8811 	msr	BASEPRI, r3
 800a294:	f3bf 8f6f 	isb	sy
 800a298:	f3bf 8f4f 	dsb	sy
 800a29c:	60bb      	str	r3, [r7, #8]
}
 800a29e:	bf00      	nop
 800a2a0:	e7fe      	b.n	800a2a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	685a      	ldr	r2, [r3, #4]
 800a2a6:	4b14      	ldr	r3, [pc, #80]	; (800a2f8 <vPortFree+0xb8>)
 800a2a8:	681b      	ldr	r3, [r3, #0]
 800a2aa:	4013      	ands	r3, r2
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d01e      	beq.n	800a2ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a2b0:	693b      	ldr	r3, [r7, #16]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d11a      	bne.n	800a2ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a2b8:	693b      	ldr	r3, [r7, #16]
 800a2ba:	685a      	ldr	r2, [r3, #4]
 800a2bc:	4b0e      	ldr	r3, [pc, #56]	; (800a2f8 <vPortFree+0xb8>)
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	43db      	mvns	r3, r3
 800a2c2:	401a      	ands	r2, r3
 800a2c4:	693b      	ldr	r3, [r7, #16]
 800a2c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a2c8:	f7fe fc90 	bl	8008bec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a2cc:	693b      	ldr	r3, [r7, #16]
 800a2ce:	685a      	ldr	r2, [r3, #4]
 800a2d0:	4b0a      	ldr	r3, [pc, #40]	; (800a2fc <vPortFree+0xbc>)
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4413      	add	r3, r2
 800a2d6:	4a09      	ldr	r2, [pc, #36]	; (800a2fc <vPortFree+0xbc>)
 800a2d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a2da:	6938      	ldr	r0, [r7, #16]
 800a2dc:	f000 f874 	bl	800a3c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a2e0:	4b07      	ldr	r3, [pc, #28]	; (800a300 <vPortFree+0xc0>)
 800a2e2:	681b      	ldr	r3, [r3, #0]
 800a2e4:	3301      	adds	r3, #1
 800a2e6:	4a06      	ldr	r2, [pc, #24]	; (800a300 <vPortFree+0xc0>)
 800a2e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a2ea:	f7fe fc8d 	bl	8008c08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a2ee:	bf00      	nop
 800a2f0:	3718      	adds	r7, #24
 800a2f2:	46bd      	mov	sp, r7
 800a2f4:	bd80      	pop	{r7, pc}
 800a2f6:	bf00      	nop
 800a2f8:	200052ac 	.word	0x200052ac
 800a2fc:	2000529c 	.word	0x2000529c
 800a300:	200052a8 	.word	0x200052a8

0800a304 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a304:	b480      	push	{r7}
 800a306:	b085      	sub	sp, #20
 800a308:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a30a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800a30e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a310:	4b27      	ldr	r3, [pc, #156]	; (800a3b0 <prvHeapInit+0xac>)
 800a312:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	f003 0307 	and.w	r3, r3, #7
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d00c      	beq.n	800a338 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	3307      	adds	r3, #7
 800a322:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	f023 0307 	bic.w	r3, r3, #7
 800a32a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a32c:	68ba      	ldr	r2, [r7, #8]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	1ad3      	subs	r3, r2, r3
 800a332:	4a1f      	ldr	r2, [pc, #124]	; (800a3b0 <prvHeapInit+0xac>)
 800a334:	4413      	add	r3, r2
 800a336:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a33c:	4a1d      	ldr	r2, [pc, #116]	; (800a3b4 <prvHeapInit+0xb0>)
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a342:	4b1c      	ldr	r3, [pc, #112]	; (800a3b4 <prvHeapInit+0xb0>)
 800a344:	2200      	movs	r2, #0
 800a346:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	68ba      	ldr	r2, [r7, #8]
 800a34c:	4413      	add	r3, r2
 800a34e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a350:	2208      	movs	r2, #8
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	1a9b      	subs	r3, r3, r2
 800a356:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	f023 0307 	bic.w	r3, r3, #7
 800a35e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	4a15      	ldr	r2, [pc, #84]	; (800a3b8 <prvHeapInit+0xb4>)
 800a364:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a366:	4b14      	ldr	r3, [pc, #80]	; (800a3b8 <prvHeapInit+0xb4>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	2200      	movs	r2, #0
 800a36c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a36e:	4b12      	ldr	r3, [pc, #72]	; (800a3b8 <prvHeapInit+0xb4>)
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	2200      	movs	r2, #0
 800a374:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	68fa      	ldr	r2, [r7, #12]
 800a37e:	1ad2      	subs	r2, r2, r3
 800a380:	683b      	ldr	r3, [r7, #0]
 800a382:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a384:	4b0c      	ldr	r3, [pc, #48]	; (800a3b8 <prvHeapInit+0xb4>)
 800a386:	681a      	ldr	r2, [r3, #0]
 800a388:	683b      	ldr	r3, [r7, #0]
 800a38a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	685b      	ldr	r3, [r3, #4]
 800a390:	4a0a      	ldr	r2, [pc, #40]	; (800a3bc <prvHeapInit+0xb8>)
 800a392:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a394:	683b      	ldr	r3, [r7, #0]
 800a396:	685b      	ldr	r3, [r3, #4]
 800a398:	4a09      	ldr	r2, [pc, #36]	; (800a3c0 <prvHeapInit+0xbc>)
 800a39a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a39c:	4b09      	ldr	r3, [pc, #36]	; (800a3c4 <prvHeapInit+0xc0>)
 800a39e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800a3a2:	601a      	str	r2, [r3, #0]
}
 800a3a4:	bf00      	nop
 800a3a6:	3714      	adds	r7, #20
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr
 800a3b0:	20001690 	.word	0x20001690
 800a3b4:	20005290 	.word	0x20005290
 800a3b8:	20005298 	.word	0x20005298
 800a3bc:	200052a0 	.word	0x200052a0
 800a3c0:	2000529c 	.word	0x2000529c
 800a3c4:	200052ac 	.word	0x200052ac

0800a3c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b085      	sub	sp, #20
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a3d0:	4b28      	ldr	r3, [pc, #160]	; (800a474 <prvInsertBlockIntoFreeList+0xac>)
 800a3d2:	60fb      	str	r3, [r7, #12]
 800a3d4:	e002      	b.n	800a3dc <prvInsertBlockIntoFreeList+0x14>
 800a3d6:	68fb      	ldr	r3, [r7, #12]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	60fb      	str	r3, [r7, #12]
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	687a      	ldr	r2, [r7, #4]
 800a3e2:	429a      	cmp	r2, r3
 800a3e4:	d8f7      	bhi.n	800a3d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	68ba      	ldr	r2, [r7, #8]
 800a3f0:	4413      	add	r3, r2
 800a3f2:	687a      	ldr	r2, [r7, #4]
 800a3f4:	429a      	cmp	r2, r3
 800a3f6:	d108      	bne.n	800a40a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	685a      	ldr	r2, [r3, #4]
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	685b      	ldr	r3, [r3, #4]
 800a400:	441a      	add	r2, r3
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	685b      	ldr	r3, [r3, #4]
 800a412:	68ba      	ldr	r2, [r7, #8]
 800a414:	441a      	add	r2, r3
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d118      	bne.n	800a450 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681a      	ldr	r2, [r3, #0]
 800a422:	4b15      	ldr	r3, [pc, #84]	; (800a478 <prvInsertBlockIntoFreeList+0xb0>)
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	429a      	cmp	r2, r3
 800a428:	d00d      	beq.n	800a446 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	685a      	ldr	r2, [r3, #4]
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	685b      	ldr	r3, [r3, #4]
 800a434:	441a      	add	r2, r3
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	681a      	ldr	r2, [r3, #0]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	601a      	str	r2, [r3, #0]
 800a444:	e008      	b.n	800a458 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a446:	4b0c      	ldr	r3, [pc, #48]	; (800a478 <prvInsertBlockIntoFreeList+0xb0>)
 800a448:	681a      	ldr	r2, [r3, #0]
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	601a      	str	r2, [r3, #0]
 800a44e:	e003      	b.n	800a458 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a458:	68fa      	ldr	r2, [r7, #12]
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	429a      	cmp	r2, r3
 800a45e:	d002      	beq.n	800a466 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	687a      	ldr	r2, [r7, #4]
 800a464:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a466:	bf00      	nop
 800a468:	3714      	adds	r7, #20
 800a46a:	46bd      	mov	sp, r7
 800a46c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a470:	4770      	bx	lr
 800a472:	bf00      	nop
 800a474:	20005290 	.word	0x20005290
 800a478:	20005298 	.word	0x20005298

0800a47c <__errno>:
 800a47c:	4b01      	ldr	r3, [pc, #4]	; (800a484 <__errno+0x8>)
 800a47e:	6818      	ldr	r0, [r3, #0]
 800a480:	4770      	bx	lr
 800a482:	bf00      	nop
 800a484:	2000004c 	.word	0x2000004c

0800a488 <__libc_init_array>:
 800a488:	b570      	push	{r4, r5, r6, lr}
 800a48a:	4d0d      	ldr	r5, [pc, #52]	; (800a4c0 <__libc_init_array+0x38>)
 800a48c:	4c0d      	ldr	r4, [pc, #52]	; (800a4c4 <__libc_init_array+0x3c>)
 800a48e:	1b64      	subs	r4, r4, r5
 800a490:	10a4      	asrs	r4, r4, #2
 800a492:	2600      	movs	r6, #0
 800a494:	42a6      	cmp	r6, r4
 800a496:	d109      	bne.n	800a4ac <__libc_init_array+0x24>
 800a498:	4d0b      	ldr	r5, [pc, #44]	; (800a4c8 <__libc_init_array+0x40>)
 800a49a:	4c0c      	ldr	r4, [pc, #48]	; (800a4cc <__libc_init_array+0x44>)
 800a49c:	f003 fe42 	bl	800e124 <_init>
 800a4a0:	1b64      	subs	r4, r4, r5
 800a4a2:	10a4      	asrs	r4, r4, #2
 800a4a4:	2600      	movs	r6, #0
 800a4a6:	42a6      	cmp	r6, r4
 800a4a8:	d105      	bne.n	800a4b6 <__libc_init_array+0x2e>
 800a4aa:	bd70      	pop	{r4, r5, r6, pc}
 800a4ac:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4b0:	4798      	blx	r3
 800a4b2:	3601      	adds	r6, #1
 800a4b4:	e7ee      	b.n	800a494 <__libc_init_array+0xc>
 800a4b6:	f855 3b04 	ldr.w	r3, [r5], #4
 800a4ba:	4798      	blx	r3
 800a4bc:	3601      	adds	r6, #1
 800a4be:	e7f2      	b.n	800a4a6 <__libc_init_array+0x1e>
 800a4c0:	0800f148 	.word	0x0800f148
 800a4c4:	0800f148 	.word	0x0800f148
 800a4c8:	0800f148 	.word	0x0800f148
 800a4cc:	0800f14c 	.word	0x0800f14c

0800a4d0 <memcpy>:
 800a4d0:	440a      	add	r2, r1
 800a4d2:	4291      	cmp	r1, r2
 800a4d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4d8:	d100      	bne.n	800a4dc <memcpy+0xc>
 800a4da:	4770      	bx	lr
 800a4dc:	b510      	push	{r4, lr}
 800a4de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4e6:	4291      	cmp	r1, r2
 800a4e8:	d1f9      	bne.n	800a4de <memcpy+0xe>
 800a4ea:	bd10      	pop	{r4, pc}

0800a4ec <memset>:
 800a4ec:	4402      	add	r2, r0
 800a4ee:	4603      	mov	r3, r0
 800a4f0:	4293      	cmp	r3, r2
 800a4f2:	d100      	bne.n	800a4f6 <memset+0xa>
 800a4f4:	4770      	bx	lr
 800a4f6:	f803 1b01 	strb.w	r1, [r3], #1
 800a4fa:	e7f9      	b.n	800a4f0 <memset+0x4>

0800a4fc <__cvt>:
 800a4fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a500:	ec55 4b10 	vmov	r4, r5, d0
 800a504:	2d00      	cmp	r5, #0
 800a506:	460e      	mov	r6, r1
 800a508:	4619      	mov	r1, r3
 800a50a:	462b      	mov	r3, r5
 800a50c:	bfbb      	ittet	lt
 800a50e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a512:	461d      	movlt	r5, r3
 800a514:	2300      	movge	r3, #0
 800a516:	232d      	movlt	r3, #45	; 0x2d
 800a518:	700b      	strb	r3, [r1, #0]
 800a51a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a51c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a520:	4691      	mov	r9, r2
 800a522:	f023 0820 	bic.w	r8, r3, #32
 800a526:	bfbc      	itt	lt
 800a528:	4622      	movlt	r2, r4
 800a52a:	4614      	movlt	r4, r2
 800a52c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a530:	d005      	beq.n	800a53e <__cvt+0x42>
 800a532:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a536:	d100      	bne.n	800a53a <__cvt+0x3e>
 800a538:	3601      	adds	r6, #1
 800a53a:	2102      	movs	r1, #2
 800a53c:	e000      	b.n	800a540 <__cvt+0x44>
 800a53e:	2103      	movs	r1, #3
 800a540:	ab03      	add	r3, sp, #12
 800a542:	9301      	str	r3, [sp, #4]
 800a544:	ab02      	add	r3, sp, #8
 800a546:	9300      	str	r3, [sp, #0]
 800a548:	ec45 4b10 	vmov	d0, r4, r5
 800a54c:	4653      	mov	r3, sl
 800a54e:	4632      	mov	r2, r6
 800a550:	f000 fcea 	bl	800af28 <_dtoa_r>
 800a554:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a558:	4607      	mov	r7, r0
 800a55a:	d102      	bne.n	800a562 <__cvt+0x66>
 800a55c:	f019 0f01 	tst.w	r9, #1
 800a560:	d022      	beq.n	800a5a8 <__cvt+0xac>
 800a562:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a566:	eb07 0906 	add.w	r9, r7, r6
 800a56a:	d110      	bne.n	800a58e <__cvt+0x92>
 800a56c:	783b      	ldrb	r3, [r7, #0]
 800a56e:	2b30      	cmp	r3, #48	; 0x30
 800a570:	d10a      	bne.n	800a588 <__cvt+0x8c>
 800a572:	2200      	movs	r2, #0
 800a574:	2300      	movs	r3, #0
 800a576:	4620      	mov	r0, r4
 800a578:	4629      	mov	r1, r5
 800a57a:	f7f6 faa5 	bl	8000ac8 <__aeabi_dcmpeq>
 800a57e:	b918      	cbnz	r0, 800a588 <__cvt+0x8c>
 800a580:	f1c6 0601 	rsb	r6, r6, #1
 800a584:	f8ca 6000 	str.w	r6, [sl]
 800a588:	f8da 3000 	ldr.w	r3, [sl]
 800a58c:	4499      	add	r9, r3
 800a58e:	2200      	movs	r2, #0
 800a590:	2300      	movs	r3, #0
 800a592:	4620      	mov	r0, r4
 800a594:	4629      	mov	r1, r5
 800a596:	f7f6 fa97 	bl	8000ac8 <__aeabi_dcmpeq>
 800a59a:	b108      	cbz	r0, 800a5a0 <__cvt+0xa4>
 800a59c:	f8cd 900c 	str.w	r9, [sp, #12]
 800a5a0:	2230      	movs	r2, #48	; 0x30
 800a5a2:	9b03      	ldr	r3, [sp, #12]
 800a5a4:	454b      	cmp	r3, r9
 800a5a6:	d307      	bcc.n	800a5b8 <__cvt+0xbc>
 800a5a8:	9b03      	ldr	r3, [sp, #12]
 800a5aa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a5ac:	1bdb      	subs	r3, r3, r7
 800a5ae:	4638      	mov	r0, r7
 800a5b0:	6013      	str	r3, [r2, #0]
 800a5b2:	b004      	add	sp, #16
 800a5b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5b8:	1c59      	adds	r1, r3, #1
 800a5ba:	9103      	str	r1, [sp, #12]
 800a5bc:	701a      	strb	r2, [r3, #0]
 800a5be:	e7f0      	b.n	800a5a2 <__cvt+0xa6>

0800a5c0 <__exponent>:
 800a5c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a5c2:	4603      	mov	r3, r0
 800a5c4:	2900      	cmp	r1, #0
 800a5c6:	bfb8      	it	lt
 800a5c8:	4249      	neglt	r1, r1
 800a5ca:	f803 2b02 	strb.w	r2, [r3], #2
 800a5ce:	bfb4      	ite	lt
 800a5d0:	222d      	movlt	r2, #45	; 0x2d
 800a5d2:	222b      	movge	r2, #43	; 0x2b
 800a5d4:	2909      	cmp	r1, #9
 800a5d6:	7042      	strb	r2, [r0, #1]
 800a5d8:	dd2a      	ble.n	800a630 <__exponent+0x70>
 800a5da:	f10d 0407 	add.w	r4, sp, #7
 800a5de:	46a4      	mov	ip, r4
 800a5e0:	270a      	movs	r7, #10
 800a5e2:	46a6      	mov	lr, r4
 800a5e4:	460a      	mov	r2, r1
 800a5e6:	fb91 f6f7 	sdiv	r6, r1, r7
 800a5ea:	fb07 1516 	mls	r5, r7, r6, r1
 800a5ee:	3530      	adds	r5, #48	; 0x30
 800a5f0:	2a63      	cmp	r2, #99	; 0x63
 800a5f2:	f104 34ff 	add.w	r4, r4, #4294967295
 800a5f6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a5fa:	4631      	mov	r1, r6
 800a5fc:	dcf1      	bgt.n	800a5e2 <__exponent+0x22>
 800a5fe:	3130      	adds	r1, #48	; 0x30
 800a600:	f1ae 0502 	sub.w	r5, lr, #2
 800a604:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a608:	1c44      	adds	r4, r0, #1
 800a60a:	4629      	mov	r1, r5
 800a60c:	4561      	cmp	r1, ip
 800a60e:	d30a      	bcc.n	800a626 <__exponent+0x66>
 800a610:	f10d 0209 	add.w	r2, sp, #9
 800a614:	eba2 020e 	sub.w	r2, r2, lr
 800a618:	4565      	cmp	r5, ip
 800a61a:	bf88      	it	hi
 800a61c:	2200      	movhi	r2, #0
 800a61e:	4413      	add	r3, r2
 800a620:	1a18      	subs	r0, r3, r0
 800a622:	b003      	add	sp, #12
 800a624:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a626:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a62a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a62e:	e7ed      	b.n	800a60c <__exponent+0x4c>
 800a630:	2330      	movs	r3, #48	; 0x30
 800a632:	3130      	adds	r1, #48	; 0x30
 800a634:	7083      	strb	r3, [r0, #2]
 800a636:	70c1      	strb	r1, [r0, #3]
 800a638:	1d03      	adds	r3, r0, #4
 800a63a:	e7f1      	b.n	800a620 <__exponent+0x60>

0800a63c <_printf_float>:
 800a63c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a640:	ed2d 8b02 	vpush	{d8}
 800a644:	b08d      	sub	sp, #52	; 0x34
 800a646:	460c      	mov	r4, r1
 800a648:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a64c:	4616      	mov	r6, r2
 800a64e:	461f      	mov	r7, r3
 800a650:	4605      	mov	r5, r0
 800a652:	f001 fa57 	bl	800bb04 <_localeconv_r>
 800a656:	f8d0 a000 	ldr.w	sl, [r0]
 800a65a:	4650      	mov	r0, sl
 800a65c:	f7f5 fdb8 	bl	80001d0 <strlen>
 800a660:	2300      	movs	r3, #0
 800a662:	930a      	str	r3, [sp, #40]	; 0x28
 800a664:	6823      	ldr	r3, [r4, #0]
 800a666:	9305      	str	r3, [sp, #20]
 800a668:	f8d8 3000 	ldr.w	r3, [r8]
 800a66c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a670:	3307      	adds	r3, #7
 800a672:	f023 0307 	bic.w	r3, r3, #7
 800a676:	f103 0208 	add.w	r2, r3, #8
 800a67a:	f8c8 2000 	str.w	r2, [r8]
 800a67e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a682:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a686:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a68a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a68e:	9307      	str	r3, [sp, #28]
 800a690:	f8cd 8018 	str.w	r8, [sp, #24]
 800a694:	ee08 0a10 	vmov	s16, r0
 800a698:	4b9f      	ldr	r3, [pc, #636]	; (800a918 <_printf_float+0x2dc>)
 800a69a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a69e:	f04f 32ff 	mov.w	r2, #4294967295
 800a6a2:	f7f6 fa43 	bl	8000b2c <__aeabi_dcmpun>
 800a6a6:	bb88      	cbnz	r0, 800a70c <_printf_float+0xd0>
 800a6a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a6ac:	4b9a      	ldr	r3, [pc, #616]	; (800a918 <_printf_float+0x2dc>)
 800a6ae:	f04f 32ff 	mov.w	r2, #4294967295
 800a6b2:	f7f6 fa1d 	bl	8000af0 <__aeabi_dcmple>
 800a6b6:	bb48      	cbnz	r0, 800a70c <_printf_float+0xd0>
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	4640      	mov	r0, r8
 800a6be:	4649      	mov	r1, r9
 800a6c0:	f7f6 fa0c 	bl	8000adc <__aeabi_dcmplt>
 800a6c4:	b110      	cbz	r0, 800a6cc <_printf_float+0x90>
 800a6c6:	232d      	movs	r3, #45	; 0x2d
 800a6c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6cc:	4b93      	ldr	r3, [pc, #588]	; (800a91c <_printf_float+0x2e0>)
 800a6ce:	4894      	ldr	r0, [pc, #592]	; (800a920 <_printf_float+0x2e4>)
 800a6d0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a6d4:	bf94      	ite	ls
 800a6d6:	4698      	movls	r8, r3
 800a6d8:	4680      	movhi	r8, r0
 800a6da:	2303      	movs	r3, #3
 800a6dc:	6123      	str	r3, [r4, #16]
 800a6de:	9b05      	ldr	r3, [sp, #20]
 800a6e0:	f023 0204 	bic.w	r2, r3, #4
 800a6e4:	6022      	str	r2, [r4, #0]
 800a6e6:	f04f 0900 	mov.w	r9, #0
 800a6ea:	9700      	str	r7, [sp, #0]
 800a6ec:	4633      	mov	r3, r6
 800a6ee:	aa0b      	add	r2, sp, #44	; 0x2c
 800a6f0:	4621      	mov	r1, r4
 800a6f2:	4628      	mov	r0, r5
 800a6f4:	f000 f9d8 	bl	800aaa8 <_printf_common>
 800a6f8:	3001      	adds	r0, #1
 800a6fa:	f040 8090 	bne.w	800a81e <_printf_float+0x1e2>
 800a6fe:	f04f 30ff 	mov.w	r0, #4294967295
 800a702:	b00d      	add	sp, #52	; 0x34
 800a704:	ecbd 8b02 	vpop	{d8}
 800a708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a70c:	4642      	mov	r2, r8
 800a70e:	464b      	mov	r3, r9
 800a710:	4640      	mov	r0, r8
 800a712:	4649      	mov	r1, r9
 800a714:	f7f6 fa0a 	bl	8000b2c <__aeabi_dcmpun>
 800a718:	b140      	cbz	r0, 800a72c <_printf_float+0xf0>
 800a71a:	464b      	mov	r3, r9
 800a71c:	2b00      	cmp	r3, #0
 800a71e:	bfbc      	itt	lt
 800a720:	232d      	movlt	r3, #45	; 0x2d
 800a722:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a726:	487f      	ldr	r0, [pc, #508]	; (800a924 <_printf_float+0x2e8>)
 800a728:	4b7f      	ldr	r3, [pc, #508]	; (800a928 <_printf_float+0x2ec>)
 800a72a:	e7d1      	b.n	800a6d0 <_printf_float+0x94>
 800a72c:	6863      	ldr	r3, [r4, #4]
 800a72e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a732:	9206      	str	r2, [sp, #24]
 800a734:	1c5a      	adds	r2, r3, #1
 800a736:	d13f      	bne.n	800a7b8 <_printf_float+0x17c>
 800a738:	2306      	movs	r3, #6
 800a73a:	6063      	str	r3, [r4, #4]
 800a73c:	9b05      	ldr	r3, [sp, #20]
 800a73e:	6861      	ldr	r1, [r4, #4]
 800a740:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a744:	2300      	movs	r3, #0
 800a746:	9303      	str	r3, [sp, #12]
 800a748:	ab0a      	add	r3, sp, #40	; 0x28
 800a74a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a74e:	ab09      	add	r3, sp, #36	; 0x24
 800a750:	ec49 8b10 	vmov	d0, r8, r9
 800a754:	9300      	str	r3, [sp, #0]
 800a756:	6022      	str	r2, [r4, #0]
 800a758:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a75c:	4628      	mov	r0, r5
 800a75e:	f7ff fecd 	bl	800a4fc <__cvt>
 800a762:	9b06      	ldr	r3, [sp, #24]
 800a764:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a766:	2b47      	cmp	r3, #71	; 0x47
 800a768:	4680      	mov	r8, r0
 800a76a:	d108      	bne.n	800a77e <_printf_float+0x142>
 800a76c:	1cc8      	adds	r0, r1, #3
 800a76e:	db02      	blt.n	800a776 <_printf_float+0x13a>
 800a770:	6863      	ldr	r3, [r4, #4]
 800a772:	4299      	cmp	r1, r3
 800a774:	dd41      	ble.n	800a7fa <_printf_float+0x1be>
 800a776:	f1ab 0b02 	sub.w	fp, fp, #2
 800a77a:	fa5f fb8b 	uxtb.w	fp, fp
 800a77e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a782:	d820      	bhi.n	800a7c6 <_printf_float+0x18a>
 800a784:	3901      	subs	r1, #1
 800a786:	465a      	mov	r2, fp
 800a788:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a78c:	9109      	str	r1, [sp, #36]	; 0x24
 800a78e:	f7ff ff17 	bl	800a5c0 <__exponent>
 800a792:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a794:	1813      	adds	r3, r2, r0
 800a796:	2a01      	cmp	r2, #1
 800a798:	4681      	mov	r9, r0
 800a79a:	6123      	str	r3, [r4, #16]
 800a79c:	dc02      	bgt.n	800a7a4 <_printf_float+0x168>
 800a79e:	6822      	ldr	r2, [r4, #0]
 800a7a0:	07d2      	lsls	r2, r2, #31
 800a7a2:	d501      	bpl.n	800a7a8 <_printf_float+0x16c>
 800a7a4:	3301      	adds	r3, #1
 800a7a6:	6123      	str	r3, [r4, #16]
 800a7a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a7ac:	2b00      	cmp	r3, #0
 800a7ae:	d09c      	beq.n	800a6ea <_printf_float+0xae>
 800a7b0:	232d      	movs	r3, #45	; 0x2d
 800a7b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7b6:	e798      	b.n	800a6ea <_printf_float+0xae>
 800a7b8:	9a06      	ldr	r2, [sp, #24]
 800a7ba:	2a47      	cmp	r2, #71	; 0x47
 800a7bc:	d1be      	bne.n	800a73c <_printf_float+0x100>
 800a7be:	2b00      	cmp	r3, #0
 800a7c0:	d1bc      	bne.n	800a73c <_printf_float+0x100>
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	e7b9      	b.n	800a73a <_printf_float+0xfe>
 800a7c6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a7ca:	d118      	bne.n	800a7fe <_printf_float+0x1c2>
 800a7cc:	2900      	cmp	r1, #0
 800a7ce:	6863      	ldr	r3, [r4, #4]
 800a7d0:	dd0b      	ble.n	800a7ea <_printf_float+0x1ae>
 800a7d2:	6121      	str	r1, [r4, #16]
 800a7d4:	b913      	cbnz	r3, 800a7dc <_printf_float+0x1a0>
 800a7d6:	6822      	ldr	r2, [r4, #0]
 800a7d8:	07d0      	lsls	r0, r2, #31
 800a7da:	d502      	bpl.n	800a7e2 <_printf_float+0x1a6>
 800a7dc:	3301      	adds	r3, #1
 800a7de:	440b      	add	r3, r1
 800a7e0:	6123      	str	r3, [r4, #16]
 800a7e2:	65a1      	str	r1, [r4, #88]	; 0x58
 800a7e4:	f04f 0900 	mov.w	r9, #0
 800a7e8:	e7de      	b.n	800a7a8 <_printf_float+0x16c>
 800a7ea:	b913      	cbnz	r3, 800a7f2 <_printf_float+0x1b6>
 800a7ec:	6822      	ldr	r2, [r4, #0]
 800a7ee:	07d2      	lsls	r2, r2, #31
 800a7f0:	d501      	bpl.n	800a7f6 <_printf_float+0x1ba>
 800a7f2:	3302      	adds	r3, #2
 800a7f4:	e7f4      	b.n	800a7e0 <_printf_float+0x1a4>
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	e7f2      	b.n	800a7e0 <_printf_float+0x1a4>
 800a7fa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a7fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a800:	4299      	cmp	r1, r3
 800a802:	db05      	blt.n	800a810 <_printf_float+0x1d4>
 800a804:	6823      	ldr	r3, [r4, #0]
 800a806:	6121      	str	r1, [r4, #16]
 800a808:	07d8      	lsls	r0, r3, #31
 800a80a:	d5ea      	bpl.n	800a7e2 <_printf_float+0x1a6>
 800a80c:	1c4b      	adds	r3, r1, #1
 800a80e:	e7e7      	b.n	800a7e0 <_printf_float+0x1a4>
 800a810:	2900      	cmp	r1, #0
 800a812:	bfd4      	ite	le
 800a814:	f1c1 0202 	rsble	r2, r1, #2
 800a818:	2201      	movgt	r2, #1
 800a81a:	4413      	add	r3, r2
 800a81c:	e7e0      	b.n	800a7e0 <_printf_float+0x1a4>
 800a81e:	6823      	ldr	r3, [r4, #0]
 800a820:	055a      	lsls	r2, r3, #21
 800a822:	d407      	bmi.n	800a834 <_printf_float+0x1f8>
 800a824:	6923      	ldr	r3, [r4, #16]
 800a826:	4642      	mov	r2, r8
 800a828:	4631      	mov	r1, r6
 800a82a:	4628      	mov	r0, r5
 800a82c:	47b8      	blx	r7
 800a82e:	3001      	adds	r0, #1
 800a830:	d12c      	bne.n	800a88c <_printf_float+0x250>
 800a832:	e764      	b.n	800a6fe <_printf_float+0xc2>
 800a834:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a838:	f240 80e0 	bls.w	800a9fc <_printf_float+0x3c0>
 800a83c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a840:	2200      	movs	r2, #0
 800a842:	2300      	movs	r3, #0
 800a844:	f7f6 f940 	bl	8000ac8 <__aeabi_dcmpeq>
 800a848:	2800      	cmp	r0, #0
 800a84a:	d034      	beq.n	800a8b6 <_printf_float+0x27a>
 800a84c:	4a37      	ldr	r2, [pc, #220]	; (800a92c <_printf_float+0x2f0>)
 800a84e:	2301      	movs	r3, #1
 800a850:	4631      	mov	r1, r6
 800a852:	4628      	mov	r0, r5
 800a854:	47b8      	blx	r7
 800a856:	3001      	adds	r0, #1
 800a858:	f43f af51 	beq.w	800a6fe <_printf_float+0xc2>
 800a85c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a860:	429a      	cmp	r2, r3
 800a862:	db02      	blt.n	800a86a <_printf_float+0x22e>
 800a864:	6823      	ldr	r3, [r4, #0]
 800a866:	07d8      	lsls	r0, r3, #31
 800a868:	d510      	bpl.n	800a88c <_printf_float+0x250>
 800a86a:	ee18 3a10 	vmov	r3, s16
 800a86e:	4652      	mov	r2, sl
 800a870:	4631      	mov	r1, r6
 800a872:	4628      	mov	r0, r5
 800a874:	47b8      	blx	r7
 800a876:	3001      	adds	r0, #1
 800a878:	f43f af41 	beq.w	800a6fe <_printf_float+0xc2>
 800a87c:	f04f 0800 	mov.w	r8, #0
 800a880:	f104 091a 	add.w	r9, r4, #26
 800a884:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a886:	3b01      	subs	r3, #1
 800a888:	4543      	cmp	r3, r8
 800a88a:	dc09      	bgt.n	800a8a0 <_printf_float+0x264>
 800a88c:	6823      	ldr	r3, [r4, #0]
 800a88e:	079b      	lsls	r3, r3, #30
 800a890:	f100 8105 	bmi.w	800aa9e <_printf_float+0x462>
 800a894:	68e0      	ldr	r0, [r4, #12]
 800a896:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a898:	4298      	cmp	r0, r3
 800a89a:	bfb8      	it	lt
 800a89c:	4618      	movlt	r0, r3
 800a89e:	e730      	b.n	800a702 <_printf_float+0xc6>
 800a8a0:	2301      	movs	r3, #1
 800a8a2:	464a      	mov	r2, r9
 800a8a4:	4631      	mov	r1, r6
 800a8a6:	4628      	mov	r0, r5
 800a8a8:	47b8      	blx	r7
 800a8aa:	3001      	adds	r0, #1
 800a8ac:	f43f af27 	beq.w	800a6fe <_printf_float+0xc2>
 800a8b0:	f108 0801 	add.w	r8, r8, #1
 800a8b4:	e7e6      	b.n	800a884 <_printf_float+0x248>
 800a8b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	dc39      	bgt.n	800a930 <_printf_float+0x2f4>
 800a8bc:	4a1b      	ldr	r2, [pc, #108]	; (800a92c <_printf_float+0x2f0>)
 800a8be:	2301      	movs	r3, #1
 800a8c0:	4631      	mov	r1, r6
 800a8c2:	4628      	mov	r0, r5
 800a8c4:	47b8      	blx	r7
 800a8c6:	3001      	adds	r0, #1
 800a8c8:	f43f af19 	beq.w	800a6fe <_printf_float+0xc2>
 800a8cc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a8d0:	4313      	orrs	r3, r2
 800a8d2:	d102      	bne.n	800a8da <_printf_float+0x29e>
 800a8d4:	6823      	ldr	r3, [r4, #0]
 800a8d6:	07d9      	lsls	r1, r3, #31
 800a8d8:	d5d8      	bpl.n	800a88c <_printf_float+0x250>
 800a8da:	ee18 3a10 	vmov	r3, s16
 800a8de:	4652      	mov	r2, sl
 800a8e0:	4631      	mov	r1, r6
 800a8e2:	4628      	mov	r0, r5
 800a8e4:	47b8      	blx	r7
 800a8e6:	3001      	adds	r0, #1
 800a8e8:	f43f af09 	beq.w	800a6fe <_printf_float+0xc2>
 800a8ec:	f04f 0900 	mov.w	r9, #0
 800a8f0:	f104 0a1a 	add.w	sl, r4, #26
 800a8f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8f6:	425b      	negs	r3, r3
 800a8f8:	454b      	cmp	r3, r9
 800a8fa:	dc01      	bgt.n	800a900 <_printf_float+0x2c4>
 800a8fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8fe:	e792      	b.n	800a826 <_printf_float+0x1ea>
 800a900:	2301      	movs	r3, #1
 800a902:	4652      	mov	r2, sl
 800a904:	4631      	mov	r1, r6
 800a906:	4628      	mov	r0, r5
 800a908:	47b8      	blx	r7
 800a90a:	3001      	adds	r0, #1
 800a90c:	f43f aef7 	beq.w	800a6fe <_printf_float+0xc2>
 800a910:	f109 0901 	add.w	r9, r9, #1
 800a914:	e7ee      	b.n	800a8f4 <_printf_float+0x2b8>
 800a916:	bf00      	nop
 800a918:	7fefffff 	.word	0x7fefffff
 800a91c:	0800ed34 	.word	0x0800ed34
 800a920:	0800ed38 	.word	0x0800ed38
 800a924:	0800ed40 	.word	0x0800ed40
 800a928:	0800ed3c 	.word	0x0800ed3c
 800a92c:	0800ed44 	.word	0x0800ed44
 800a930:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a932:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a934:	429a      	cmp	r2, r3
 800a936:	bfa8      	it	ge
 800a938:	461a      	movge	r2, r3
 800a93a:	2a00      	cmp	r2, #0
 800a93c:	4691      	mov	r9, r2
 800a93e:	dc37      	bgt.n	800a9b0 <_printf_float+0x374>
 800a940:	f04f 0b00 	mov.w	fp, #0
 800a944:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a948:	f104 021a 	add.w	r2, r4, #26
 800a94c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a94e:	9305      	str	r3, [sp, #20]
 800a950:	eba3 0309 	sub.w	r3, r3, r9
 800a954:	455b      	cmp	r3, fp
 800a956:	dc33      	bgt.n	800a9c0 <_printf_float+0x384>
 800a958:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a95c:	429a      	cmp	r2, r3
 800a95e:	db3b      	blt.n	800a9d8 <_printf_float+0x39c>
 800a960:	6823      	ldr	r3, [r4, #0]
 800a962:	07da      	lsls	r2, r3, #31
 800a964:	d438      	bmi.n	800a9d8 <_printf_float+0x39c>
 800a966:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a968:	9a05      	ldr	r2, [sp, #20]
 800a96a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a96c:	1a9a      	subs	r2, r3, r2
 800a96e:	eba3 0901 	sub.w	r9, r3, r1
 800a972:	4591      	cmp	r9, r2
 800a974:	bfa8      	it	ge
 800a976:	4691      	movge	r9, r2
 800a978:	f1b9 0f00 	cmp.w	r9, #0
 800a97c:	dc35      	bgt.n	800a9ea <_printf_float+0x3ae>
 800a97e:	f04f 0800 	mov.w	r8, #0
 800a982:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a986:	f104 0a1a 	add.w	sl, r4, #26
 800a98a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a98e:	1a9b      	subs	r3, r3, r2
 800a990:	eba3 0309 	sub.w	r3, r3, r9
 800a994:	4543      	cmp	r3, r8
 800a996:	f77f af79 	ble.w	800a88c <_printf_float+0x250>
 800a99a:	2301      	movs	r3, #1
 800a99c:	4652      	mov	r2, sl
 800a99e:	4631      	mov	r1, r6
 800a9a0:	4628      	mov	r0, r5
 800a9a2:	47b8      	blx	r7
 800a9a4:	3001      	adds	r0, #1
 800a9a6:	f43f aeaa 	beq.w	800a6fe <_printf_float+0xc2>
 800a9aa:	f108 0801 	add.w	r8, r8, #1
 800a9ae:	e7ec      	b.n	800a98a <_printf_float+0x34e>
 800a9b0:	4613      	mov	r3, r2
 800a9b2:	4631      	mov	r1, r6
 800a9b4:	4642      	mov	r2, r8
 800a9b6:	4628      	mov	r0, r5
 800a9b8:	47b8      	blx	r7
 800a9ba:	3001      	adds	r0, #1
 800a9bc:	d1c0      	bne.n	800a940 <_printf_float+0x304>
 800a9be:	e69e      	b.n	800a6fe <_printf_float+0xc2>
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	4631      	mov	r1, r6
 800a9c4:	4628      	mov	r0, r5
 800a9c6:	9205      	str	r2, [sp, #20]
 800a9c8:	47b8      	blx	r7
 800a9ca:	3001      	adds	r0, #1
 800a9cc:	f43f ae97 	beq.w	800a6fe <_printf_float+0xc2>
 800a9d0:	9a05      	ldr	r2, [sp, #20]
 800a9d2:	f10b 0b01 	add.w	fp, fp, #1
 800a9d6:	e7b9      	b.n	800a94c <_printf_float+0x310>
 800a9d8:	ee18 3a10 	vmov	r3, s16
 800a9dc:	4652      	mov	r2, sl
 800a9de:	4631      	mov	r1, r6
 800a9e0:	4628      	mov	r0, r5
 800a9e2:	47b8      	blx	r7
 800a9e4:	3001      	adds	r0, #1
 800a9e6:	d1be      	bne.n	800a966 <_printf_float+0x32a>
 800a9e8:	e689      	b.n	800a6fe <_printf_float+0xc2>
 800a9ea:	9a05      	ldr	r2, [sp, #20]
 800a9ec:	464b      	mov	r3, r9
 800a9ee:	4442      	add	r2, r8
 800a9f0:	4631      	mov	r1, r6
 800a9f2:	4628      	mov	r0, r5
 800a9f4:	47b8      	blx	r7
 800a9f6:	3001      	adds	r0, #1
 800a9f8:	d1c1      	bne.n	800a97e <_printf_float+0x342>
 800a9fa:	e680      	b.n	800a6fe <_printf_float+0xc2>
 800a9fc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9fe:	2a01      	cmp	r2, #1
 800aa00:	dc01      	bgt.n	800aa06 <_printf_float+0x3ca>
 800aa02:	07db      	lsls	r3, r3, #31
 800aa04:	d538      	bpl.n	800aa78 <_printf_float+0x43c>
 800aa06:	2301      	movs	r3, #1
 800aa08:	4642      	mov	r2, r8
 800aa0a:	4631      	mov	r1, r6
 800aa0c:	4628      	mov	r0, r5
 800aa0e:	47b8      	blx	r7
 800aa10:	3001      	adds	r0, #1
 800aa12:	f43f ae74 	beq.w	800a6fe <_printf_float+0xc2>
 800aa16:	ee18 3a10 	vmov	r3, s16
 800aa1a:	4652      	mov	r2, sl
 800aa1c:	4631      	mov	r1, r6
 800aa1e:	4628      	mov	r0, r5
 800aa20:	47b8      	blx	r7
 800aa22:	3001      	adds	r0, #1
 800aa24:	f43f ae6b 	beq.w	800a6fe <_printf_float+0xc2>
 800aa28:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800aa2c:	2200      	movs	r2, #0
 800aa2e:	2300      	movs	r3, #0
 800aa30:	f7f6 f84a 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa34:	b9d8      	cbnz	r0, 800aa6e <_printf_float+0x432>
 800aa36:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa38:	f108 0201 	add.w	r2, r8, #1
 800aa3c:	3b01      	subs	r3, #1
 800aa3e:	4631      	mov	r1, r6
 800aa40:	4628      	mov	r0, r5
 800aa42:	47b8      	blx	r7
 800aa44:	3001      	adds	r0, #1
 800aa46:	d10e      	bne.n	800aa66 <_printf_float+0x42a>
 800aa48:	e659      	b.n	800a6fe <_printf_float+0xc2>
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	4652      	mov	r2, sl
 800aa4e:	4631      	mov	r1, r6
 800aa50:	4628      	mov	r0, r5
 800aa52:	47b8      	blx	r7
 800aa54:	3001      	adds	r0, #1
 800aa56:	f43f ae52 	beq.w	800a6fe <_printf_float+0xc2>
 800aa5a:	f108 0801 	add.w	r8, r8, #1
 800aa5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa60:	3b01      	subs	r3, #1
 800aa62:	4543      	cmp	r3, r8
 800aa64:	dcf1      	bgt.n	800aa4a <_printf_float+0x40e>
 800aa66:	464b      	mov	r3, r9
 800aa68:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800aa6c:	e6dc      	b.n	800a828 <_printf_float+0x1ec>
 800aa6e:	f04f 0800 	mov.w	r8, #0
 800aa72:	f104 0a1a 	add.w	sl, r4, #26
 800aa76:	e7f2      	b.n	800aa5e <_printf_float+0x422>
 800aa78:	2301      	movs	r3, #1
 800aa7a:	4642      	mov	r2, r8
 800aa7c:	e7df      	b.n	800aa3e <_printf_float+0x402>
 800aa7e:	2301      	movs	r3, #1
 800aa80:	464a      	mov	r2, r9
 800aa82:	4631      	mov	r1, r6
 800aa84:	4628      	mov	r0, r5
 800aa86:	47b8      	blx	r7
 800aa88:	3001      	adds	r0, #1
 800aa8a:	f43f ae38 	beq.w	800a6fe <_printf_float+0xc2>
 800aa8e:	f108 0801 	add.w	r8, r8, #1
 800aa92:	68e3      	ldr	r3, [r4, #12]
 800aa94:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800aa96:	1a5b      	subs	r3, r3, r1
 800aa98:	4543      	cmp	r3, r8
 800aa9a:	dcf0      	bgt.n	800aa7e <_printf_float+0x442>
 800aa9c:	e6fa      	b.n	800a894 <_printf_float+0x258>
 800aa9e:	f04f 0800 	mov.w	r8, #0
 800aaa2:	f104 0919 	add.w	r9, r4, #25
 800aaa6:	e7f4      	b.n	800aa92 <_printf_float+0x456>

0800aaa8 <_printf_common>:
 800aaa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aaac:	4616      	mov	r6, r2
 800aaae:	4699      	mov	r9, r3
 800aab0:	688a      	ldr	r2, [r1, #8]
 800aab2:	690b      	ldr	r3, [r1, #16]
 800aab4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800aab8:	4293      	cmp	r3, r2
 800aaba:	bfb8      	it	lt
 800aabc:	4613      	movlt	r3, r2
 800aabe:	6033      	str	r3, [r6, #0]
 800aac0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800aac4:	4607      	mov	r7, r0
 800aac6:	460c      	mov	r4, r1
 800aac8:	b10a      	cbz	r2, 800aace <_printf_common+0x26>
 800aaca:	3301      	adds	r3, #1
 800aacc:	6033      	str	r3, [r6, #0]
 800aace:	6823      	ldr	r3, [r4, #0]
 800aad0:	0699      	lsls	r1, r3, #26
 800aad2:	bf42      	ittt	mi
 800aad4:	6833      	ldrmi	r3, [r6, #0]
 800aad6:	3302      	addmi	r3, #2
 800aad8:	6033      	strmi	r3, [r6, #0]
 800aada:	6825      	ldr	r5, [r4, #0]
 800aadc:	f015 0506 	ands.w	r5, r5, #6
 800aae0:	d106      	bne.n	800aaf0 <_printf_common+0x48>
 800aae2:	f104 0a19 	add.w	sl, r4, #25
 800aae6:	68e3      	ldr	r3, [r4, #12]
 800aae8:	6832      	ldr	r2, [r6, #0]
 800aaea:	1a9b      	subs	r3, r3, r2
 800aaec:	42ab      	cmp	r3, r5
 800aaee:	dc26      	bgt.n	800ab3e <_printf_common+0x96>
 800aaf0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800aaf4:	1e13      	subs	r3, r2, #0
 800aaf6:	6822      	ldr	r2, [r4, #0]
 800aaf8:	bf18      	it	ne
 800aafa:	2301      	movne	r3, #1
 800aafc:	0692      	lsls	r2, r2, #26
 800aafe:	d42b      	bmi.n	800ab58 <_printf_common+0xb0>
 800ab00:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ab04:	4649      	mov	r1, r9
 800ab06:	4638      	mov	r0, r7
 800ab08:	47c0      	blx	r8
 800ab0a:	3001      	adds	r0, #1
 800ab0c:	d01e      	beq.n	800ab4c <_printf_common+0xa4>
 800ab0e:	6823      	ldr	r3, [r4, #0]
 800ab10:	68e5      	ldr	r5, [r4, #12]
 800ab12:	6832      	ldr	r2, [r6, #0]
 800ab14:	f003 0306 	and.w	r3, r3, #6
 800ab18:	2b04      	cmp	r3, #4
 800ab1a:	bf08      	it	eq
 800ab1c:	1aad      	subeq	r5, r5, r2
 800ab1e:	68a3      	ldr	r3, [r4, #8]
 800ab20:	6922      	ldr	r2, [r4, #16]
 800ab22:	bf0c      	ite	eq
 800ab24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ab28:	2500      	movne	r5, #0
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	bfc4      	itt	gt
 800ab2e:	1a9b      	subgt	r3, r3, r2
 800ab30:	18ed      	addgt	r5, r5, r3
 800ab32:	2600      	movs	r6, #0
 800ab34:	341a      	adds	r4, #26
 800ab36:	42b5      	cmp	r5, r6
 800ab38:	d11a      	bne.n	800ab70 <_printf_common+0xc8>
 800ab3a:	2000      	movs	r0, #0
 800ab3c:	e008      	b.n	800ab50 <_printf_common+0xa8>
 800ab3e:	2301      	movs	r3, #1
 800ab40:	4652      	mov	r2, sl
 800ab42:	4649      	mov	r1, r9
 800ab44:	4638      	mov	r0, r7
 800ab46:	47c0      	blx	r8
 800ab48:	3001      	adds	r0, #1
 800ab4a:	d103      	bne.n	800ab54 <_printf_common+0xac>
 800ab4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab54:	3501      	adds	r5, #1
 800ab56:	e7c6      	b.n	800aae6 <_printf_common+0x3e>
 800ab58:	18e1      	adds	r1, r4, r3
 800ab5a:	1c5a      	adds	r2, r3, #1
 800ab5c:	2030      	movs	r0, #48	; 0x30
 800ab5e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ab62:	4422      	add	r2, r4
 800ab64:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ab68:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ab6c:	3302      	adds	r3, #2
 800ab6e:	e7c7      	b.n	800ab00 <_printf_common+0x58>
 800ab70:	2301      	movs	r3, #1
 800ab72:	4622      	mov	r2, r4
 800ab74:	4649      	mov	r1, r9
 800ab76:	4638      	mov	r0, r7
 800ab78:	47c0      	blx	r8
 800ab7a:	3001      	adds	r0, #1
 800ab7c:	d0e6      	beq.n	800ab4c <_printf_common+0xa4>
 800ab7e:	3601      	adds	r6, #1
 800ab80:	e7d9      	b.n	800ab36 <_printf_common+0x8e>
	...

0800ab84 <_printf_i>:
 800ab84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab88:	7e0f      	ldrb	r7, [r1, #24]
 800ab8a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ab8c:	2f78      	cmp	r7, #120	; 0x78
 800ab8e:	4691      	mov	r9, r2
 800ab90:	4680      	mov	r8, r0
 800ab92:	460c      	mov	r4, r1
 800ab94:	469a      	mov	sl, r3
 800ab96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ab9a:	d807      	bhi.n	800abac <_printf_i+0x28>
 800ab9c:	2f62      	cmp	r7, #98	; 0x62
 800ab9e:	d80a      	bhi.n	800abb6 <_printf_i+0x32>
 800aba0:	2f00      	cmp	r7, #0
 800aba2:	f000 80d8 	beq.w	800ad56 <_printf_i+0x1d2>
 800aba6:	2f58      	cmp	r7, #88	; 0x58
 800aba8:	f000 80a3 	beq.w	800acf2 <_printf_i+0x16e>
 800abac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800abb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800abb4:	e03a      	b.n	800ac2c <_printf_i+0xa8>
 800abb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800abba:	2b15      	cmp	r3, #21
 800abbc:	d8f6      	bhi.n	800abac <_printf_i+0x28>
 800abbe:	a101      	add	r1, pc, #4	; (adr r1, 800abc4 <_printf_i+0x40>)
 800abc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800abc4:	0800ac1d 	.word	0x0800ac1d
 800abc8:	0800ac31 	.word	0x0800ac31
 800abcc:	0800abad 	.word	0x0800abad
 800abd0:	0800abad 	.word	0x0800abad
 800abd4:	0800abad 	.word	0x0800abad
 800abd8:	0800abad 	.word	0x0800abad
 800abdc:	0800ac31 	.word	0x0800ac31
 800abe0:	0800abad 	.word	0x0800abad
 800abe4:	0800abad 	.word	0x0800abad
 800abe8:	0800abad 	.word	0x0800abad
 800abec:	0800abad 	.word	0x0800abad
 800abf0:	0800ad3d 	.word	0x0800ad3d
 800abf4:	0800ac61 	.word	0x0800ac61
 800abf8:	0800ad1f 	.word	0x0800ad1f
 800abfc:	0800abad 	.word	0x0800abad
 800ac00:	0800abad 	.word	0x0800abad
 800ac04:	0800ad5f 	.word	0x0800ad5f
 800ac08:	0800abad 	.word	0x0800abad
 800ac0c:	0800ac61 	.word	0x0800ac61
 800ac10:	0800abad 	.word	0x0800abad
 800ac14:	0800abad 	.word	0x0800abad
 800ac18:	0800ad27 	.word	0x0800ad27
 800ac1c:	682b      	ldr	r3, [r5, #0]
 800ac1e:	1d1a      	adds	r2, r3, #4
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	602a      	str	r2, [r5, #0]
 800ac24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ac28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ac2c:	2301      	movs	r3, #1
 800ac2e:	e0a3      	b.n	800ad78 <_printf_i+0x1f4>
 800ac30:	6820      	ldr	r0, [r4, #0]
 800ac32:	6829      	ldr	r1, [r5, #0]
 800ac34:	0606      	lsls	r6, r0, #24
 800ac36:	f101 0304 	add.w	r3, r1, #4
 800ac3a:	d50a      	bpl.n	800ac52 <_printf_i+0xce>
 800ac3c:	680e      	ldr	r6, [r1, #0]
 800ac3e:	602b      	str	r3, [r5, #0]
 800ac40:	2e00      	cmp	r6, #0
 800ac42:	da03      	bge.n	800ac4c <_printf_i+0xc8>
 800ac44:	232d      	movs	r3, #45	; 0x2d
 800ac46:	4276      	negs	r6, r6
 800ac48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac4c:	485e      	ldr	r0, [pc, #376]	; (800adc8 <_printf_i+0x244>)
 800ac4e:	230a      	movs	r3, #10
 800ac50:	e019      	b.n	800ac86 <_printf_i+0x102>
 800ac52:	680e      	ldr	r6, [r1, #0]
 800ac54:	602b      	str	r3, [r5, #0]
 800ac56:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ac5a:	bf18      	it	ne
 800ac5c:	b236      	sxthne	r6, r6
 800ac5e:	e7ef      	b.n	800ac40 <_printf_i+0xbc>
 800ac60:	682b      	ldr	r3, [r5, #0]
 800ac62:	6820      	ldr	r0, [r4, #0]
 800ac64:	1d19      	adds	r1, r3, #4
 800ac66:	6029      	str	r1, [r5, #0]
 800ac68:	0601      	lsls	r1, r0, #24
 800ac6a:	d501      	bpl.n	800ac70 <_printf_i+0xec>
 800ac6c:	681e      	ldr	r6, [r3, #0]
 800ac6e:	e002      	b.n	800ac76 <_printf_i+0xf2>
 800ac70:	0646      	lsls	r6, r0, #25
 800ac72:	d5fb      	bpl.n	800ac6c <_printf_i+0xe8>
 800ac74:	881e      	ldrh	r6, [r3, #0]
 800ac76:	4854      	ldr	r0, [pc, #336]	; (800adc8 <_printf_i+0x244>)
 800ac78:	2f6f      	cmp	r7, #111	; 0x6f
 800ac7a:	bf0c      	ite	eq
 800ac7c:	2308      	moveq	r3, #8
 800ac7e:	230a      	movne	r3, #10
 800ac80:	2100      	movs	r1, #0
 800ac82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ac86:	6865      	ldr	r5, [r4, #4]
 800ac88:	60a5      	str	r5, [r4, #8]
 800ac8a:	2d00      	cmp	r5, #0
 800ac8c:	bfa2      	ittt	ge
 800ac8e:	6821      	ldrge	r1, [r4, #0]
 800ac90:	f021 0104 	bicge.w	r1, r1, #4
 800ac94:	6021      	strge	r1, [r4, #0]
 800ac96:	b90e      	cbnz	r6, 800ac9c <_printf_i+0x118>
 800ac98:	2d00      	cmp	r5, #0
 800ac9a:	d04d      	beq.n	800ad38 <_printf_i+0x1b4>
 800ac9c:	4615      	mov	r5, r2
 800ac9e:	fbb6 f1f3 	udiv	r1, r6, r3
 800aca2:	fb03 6711 	mls	r7, r3, r1, r6
 800aca6:	5dc7      	ldrb	r7, [r0, r7]
 800aca8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800acac:	4637      	mov	r7, r6
 800acae:	42bb      	cmp	r3, r7
 800acb0:	460e      	mov	r6, r1
 800acb2:	d9f4      	bls.n	800ac9e <_printf_i+0x11a>
 800acb4:	2b08      	cmp	r3, #8
 800acb6:	d10b      	bne.n	800acd0 <_printf_i+0x14c>
 800acb8:	6823      	ldr	r3, [r4, #0]
 800acba:	07de      	lsls	r6, r3, #31
 800acbc:	d508      	bpl.n	800acd0 <_printf_i+0x14c>
 800acbe:	6923      	ldr	r3, [r4, #16]
 800acc0:	6861      	ldr	r1, [r4, #4]
 800acc2:	4299      	cmp	r1, r3
 800acc4:	bfde      	ittt	le
 800acc6:	2330      	movle	r3, #48	; 0x30
 800acc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800accc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800acd0:	1b52      	subs	r2, r2, r5
 800acd2:	6122      	str	r2, [r4, #16]
 800acd4:	f8cd a000 	str.w	sl, [sp]
 800acd8:	464b      	mov	r3, r9
 800acda:	aa03      	add	r2, sp, #12
 800acdc:	4621      	mov	r1, r4
 800acde:	4640      	mov	r0, r8
 800ace0:	f7ff fee2 	bl	800aaa8 <_printf_common>
 800ace4:	3001      	adds	r0, #1
 800ace6:	d14c      	bne.n	800ad82 <_printf_i+0x1fe>
 800ace8:	f04f 30ff 	mov.w	r0, #4294967295
 800acec:	b004      	add	sp, #16
 800acee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800acf2:	4835      	ldr	r0, [pc, #212]	; (800adc8 <_printf_i+0x244>)
 800acf4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800acf8:	6829      	ldr	r1, [r5, #0]
 800acfa:	6823      	ldr	r3, [r4, #0]
 800acfc:	f851 6b04 	ldr.w	r6, [r1], #4
 800ad00:	6029      	str	r1, [r5, #0]
 800ad02:	061d      	lsls	r5, r3, #24
 800ad04:	d514      	bpl.n	800ad30 <_printf_i+0x1ac>
 800ad06:	07df      	lsls	r7, r3, #31
 800ad08:	bf44      	itt	mi
 800ad0a:	f043 0320 	orrmi.w	r3, r3, #32
 800ad0e:	6023      	strmi	r3, [r4, #0]
 800ad10:	b91e      	cbnz	r6, 800ad1a <_printf_i+0x196>
 800ad12:	6823      	ldr	r3, [r4, #0]
 800ad14:	f023 0320 	bic.w	r3, r3, #32
 800ad18:	6023      	str	r3, [r4, #0]
 800ad1a:	2310      	movs	r3, #16
 800ad1c:	e7b0      	b.n	800ac80 <_printf_i+0xfc>
 800ad1e:	6823      	ldr	r3, [r4, #0]
 800ad20:	f043 0320 	orr.w	r3, r3, #32
 800ad24:	6023      	str	r3, [r4, #0]
 800ad26:	2378      	movs	r3, #120	; 0x78
 800ad28:	4828      	ldr	r0, [pc, #160]	; (800adcc <_printf_i+0x248>)
 800ad2a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800ad2e:	e7e3      	b.n	800acf8 <_printf_i+0x174>
 800ad30:	0659      	lsls	r1, r3, #25
 800ad32:	bf48      	it	mi
 800ad34:	b2b6      	uxthmi	r6, r6
 800ad36:	e7e6      	b.n	800ad06 <_printf_i+0x182>
 800ad38:	4615      	mov	r5, r2
 800ad3a:	e7bb      	b.n	800acb4 <_printf_i+0x130>
 800ad3c:	682b      	ldr	r3, [r5, #0]
 800ad3e:	6826      	ldr	r6, [r4, #0]
 800ad40:	6961      	ldr	r1, [r4, #20]
 800ad42:	1d18      	adds	r0, r3, #4
 800ad44:	6028      	str	r0, [r5, #0]
 800ad46:	0635      	lsls	r5, r6, #24
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	d501      	bpl.n	800ad50 <_printf_i+0x1cc>
 800ad4c:	6019      	str	r1, [r3, #0]
 800ad4e:	e002      	b.n	800ad56 <_printf_i+0x1d2>
 800ad50:	0670      	lsls	r0, r6, #25
 800ad52:	d5fb      	bpl.n	800ad4c <_printf_i+0x1c8>
 800ad54:	8019      	strh	r1, [r3, #0]
 800ad56:	2300      	movs	r3, #0
 800ad58:	6123      	str	r3, [r4, #16]
 800ad5a:	4615      	mov	r5, r2
 800ad5c:	e7ba      	b.n	800acd4 <_printf_i+0x150>
 800ad5e:	682b      	ldr	r3, [r5, #0]
 800ad60:	1d1a      	adds	r2, r3, #4
 800ad62:	602a      	str	r2, [r5, #0]
 800ad64:	681d      	ldr	r5, [r3, #0]
 800ad66:	6862      	ldr	r2, [r4, #4]
 800ad68:	2100      	movs	r1, #0
 800ad6a:	4628      	mov	r0, r5
 800ad6c:	f7f5 fa38 	bl	80001e0 <memchr>
 800ad70:	b108      	cbz	r0, 800ad76 <_printf_i+0x1f2>
 800ad72:	1b40      	subs	r0, r0, r5
 800ad74:	6060      	str	r0, [r4, #4]
 800ad76:	6863      	ldr	r3, [r4, #4]
 800ad78:	6123      	str	r3, [r4, #16]
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ad80:	e7a8      	b.n	800acd4 <_printf_i+0x150>
 800ad82:	6923      	ldr	r3, [r4, #16]
 800ad84:	462a      	mov	r2, r5
 800ad86:	4649      	mov	r1, r9
 800ad88:	4640      	mov	r0, r8
 800ad8a:	47d0      	blx	sl
 800ad8c:	3001      	adds	r0, #1
 800ad8e:	d0ab      	beq.n	800ace8 <_printf_i+0x164>
 800ad90:	6823      	ldr	r3, [r4, #0]
 800ad92:	079b      	lsls	r3, r3, #30
 800ad94:	d413      	bmi.n	800adbe <_printf_i+0x23a>
 800ad96:	68e0      	ldr	r0, [r4, #12]
 800ad98:	9b03      	ldr	r3, [sp, #12]
 800ad9a:	4298      	cmp	r0, r3
 800ad9c:	bfb8      	it	lt
 800ad9e:	4618      	movlt	r0, r3
 800ada0:	e7a4      	b.n	800acec <_printf_i+0x168>
 800ada2:	2301      	movs	r3, #1
 800ada4:	4632      	mov	r2, r6
 800ada6:	4649      	mov	r1, r9
 800ada8:	4640      	mov	r0, r8
 800adaa:	47d0      	blx	sl
 800adac:	3001      	adds	r0, #1
 800adae:	d09b      	beq.n	800ace8 <_printf_i+0x164>
 800adb0:	3501      	adds	r5, #1
 800adb2:	68e3      	ldr	r3, [r4, #12]
 800adb4:	9903      	ldr	r1, [sp, #12]
 800adb6:	1a5b      	subs	r3, r3, r1
 800adb8:	42ab      	cmp	r3, r5
 800adba:	dcf2      	bgt.n	800ada2 <_printf_i+0x21e>
 800adbc:	e7eb      	b.n	800ad96 <_printf_i+0x212>
 800adbe:	2500      	movs	r5, #0
 800adc0:	f104 0619 	add.w	r6, r4, #25
 800adc4:	e7f5      	b.n	800adb2 <_printf_i+0x22e>
 800adc6:	bf00      	nop
 800adc8:	0800ed46 	.word	0x0800ed46
 800adcc:	0800ed57 	.word	0x0800ed57

0800add0 <siprintf>:
 800add0:	b40e      	push	{r1, r2, r3}
 800add2:	b500      	push	{lr}
 800add4:	b09c      	sub	sp, #112	; 0x70
 800add6:	ab1d      	add	r3, sp, #116	; 0x74
 800add8:	9002      	str	r0, [sp, #8]
 800adda:	9006      	str	r0, [sp, #24]
 800addc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ade0:	4809      	ldr	r0, [pc, #36]	; (800ae08 <siprintf+0x38>)
 800ade2:	9107      	str	r1, [sp, #28]
 800ade4:	9104      	str	r1, [sp, #16]
 800ade6:	4909      	ldr	r1, [pc, #36]	; (800ae0c <siprintf+0x3c>)
 800ade8:	f853 2b04 	ldr.w	r2, [r3], #4
 800adec:	9105      	str	r1, [sp, #20]
 800adee:	6800      	ldr	r0, [r0, #0]
 800adf0:	9301      	str	r3, [sp, #4]
 800adf2:	a902      	add	r1, sp, #8
 800adf4:	f001 fb68 	bl	800c4c8 <_svfiprintf_r>
 800adf8:	9b02      	ldr	r3, [sp, #8]
 800adfa:	2200      	movs	r2, #0
 800adfc:	701a      	strb	r2, [r3, #0]
 800adfe:	b01c      	add	sp, #112	; 0x70
 800ae00:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae04:	b003      	add	sp, #12
 800ae06:	4770      	bx	lr
 800ae08:	2000004c 	.word	0x2000004c
 800ae0c:	ffff0208 	.word	0xffff0208

0800ae10 <quorem>:
 800ae10:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae14:	6903      	ldr	r3, [r0, #16]
 800ae16:	690c      	ldr	r4, [r1, #16]
 800ae18:	42a3      	cmp	r3, r4
 800ae1a:	4607      	mov	r7, r0
 800ae1c:	f2c0 8081 	blt.w	800af22 <quorem+0x112>
 800ae20:	3c01      	subs	r4, #1
 800ae22:	f101 0814 	add.w	r8, r1, #20
 800ae26:	f100 0514 	add.w	r5, r0, #20
 800ae2a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae2e:	9301      	str	r3, [sp, #4]
 800ae30:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ae34:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae38:	3301      	adds	r3, #1
 800ae3a:	429a      	cmp	r2, r3
 800ae3c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ae40:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ae44:	fbb2 f6f3 	udiv	r6, r2, r3
 800ae48:	d331      	bcc.n	800aeae <quorem+0x9e>
 800ae4a:	f04f 0e00 	mov.w	lr, #0
 800ae4e:	4640      	mov	r0, r8
 800ae50:	46ac      	mov	ip, r5
 800ae52:	46f2      	mov	sl, lr
 800ae54:	f850 2b04 	ldr.w	r2, [r0], #4
 800ae58:	b293      	uxth	r3, r2
 800ae5a:	fb06 e303 	mla	r3, r6, r3, lr
 800ae5e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ae62:	b29b      	uxth	r3, r3
 800ae64:	ebaa 0303 	sub.w	r3, sl, r3
 800ae68:	f8dc a000 	ldr.w	sl, [ip]
 800ae6c:	0c12      	lsrs	r2, r2, #16
 800ae6e:	fa13 f38a 	uxtah	r3, r3, sl
 800ae72:	fb06 e202 	mla	r2, r6, r2, lr
 800ae76:	9300      	str	r3, [sp, #0]
 800ae78:	9b00      	ldr	r3, [sp, #0]
 800ae7a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ae7e:	b292      	uxth	r2, r2
 800ae80:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ae84:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae88:	f8bd 3000 	ldrh.w	r3, [sp]
 800ae8c:	4581      	cmp	r9, r0
 800ae8e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae92:	f84c 3b04 	str.w	r3, [ip], #4
 800ae96:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ae9a:	d2db      	bcs.n	800ae54 <quorem+0x44>
 800ae9c:	f855 300b 	ldr.w	r3, [r5, fp]
 800aea0:	b92b      	cbnz	r3, 800aeae <quorem+0x9e>
 800aea2:	9b01      	ldr	r3, [sp, #4]
 800aea4:	3b04      	subs	r3, #4
 800aea6:	429d      	cmp	r5, r3
 800aea8:	461a      	mov	r2, r3
 800aeaa:	d32e      	bcc.n	800af0a <quorem+0xfa>
 800aeac:	613c      	str	r4, [r7, #16]
 800aeae:	4638      	mov	r0, r7
 800aeb0:	f001 f8b6 	bl	800c020 <__mcmp>
 800aeb4:	2800      	cmp	r0, #0
 800aeb6:	db24      	blt.n	800af02 <quorem+0xf2>
 800aeb8:	3601      	adds	r6, #1
 800aeba:	4628      	mov	r0, r5
 800aebc:	f04f 0c00 	mov.w	ip, #0
 800aec0:	f858 2b04 	ldr.w	r2, [r8], #4
 800aec4:	f8d0 e000 	ldr.w	lr, [r0]
 800aec8:	b293      	uxth	r3, r2
 800aeca:	ebac 0303 	sub.w	r3, ip, r3
 800aece:	0c12      	lsrs	r2, r2, #16
 800aed0:	fa13 f38e 	uxtah	r3, r3, lr
 800aed4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800aed8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aedc:	b29b      	uxth	r3, r3
 800aede:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aee2:	45c1      	cmp	r9, r8
 800aee4:	f840 3b04 	str.w	r3, [r0], #4
 800aee8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800aeec:	d2e8      	bcs.n	800aec0 <quorem+0xb0>
 800aeee:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aef2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aef6:	b922      	cbnz	r2, 800af02 <quorem+0xf2>
 800aef8:	3b04      	subs	r3, #4
 800aefa:	429d      	cmp	r5, r3
 800aefc:	461a      	mov	r2, r3
 800aefe:	d30a      	bcc.n	800af16 <quorem+0x106>
 800af00:	613c      	str	r4, [r7, #16]
 800af02:	4630      	mov	r0, r6
 800af04:	b003      	add	sp, #12
 800af06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af0a:	6812      	ldr	r2, [r2, #0]
 800af0c:	3b04      	subs	r3, #4
 800af0e:	2a00      	cmp	r2, #0
 800af10:	d1cc      	bne.n	800aeac <quorem+0x9c>
 800af12:	3c01      	subs	r4, #1
 800af14:	e7c7      	b.n	800aea6 <quorem+0x96>
 800af16:	6812      	ldr	r2, [r2, #0]
 800af18:	3b04      	subs	r3, #4
 800af1a:	2a00      	cmp	r2, #0
 800af1c:	d1f0      	bne.n	800af00 <quorem+0xf0>
 800af1e:	3c01      	subs	r4, #1
 800af20:	e7eb      	b.n	800aefa <quorem+0xea>
 800af22:	2000      	movs	r0, #0
 800af24:	e7ee      	b.n	800af04 <quorem+0xf4>
	...

0800af28 <_dtoa_r>:
 800af28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af2c:	ed2d 8b04 	vpush	{d8-d9}
 800af30:	ec57 6b10 	vmov	r6, r7, d0
 800af34:	b093      	sub	sp, #76	; 0x4c
 800af36:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800af38:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800af3c:	9106      	str	r1, [sp, #24]
 800af3e:	ee10 aa10 	vmov	sl, s0
 800af42:	4604      	mov	r4, r0
 800af44:	9209      	str	r2, [sp, #36]	; 0x24
 800af46:	930c      	str	r3, [sp, #48]	; 0x30
 800af48:	46bb      	mov	fp, r7
 800af4a:	b975      	cbnz	r5, 800af6a <_dtoa_r+0x42>
 800af4c:	2010      	movs	r0, #16
 800af4e:	f000 fddd 	bl	800bb0c <malloc>
 800af52:	4602      	mov	r2, r0
 800af54:	6260      	str	r0, [r4, #36]	; 0x24
 800af56:	b920      	cbnz	r0, 800af62 <_dtoa_r+0x3a>
 800af58:	4ba7      	ldr	r3, [pc, #668]	; (800b1f8 <_dtoa_r+0x2d0>)
 800af5a:	21ea      	movs	r1, #234	; 0xea
 800af5c:	48a7      	ldr	r0, [pc, #668]	; (800b1fc <_dtoa_r+0x2d4>)
 800af5e:	f001 fbc3 	bl	800c6e8 <__assert_func>
 800af62:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800af66:	6005      	str	r5, [r0, #0]
 800af68:	60c5      	str	r5, [r0, #12]
 800af6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af6c:	6819      	ldr	r1, [r3, #0]
 800af6e:	b151      	cbz	r1, 800af86 <_dtoa_r+0x5e>
 800af70:	685a      	ldr	r2, [r3, #4]
 800af72:	604a      	str	r2, [r1, #4]
 800af74:	2301      	movs	r3, #1
 800af76:	4093      	lsls	r3, r2
 800af78:	608b      	str	r3, [r1, #8]
 800af7a:	4620      	mov	r0, r4
 800af7c:	f000 fe0e 	bl	800bb9c <_Bfree>
 800af80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af82:	2200      	movs	r2, #0
 800af84:	601a      	str	r2, [r3, #0]
 800af86:	1e3b      	subs	r3, r7, #0
 800af88:	bfaa      	itet	ge
 800af8a:	2300      	movge	r3, #0
 800af8c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800af90:	f8c8 3000 	strge.w	r3, [r8]
 800af94:	4b9a      	ldr	r3, [pc, #616]	; (800b200 <_dtoa_r+0x2d8>)
 800af96:	bfbc      	itt	lt
 800af98:	2201      	movlt	r2, #1
 800af9a:	f8c8 2000 	strlt.w	r2, [r8]
 800af9e:	ea33 030b 	bics.w	r3, r3, fp
 800afa2:	d11b      	bne.n	800afdc <_dtoa_r+0xb4>
 800afa4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800afa6:	f242 730f 	movw	r3, #9999	; 0x270f
 800afaa:	6013      	str	r3, [r2, #0]
 800afac:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800afb0:	4333      	orrs	r3, r6
 800afb2:	f000 8592 	beq.w	800bada <_dtoa_r+0xbb2>
 800afb6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800afb8:	b963      	cbnz	r3, 800afd4 <_dtoa_r+0xac>
 800afba:	4b92      	ldr	r3, [pc, #584]	; (800b204 <_dtoa_r+0x2dc>)
 800afbc:	e022      	b.n	800b004 <_dtoa_r+0xdc>
 800afbe:	4b92      	ldr	r3, [pc, #584]	; (800b208 <_dtoa_r+0x2e0>)
 800afc0:	9301      	str	r3, [sp, #4]
 800afc2:	3308      	adds	r3, #8
 800afc4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800afc6:	6013      	str	r3, [r2, #0]
 800afc8:	9801      	ldr	r0, [sp, #4]
 800afca:	b013      	add	sp, #76	; 0x4c
 800afcc:	ecbd 8b04 	vpop	{d8-d9}
 800afd0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afd4:	4b8b      	ldr	r3, [pc, #556]	; (800b204 <_dtoa_r+0x2dc>)
 800afd6:	9301      	str	r3, [sp, #4]
 800afd8:	3303      	adds	r3, #3
 800afda:	e7f3      	b.n	800afc4 <_dtoa_r+0x9c>
 800afdc:	2200      	movs	r2, #0
 800afde:	2300      	movs	r3, #0
 800afe0:	4650      	mov	r0, sl
 800afe2:	4659      	mov	r1, fp
 800afe4:	f7f5 fd70 	bl	8000ac8 <__aeabi_dcmpeq>
 800afe8:	ec4b ab19 	vmov	d9, sl, fp
 800afec:	4680      	mov	r8, r0
 800afee:	b158      	cbz	r0, 800b008 <_dtoa_r+0xe0>
 800aff0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aff2:	2301      	movs	r3, #1
 800aff4:	6013      	str	r3, [r2, #0]
 800aff6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aff8:	2b00      	cmp	r3, #0
 800affa:	f000 856b 	beq.w	800bad4 <_dtoa_r+0xbac>
 800affe:	4883      	ldr	r0, [pc, #524]	; (800b20c <_dtoa_r+0x2e4>)
 800b000:	6018      	str	r0, [r3, #0]
 800b002:	1e43      	subs	r3, r0, #1
 800b004:	9301      	str	r3, [sp, #4]
 800b006:	e7df      	b.n	800afc8 <_dtoa_r+0xa0>
 800b008:	ec4b ab10 	vmov	d0, sl, fp
 800b00c:	aa10      	add	r2, sp, #64	; 0x40
 800b00e:	a911      	add	r1, sp, #68	; 0x44
 800b010:	4620      	mov	r0, r4
 800b012:	f001 f8ab 	bl	800c16c <__d2b>
 800b016:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b01a:	ee08 0a10 	vmov	s16, r0
 800b01e:	2d00      	cmp	r5, #0
 800b020:	f000 8084 	beq.w	800b12c <_dtoa_r+0x204>
 800b024:	ee19 3a90 	vmov	r3, s19
 800b028:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b02c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b030:	4656      	mov	r6, sl
 800b032:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b036:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b03a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b03e:	4b74      	ldr	r3, [pc, #464]	; (800b210 <_dtoa_r+0x2e8>)
 800b040:	2200      	movs	r2, #0
 800b042:	4630      	mov	r0, r6
 800b044:	4639      	mov	r1, r7
 800b046:	f7f5 f91f 	bl	8000288 <__aeabi_dsub>
 800b04a:	a365      	add	r3, pc, #404	; (adr r3, 800b1e0 <_dtoa_r+0x2b8>)
 800b04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b050:	f7f5 fad2 	bl	80005f8 <__aeabi_dmul>
 800b054:	a364      	add	r3, pc, #400	; (adr r3, 800b1e8 <_dtoa_r+0x2c0>)
 800b056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05a:	f7f5 f917 	bl	800028c <__adddf3>
 800b05e:	4606      	mov	r6, r0
 800b060:	4628      	mov	r0, r5
 800b062:	460f      	mov	r7, r1
 800b064:	f7f5 fa5e 	bl	8000524 <__aeabi_i2d>
 800b068:	a361      	add	r3, pc, #388	; (adr r3, 800b1f0 <_dtoa_r+0x2c8>)
 800b06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b06e:	f7f5 fac3 	bl	80005f8 <__aeabi_dmul>
 800b072:	4602      	mov	r2, r0
 800b074:	460b      	mov	r3, r1
 800b076:	4630      	mov	r0, r6
 800b078:	4639      	mov	r1, r7
 800b07a:	f7f5 f907 	bl	800028c <__adddf3>
 800b07e:	4606      	mov	r6, r0
 800b080:	460f      	mov	r7, r1
 800b082:	f7f5 fd69 	bl	8000b58 <__aeabi_d2iz>
 800b086:	2200      	movs	r2, #0
 800b088:	9000      	str	r0, [sp, #0]
 800b08a:	2300      	movs	r3, #0
 800b08c:	4630      	mov	r0, r6
 800b08e:	4639      	mov	r1, r7
 800b090:	f7f5 fd24 	bl	8000adc <__aeabi_dcmplt>
 800b094:	b150      	cbz	r0, 800b0ac <_dtoa_r+0x184>
 800b096:	9800      	ldr	r0, [sp, #0]
 800b098:	f7f5 fa44 	bl	8000524 <__aeabi_i2d>
 800b09c:	4632      	mov	r2, r6
 800b09e:	463b      	mov	r3, r7
 800b0a0:	f7f5 fd12 	bl	8000ac8 <__aeabi_dcmpeq>
 800b0a4:	b910      	cbnz	r0, 800b0ac <_dtoa_r+0x184>
 800b0a6:	9b00      	ldr	r3, [sp, #0]
 800b0a8:	3b01      	subs	r3, #1
 800b0aa:	9300      	str	r3, [sp, #0]
 800b0ac:	9b00      	ldr	r3, [sp, #0]
 800b0ae:	2b16      	cmp	r3, #22
 800b0b0:	d85a      	bhi.n	800b168 <_dtoa_r+0x240>
 800b0b2:	9a00      	ldr	r2, [sp, #0]
 800b0b4:	4b57      	ldr	r3, [pc, #348]	; (800b214 <_dtoa_r+0x2ec>)
 800b0b6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0be:	ec51 0b19 	vmov	r0, r1, d9
 800b0c2:	f7f5 fd0b 	bl	8000adc <__aeabi_dcmplt>
 800b0c6:	2800      	cmp	r0, #0
 800b0c8:	d050      	beq.n	800b16c <_dtoa_r+0x244>
 800b0ca:	9b00      	ldr	r3, [sp, #0]
 800b0cc:	3b01      	subs	r3, #1
 800b0ce:	9300      	str	r3, [sp, #0]
 800b0d0:	2300      	movs	r3, #0
 800b0d2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b0d4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b0d6:	1b5d      	subs	r5, r3, r5
 800b0d8:	1e6b      	subs	r3, r5, #1
 800b0da:	9305      	str	r3, [sp, #20]
 800b0dc:	bf45      	ittet	mi
 800b0de:	f1c5 0301 	rsbmi	r3, r5, #1
 800b0e2:	9304      	strmi	r3, [sp, #16]
 800b0e4:	2300      	movpl	r3, #0
 800b0e6:	2300      	movmi	r3, #0
 800b0e8:	bf4c      	ite	mi
 800b0ea:	9305      	strmi	r3, [sp, #20]
 800b0ec:	9304      	strpl	r3, [sp, #16]
 800b0ee:	9b00      	ldr	r3, [sp, #0]
 800b0f0:	2b00      	cmp	r3, #0
 800b0f2:	db3d      	blt.n	800b170 <_dtoa_r+0x248>
 800b0f4:	9b05      	ldr	r3, [sp, #20]
 800b0f6:	9a00      	ldr	r2, [sp, #0]
 800b0f8:	920a      	str	r2, [sp, #40]	; 0x28
 800b0fa:	4413      	add	r3, r2
 800b0fc:	9305      	str	r3, [sp, #20]
 800b0fe:	2300      	movs	r3, #0
 800b100:	9307      	str	r3, [sp, #28]
 800b102:	9b06      	ldr	r3, [sp, #24]
 800b104:	2b09      	cmp	r3, #9
 800b106:	f200 8089 	bhi.w	800b21c <_dtoa_r+0x2f4>
 800b10a:	2b05      	cmp	r3, #5
 800b10c:	bfc4      	itt	gt
 800b10e:	3b04      	subgt	r3, #4
 800b110:	9306      	strgt	r3, [sp, #24]
 800b112:	9b06      	ldr	r3, [sp, #24]
 800b114:	f1a3 0302 	sub.w	r3, r3, #2
 800b118:	bfcc      	ite	gt
 800b11a:	2500      	movgt	r5, #0
 800b11c:	2501      	movle	r5, #1
 800b11e:	2b03      	cmp	r3, #3
 800b120:	f200 8087 	bhi.w	800b232 <_dtoa_r+0x30a>
 800b124:	e8df f003 	tbb	[pc, r3]
 800b128:	59383a2d 	.word	0x59383a2d
 800b12c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b130:	441d      	add	r5, r3
 800b132:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b136:	2b20      	cmp	r3, #32
 800b138:	bfc1      	itttt	gt
 800b13a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b13e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b142:	fa0b f303 	lslgt.w	r3, fp, r3
 800b146:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b14a:	bfda      	itte	le
 800b14c:	f1c3 0320 	rsble	r3, r3, #32
 800b150:	fa06 f003 	lslle.w	r0, r6, r3
 800b154:	4318      	orrgt	r0, r3
 800b156:	f7f5 f9d5 	bl	8000504 <__aeabi_ui2d>
 800b15a:	2301      	movs	r3, #1
 800b15c:	4606      	mov	r6, r0
 800b15e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b162:	3d01      	subs	r5, #1
 800b164:	930e      	str	r3, [sp, #56]	; 0x38
 800b166:	e76a      	b.n	800b03e <_dtoa_r+0x116>
 800b168:	2301      	movs	r3, #1
 800b16a:	e7b2      	b.n	800b0d2 <_dtoa_r+0x1aa>
 800b16c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b16e:	e7b1      	b.n	800b0d4 <_dtoa_r+0x1ac>
 800b170:	9b04      	ldr	r3, [sp, #16]
 800b172:	9a00      	ldr	r2, [sp, #0]
 800b174:	1a9b      	subs	r3, r3, r2
 800b176:	9304      	str	r3, [sp, #16]
 800b178:	4253      	negs	r3, r2
 800b17a:	9307      	str	r3, [sp, #28]
 800b17c:	2300      	movs	r3, #0
 800b17e:	930a      	str	r3, [sp, #40]	; 0x28
 800b180:	e7bf      	b.n	800b102 <_dtoa_r+0x1da>
 800b182:	2300      	movs	r3, #0
 800b184:	9308      	str	r3, [sp, #32]
 800b186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b188:	2b00      	cmp	r3, #0
 800b18a:	dc55      	bgt.n	800b238 <_dtoa_r+0x310>
 800b18c:	2301      	movs	r3, #1
 800b18e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b192:	461a      	mov	r2, r3
 800b194:	9209      	str	r2, [sp, #36]	; 0x24
 800b196:	e00c      	b.n	800b1b2 <_dtoa_r+0x28a>
 800b198:	2301      	movs	r3, #1
 800b19a:	e7f3      	b.n	800b184 <_dtoa_r+0x25c>
 800b19c:	2300      	movs	r3, #0
 800b19e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1a0:	9308      	str	r3, [sp, #32]
 800b1a2:	9b00      	ldr	r3, [sp, #0]
 800b1a4:	4413      	add	r3, r2
 800b1a6:	9302      	str	r3, [sp, #8]
 800b1a8:	3301      	adds	r3, #1
 800b1aa:	2b01      	cmp	r3, #1
 800b1ac:	9303      	str	r3, [sp, #12]
 800b1ae:	bfb8      	it	lt
 800b1b0:	2301      	movlt	r3, #1
 800b1b2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b1b4:	2200      	movs	r2, #0
 800b1b6:	6042      	str	r2, [r0, #4]
 800b1b8:	2204      	movs	r2, #4
 800b1ba:	f102 0614 	add.w	r6, r2, #20
 800b1be:	429e      	cmp	r6, r3
 800b1c0:	6841      	ldr	r1, [r0, #4]
 800b1c2:	d93d      	bls.n	800b240 <_dtoa_r+0x318>
 800b1c4:	4620      	mov	r0, r4
 800b1c6:	f000 fca9 	bl	800bb1c <_Balloc>
 800b1ca:	9001      	str	r0, [sp, #4]
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	d13b      	bne.n	800b248 <_dtoa_r+0x320>
 800b1d0:	4b11      	ldr	r3, [pc, #68]	; (800b218 <_dtoa_r+0x2f0>)
 800b1d2:	4602      	mov	r2, r0
 800b1d4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b1d8:	e6c0      	b.n	800af5c <_dtoa_r+0x34>
 800b1da:	2301      	movs	r3, #1
 800b1dc:	e7df      	b.n	800b19e <_dtoa_r+0x276>
 800b1de:	bf00      	nop
 800b1e0:	636f4361 	.word	0x636f4361
 800b1e4:	3fd287a7 	.word	0x3fd287a7
 800b1e8:	8b60c8b3 	.word	0x8b60c8b3
 800b1ec:	3fc68a28 	.word	0x3fc68a28
 800b1f0:	509f79fb 	.word	0x509f79fb
 800b1f4:	3fd34413 	.word	0x3fd34413
 800b1f8:	0800ed75 	.word	0x0800ed75
 800b1fc:	0800ed8c 	.word	0x0800ed8c
 800b200:	7ff00000 	.word	0x7ff00000
 800b204:	0800ed71 	.word	0x0800ed71
 800b208:	0800ed68 	.word	0x0800ed68
 800b20c:	0800ed45 	.word	0x0800ed45
 800b210:	3ff80000 	.word	0x3ff80000
 800b214:	0800ee80 	.word	0x0800ee80
 800b218:	0800ede7 	.word	0x0800ede7
 800b21c:	2501      	movs	r5, #1
 800b21e:	2300      	movs	r3, #0
 800b220:	9306      	str	r3, [sp, #24]
 800b222:	9508      	str	r5, [sp, #32]
 800b224:	f04f 33ff 	mov.w	r3, #4294967295
 800b228:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b22c:	2200      	movs	r2, #0
 800b22e:	2312      	movs	r3, #18
 800b230:	e7b0      	b.n	800b194 <_dtoa_r+0x26c>
 800b232:	2301      	movs	r3, #1
 800b234:	9308      	str	r3, [sp, #32]
 800b236:	e7f5      	b.n	800b224 <_dtoa_r+0x2fc>
 800b238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b23a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b23e:	e7b8      	b.n	800b1b2 <_dtoa_r+0x28a>
 800b240:	3101      	adds	r1, #1
 800b242:	6041      	str	r1, [r0, #4]
 800b244:	0052      	lsls	r2, r2, #1
 800b246:	e7b8      	b.n	800b1ba <_dtoa_r+0x292>
 800b248:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b24a:	9a01      	ldr	r2, [sp, #4]
 800b24c:	601a      	str	r2, [r3, #0]
 800b24e:	9b03      	ldr	r3, [sp, #12]
 800b250:	2b0e      	cmp	r3, #14
 800b252:	f200 809d 	bhi.w	800b390 <_dtoa_r+0x468>
 800b256:	2d00      	cmp	r5, #0
 800b258:	f000 809a 	beq.w	800b390 <_dtoa_r+0x468>
 800b25c:	9b00      	ldr	r3, [sp, #0]
 800b25e:	2b00      	cmp	r3, #0
 800b260:	dd32      	ble.n	800b2c8 <_dtoa_r+0x3a0>
 800b262:	4ab7      	ldr	r2, [pc, #732]	; (800b540 <_dtoa_r+0x618>)
 800b264:	f003 030f 	and.w	r3, r3, #15
 800b268:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b26c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b270:	9b00      	ldr	r3, [sp, #0]
 800b272:	05d8      	lsls	r0, r3, #23
 800b274:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b278:	d516      	bpl.n	800b2a8 <_dtoa_r+0x380>
 800b27a:	4bb2      	ldr	r3, [pc, #712]	; (800b544 <_dtoa_r+0x61c>)
 800b27c:	ec51 0b19 	vmov	r0, r1, d9
 800b280:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b284:	f7f5 fae2 	bl	800084c <__aeabi_ddiv>
 800b288:	f007 070f 	and.w	r7, r7, #15
 800b28c:	4682      	mov	sl, r0
 800b28e:	468b      	mov	fp, r1
 800b290:	2503      	movs	r5, #3
 800b292:	4eac      	ldr	r6, [pc, #688]	; (800b544 <_dtoa_r+0x61c>)
 800b294:	b957      	cbnz	r7, 800b2ac <_dtoa_r+0x384>
 800b296:	4642      	mov	r2, r8
 800b298:	464b      	mov	r3, r9
 800b29a:	4650      	mov	r0, sl
 800b29c:	4659      	mov	r1, fp
 800b29e:	f7f5 fad5 	bl	800084c <__aeabi_ddiv>
 800b2a2:	4682      	mov	sl, r0
 800b2a4:	468b      	mov	fp, r1
 800b2a6:	e028      	b.n	800b2fa <_dtoa_r+0x3d2>
 800b2a8:	2502      	movs	r5, #2
 800b2aa:	e7f2      	b.n	800b292 <_dtoa_r+0x36a>
 800b2ac:	07f9      	lsls	r1, r7, #31
 800b2ae:	d508      	bpl.n	800b2c2 <_dtoa_r+0x39a>
 800b2b0:	4640      	mov	r0, r8
 800b2b2:	4649      	mov	r1, r9
 800b2b4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b2b8:	f7f5 f99e 	bl	80005f8 <__aeabi_dmul>
 800b2bc:	3501      	adds	r5, #1
 800b2be:	4680      	mov	r8, r0
 800b2c0:	4689      	mov	r9, r1
 800b2c2:	107f      	asrs	r7, r7, #1
 800b2c4:	3608      	adds	r6, #8
 800b2c6:	e7e5      	b.n	800b294 <_dtoa_r+0x36c>
 800b2c8:	f000 809b 	beq.w	800b402 <_dtoa_r+0x4da>
 800b2cc:	9b00      	ldr	r3, [sp, #0]
 800b2ce:	4f9d      	ldr	r7, [pc, #628]	; (800b544 <_dtoa_r+0x61c>)
 800b2d0:	425e      	negs	r6, r3
 800b2d2:	4b9b      	ldr	r3, [pc, #620]	; (800b540 <_dtoa_r+0x618>)
 800b2d4:	f006 020f 	and.w	r2, r6, #15
 800b2d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e0:	ec51 0b19 	vmov	r0, r1, d9
 800b2e4:	f7f5 f988 	bl	80005f8 <__aeabi_dmul>
 800b2e8:	1136      	asrs	r6, r6, #4
 800b2ea:	4682      	mov	sl, r0
 800b2ec:	468b      	mov	fp, r1
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	2502      	movs	r5, #2
 800b2f2:	2e00      	cmp	r6, #0
 800b2f4:	d17a      	bne.n	800b3ec <_dtoa_r+0x4c4>
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	d1d3      	bne.n	800b2a2 <_dtoa_r+0x37a>
 800b2fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	f000 8082 	beq.w	800b406 <_dtoa_r+0x4de>
 800b302:	4b91      	ldr	r3, [pc, #580]	; (800b548 <_dtoa_r+0x620>)
 800b304:	2200      	movs	r2, #0
 800b306:	4650      	mov	r0, sl
 800b308:	4659      	mov	r1, fp
 800b30a:	f7f5 fbe7 	bl	8000adc <__aeabi_dcmplt>
 800b30e:	2800      	cmp	r0, #0
 800b310:	d079      	beq.n	800b406 <_dtoa_r+0x4de>
 800b312:	9b03      	ldr	r3, [sp, #12]
 800b314:	2b00      	cmp	r3, #0
 800b316:	d076      	beq.n	800b406 <_dtoa_r+0x4de>
 800b318:	9b02      	ldr	r3, [sp, #8]
 800b31a:	2b00      	cmp	r3, #0
 800b31c:	dd36      	ble.n	800b38c <_dtoa_r+0x464>
 800b31e:	9b00      	ldr	r3, [sp, #0]
 800b320:	4650      	mov	r0, sl
 800b322:	4659      	mov	r1, fp
 800b324:	1e5f      	subs	r7, r3, #1
 800b326:	2200      	movs	r2, #0
 800b328:	4b88      	ldr	r3, [pc, #544]	; (800b54c <_dtoa_r+0x624>)
 800b32a:	f7f5 f965 	bl	80005f8 <__aeabi_dmul>
 800b32e:	9e02      	ldr	r6, [sp, #8]
 800b330:	4682      	mov	sl, r0
 800b332:	468b      	mov	fp, r1
 800b334:	3501      	adds	r5, #1
 800b336:	4628      	mov	r0, r5
 800b338:	f7f5 f8f4 	bl	8000524 <__aeabi_i2d>
 800b33c:	4652      	mov	r2, sl
 800b33e:	465b      	mov	r3, fp
 800b340:	f7f5 f95a 	bl	80005f8 <__aeabi_dmul>
 800b344:	4b82      	ldr	r3, [pc, #520]	; (800b550 <_dtoa_r+0x628>)
 800b346:	2200      	movs	r2, #0
 800b348:	f7f4 ffa0 	bl	800028c <__adddf3>
 800b34c:	46d0      	mov	r8, sl
 800b34e:	46d9      	mov	r9, fp
 800b350:	4682      	mov	sl, r0
 800b352:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b356:	2e00      	cmp	r6, #0
 800b358:	d158      	bne.n	800b40c <_dtoa_r+0x4e4>
 800b35a:	4b7e      	ldr	r3, [pc, #504]	; (800b554 <_dtoa_r+0x62c>)
 800b35c:	2200      	movs	r2, #0
 800b35e:	4640      	mov	r0, r8
 800b360:	4649      	mov	r1, r9
 800b362:	f7f4 ff91 	bl	8000288 <__aeabi_dsub>
 800b366:	4652      	mov	r2, sl
 800b368:	465b      	mov	r3, fp
 800b36a:	4680      	mov	r8, r0
 800b36c:	4689      	mov	r9, r1
 800b36e:	f7f5 fbd3 	bl	8000b18 <__aeabi_dcmpgt>
 800b372:	2800      	cmp	r0, #0
 800b374:	f040 8295 	bne.w	800b8a2 <_dtoa_r+0x97a>
 800b378:	4652      	mov	r2, sl
 800b37a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b37e:	4640      	mov	r0, r8
 800b380:	4649      	mov	r1, r9
 800b382:	f7f5 fbab 	bl	8000adc <__aeabi_dcmplt>
 800b386:	2800      	cmp	r0, #0
 800b388:	f040 8289 	bne.w	800b89e <_dtoa_r+0x976>
 800b38c:	ec5b ab19 	vmov	sl, fp, d9
 800b390:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b392:	2b00      	cmp	r3, #0
 800b394:	f2c0 8148 	blt.w	800b628 <_dtoa_r+0x700>
 800b398:	9a00      	ldr	r2, [sp, #0]
 800b39a:	2a0e      	cmp	r2, #14
 800b39c:	f300 8144 	bgt.w	800b628 <_dtoa_r+0x700>
 800b3a0:	4b67      	ldr	r3, [pc, #412]	; (800b540 <_dtoa_r+0x618>)
 800b3a2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b3a6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b3aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	f280 80d5 	bge.w	800b55c <_dtoa_r+0x634>
 800b3b2:	9b03      	ldr	r3, [sp, #12]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	f300 80d1 	bgt.w	800b55c <_dtoa_r+0x634>
 800b3ba:	f040 826f 	bne.w	800b89c <_dtoa_r+0x974>
 800b3be:	4b65      	ldr	r3, [pc, #404]	; (800b554 <_dtoa_r+0x62c>)
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	4640      	mov	r0, r8
 800b3c4:	4649      	mov	r1, r9
 800b3c6:	f7f5 f917 	bl	80005f8 <__aeabi_dmul>
 800b3ca:	4652      	mov	r2, sl
 800b3cc:	465b      	mov	r3, fp
 800b3ce:	f7f5 fb99 	bl	8000b04 <__aeabi_dcmpge>
 800b3d2:	9e03      	ldr	r6, [sp, #12]
 800b3d4:	4637      	mov	r7, r6
 800b3d6:	2800      	cmp	r0, #0
 800b3d8:	f040 8245 	bne.w	800b866 <_dtoa_r+0x93e>
 800b3dc:	9d01      	ldr	r5, [sp, #4]
 800b3de:	2331      	movs	r3, #49	; 0x31
 800b3e0:	f805 3b01 	strb.w	r3, [r5], #1
 800b3e4:	9b00      	ldr	r3, [sp, #0]
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	9300      	str	r3, [sp, #0]
 800b3ea:	e240      	b.n	800b86e <_dtoa_r+0x946>
 800b3ec:	07f2      	lsls	r2, r6, #31
 800b3ee:	d505      	bpl.n	800b3fc <_dtoa_r+0x4d4>
 800b3f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3f4:	f7f5 f900 	bl	80005f8 <__aeabi_dmul>
 800b3f8:	3501      	adds	r5, #1
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	1076      	asrs	r6, r6, #1
 800b3fe:	3708      	adds	r7, #8
 800b400:	e777      	b.n	800b2f2 <_dtoa_r+0x3ca>
 800b402:	2502      	movs	r5, #2
 800b404:	e779      	b.n	800b2fa <_dtoa_r+0x3d2>
 800b406:	9f00      	ldr	r7, [sp, #0]
 800b408:	9e03      	ldr	r6, [sp, #12]
 800b40a:	e794      	b.n	800b336 <_dtoa_r+0x40e>
 800b40c:	9901      	ldr	r1, [sp, #4]
 800b40e:	4b4c      	ldr	r3, [pc, #304]	; (800b540 <_dtoa_r+0x618>)
 800b410:	4431      	add	r1, r6
 800b412:	910d      	str	r1, [sp, #52]	; 0x34
 800b414:	9908      	ldr	r1, [sp, #32]
 800b416:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b41a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b41e:	2900      	cmp	r1, #0
 800b420:	d043      	beq.n	800b4aa <_dtoa_r+0x582>
 800b422:	494d      	ldr	r1, [pc, #308]	; (800b558 <_dtoa_r+0x630>)
 800b424:	2000      	movs	r0, #0
 800b426:	f7f5 fa11 	bl	800084c <__aeabi_ddiv>
 800b42a:	4652      	mov	r2, sl
 800b42c:	465b      	mov	r3, fp
 800b42e:	f7f4 ff2b 	bl	8000288 <__aeabi_dsub>
 800b432:	9d01      	ldr	r5, [sp, #4]
 800b434:	4682      	mov	sl, r0
 800b436:	468b      	mov	fp, r1
 800b438:	4649      	mov	r1, r9
 800b43a:	4640      	mov	r0, r8
 800b43c:	f7f5 fb8c 	bl	8000b58 <__aeabi_d2iz>
 800b440:	4606      	mov	r6, r0
 800b442:	f7f5 f86f 	bl	8000524 <__aeabi_i2d>
 800b446:	4602      	mov	r2, r0
 800b448:	460b      	mov	r3, r1
 800b44a:	4640      	mov	r0, r8
 800b44c:	4649      	mov	r1, r9
 800b44e:	f7f4 ff1b 	bl	8000288 <__aeabi_dsub>
 800b452:	3630      	adds	r6, #48	; 0x30
 800b454:	f805 6b01 	strb.w	r6, [r5], #1
 800b458:	4652      	mov	r2, sl
 800b45a:	465b      	mov	r3, fp
 800b45c:	4680      	mov	r8, r0
 800b45e:	4689      	mov	r9, r1
 800b460:	f7f5 fb3c 	bl	8000adc <__aeabi_dcmplt>
 800b464:	2800      	cmp	r0, #0
 800b466:	d163      	bne.n	800b530 <_dtoa_r+0x608>
 800b468:	4642      	mov	r2, r8
 800b46a:	464b      	mov	r3, r9
 800b46c:	4936      	ldr	r1, [pc, #216]	; (800b548 <_dtoa_r+0x620>)
 800b46e:	2000      	movs	r0, #0
 800b470:	f7f4 ff0a 	bl	8000288 <__aeabi_dsub>
 800b474:	4652      	mov	r2, sl
 800b476:	465b      	mov	r3, fp
 800b478:	f7f5 fb30 	bl	8000adc <__aeabi_dcmplt>
 800b47c:	2800      	cmp	r0, #0
 800b47e:	f040 80b5 	bne.w	800b5ec <_dtoa_r+0x6c4>
 800b482:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b484:	429d      	cmp	r5, r3
 800b486:	d081      	beq.n	800b38c <_dtoa_r+0x464>
 800b488:	4b30      	ldr	r3, [pc, #192]	; (800b54c <_dtoa_r+0x624>)
 800b48a:	2200      	movs	r2, #0
 800b48c:	4650      	mov	r0, sl
 800b48e:	4659      	mov	r1, fp
 800b490:	f7f5 f8b2 	bl	80005f8 <__aeabi_dmul>
 800b494:	4b2d      	ldr	r3, [pc, #180]	; (800b54c <_dtoa_r+0x624>)
 800b496:	4682      	mov	sl, r0
 800b498:	468b      	mov	fp, r1
 800b49a:	4640      	mov	r0, r8
 800b49c:	4649      	mov	r1, r9
 800b49e:	2200      	movs	r2, #0
 800b4a0:	f7f5 f8aa 	bl	80005f8 <__aeabi_dmul>
 800b4a4:	4680      	mov	r8, r0
 800b4a6:	4689      	mov	r9, r1
 800b4a8:	e7c6      	b.n	800b438 <_dtoa_r+0x510>
 800b4aa:	4650      	mov	r0, sl
 800b4ac:	4659      	mov	r1, fp
 800b4ae:	f7f5 f8a3 	bl	80005f8 <__aeabi_dmul>
 800b4b2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4b4:	9d01      	ldr	r5, [sp, #4]
 800b4b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b4b8:	4682      	mov	sl, r0
 800b4ba:	468b      	mov	fp, r1
 800b4bc:	4649      	mov	r1, r9
 800b4be:	4640      	mov	r0, r8
 800b4c0:	f7f5 fb4a 	bl	8000b58 <__aeabi_d2iz>
 800b4c4:	4606      	mov	r6, r0
 800b4c6:	f7f5 f82d 	bl	8000524 <__aeabi_i2d>
 800b4ca:	3630      	adds	r6, #48	; 0x30
 800b4cc:	4602      	mov	r2, r0
 800b4ce:	460b      	mov	r3, r1
 800b4d0:	4640      	mov	r0, r8
 800b4d2:	4649      	mov	r1, r9
 800b4d4:	f7f4 fed8 	bl	8000288 <__aeabi_dsub>
 800b4d8:	f805 6b01 	strb.w	r6, [r5], #1
 800b4dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4de:	429d      	cmp	r5, r3
 800b4e0:	4680      	mov	r8, r0
 800b4e2:	4689      	mov	r9, r1
 800b4e4:	f04f 0200 	mov.w	r2, #0
 800b4e8:	d124      	bne.n	800b534 <_dtoa_r+0x60c>
 800b4ea:	4b1b      	ldr	r3, [pc, #108]	; (800b558 <_dtoa_r+0x630>)
 800b4ec:	4650      	mov	r0, sl
 800b4ee:	4659      	mov	r1, fp
 800b4f0:	f7f4 fecc 	bl	800028c <__adddf3>
 800b4f4:	4602      	mov	r2, r0
 800b4f6:	460b      	mov	r3, r1
 800b4f8:	4640      	mov	r0, r8
 800b4fa:	4649      	mov	r1, r9
 800b4fc:	f7f5 fb0c 	bl	8000b18 <__aeabi_dcmpgt>
 800b500:	2800      	cmp	r0, #0
 800b502:	d173      	bne.n	800b5ec <_dtoa_r+0x6c4>
 800b504:	4652      	mov	r2, sl
 800b506:	465b      	mov	r3, fp
 800b508:	4913      	ldr	r1, [pc, #76]	; (800b558 <_dtoa_r+0x630>)
 800b50a:	2000      	movs	r0, #0
 800b50c:	f7f4 febc 	bl	8000288 <__aeabi_dsub>
 800b510:	4602      	mov	r2, r0
 800b512:	460b      	mov	r3, r1
 800b514:	4640      	mov	r0, r8
 800b516:	4649      	mov	r1, r9
 800b518:	f7f5 fae0 	bl	8000adc <__aeabi_dcmplt>
 800b51c:	2800      	cmp	r0, #0
 800b51e:	f43f af35 	beq.w	800b38c <_dtoa_r+0x464>
 800b522:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b524:	1e6b      	subs	r3, r5, #1
 800b526:	930f      	str	r3, [sp, #60]	; 0x3c
 800b528:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b52c:	2b30      	cmp	r3, #48	; 0x30
 800b52e:	d0f8      	beq.n	800b522 <_dtoa_r+0x5fa>
 800b530:	9700      	str	r7, [sp, #0]
 800b532:	e049      	b.n	800b5c8 <_dtoa_r+0x6a0>
 800b534:	4b05      	ldr	r3, [pc, #20]	; (800b54c <_dtoa_r+0x624>)
 800b536:	f7f5 f85f 	bl	80005f8 <__aeabi_dmul>
 800b53a:	4680      	mov	r8, r0
 800b53c:	4689      	mov	r9, r1
 800b53e:	e7bd      	b.n	800b4bc <_dtoa_r+0x594>
 800b540:	0800ee80 	.word	0x0800ee80
 800b544:	0800ee58 	.word	0x0800ee58
 800b548:	3ff00000 	.word	0x3ff00000
 800b54c:	40240000 	.word	0x40240000
 800b550:	401c0000 	.word	0x401c0000
 800b554:	40140000 	.word	0x40140000
 800b558:	3fe00000 	.word	0x3fe00000
 800b55c:	9d01      	ldr	r5, [sp, #4]
 800b55e:	4656      	mov	r6, sl
 800b560:	465f      	mov	r7, fp
 800b562:	4642      	mov	r2, r8
 800b564:	464b      	mov	r3, r9
 800b566:	4630      	mov	r0, r6
 800b568:	4639      	mov	r1, r7
 800b56a:	f7f5 f96f 	bl	800084c <__aeabi_ddiv>
 800b56e:	f7f5 faf3 	bl	8000b58 <__aeabi_d2iz>
 800b572:	4682      	mov	sl, r0
 800b574:	f7f4 ffd6 	bl	8000524 <__aeabi_i2d>
 800b578:	4642      	mov	r2, r8
 800b57a:	464b      	mov	r3, r9
 800b57c:	f7f5 f83c 	bl	80005f8 <__aeabi_dmul>
 800b580:	4602      	mov	r2, r0
 800b582:	460b      	mov	r3, r1
 800b584:	4630      	mov	r0, r6
 800b586:	4639      	mov	r1, r7
 800b588:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b58c:	f7f4 fe7c 	bl	8000288 <__aeabi_dsub>
 800b590:	f805 6b01 	strb.w	r6, [r5], #1
 800b594:	9e01      	ldr	r6, [sp, #4]
 800b596:	9f03      	ldr	r7, [sp, #12]
 800b598:	1bae      	subs	r6, r5, r6
 800b59a:	42b7      	cmp	r7, r6
 800b59c:	4602      	mov	r2, r0
 800b59e:	460b      	mov	r3, r1
 800b5a0:	d135      	bne.n	800b60e <_dtoa_r+0x6e6>
 800b5a2:	f7f4 fe73 	bl	800028c <__adddf3>
 800b5a6:	4642      	mov	r2, r8
 800b5a8:	464b      	mov	r3, r9
 800b5aa:	4606      	mov	r6, r0
 800b5ac:	460f      	mov	r7, r1
 800b5ae:	f7f5 fab3 	bl	8000b18 <__aeabi_dcmpgt>
 800b5b2:	b9d0      	cbnz	r0, 800b5ea <_dtoa_r+0x6c2>
 800b5b4:	4642      	mov	r2, r8
 800b5b6:	464b      	mov	r3, r9
 800b5b8:	4630      	mov	r0, r6
 800b5ba:	4639      	mov	r1, r7
 800b5bc:	f7f5 fa84 	bl	8000ac8 <__aeabi_dcmpeq>
 800b5c0:	b110      	cbz	r0, 800b5c8 <_dtoa_r+0x6a0>
 800b5c2:	f01a 0f01 	tst.w	sl, #1
 800b5c6:	d110      	bne.n	800b5ea <_dtoa_r+0x6c2>
 800b5c8:	4620      	mov	r0, r4
 800b5ca:	ee18 1a10 	vmov	r1, s16
 800b5ce:	f000 fae5 	bl	800bb9c <_Bfree>
 800b5d2:	2300      	movs	r3, #0
 800b5d4:	9800      	ldr	r0, [sp, #0]
 800b5d6:	702b      	strb	r3, [r5, #0]
 800b5d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5da:	3001      	adds	r0, #1
 800b5dc:	6018      	str	r0, [r3, #0]
 800b5de:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	f43f acf1 	beq.w	800afc8 <_dtoa_r+0xa0>
 800b5e6:	601d      	str	r5, [r3, #0]
 800b5e8:	e4ee      	b.n	800afc8 <_dtoa_r+0xa0>
 800b5ea:	9f00      	ldr	r7, [sp, #0]
 800b5ec:	462b      	mov	r3, r5
 800b5ee:	461d      	mov	r5, r3
 800b5f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b5f4:	2a39      	cmp	r2, #57	; 0x39
 800b5f6:	d106      	bne.n	800b606 <_dtoa_r+0x6de>
 800b5f8:	9a01      	ldr	r2, [sp, #4]
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d1f7      	bne.n	800b5ee <_dtoa_r+0x6c6>
 800b5fe:	9901      	ldr	r1, [sp, #4]
 800b600:	2230      	movs	r2, #48	; 0x30
 800b602:	3701      	adds	r7, #1
 800b604:	700a      	strb	r2, [r1, #0]
 800b606:	781a      	ldrb	r2, [r3, #0]
 800b608:	3201      	adds	r2, #1
 800b60a:	701a      	strb	r2, [r3, #0]
 800b60c:	e790      	b.n	800b530 <_dtoa_r+0x608>
 800b60e:	4ba6      	ldr	r3, [pc, #664]	; (800b8a8 <_dtoa_r+0x980>)
 800b610:	2200      	movs	r2, #0
 800b612:	f7f4 fff1 	bl	80005f8 <__aeabi_dmul>
 800b616:	2200      	movs	r2, #0
 800b618:	2300      	movs	r3, #0
 800b61a:	4606      	mov	r6, r0
 800b61c:	460f      	mov	r7, r1
 800b61e:	f7f5 fa53 	bl	8000ac8 <__aeabi_dcmpeq>
 800b622:	2800      	cmp	r0, #0
 800b624:	d09d      	beq.n	800b562 <_dtoa_r+0x63a>
 800b626:	e7cf      	b.n	800b5c8 <_dtoa_r+0x6a0>
 800b628:	9a08      	ldr	r2, [sp, #32]
 800b62a:	2a00      	cmp	r2, #0
 800b62c:	f000 80d7 	beq.w	800b7de <_dtoa_r+0x8b6>
 800b630:	9a06      	ldr	r2, [sp, #24]
 800b632:	2a01      	cmp	r2, #1
 800b634:	f300 80ba 	bgt.w	800b7ac <_dtoa_r+0x884>
 800b638:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b63a:	2a00      	cmp	r2, #0
 800b63c:	f000 80b2 	beq.w	800b7a4 <_dtoa_r+0x87c>
 800b640:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b644:	9e07      	ldr	r6, [sp, #28]
 800b646:	9d04      	ldr	r5, [sp, #16]
 800b648:	9a04      	ldr	r2, [sp, #16]
 800b64a:	441a      	add	r2, r3
 800b64c:	9204      	str	r2, [sp, #16]
 800b64e:	9a05      	ldr	r2, [sp, #20]
 800b650:	2101      	movs	r1, #1
 800b652:	441a      	add	r2, r3
 800b654:	4620      	mov	r0, r4
 800b656:	9205      	str	r2, [sp, #20]
 800b658:	f000 fb58 	bl	800bd0c <__i2b>
 800b65c:	4607      	mov	r7, r0
 800b65e:	2d00      	cmp	r5, #0
 800b660:	dd0c      	ble.n	800b67c <_dtoa_r+0x754>
 800b662:	9b05      	ldr	r3, [sp, #20]
 800b664:	2b00      	cmp	r3, #0
 800b666:	dd09      	ble.n	800b67c <_dtoa_r+0x754>
 800b668:	42ab      	cmp	r3, r5
 800b66a:	9a04      	ldr	r2, [sp, #16]
 800b66c:	bfa8      	it	ge
 800b66e:	462b      	movge	r3, r5
 800b670:	1ad2      	subs	r2, r2, r3
 800b672:	9204      	str	r2, [sp, #16]
 800b674:	9a05      	ldr	r2, [sp, #20]
 800b676:	1aed      	subs	r5, r5, r3
 800b678:	1ad3      	subs	r3, r2, r3
 800b67a:	9305      	str	r3, [sp, #20]
 800b67c:	9b07      	ldr	r3, [sp, #28]
 800b67e:	b31b      	cbz	r3, 800b6c8 <_dtoa_r+0x7a0>
 800b680:	9b08      	ldr	r3, [sp, #32]
 800b682:	2b00      	cmp	r3, #0
 800b684:	f000 80af 	beq.w	800b7e6 <_dtoa_r+0x8be>
 800b688:	2e00      	cmp	r6, #0
 800b68a:	dd13      	ble.n	800b6b4 <_dtoa_r+0x78c>
 800b68c:	4639      	mov	r1, r7
 800b68e:	4632      	mov	r2, r6
 800b690:	4620      	mov	r0, r4
 800b692:	f000 fbfb 	bl	800be8c <__pow5mult>
 800b696:	ee18 2a10 	vmov	r2, s16
 800b69a:	4601      	mov	r1, r0
 800b69c:	4607      	mov	r7, r0
 800b69e:	4620      	mov	r0, r4
 800b6a0:	f000 fb4a 	bl	800bd38 <__multiply>
 800b6a4:	ee18 1a10 	vmov	r1, s16
 800b6a8:	4680      	mov	r8, r0
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	f000 fa76 	bl	800bb9c <_Bfree>
 800b6b0:	ee08 8a10 	vmov	s16, r8
 800b6b4:	9b07      	ldr	r3, [sp, #28]
 800b6b6:	1b9a      	subs	r2, r3, r6
 800b6b8:	d006      	beq.n	800b6c8 <_dtoa_r+0x7a0>
 800b6ba:	ee18 1a10 	vmov	r1, s16
 800b6be:	4620      	mov	r0, r4
 800b6c0:	f000 fbe4 	bl	800be8c <__pow5mult>
 800b6c4:	ee08 0a10 	vmov	s16, r0
 800b6c8:	2101      	movs	r1, #1
 800b6ca:	4620      	mov	r0, r4
 800b6cc:	f000 fb1e 	bl	800bd0c <__i2b>
 800b6d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	4606      	mov	r6, r0
 800b6d6:	f340 8088 	ble.w	800b7ea <_dtoa_r+0x8c2>
 800b6da:	461a      	mov	r2, r3
 800b6dc:	4601      	mov	r1, r0
 800b6de:	4620      	mov	r0, r4
 800b6e0:	f000 fbd4 	bl	800be8c <__pow5mult>
 800b6e4:	9b06      	ldr	r3, [sp, #24]
 800b6e6:	2b01      	cmp	r3, #1
 800b6e8:	4606      	mov	r6, r0
 800b6ea:	f340 8081 	ble.w	800b7f0 <_dtoa_r+0x8c8>
 800b6ee:	f04f 0800 	mov.w	r8, #0
 800b6f2:	6933      	ldr	r3, [r6, #16]
 800b6f4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b6f8:	6918      	ldr	r0, [r3, #16]
 800b6fa:	f000 fab7 	bl	800bc6c <__hi0bits>
 800b6fe:	f1c0 0020 	rsb	r0, r0, #32
 800b702:	9b05      	ldr	r3, [sp, #20]
 800b704:	4418      	add	r0, r3
 800b706:	f010 001f 	ands.w	r0, r0, #31
 800b70a:	f000 8092 	beq.w	800b832 <_dtoa_r+0x90a>
 800b70e:	f1c0 0320 	rsb	r3, r0, #32
 800b712:	2b04      	cmp	r3, #4
 800b714:	f340 808a 	ble.w	800b82c <_dtoa_r+0x904>
 800b718:	f1c0 001c 	rsb	r0, r0, #28
 800b71c:	9b04      	ldr	r3, [sp, #16]
 800b71e:	4403      	add	r3, r0
 800b720:	9304      	str	r3, [sp, #16]
 800b722:	9b05      	ldr	r3, [sp, #20]
 800b724:	4403      	add	r3, r0
 800b726:	4405      	add	r5, r0
 800b728:	9305      	str	r3, [sp, #20]
 800b72a:	9b04      	ldr	r3, [sp, #16]
 800b72c:	2b00      	cmp	r3, #0
 800b72e:	dd07      	ble.n	800b740 <_dtoa_r+0x818>
 800b730:	ee18 1a10 	vmov	r1, s16
 800b734:	461a      	mov	r2, r3
 800b736:	4620      	mov	r0, r4
 800b738:	f000 fc02 	bl	800bf40 <__lshift>
 800b73c:	ee08 0a10 	vmov	s16, r0
 800b740:	9b05      	ldr	r3, [sp, #20]
 800b742:	2b00      	cmp	r3, #0
 800b744:	dd05      	ble.n	800b752 <_dtoa_r+0x82a>
 800b746:	4631      	mov	r1, r6
 800b748:	461a      	mov	r2, r3
 800b74a:	4620      	mov	r0, r4
 800b74c:	f000 fbf8 	bl	800bf40 <__lshift>
 800b750:	4606      	mov	r6, r0
 800b752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b754:	2b00      	cmp	r3, #0
 800b756:	d06e      	beq.n	800b836 <_dtoa_r+0x90e>
 800b758:	ee18 0a10 	vmov	r0, s16
 800b75c:	4631      	mov	r1, r6
 800b75e:	f000 fc5f 	bl	800c020 <__mcmp>
 800b762:	2800      	cmp	r0, #0
 800b764:	da67      	bge.n	800b836 <_dtoa_r+0x90e>
 800b766:	9b00      	ldr	r3, [sp, #0]
 800b768:	3b01      	subs	r3, #1
 800b76a:	ee18 1a10 	vmov	r1, s16
 800b76e:	9300      	str	r3, [sp, #0]
 800b770:	220a      	movs	r2, #10
 800b772:	2300      	movs	r3, #0
 800b774:	4620      	mov	r0, r4
 800b776:	f000 fa33 	bl	800bbe0 <__multadd>
 800b77a:	9b08      	ldr	r3, [sp, #32]
 800b77c:	ee08 0a10 	vmov	s16, r0
 800b780:	2b00      	cmp	r3, #0
 800b782:	f000 81b1 	beq.w	800bae8 <_dtoa_r+0xbc0>
 800b786:	2300      	movs	r3, #0
 800b788:	4639      	mov	r1, r7
 800b78a:	220a      	movs	r2, #10
 800b78c:	4620      	mov	r0, r4
 800b78e:	f000 fa27 	bl	800bbe0 <__multadd>
 800b792:	9b02      	ldr	r3, [sp, #8]
 800b794:	2b00      	cmp	r3, #0
 800b796:	4607      	mov	r7, r0
 800b798:	f300 808e 	bgt.w	800b8b8 <_dtoa_r+0x990>
 800b79c:	9b06      	ldr	r3, [sp, #24]
 800b79e:	2b02      	cmp	r3, #2
 800b7a0:	dc51      	bgt.n	800b846 <_dtoa_r+0x91e>
 800b7a2:	e089      	b.n	800b8b8 <_dtoa_r+0x990>
 800b7a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b7a6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b7aa:	e74b      	b.n	800b644 <_dtoa_r+0x71c>
 800b7ac:	9b03      	ldr	r3, [sp, #12]
 800b7ae:	1e5e      	subs	r6, r3, #1
 800b7b0:	9b07      	ldr	r3, [sp, #28]
 800b7b2:	42b3      	cmp	r3, r6
 800b7b4:	bfbf      	itttt	lt
 800b7b6:	9b07      	ldrlt	r3, [sp, #28]
 800b7b8:	9607      	strlt	r6, [sp, #28]
 800b7ba:	1af2      	sublt	r2, r6, r3
 800b7bc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b7be:	bfb6      	itet	lt
 800b7c0:	189b      	addlt	r3, r3, r2
 800b7c2:	1b9e      	subge	r6, r3, r6
 800b7c4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b7c6:	9b03      	ldr	r3, [sp, #12]
 800b7c8:	bfb8      	it	lt
 800b7ca:	2600      	movlt	r6, #0
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	bfb7      	itett	lt
 800b7d0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b7d4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b7d8:	1a9d      	sublt	r5, r3, r2
 800b7da:	2300      	movlt	r3, #0
 800b7dc:	e734      	b.n	800b648 <_dtoa_r+0x720>
 800b7de:	9e07      	ldr	r6, [sp, #28]
 800b7e0:	9d04      	ldr	r5, [sp, #16]
 800b7e2:	9f08      	ldr	r7, [sp, #32]
 800b7e4:	e73b      	b.n	800b65e <_dtoa_r+0x736>
 800b7e6:	9a07      	ldr	r2, [sp, #28]
 800b7e8:	e767      	b.n	800b6ba <_dtoa_r+0x792>
 800b7ea:	9b06      	ldr	r3, [sp, #24]
 800b7ec:	2b01      	cmp	r3, #1
 800b7ee:	dc18      	bgt.n	800b822 <_dtoa_r+0x8fa>
 800b7f0:	f1ba 0f00 	cmp.w	sl, #0
 800b7f4:	d115      	bne.n	800b822 <_dtoa_r+0x8fa>
 800b7f6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b7fa:	b993      	cbnz	r3, 800b822 <_dtoa_r+0x8fa>
 800b7fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b800:	0d1b      	lsrs	r3, r3, #20
 800b802:	051b      	lsls	r3, r3, #20
 800b804:	b183      	cbz	r3, 800b828 <_dtoa_r+0x900>
 800b806:	9b04      	ldr	r3, [sp, #16]
 800b808:	3301      	adds	r3, #1
 800b80a:	9304      	str	r3, [sp, #16]
 800b80c:	9b05      	ldr	r3, [sp, #20]
 800b80e:	3301      	adds	r3, #1
 800b810:	9305      	str	r3, [sp, #20]
 800b812:	f04f 0801 	mov.w	r8, #1
 800b816:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b818:	2b00      	cmp	r3, #0
 800b81a:	f47f af6a 	bne.w	800b6f2 <_dtoa_r+0x7ca>
 800b81e:	2001      	movs	r0, #1
 800b820:	e76f      	b.n	800b702 <_dtoa_r+0x7da>
 800b822:	f04f 0800 	mov.w	r8, #0
 800b826:	e7f6      	b.n	800b816 <_dtoa_r+0x8ee>
 800b828:	4698      	mov	r8, r3
 800b82a:	e7f4      	b.n	800b816 <_dtoa_r+0x8ee>
 800b82c:	f43f af7d 	beq.w	800b72a <_dtoa_r+0x802>
 800b830:	4618      	mov	r0, r3
 800b832:	301c      	adds	r0, #28
 800b834:	e772      	b.n	800b71c <_dtoa_r+0x7f4>
 800b836:	9b03      	ldr	r3, [sp, #12]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	dc37      	bgt.n	800b8ac <_dtoa_r+0x984>
 800b83c:	9b06      	ldr	r3, [sp, #24]
 800b83e:	2b02      	cmp	r3, #2
 800b840:	dd34      	ble.n	800b8ac <_dtoa_r+0x984>
 800b842:	9b03      	ldr	r3, [sp, #12]
 800b844:	9302      	str	r3, [sp, #8]
 800b846:	9b02      	ldr	r3, [sp, #8]
 800b848:	b96b      	cbnz	r3, 800b866 <_dtoa_r+0x93e>
 800b84a:	4631      	mov	r1, r6
 800b84c:	2205      	movs	r2, #5
 800b84e:	4620      	mov	r0, r4
 800b850:	f000 f9c6 	bl	800bbe0 <__multadd>
 800b854:	4601      	mov	r1, r0
 800b856:	4606      	mov	r6, r0
 800b858:	ee18 0a10 	vmov	r0, s16
 800b85c:	f000 fbe0 	bl	800c020 <__mcmp>
 800b860:	2800      	cmp	r0, #0
 800b862:	f73f adbb 	bgt.w	800b3dc <_dtoa_r+0x4b4>
 800b866:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b868:	9d01      	ldr	r5, [sp, #4]
 800b86a:	43db      	mvns	r3, r3
 800b86c:	9300      	str	r3, [sp, #0]
 800b86e:	f04f 0800 	mov.w	r8, #0
 800b872:	4631      	mov	r1, r6
 800b874:	4620      	mov	r0, r4
 800b876:	f000 f991 	bl	800bb9c <_Bfree>
 800b87a:	2f00      	cmp	r7, #0
 800b87c:	f43f aea4 	beq.w	800b5c8 <_dtoa_r+0x6a0>
 800b880:	f1b8 0f00 	cmp.w	r8, #0
 800b884:	d005      	beq.n	800b892 <_dtoa_r+0x96a>
 800b886:	45b8      	cmp	r8, r7
 800b888:	d003      	beq.n	800b892 <_dtoa_r+0x96a>
 800b88a:	4641      	mov	r1, r8
 800b88c:	4620      	mov	r0, r4
 800b88e:	f000 f985 	bl	800bb9c <_Bfree>
 800b892:	4639      	mov	r1, r7
 800b894:	4620      	mov	r0, r4
 800b896:	f000 f981 	bl	800bb9c <_Bfree>
 800b89a:	e695      	b.n	800b5c8 <_dtoa_r+0x6a0>
 800b89c:	2600      	movs	r6, #0
 800b89e:	4637      	mov	r7, r6
 800b8a0:	e7e1      	b.n	800b866 <_dtoa_r+0x93e>
 800b8a2:	9700      	str	r7, [sp, #0]
 800b8a4:	4637      	mov	r7, r6
 800b8a6:	e599      	b.n	800b3dc <_dtoa_r+0x4b4>
 800b8a8:	40240000 	.word	0x40240000
 800b8ac:	9b08      	ldr	r3, [sp, #32]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	f000 80ca 	beq.w	800ba48 <_dtoa_r+0xb20>
 800b8b4:	9b03      	ldr	r3, [sp, #12]
 800b8b6:	9302      	str	r3, [sp, #8]
 800b8b8:	2d00      	cmp	r5, #0
 800b8ba:	dd05      	ble.n	800b8c8 <_dtoa_r+0x9a0>
 800b8bc:	4639      	mov	r1, r7
 800b8be:	462a      	mov	r2, r5
 800b8c0:	4620      	mov	r0, r4
 800b8c2:	f000 fb3d 	bl	800bf40 <__lshift>
 800b8c6:	4607      	mov	r7, r0
 800b8c8:	f1b8 0f00 	cmp.w	r8, #0
 800b8cc:	d05b      	beq.n	800b986 <_dtoa_r+0xa5e>
 800b8ce:	6879      	ldr	r1, [r7, #4]
 800b8d0:	4620      	mov	r0, r4
 800b8d2:	f000 f923 	bl	800bb1c <_Balloc>
 800b8d6:	4605      	mov	r5, r0
 800b8d8:	b928      	cbnz	r0, 800b8e6 <_dtoa_r+0x9be>
 800b8da:	4b87      	ldr	r3, [pc, #540]	; (800baf8 <_dtoa_r+0xbd0>)
 800b8dc:	4602      	mov	r2, r0
 800b8de:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b8e2:	f7ff bb3b 	b.w	800af5c <_dtoa_r+0x34>
 800b8e6:	693a      	ldr	r2, [r7, #16]
 800b8e8:	3202      	adds	r2, #2
 800b8ea:	0092      	lsls	r2, r2, #2
 800b8ec:	f107 010c 	add.w	r1, r7, #12
 800b8f0:	300c      	adds	r0, #12
 800b8f2:	f7fe fded 	bl	800a4d0 <memcpy>
 800b8f6:	2201      	movs	r2, #1
 800b8f8:	4629      	mov	r1, r5
 800b8fa:	4620      	mov	r0, r4
 800b8fc:	f000 fb20 	bl	800bf40 <__lshift>
 800b900:	9b01      	ldr	r3, [sp, #4]
 800b902:	f103 0901 	add.w	r9, r3, #1
 800b906:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b90a:	4413      	add	r3, r2
 800b90c:	9305      	str	r3, [sp, #20]
 800b90e:	f00a 0301 	and.w	r3, sl, #1
 800b912:	46b8      	mov	r8, r7
 800b914:	9304      	str	r3, [sp, #16]
 800b916:	4607      	mov	r7, r0
 800b918:	4631      	mov	r1, r6
 800b91a:	ee18 0a10 	vmov	r0, s16
 800b91e:	f7ff fa77 	bl	800ae10 <quorem>
 800b922:	4641      	mov	r1, r8
 800b924:	9002      	str	r0, [sp, #8]
 800b926:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b92a:	ee18 0a10 	vmov	r0, s16
 800b92e:	f000 fb77 	bl	800c020 <__mcmp>
 800b932:	463a      	mov	r2, r7
 800b934:	9003      	str	r0, [sp, #12]
 800b936:	4631      	mov	r1, r6
 800b938:	4620      	mov	r0, r4
 800b93a:	f000 fb8d 	bl	800c058 <__mdiff>
 800b93e:	68c2      	ldr	r2, [r0, #12]
 800b940:	f109 3bff 	add.w	fp, r9, #4294967295
 800b944:	4605      	mov	r5, r0
 800b946:	bb02      	cbnz	r2, 800b98a <_dtoa_r+0xa62>
 800b948:	4601      	mov	r1, r0
 800b94a:	ee18 0a10 	vmov	r0, s16
 800b94e:	f000 fb67 	bl	800c020 <__mcmp>
 800b952:	4602      	mov	r2, r0
 800b954:	4629      	mov	r1, r5
 800b956:	4620      	mov	r0, r4
 800b958:	9207      	str	r2, [sp, #28]
 800b95a:	f000 f91f 	bl	800bb9c <_Bfree>
 800b95e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b962:	ea43 0102 	orr.w	r1, r3, r2
 800b966:	9b04      	ldr	r3, [sp, #16]
 800b968:	430b      	orrs	r3, r1
 800b96a:	464d      	mov	r5, r9
 800b96c:	d10f      	bne.n	800b98e <_dtoa_r+0xa66>
 800b96e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b972:	d02a      	beq.n	800b9ca <_dtoa_r+0xaa2>
 800b974:	9b03      	ldr	r3, [sp, #12]
 800b976:	2b00      	cmp	r3, #0
 800b978:	dd02      	ble.n	800b980 <_dtoa_r+0xa58>
 800b97a:	9b02      	ldr	r3, [sp, #8]
 800b97c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b980:	f88b a000 	strb.w	sl, [fp]
 800b984:	e775      	b.n	800b872 <_dtoa_r+0x94a>
 800b986:	4638      	mov	r0, r7
 800b988:	e7ba      	b.n	800b900 <_dtoa_r+0x9d8>
 800b98a:	2201      	movs	r2, #1
 800b98c:	e7e2      	b.n	800b954 <_dtoa_r+0xa2c>
 800b98e:	9b03      	ldr	r3, [sp, #12]
 800b990:	2b00      	cmp	r3, #0
 800b992:	db04      	blt.n	800b99e <_dtoa_r+0xa76>
 800b994:	9906      	ldr	r1, [sp, #24]
 800b996:	430b      	orrs	r3, r1
 800b998:	9904      	ldr	r1, [sp, #16]
 800b99a:	430b      	orrs	r3, r1
 800b99c:	d122      	bne.n	800b9e4 <_dtoa_r+0xabc>
 800b99e:	2a00      	cmp	r2, #0
 800b9a0:	ddee      	ble.n	800b980 <_dtoa_r+0xa58>
 800b9a2:	ee18 1a10 	vmov	r1, s16
 800b9a6:	2201      	movs	r2, #1
 800b9a8:	4620      	mov	r0, r4
 800b9aa:	f000 fac9 	bl	800bf40 <__lshift>
 800b9ae:	4631      	mov	r1, r6
 800b9b0:	ee08 0a10 	vmov	s16, r0
 800b9b4:	f000 fb34 	bl	800c020 <__mcmp>
 800b9b8:	2800      	cmp	r0, #0
 800b9ba:	dc03      	bgt.n	800b9c4 <_dtoa_r+0xa9c>
 800b9bc:	d1e0      	bne.n	800b980 <_dtoa_r+0xa58>
 800b9be:	f01a 0f01 	tst.w	sl, #1
 800b9c2:	d0dd      	beq.n	800b980 <_dtoa_r+0xa58>
 800b9c4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b9c8:	d1d7      	bne.n	800b97a <_dtoa_r+0xa52>
 800b9ca:	2339      	movs	r3, #57	; 0x39
 800b9cc:	f88b 3000 	strb.w	r3, [fp]
 800b9d0:	462b      	mov	r3, r5
 800b9d2:	461d      	mov	r5, r3
 800b9d4:	3b01      	subs	r3, #1
 800b9d6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b9da:	2a39      	cmp	r2, #57	; 0x39
 800b9dc:	d071      	beq.n	800bac2 <_dtoa_r+0xb9a>
 800b9de:	3201      	adds	r2, #1
 800b9e0:	701a      	strb	r2, [r3, #0]
 800b9e2:	e746      	b.n	800b872 <_dtoa_r+0x94a>
 800b9e4:	2a00      	cmp	r2, #0
 800b9e6:	dd07      	ble.n	800b9f8 <_dtoa_r+0xad0>
 800b9e8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b9ec:	d0ed      	beq.n	800b9ca <_dtoa_r+0xaa2>
 800b9ee:	f10a 0301 	add.w	r3, sl, #1
 800b9f2:	f88b 3000 	strb.w	r3, [fp]
 800b9f6:	e73c      	b.n	800b872 <_dtoa_r+0x94a>
 800b9f8:	9b05      	ldr	r3, [sp, #20]
 800b9fa:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b9fe:	4599      	cmp	r9, r3
 800ba00:	d047      	beq.n	800ba92 <_dtoa_r+0xb6a>
 800ba02:	ee18 1a10 	vmov	r1, s16
 800ba06:	2300      	movs	r3, #0
 800ba08:	220a      	movs	r2, #10
 800ba0a:	4620      	mov	r0, r4
 800ba0c:	f000 f8e8 	bl	800bbe0 <__multadd>
 800ba10:	45b8      	cmp	r8, r7
 800ba12:	ee08 0a10 	vmov	s16, r0
 800ba16:	f04f 0300 	mov.w	r3, #0
 800ba1a:	f04f 020a 	mov.w	r2, #10
 800ba1e:	4641      	mov	r1, r8
 800ba20:	4620      	mov	r0, r4
 800ba22:	d106      	bne.n	800ba32 <_dtoa_r+0xb0a>
 800ba24:	f000 f8dc 	bl	800bbe0 <__multadd>
 800ba28:	4680      	mov	r8, r0
 800ba2a:	4607      	mov	r7, r0
 800ba2c:	f109 0901 	add.w	r9, r9, #1
 800ba30:	e772      	b.n	800b918 <_dtoa_r+0x9f0>
 800ba32:	f000 f8d5 	bl	800bbe0 <__multadd>
 800ba36:	4639      	mov	r1, r7
 800ba38:	4680      	mov	r8, r0
 800ba3a:	2300      	movs	r3, #0
 800ba3c:	220a      	movs	r2, #10
 800ba3e:	4620      	mov	r0, r4
 800ba40:	f000 f8ce 	bl	800bbe0 <__multadd>
 800ba44:	4607      	mov	r7, r0
 800ba46:	e7f1      	b.n	800ba2c <_dtoa_r+0xb04>
 800ba48:	9b03      	ldr	r3, [sp, #12]
 800ba4a:	9302      	str	r3, [sp, #8]
 800ba4c:	9d01      	ldr	r5, [sp, #4]
 800ba4e:	ee18 0a10 	vmov	r0, s16
 800ba52:	4631      	mov	r1, r6
 800ba54:	f7ff f9dc 	bl	800ae10 <quorem>
 800ba58:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ba5c:	9b01      	ldr	r3, [sp, #4]
 800ba5e:	f805 ab01 	strb.w	sl, [r5], #1
 800ba62:	1aea      	subs	r2, r5, r3
 800ba64:	9b02      	ldr	r3, [sp, #8]
 800ba66:	4293      	cmp	r3, r2
 800ba68:	dd09      	ble.n	800ba7e <_dtoa_r+0xb56>
 800ba6a:	ee18 1a10 	vmov	r1, s16
 800ba6e:	2300      	movs	r3, #0
 800ba70:	220a      	movs	r2, #10
 800ba72:	4620      	mov	r0, r4
 800ba74:	f000 f8b4 	bl	800bbe0 <__multadd>
 800ba78:	ee08 0a10 	vmov	s16, r0
 800ba7c:	e7e7      	b.n	800ba4e <_dtoa_r+0xb26>
 800ba7e:	9b02      	ldr	r3, [sp, #8]
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	bfc8      	it	gt
 800ba84:	461d      	movgt	r5, r3
 800ba86:	9b01      	ldr	r3, [sp, #4]
 800ba88:	bfd8      	it	le
 800ba8a:	2501      	movle	r5, #1
 800ba8c:	441d      	add	r5, r3
 800ba8e:	f04f 0800 	mov.w	r8, #0
 800ba92:	ee18 1a10 	vmov	r1, s16
 800ba96:	2201      	movs	r2, #1
 800ba98:	4620      	mov	r0, r4
 800ba9a:	f000 fa51 	bl	800bf40 <__lshift>
 800ba9e:	4631      	mov	r1, r6
 800baa0:	ee08 0a10 	vmov	s16, r0
 800baa4:	f000 fabc 	bl	800c020 <__mcmp>
 800baa8:	2800      	cmp	r0, #0
 800baaa:	dc91      	bgt.n	800b9d0 <_dtoa_r+0xaa8>
 800baac:	d102      	bne.n	800bab4 <_dtoa_r+0xb8c>
 800baae:	f01a 0f01 	tst.w	sl, #1
 800bab2:	d18d      	bne.n	800b9d0 <_dtoa_r+0xaa8>
 800bab4:	462b      	mov	r3, r5
 800bab6:	461d      	mov	r5, r3
 800bab8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800babc:	2a30      	cmp	r2, #48	; 0x30
 800babe:	d0fa      	beq.n	800bab6 <_dtoa_r+0xb8e>
 800bac0:	e6d7      	b.n	800b872 <_dtoa_r+0x94a>
 800bac2:	9a01      	ldr	r2, [sp, #4]
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d184      	bne.n	800b9d2 <_dtoa_r+0xaaa>
 800bac8:	9b00      	ldr	r3, [sp, #0]
 800baca:	3301      	adds	r3, #1
 800bacc:	9300      	str	r3, [sp, #0]
 800bace:	2331      	movs	r3, #49	; 0x31
 800bad0:	7013      	strb	r3, [r2, #0]
 800bad2:	e6ce      	b.n	800b872 <_dtoa_r+0x94a>
 800bad4:	4b09      	ldr	r3, [pc, #36]	; (800bafc <_dtoa_r+0xbd4>)
 800bad6:	f7ff ba95 	b.w	800b004 <_dtoa_r+0xdc>
 800bada:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800badc:	2b00      	cmp	r3, #0
 800bade:	f47f aa6e 	bne.w	800afbe <_dtoa_r+0x96>
 800bae2:	4b07      	ldr	r3, [pc, #28]	; (800bb00 <_dtoa_r+0xbd8>)
 800bae4:	f7ff ba8e 	b.w	800b004 <_dtoa_r+0xdc>
 800bae8:	9b02      	ldr	r3, [sp, #8]
 800baea:	2b00      	cmp	r3, #0
 800baec:	dcae      	bgt.n	800ba4c <_dtoa_r+0xb24>
 800baee:	9b06      	ldr	r3, [sp, #24]
 800baf0:	2b02      	cmp	r3, #2
 800baf2:	f73f aea8 	bgt.w	800b846 <_dtoa_r+0x91e>
 800baf6:	e7a9      	b.n	800ba4c <_dtoa_r+0xb24>
 800baf8:	0800ede7 	.word	0x0800ede7
 800bafc:	0800ed44 	.word	0x0800ed44
 800bb00:	0800ed68 	.word	0x0800ed68

0800bb04 <_localeconv_r>:
 800bb04:	4800      	ldr	r0, [pc, #0]	; (800bb08 <_localeconv_r+0x4>)
 800bb06:	4770      	bx	lr
 800bb08:	200001a0 	.word	0x200001a0

0800bb0c <malloc>:
 800bb0c:	4b02      	ldr	r3, [pc, #8]	; (800bb18 <malloc+0xc>)
 800bb0e:	4601      	mov	r1, r0
 800bb10:	6818      	ldr	r0, [r3, #0]
 800bb12:	f000 bc09 	b.w	800c328 <_malloc_r>
 800bb16:	bf00      	nop
 800bb18:	2000004c 	.word	0x2000004c

0800bb1c <_Balloc>:
 800bb1c:	b570      	push	{r4, r5, r6, lr}
 800bb1e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bb20:	4604      	mov	r4, r0
 800bb22:	460d      	mov	r5, r1
 800bb24:	b976      	cbnz	r6, 800bb44 <_Balloc+0x28>
 800bb26:	2010      	movs	r0, #16
 800bb28:	f7ff fff0 	bl	800bb0c <malloc>
 800bb2c:	4602      	mov	r2, r0
 800bb2e:	6260      	str	r0, [r4, #36]	; 0x24
 800bb30:	b920      	cbnz	r0, 800bb3c <_Balloc+0x20>
 800bb32:	4b18      	ldr	r3, [pc, #96]	; (800bb94 <_Balloc+0x78>)
 800bb34:	4818      	ldr	r0, [pc, #96]	; (800bb98 <_Balloc+0x7c>)
 800bb36:	2166      	movs	r1, #102	; 0x66
 800bb38:	f000 fdd6 	bl	800c6e8 <__assert_func>
 800bb3c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb40:	6006      	str	r6, [r0, #0]
 800bb42:	60c6      	str	r6, [r0, #12]
 800bb44:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800bb46:	68f3      	ldr	r3, [r6, #12]
 800bb48:	b183      	cbz	r3, 800bb6c <_Balloc+0x50>
 800bb4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb4c:	68db      	ldr	r3, [r3, #12]
 800bb4e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bb52:	b9b8      	cbnz	r0, 800bb84 <_Balloc+0x68>
 800bb54:	2101      	movs	r1, #1
 800bb56:	fa01 f605 	lsl.w	r6, r1, r5
 800bb5a:	1d72      	adds	r2, r6, #5
 800bb5c:	0092      	lsls	r2, r2, #2
 800bb5e:	4620      	mov	r0, r4
 800bb60:	f000 fb60 	bl	800c224 <_calloc_r>
 800bb64:	b160      	cbz	r0, 800bb80 <_Balloc+0x64>
 800bb66:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800bb6a:	e00e      	b.n	800bb8a <_Balloc+0x6e>
 800bb6c:	2221      	movs	r2, #33	; 0x21
 800bb6e:	2104      	movs	r1, #4
 800bb70:	4620      	mov	r0, r4
 800bb72:	f000 fb57 	bl	800c224 <_calloc_r>
 800bb76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bb78:	60f0      	str	r0, [r6, #12]
 800bb7a:	68db      	ldr	r3, [r3, #12]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d1e4      	bne.n	800bb4a <_Balloc+0x2e>
 800bb80:	2000      	movs	r0, #0
 800bb82:	bd70      	pop	{r4, r5, r6, pc}
 800bb84:	6802      	ldr	r2, [r0, #0]
 800bb86:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bb90:	e7f7      	b.n	800bb82 <_Balloc+0x66>
 800bb92:	bf00      	nop
 800bb94:	0800ed75 	.word	0x0800ed75
 800bb98:	0800edf8 	.word	0x0800edf8

0800bb9c <_Bfree>:
 800bb9c:	b570      	push	{r4, r5, r6, lr}
 800bb9e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800bba0:	4605      	mov	r5, r0
 800bba2:	460c      	mov	r4, r1
 800bba4:	b976      	cbnz	r6, 800bbc4 <_Bfree+0x28>
 800bba6:	2010      	movs	r0, #16
 800bba8:	f7ff ffb0 	bl	800bb0c <malloc>
 800bbac:	4602      	mov	r2, r0
 800bbae:	6268      	str	r0, [r5, #36]	; 0x24
 800bbb0:	b920      	cbnz	r0, 800bbbc <_Bfree+0x20>
 800bbb2:	4b09      	ldr	r3, [pc, #36]	; (800bbd8 <_Bfree+0x3c>)
 800bbb4:	4809      	ldr	r0, [pc, #36]	; (800bbdc <_Bfree+0x40>)
 800bbb6:	218a      	movs	r1, #138	; 0x8a
 800bbb8:	f000 fd96 	bl	800c6e8 <__assert_func>
 800bbbc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bbc0:	6006      	str	r6, [r0, #0]
 800bbc2:	60c6      	str	r6, [r0, #12]
 800bbc4:	b13c      	cbz	r4, 800bbd6 <_Bfree+0x3a>
 800bbc6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800bbc8:	6862      	ldr	r2, [r4, #4]
 800bbca:	68db      	ldr	r3, [r3, #12]
 800bbcc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bbd0:	6021      	str	r1, [r4, #0]
 800bbd2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bbd6:	bd70      	pop	{r4, r5, r6, pc}
 800bbd8:	0800ed75 	.word	0x0800ed75
 800bbdc:	0800edf8 	.word	0x0800edf8

0800bbe0 <__multadd>:
 800bbe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbe4:	690d      	ldr	r5, [r1, #16]
 800bbe6:	4607      	mov	r7, r0
 800bbe8:	460c      	mov	r4, r1
 800bbea:	461e      	mov	r6, r3
 800bbec:	f101 0c14 	add.w	ip, r1, #20
 800bbf0:	2000      	movs	r0, #0
 800bbf2:	f8dc 3000 	ldr.w	r3, [ip]
 800bbf6:	b299      	uxth	r1, r3
 800bbf8:	fb02 6101 	mla	r1, r2, r1, r6
 800bbfc:	0c1e      	lsrs	r6, r3, #16
 800bbfe:	0c0b      	lsrs	r3, r1, #16
 800bc00:	fb02 3306 	mla	r3, r2, r6, r3
 800bc04:	b289      	uxth	r1, r1
 800bc06:	3001      	adds	r0, #1
 800bc08:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bc0c:	4285      	cmp	r5, r0
 800bc0e:	f84c 1b04 	str.w	r1, [ip], #4
 800bc12:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bc16:	dcec      	bgt.n	800bbf2 <__multadd+0x12>
 800bc18:	b30e      	cbz	r6, 800bc5e <__multadd+0x7e>
 800bc1a:	68a3      	ldr	r3, [r4, #8]
 800bc1c:	42ab      	cmp	r3, r5
 800bc1e:	dc19      	bgt.n	800bc54 <__multadd+0x74>
 800bc20:	6861      	ldr	r1, [r4, #4]
 800bc22:	4638      	mov	r0, r7
 800bc24:	3101      	adds	r1, #1
 800bc26:	f7ff ff79 	bl	800bb1c <_Balloc>
 800bc2a:	4680      	mov	r8, r0
 800bc2c:	b928      	cbnz	r0, 800bc3a <__multadd+0x5a>
 800bc2e:	4602      	mov	r2, r0
 800bc30:	4b0c      	ldr	r3, [pc, #48]	; (800bc64 <__multadd+0x84>)
 800bc32:	480d      	ldr	r0, [pc, #52]	; (800bc68 <__multadd+0x88>)
 800bc34:	21b5      	movs	r1, #181	; 0xb5
 800bc36:	f000 fd57 	bl	800c6e8 <__assert_func>
 800bc3a:	6922      	ldr	r2, [r4, #16]
 800bc3c:	3202      	adds	r2, #2
 800bc3e:	f104 010c 	add.w	r1, r4, #12
 800bc42:	0092      	lsls	r2, r2, #2
 800bc44:	300c      	adds	r0, #12
 800bc46:	f7fe fc43 	bl	800a4d0 <memcpy>
 800bc4a:	4621      	mov	r1, r4
 800bc4c:	4638      	mov	r0, r7
 800bc4e:	f7ff ffa5 	bl	800bb9c <_Bfree>
 800bc52:	4644      	mov	r4, r8
 800bc54:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bc58:	3501      	adds	r5, #1
 800bc5a:	615e      	str	r6, [r3, #20]
 800bc5c:	6125      	str	r5, [r4, #16]
 800bc5e:	4620      	mov	r0, r4
 800bc60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc64:	0800ede7 	.word	0x0800ede7
 800bc68:	0800edf8 	.word	0x0800edf8

0800bc6c <__hi0bits>:
 800bc6c:	0c03      	lsrs	r3, r0, #16
 800bc6e:	041b      	lsls	r3, r3, #16
 800bc70:	b9d3      	cbnz	r3, 800bca8 <__hi0bits+0x3c>
 800bc72:	0400      	lsls	r0, r0, #16
 800bc74:	2310      	movs	r3, #16
 800bc76:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bc7a:	bf04      	itt	eq
 800bc7c:	0200      	lsleq	r0, r0, #8
 800bc7e:	3308      	addeq	r3, #8
 800bc80:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bc84:	bf04      	itt	eq
 800bc86:	0100      	lsleq	r0, r0, #4
 800bc88:	3304      	addeq	r3, #4
 800bc8a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bc8e:	bf04      	itt	eq
 800bc90:	0080      	lsleq	r0, r0, #2
 800bc92:	3302      	addeq	r3, #2
 800bc94:	2800      	cmp	r0, #0
 800bc96:	db05      	blt.n	800bca4 <__hi0bits+0x38>
 800bc98:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bc9c:	f103 0301 	add.w	r3, r3, #1
 800bca0:	bf08      	it	eq
 800bca2:	2320      	moveq	r3, #32
 800bca4:	4618      	mov	r0, r3
 800bca6:	4770      	bx	lr
 800bca8:	2300      	movs	r3, #0
 800bcaa:	e7e4      	b.n	800bc76 <__hi0bits+0xa>

0800bcac <__lo0bits>:
 800bcac:	6803      	ldr	r3, [r0, #0]
 800bcae:	f013 0207 	ands.w	r2, r3, #7
 800bcb2:	4601      	mov	r1, r0
 800bcb4:	d00b      	beq.n	800bcce <__lo0bits+0x22>
 800bcb6:	07da      	lsls	r2, r3, #31
 800bcb8:	d423      	bmi.n	800bd02 <__lo0bits+0x56>
 800bcba:	0798      	lsls	r0, r3, #30
 800bcbc:	bf49      	itett	mi
 800bcbe:	085b      	lsrmi	r3, r3, #1
 800bcc0:	089b      	lsrpl	r3, r3, #2
 800bcc2:	2001      	movmi	r0, #1
 800bcc4:	600b      	strmi	r3, [r1, #0]
 800bcc6:	bf5c      	itt	pl
 800bcc8:	600b      	strpl	r3, [r1, #0]
 800bcca:	2002      	movpl	r0, #2
 800bccc:	4770      	bx	lr
 800bcce:	b298      	uxth	r0, r3
 800bcd0:	b9a8      	cbnz	r0, 800bcfe <__lo0bits+0x52>
 800bcd2:	0c1b      	lsrs	r3, r3, #16
 800bcd4:	2010      	movs	r0, #16
 800bcd6:	b2da      	uxtb	r2, r3
 800bcd8:	b90a      	cbnz	r2, 800bcde <__lo0bits+0x32>
 800bcda:	3008      	adds	r0, #8
 800bcdc:	0a1b      	lsrs	r3, r3, #8
 800bcde:	071a      	lsls	r2, r3, #28
 800bce0:	bf04      	itt	eq
 800bce2:	091b      	lsreq	r3, r3, #4
 800bce4:	3004      	addeq	r0, #4
 800bce6:	079a      	lsls	r2, r3, #30
 800bce8:	bf04      	itt	eq
 800bcea:	089b      	lsreq	r3, r3, #2
 800bcec:	3002      	addeq	r0, #2
 800bcee:	07da      	lsls	r2, r3, #31
 800bcf0:	d403      	bmi.n	800bcfa <__lo0bits+0x4e>
 800bcf2:	085b      	lsrs	r3, r3, #1
 800bcf4:	f100 0001 	add.w	r0, r0, #1
 800bcf8:	d005      	beq.n	800bd06 <__lo0bits+0x5a>
 800bcfa:	600b      	str	r3, [r1, #0]
 800bcfc:	4770      	bx	lr
 800bcfe:	4610      	mov	r0, r2
 800bd00:	e7e9      	b.n	800bcd6 <__lo0bits+0x2a>
 800bd02:	2000      	movs	r0, #0
 800bd04:	4770      	bx	lr
 800bd06:	2020      	movs	r0, #32
 800bd08:	4770      	bx	lr
	...

0800bd0c <__i2b>:
 800bd0c:	b510      	push	{r4, lr}
 800bd0e:	460c      	mov	r4, r1
 800bd10:	2101      	movs	r1, #1
 800bd12:	f7ff ff03 	bl	800bb1c <_Balloc>
 800bd16:	4602      	mov	r2, r0
 800bd18:	b928      	cbnz	r0, 800bd26 <__i2b+0x1a>
 800bd1a:	4b05      	ldr	r3, [pc, #20]	; (800bd30 <__i2b+0x24>)
 800bd1c:	4805      	ldr	r0, [pc, #20]	; (800bd34 <__i2b+0x28>)
 800bd1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bd22:	f000 fce1 	bl	800c6e8 <__assert_func>
 800bd26:	2301      	movs	r3, #1
 800bd28:	6144      	str	r4, [r0, #20]
 800bd2a:	6103      	str	r3, [r0, #16]
 800bd2c:	bd10      	pop	{r4, pc}
 800bd2e:	bf00      	nop
 800bd30:	0800ede7 	.word	0x0800ede7
 800bd34:	0800edf8 	.word	0x0800edf8

0800bd38 <__multiply>:
 800bd38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd3c:	4691      	mov	r9, r2
 800bd3e:	690a      	ldr	r2, [r1, #16]
 800bd40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bd44:	429a      	cmp	r2, r3
 800bd46:	bfb8      	it	lt
 800bd48:	460b      	movlt	r3, r1
 800bd4a:	460c      	mov	r4, r1
 800bd4c:	bfbc      	itt	lt
 800bd4e:	464c      	movlt	r4, r9
 800bd50:	4699      	movlt	r9, r3
 800bd52:	6927      	ldr	r7, [r4, #16]
 800bd54:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bd58:	68a3      	ldr	r3, [r4, #8]
 800bd5a:	6861      	ldr	r1, [r4, #4]
 800bd5c:	eb07 060a 	add.w	r6, r7, sl
 800bd60:	42b3      	cmp	r3, r6
 800bd62:	b085      	sub	sp, #20
 800bd64:	bfb8      	it	lt
 800bd66:	3101      	addlt	r1, #1
 800bd68:	f7ff fed8 	bl	800bb1c <_Balloc>
 800bd6c:	b930      	cbnz	r0, 800bd7c <__multiply+0x44>
 800bd6e:	4602      	mov	r2, r0
 800bd70:	4b44      	ldr	r3, [pc, #272]	; (800be84 <__multiply+0x14c>)
 800bd72:	4845      	ldr	r0, [pc, #276]	; (800be88 <__multiply+0x150>)
 800bd74:	f240 115d 	movw	r1, #349	; 0x15d
 800bd78:	f000 fcb6 	bl	800c6e8 <__assert_func>
 800bd7c:	f100 0514 	add.w	r5, r0, #20
 800bd80:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bd84:	462b      	mov	r3, r5
 800bd86:	2200      	movs	r2, #0
 800bd88:	4543      	cmp	r3, r8
 800bd8a:	d321      	bcc.n	800bdd0 <__multiply+0x98>
 800bd8c:	f104 0314 	add.w	r3, r4, #20
 800bd90:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bd94:	f109 0314 	add.w	r3, r9, #20
 800bd98:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bd9c:	9202      	str	r2, [sp, #8]
 800bd9e:	1b3a      	subs	r2, r7, r4
 800bda0:	3a15      	subs	r2, #21
 800bda2:	f022 0203 	bic.w	r2, r2, #3
 800bda6:	3204      	adds	r2, #4
 800bda8:	f104 0115 	add.w	r1, r4, #21
 800bdac:	428f      	cmp	r7, r1
 800bdae:	bf38      	it	cc
 800bdb0:	2204      	movcc	r2, #4
 800bdb2:	9201      	str	r2, [sp, #4]
 800bdb4:	9a02      	ldr	r2, [sp, #8]
 800bdb6:	9303      	str	r3, [sp, #12]
 800bdb8:	429a      	cmp	r2, r3
 800bdba:	d80c      	bhi.n	800bdd6 <__multiply+0x9e>
 800bdbc:	2e00      	cmp	r6, #0
 800bdbe:	dd03      	ble.n	800bdc8 <__multiply+0x90>
 800bdc0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d05a      	beq.n	800be7e <__multiply+0x146>
 800bdc8:	6106      	str	r6, [r0, #16]
 800bdca:	b005      	add	sp, #20
 800bdcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdd0:	f843 2b04 	str.w	r2, [r3], #4
 800bdd4:	e7d8      	b.n	800bd88 <__multiply+0x50>
 800bdd6:	f8b3 a000 	ldrh.w	sl, [r3]
 800bdda:	f1ba 0f00 	cmp.w	sl, #0
 800bdde:	d024      	beq.n	800be2a <__multiply+0xf2>
 800bde0:	f104 0e14 	add.w	lr, r4, #20
 800bde4:	46a9      	mov	r9, r5
 800bde6:	f04f 0c00 	mov.w	ip, #0
 800bdea:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bdee:	f8d9 1000 	ldr.w	r1, [r9]
 800bdf2:	fa1f fb82 	uxth.w	fp, r2
 800bdf6:	b289      	uxth	r1, r1
 800bdf8:	fb0a 110b 	mla	r1, sl, fp, r1
 800bdfc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800be00:	f8d9 2000 	ldr.w	r2, [r9]
 800be04:	4461      	add	r1, ip
 800be06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800be0a:	fb0a c20b 	mla	r2, sl, fp, ip
 800be0e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800be12:	b289      	uxth	r1, r1
 800be14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800be18:	4577      	cmp	r7, lr
 800be1a:	f849 1b04 	str.w	r1, [r9], #4
 800be1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800be22:	d8e2      	bhi.n	800bdea <__multiply+0xb2>
 800be24:	9a01      	ldr	r2, [sp, #4]
 800be26:	f845 c002 	str.w	ip, [r5, r2]
 800be2a:	9a03      	ldr	r2, [sp, #12]
 800be2c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800be30:	3304      	adds	r3, #4
 800be32:	f1b9 0f00 	cmp.w	r9, #0
 800be36:	d020      	beq.n	800be7a <__multiply+0x142>
 800be38:	6829      	ldr	r1, [r5, #0]
 800be3a:	f104 0c14 	add.w	ip, r4, #20
 800be3e:	46ae      	mov	lr, r5
 800be40:	f04f 0a00 	mov.w	sl, #0
 800be44:	f8bc b000 	ldrh.w	fp, [ip]
 800be48:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800be4c:	fb09 220b 	mla	r2, r9, fp, r2
 800be50:	4492      	add	sl, r2
 800be52:	b289      	uxth	r1, r1
 800be54:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800be58:	f84e 1b04 	str.w	r1, [lr], #4
 800be5c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800be60:	f8be 1000 	ldrh.w	r1, [lr]
 800be64:	0c12      	lsrs	r2, r2, #16
 800be66:	fb09 1102 	mla	r1, r9, r2, r1
 800be6a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800be6e:	4567      	cmp	r7, ip
 800be70:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800be74:	d8e6      	bhi.n	800be44 <__multiply+0x10c>
 800be76:	9a01      	ldr	r2, [sp, #4]
 800be78:	50a9      	str	r1, [r5, r2]
 800be7a:	3504      	adds	r5, #4
 800be7c:	e79a      	b.n	800bdb4 <__multiply+0x7c>
 800be7e:	3e01      	subs	r6, #1
 800be80:	e79c      	b.n	800bdbc <__multiply+0x84>
 800be82:	bf00      	nop
 800be84:	0800ede7 	.word	0x0800ede7
 800be88:	0800edf8 	.word	0x0800edf8

0800be8c <__pow5mult>:
 800be8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be90:	4615      	mov	r5, r2
 800be92:	f012 0203 	ands.w	r2, r2, #3
 800be96:	4606      	mov	r6, r0
 800be98:	460f      	mov	r7, r1
 800be9a:	d007      	beq.n	800beac <__pow5mult+0x20>
 800be9c:	4c25      	ldr	r4, [pc, #148]	; (800bf34 <__pow5mult+0xa8>)
 800be9e:	3a01      	subs	r2, #1
 800bea0:	2300      	movs	r3, #0
 800bea2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800bea6:	f7ff fe9b 	bl	800bbe0 <__multadd>
 800beaa:	4607      	mov	r7, r0
 800beac:	10ad      	asrs	r5, r5, #2
 800beae:	d03d      	beq.n	800bf2c <__pow5mult+0xa0>
 800beb0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800beb2:	b97c      	cbnz	r4, 800bed4 <__pow5mult+0x48>
 800beb4:	2010      	movs	r0, #16
 800beb6:	f7ff fe29 	bl	800bb0c <malloc>
 800beba:	4602      	mov	r2, r0
 800bebc:	6270      	str	r0, [r6, #36]	; 0x24
 800bebe:	b928      	cbnz	r0, 800becc <__pow5mult+0x40>
 800bec0:	4b1d      	ldr	r3, [pc, #116]	; (800bf38 <__pow5mult+0xac>)
 800bec2:	481e      	ldr	r0, [pc, #120]	; (800bf3c <__pow5mult+0xb0>)
 800bec4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800bec8:	f000 fc0e 	bl	800c6e8 <__assert_func>
 800becc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800bed0:	6004      	str	r4, [r0, #0]
 800bed2:	60c4      	str	r4, [r0, #12]
 800bed4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800bed8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800bedc:	b94c      	cbnz	r4, 800bef2 <__pow5mult+0x66>
 800bede:	f240 2171 	movw	r1, #625	; 0x271
 800bee2:	4630      	mov	r0, r6
 800bee4:	f7ff ff12 	bl	800bd0c <__i2b>
 800bee8:	2300      	movs	r3, #0
 800beea:	f8c8 0008 	str.w	r0, [r8, #8]
 800beee:	4604      	mov	r4, r0
 800bef0:	6003      	str	r3, [r0, #0]
 800bef2:	f04f 0900 	mov.w	r9, #0
 800bef6:	07eb      	lsls	r3, r5, #31
 800bef8:	d50a      	bpl.n	800bf10 <__pow5mult+0x84>
 800befa:	4639      	mov	r1, r7
 800befc:	4622      	mov	r2, r4
 800befe:	4630      	mov	r0, r6
 800bf00:	f7ff ff1a 	bl	800bd38 <__multiply>
 800bf04:	4639      	mov	r1, r7
 800bf06:	4680      	mov	r8, r0
 800bf08:	4630      	mov	r0, r6
 800bf0a:	f7ff fe47 	bl	800bb9c <_Bfree>
 800bf0e:	4647      	mov	r7, r8
 800bf10:	106d      	asrs	r5, r5, #1
 800bf12:	d00b      	beq.n	800bf2c <__pow5mult+0xa0>
 800bf14:	6820      	ldr	r0, [r4, #0]
 800bf16:	b938      	cbnz	r0, 800bf28 <__pow5mult+0x9c>
 800bf18:	4622      	mov	r2, r4
 800bf1a:	4621      	mov	r1, r4
 800bf1c:	4630      	mov	r0, r6
 800bf1e:	f7ff ff0b 	bl	800bd38 <__multiply>
 800bf22:	6020      	str	r0, [r4, #0]
 800bf24:	f8c0 9000 	str.w	r9, [r0]
 800bf28:	4604      	mov	r4, r0
 800bf2a:	e7e4      	b.n	800bef6 <__pow5mult+0x6a>
 800bf2c:	4638      	mov	r0, r7
 800bf2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bf32:	bf00      	nop
 800bf34:	0800ef48 	.word	0x0800ef48
 800bf38:	0800ed75 	.word	0x0800ed75
 800bf3c:	0800edf8 	.word	0x0800edf8

0800bf40 <__lshift>:
 800bf40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf44:	460c      	mov	r4, r1
 800bf46:	6849      	ldr	r1, [r1, #4]
 800bf48:	6923      	ldr	r3, [r4, #16]
 800bf4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bf4e:	68a3      	ldr	r3, [r4, #8]
 800bf50:	4607      	mov	r7, r0
 800bf52:	4691      	mov	r9, r2
 800bf54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bf58:	f108 0601 	add.w	r6, r8, #1
 800bf5c:	42b3      	cmp	r3, r6
 800bf5e:	db0b      	blt.n	800bf78 <__lshift+0x38>
 800bf60:	4638      	mov	r0, r7
 800bf62:	f7ff fddb 	bl	800bb1c <_Balloc>
 800bf66:	4605      	mov	r5, r0
 800bf68:	b948      	cbnz	r0, 800bf7e <__lshift+0x3e>
 800bf6a:	4602      	mov	r2, r0
 800bf6c:	4b2a      	ldr	r3, [pc, #168]	; (800c018 <__lshift+0xd8>)
 800bf6e:	482b      	ldr	r0, [pc, #172]	; (800c01c <__lshift+0xdc>)
 800bf70:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bf74:	f000 fbb8 	bl	800c6e8 <__assert_func>
 800bf78:	3101      	adds	r1, #1
 800bf7a:	005b      	lsls	r3, r3, #1
 800bf7c:	e7ee      	b.n	800bf5c <__lshift+0x1c>
 800bf7e:	2300      	movs	r3, #0
 800bf80:	f100 0114 	add.w	r1, r0, #20
 800bf84:	f100 0210 	add.w	r2, r0, #16
 800bf88:	4618      	mov	r0, r3
 800bf8a:	4553      	cmp	r3, sl
 800bf8c:	db37      	blt.n	800bffe <__lshift+0xbe>
 800bf8e:	6920      	ldr	r0, [r4, #16]
 800bf90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf94:	f104 0314 	add.w	r3, r4, #20
 800bf98:	f019 091f 	ands.w	r9, r9, #31
 800bf9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bfa0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bfa4:	d02f      	beq.n	800c006 <__lshift+0xc6>
 800bfa6:	f1c9 0e20 	rsb	lr, r9, #32
 800bfaa:	468a      	mov	sl, r1
 800bfac:	f04f 0c00 	mov.w	ip, #0
 800bfb0:	681a      	ldr	r2, [r3, #0]
 800bfb2:	fa02 f209 	lsl.w	r2, r2, r9
 800bfb6:	ea42 020c 	orr.w	r2, r2, ip
 800bfba:	f84a 2b04 	str.w	r2, [sl], #4
 800bfbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800bfc2:	4298      	cmp	r0, r3
 800bfc4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bfc8:	d8f2      	bhi.n	800bfb0 <__lshift+0x70>
 800bfca:	1b03      	subs	r3, r0, r4
 800bfcc:	3b15      	subs	r3, #21
 800bfce:	f023 0303 	bic.w	r3, r3, #3
 800bfd2:	3304      	adds	r3, #4
 800bfd4:	f104 0215 	add.w	r2, r4, #21
 800bfd8:	4290      	cmp	r0, r2
 800bfda:	bf38      	it	cc
 800bfdc:	2304      	movcc	r3, #4
 800bfde:	f841 c003 	str.w	ip, [r1, r3]
 800bfe2:	f1bc 0f00 	cmp.w	ip, #0
 800bfe6:	d001      	beq.n	800bfec <__lshift+0xac>
 800bfe8:	f108 0602 	add.w	r6, r8, #2
 800bfec:	3e01      	subs	r6, #1
 800bfee:	4638      	mov	r0, r7
 800bff0:	612e      	str	r6, [r5, #16]
 800bff2:	4621      	mov	r1, r4
 800bff4:	f7ff fdd2 	bl	800bb9c <_Bfree>
 800bff8:	4628      	mov	r0, r5
 800bffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bffe:	f842 0f04 	str.w	r0, [r2, #4]!
 800c002:	3301      	adds	r3, #1
 800c004:	e7c1      	b.n	800bf8a <__lshift+0x4a>
 800c006:	3904      	subs	r1, #4
 800c008:	f853 2b04 	ldr.w	r2, [r3], #4
 800c00c:	f841 2f04 	str.w	r2, [r1, #4]!
 800c010:	4298      	cmp	r0, r3
 800c012:	d8f9      	bhi.n	800c008 <__lshift+0xc8>
 800c014:	e7ea      	b.n	800bfec <__lshift+0xac>
 800c016:	bf00      	nop
 800c018:	0800ede7 	.word	0x0800ede7
 800c01c:	0800edf8 	.word	0x0800edf8

0800c020 <__mcmp>:
 800c020:	b530      	push	{r4, r5, lr}
 800c022:	6902      	ldr	r2, [r0, #16]
 800c024:	690c      	ldr	r4, [r1, #16]
 800c026:	1b12      	subs	r2, r2, r4
 800c028:	d10e      	bne.n	800c048 <__mcmp+0x28>
 800c02a:	f100 0314 	add.w	r3, r0, #20
 800c02e:	3114      	adds	r1, #20
 800c030:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c034:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c038:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c03c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c040:	42a5      	cmp	r5, r4
 800c042:	d003      	beq.n	800c04c <__mcmp+0x2c>
 800c044:	d305      	bcc.n	800c052 <__mcmp+0x32>
 800c046:	2201      	movs	r2, #1
 800c048:	4610      	mov	r0, r2
 800c04a:	bd30      	pop	{r4, r5, pc}
 800c04c:	4283      	cmp	r3, r0
 800c04e:	d3f3      	bcc.n	800c038 <__mcmp+0x18>
 800c050:	e7fa      	b.n	800c048 <__mcmp+0x28>
 800c052:	f04f 32ff 	mov.w	r2, #4294967295
 800c056:	e7f7      	b.n	800c048 <__mcmp+0x28>

0800c058 <__mdiff>:
 800c058:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c05c:	460c      	mov	r4, r1
 800c05e:	4606      	mov	r6, r0
 800c060:	4611      	mov	r1, r2
 800c062:	4620      	mov	r0, r4
 800c064:	4690      	mov	r8, r2
 800c066:	f7ff ffdb 	bl	800c020 <__mcmp>
 800c06a:	1e05      	subs	r5, r0, #0
 800c06c:	d110      	bne.n	800c090 <__mdiff+0x38>
 800c06e:	4629      	mov	r1, r5
 800c070:	4630      	mov	r0, r6
 800c072:	f7ff fd53 	bl	800bb1c <_Balloc>
 800c076:	b930      	cbnz	r0, 800c086 <__mdiff+0x2e>
 800c078:	4b3a      	ldr	r3, [pc, #232]	; (800c164 <__mdiff+0x10c>)
 800c07a:	4602      	mov	r2, r0
 800c07c:	f240 2132 	movw	r1, #562	; 0x232
 800c080:	4839      	ldr	r0, [pc, #228]	; (800c168 <__mdiff+0x110>)
 800c082:	f000 fb31 	bl	800c6e8 <__assert_func>
 800c086:	2301      	movs	r3, #1
 800c088:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c08c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c090:	bfa4      	itt	ge
 800c092:	4643      	movge	r3, r8
 800c094:	46a0      	movge	r8, r4
 800c096:	4630      	mov	r0, r6
 800c098:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c09c:	bfa6      	itte	ge
 800c09e:	461c      	movge	r4, r3
 800c0a0:	2500      	movge	r5, #0
 800c0a2:	2501      	movlt	r5, #1
 800c0a4:	f7ff fd3a 	bl	800bb1c <_Balloc>
 800c0a8:	b920      	cbnz	r0, 800c0b4 <__mdiff+0x5c>
 800c0aa:	4b2e      	ldr	r3, [pc, #184]	; (800c164 <__mdiff+0x10c>)
 800c0ac:	4602      	mov	r2, r0
 800c0ae:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c0b2:	e7e5      	b.n	800c080 <__mdiff+0x28>
 800c0b4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c0b8:	6926      	ldr	r6, [r4, #16]
 800c0ba:	60c5      	str	r5, [r0, #12]
 800c0bc:	f104 0914 	add.w	r9, r4, #20
 800c0c0:	f108 0514 	add.w	r5, r8, #20
 800c0c4:	f100 0e14 	add.w	lr, r0, #20
 800c0c8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c0cc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c0d0:	f108 0210 	add.w	r2, r8, #16
 800c0d4:	46f2      	mov	sl, lr
 800c0d6:	2100      	movs	r1, #0
 800c0d8:	f859 3b04 	ldr.w	r3, [r9], #4
 800c0dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c0e0:	fa1f f883 	uxth.w	r8, r3
 800c0e4:	fa11 f18b 	uxtah	r1, r1, fp
 800c0e8:	0c1b      	lsrs	r3, r3, #16
 800c0ea:	eba1 0808 	sub.w	r8, r1, r8
 800c0ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c0f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c0f6:	fa1f f888 	uxth.w	r8, r8
 800c0fa:	1419      	asrs	r1, r3, #16
 800c0fc:	454e      	cmp	r6, r9
 800c0fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c102:	f84a 3b04 	str.w	r3, [sl], #4
 800c106:	d8e7      	bhi.n	800c0d8 <__mdiff+0x80>
 800c108:	1b33      	subs	r3, r6, r4
 800c10a:	3b15      	subs	r3, #21
 800c10c:	f023 0303 	bic.w	r3, r3, #3
 800c110:	3304      	adds	r3, #4
 800c112:	3415      	adds	r4, #21
 800c114:	42a6      	cmp	r6, r4
 800c116:	bf38      	it	cc
 800c118:	2304      	movcc	r3, #4
 800c11a:	441d      	add	r5, r3
 800c11c:	4473      	add	r3, lr
 800c11e:	469e      	mov	lr, r3
 800c120:	462e      	mov	r6, r5
 800c122:	4566      	cmp	r6, ip
 800c124:	d30e      	bcc.n	800c144 <__mdiff+0xec>
 800c126:	f10c 0203 	add.w	r2, ip, #3
 800c12a:	1b52      	subs	r2, r2, r5
 800c12c:	f022 0203 	bic.w	r2, r2, #3
 800c130:	3d03      	subs	r5, #3
 800c132:	45ac      	cmp	ip, r5
 800c134:	bf38      	it	cc
 800c136:	2200      	movcc	r2, #0
 800c138:	441a      	add	r2, r3
 800c13a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c13e:	b17b      	cbz	r3, 800c160 <__mdiff+0x108>
 800c140:	6107      	str	r7, [r0, #16]
 800c142:	e7a3      	b.n	800c08c <__mdiff+0x34>
 800c144:	f856 8b04 	ldr.w	r8, [r6], #4
 800c148:	fa11 f288 	uxtah	r2, r1, r8
 800c14c:	1414      	asrs	r4, r2, #16
 800c14e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c152:	b292      	uxth	r2, r2
 800c154:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c158:	f84e 2b04 	str.w	r2, [lr], #4
 800c15c:	1421      	asrs	r1, r4, #16
 800c15e:	e7e0      	b.n	800c122 <__mdiff+0xca>
 800c160:	3f01      	subs	r7, #1
 800c162:	e7ea      	b.n	800c13a <__mdiff+0xe2>
 800c164:	0800ede7 	.word	0x0800ede7
 800c168:	0800edf8 	.word	0x0800edf8

0800c16c <__d2b>:
 800c16c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c170:	4689      	mov	r9, r1
 800c172:	2101      	movs	r1, #1
 800c174:	ec57 6b10 	vmov	r6, r7, d0
 800c178:	4690      	mov	r8, r2
 800c17a:	f7ff fccf 	bl	800bb1c <_Balloc>
 800c17e:	4604      	mov	r4, r0
 800c180:	b930      	cbnz	r0, 800c190 <__d2b+0x24>
 800c182:	4602      	mov	r2, r0
 800c184:	4b25      	ldr	r3, [pc, #148]	; (800c21c <__d2b+0xb0>)
 800c186:	4826      	ldr	r0, [pc, #152]	; (800c220 <__d2b+0xb4>)
 800c188:	f240 310a 	movw	r1, #778	; 0x30a
 800c18c:	f000 faac 	bl	800c6e8 <__assert_func>
 800c190:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c194:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c198:	bb35      	cbnz	r5, 800c1e8 <__d2b+0x7c>
 800c19a:	2e00      	cmp	r6, #0
 800c19c:	9301      	str	r3, [sp, #4]
 800c19e:	d028      	beq.n	800c1f2 <__d2b+0x86>
 800c1a0:	4668      	mov	r0, sp
 800c1a2:	9600      	str	r6, [sp, #0]
 800c1a4:	f7ff fd82 	bl	800bcac <__lo0bits>
 800c1a8:	9900      	ldr	r1, [sp, #0]
 800c1aa:	b300      	cbz	r0, 800c1ee <__d2b+0x82>
 800c1ac:	9a01      	ldr	r2, [sp, #4]
 800c1ae:	f1c0 0320 	rsb	r3, r0, #32
 800c1b2:	fa02 f303 	lsl.w	r3, r2, r3
 800c1b6:	430b      	orrs	r3, r1
 800c1b8:	40c2      	lsrs	r2, r0
 800c1ba:	6163      	str	r3, [r4, #20]
 800c1bc:	9201      	str	r2, [sp, #4]
 800c1be:	9b01      	ldr	r3, [sp, #4]
 800c1c0:	61a3      	str	r3, [r4, #24]
 800c1c2:	2b00      	cmp	r3, #0
 800c1c4:	bf14      	ite	ne
 800c1c6:	2202      	movne	r2, #2
 800c1c8:	2201      	moveq	r2, #1
 800c1ca:	6122      	str	r2, [r4, #16]
 800c1cc:	b1d5      	cbz	r5, 800c204 <__d2b+0x98>
 800c1ce:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c1d2:	4405      	add	r5, r0
 800c1d4:	f8c9 5000 	str.w	r5, [r9]
 800c1d8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c1dc:	f8c8 0000 	str.w	r0, [r8]
 800c1e0:	4620      	mov	r0, r4
 800c1e2:	b003      	add	sp, #12
 800c1e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1e8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c1ec:	e7d5      	b.n	800c19a <__d2b+0x2e>
 800c1ee:	6161      	str	r1, [r4, #20]
 800c1f0:	e7e5      	b.n	800c1be <__d2b+0x52>
 800c1f2:	a801      	add	r0, sp, #4
 800c1f4:	f7ff fd5a 	bl	800bcac <__lo0bits>
 800c1f8:	9b01      	ldr	r3, [sp, #4]
 800c1fa:	6163      	str	r3, [r4, #20]
 800c1fc:	2201      	movs	r2, #1
 800c1fe:	6122      	str	r2, [r4, #16]
 800c200:	3020      	adds	r0, #32
 800c202:	e7e3      	b.n	800c1cc <__d2b+0x60>
 800c204:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c208:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c20c:	f8c9 0000 	str.w	r0, [r9]
 800c210:	6918      	ldr	r0, [r3, #16]
 800c212:	f7ff fd2b 	bl	800bc6c <__hi0bits>
 800c216:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c21a:	e7df      	b.n	800c1dc <__d2b+0x70>
 800c21c:	0800ede7 	.word	0x0800ede7
 800c220:	0800edf8 	.word	0x0800edf8

0800c224 <_calloc_r>:
 800c224:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c226:	fba1 2402 	umull	r2, r4, r1, r2
 800c22a:	b94c      	cbnz	r4, 800c240 <_calloc_r+0x1c>
 800c22c:	4611      	mov	r1, r2
 800c22e:	9201      	str	r2, [sp, #4]
 800c230:	f000 f87a 	bl	800c328 <_malloc_r>
 800c234:	9a01      	ldr	r2, [sp, #4]
 800c236:	4605      	mov	r5, r0
 800c238:	b930      	cbnz	r0, 800c248 <_calloc_r+0x24>
 800c23a:	4628      	mov	r0, r5
 800c23c:	b003      	add	sp, #12
 800c23e:	bd30      	pop	{r4, r5, pc}
 800c240:	220c      	movs	r2, #12
 800c242:	6002      	str	r2, [r0, #0]
 800c244:	2500      	movs	r5, #0
 800c246:	e7f8      	b.n	800c23a <_calloc_r+0x16>
 800c248:	4621      	mov	r1, r4
 800c24a:	f7fe f94f 	bl	800a4ec <memset>
 800c24e:	e7f4      	b.n	800c23a <_calloc_r+0x16>

0800c250 <_free_r>:
 800c250:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c252:	2900      	cmp	r1, #0
 800c254:	d044      	beq.n	800c2e0 <_free_r+0x90>
 800c256:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c25a:	9001      	str	r0, [sp, #4]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	f1a1 0404 	sub.w	r4, r1, #4
 800c262:	bfb8      	it	lt
 800c264:	18e4      	addlt	r4, r4, r3
 800c266:	f000 fa9b 	bl	800c7a0 <__malloc_lock>
 800c26a:	4a1e      	ldr	r2, [pc, #120]	; (800c2e4 <_free_r+0x94>)
 800c26c:	9801      	ldr	r0, [sp, #4]
 800c26e:	6813      	ldr	r3, [r2, #0]
 800c270:	b933      	cbnz	r3, 800c280 <_free_r+0x30>
 800c272:	6063      	str	r3, [r4, #4]
 800c274:	6014      	str	r4, [r2, #0]
 800c276:	b003      	add	sp, #12
 800c278:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c27c:	f000 ba96 	b.w	800c7ac <__malloc_unlock>
 800c280:	42a3      	cmp	r3, r4
 800c282:	d908      	bls.n	800c296 <_free_r+0x46>
 800c284:	6825      	ldr	r5, [r4, #0]
 800c286:	1961      	adds	r1, r4, r5
 800c288:	428b      	cmp	r3, r1
 800c28a:	bf01      	itttt	eq
 800c28c:	6819      	ldreq	r1, [r3, #0]
 800c28e:	685b      	ldreq	r3, [r3, #4]
 800c290:	1949      	addeq	r1, r1, r5
 800c292:	6021      	streq	r1, [r4, #0]
 800c294:	e7ed      	b.n	800c272 <_free_r+0x22>
 800c296:	461a      	mov	r2, r3
 800c298:	685b      	ldr	r3, [r3, #4]
 800c29a:	b10b      	cbz	r3, 800c2a0 <_free_r+0x50>
 800c29c:	42a3      	cmp	r3, r4
 800c29e:	d9fa      	bls.n	800c296 <_free_r+0x46>
 800c2a0:	6811      	ldr	r1, [r2, #0]
 800c2a2:	1855      	adds	r5, r2, r1
 800c2a4:	42a5      	cmp	r5, r4
 800c2a6:	d10b      	bne.n	800c2c0 <_free_r+0x70>
 800c2a8:	6824      	ldr	r4, [r4, #0]
 800c2aa:	4421      	add	r1, r4
 800c2ac:	1854      	adds	r4, r2, r1
 800c2ae:	42a3      	cmp	r3, r4
 800c2b0:	6011      	str	r1, [r2, #0]
 800c2b2:	d1e0      	bne.n	800c276 <_free_r+0x26>
 800c2b4:	681c      	ldr	r4, [r3, #0]
 800c2b6:	685b      	ldr	r3, [r3, #4]
 800c2b8:	6053      	str	r3, [r2, #4]
 800c2ba:	4421      	add	r1, r4
 800c2bc:	6011      	str	r1, [r2, #0]
 800c2be:	e7da      	b.n	800c276 <_free_r+0x26>
 800c2c0:	d902      	bls.n	800c2c8 <_free_r+0x78>
 800c2c2:	230c      	movs	r3, #12
 800c2c4:	6003      	str	r3, [r0, #0]
 800c2c6:	e7d6      	b.n	800c276 <_free_r+0x26>
 800c2c8:	6825      	ldr	r5, [r4, #0]
 800c2ca:	1961      	adds	r1, r4, r5
 800c2cc:	428b      	cmp	r3, r1
 800c2ce:	bf04      	itt	eq
 800c2d0:	6819      	ldreq	r1, [r3, #0]
 800c2d2:	685b      	ldreq	r3, [r3, #4]
 800c2d4:	6063      	str	r3, [r4, #4]
 800c2d6:	bf04      	itt	eq
 800c2d8:	1949      	addeq	r1, r1, r5
 800c2da:	6021      	streq	r1, [r4, #0]
 800c2dc:	6054      	str	r4, [r2, #4]
 800c2de:	e7ca      	b.n	800c276 <_free_r+0x26>
 800c2e0:	b003      	add	sp, #12
 800c2e2:	bd30      	pop	{r4, r5, pc}
 800c2e4:	200052b0 	.word	0x200052b0

0800c2e8 <sbrk_aligned>:
 800c2e8:	b570      	push	{r4, r5, r6, lr}
 800c2ea:	4e0e      	ldr	r6, [pc, #56]	; (800c324 <sbrk_aligned+0x3c>)
 800c2ec:	460c      	mov	r4, r1
 800c2ee:	6831      	ldr	r1, [r6, #0]
 800c2f0:	4605      	mov	r5, r0
 800c2f2:	b911      	cbnz	r1, 800c2fa <sbrk_aligned+0x12>
 800c2f4:	f000 f9e8 	bl	800c6c8 <_sbrk_r>
 800c2f8:	6030      	str	r0, [r6, #0]
 800c2fa:	4621      	mov	r1, r4
 800c2fc:	4628      	mov	r0, r5
 800c2fe:	f000 f9e3 	bl	800c6c8 <_sbrk_r>
 800c302:	1c43      	adds	r3, r0, #1
 800c304:	d00a      	beq.n	800c31c <sbrk_aligned+0x34>
 800c306:	1cc4      	adds	r4, r0, #3
 800c308:	f024 0403 	bic.w	r4, r4, #3
 800c30c:	42a0      	cmp	r0, r4
 800c30e:	d007      	beq.n	800c320 <sbrk_aligned+0x38>
 800c310:	1a21      	subs	r1, r4, r0
 800c312:	4628      	mov	r0, r5
 800c314:	f000 f9d8 	bl	800c6c8 <_sbrk_r>
 800c318:	3001      	adds	r0, #1
 800c31a:	d101      	bne.n	800c320 <sbrk_aligned+0x38>
 800c31c:	f04f 34ff 	mov.w	r4, #4294967295
 800c320:	4620      	mov	r0, r4
 800c322:	bd70      	pop	{r4, r5, r6, pc}
 800c324:	200052b4 	.word	0x200052b4

0800c328 <_malloc_r>:
 800c328:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c32c:	1ccd      	adds	r5, r1, #3
 800c32e:	f025 0503 	bic.w	r5, r5, #3
 800c332:	3508      	adds	r5, #8
 800c334:	2d0c      	cmp	r5, #12
 800c336:	bf38      	it	cc
 800c338:	250c      	movcc	r5, #12
 800c33a:	2d00      	cmp	r5, #0
 800c33c:	4607      	mov	r7, r0
 800c33e:	db01      	blt.n	800c344 <_malloc_r+0x1c>
 800c340:	42a9      	cmp	r1, r5
 800c342:	d905      	bls.n	800c350 <_malloc_r+0x28>
 800c344:	230c      	movs	r3, #12
 800c346:	603b      	str	r3, [r7, #0]
 800c348:	2600      	movs	r6, #0
 800c34a:	4630      	mov	r0, r6
 800c34c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c350:	4e2e      	ldr	r6, [pc, #184]	; (800c40c <_malloc_r+0xe4>)
 800c352:	f000 fa25 	bl	800c7a0 <__malloc_lock>
 800c356:	6833      	ldr	r3, [r6, #0]
 800c358:	461c      	mov	r4, r3
 800c35a:	bb34      	cbnz	r4, 800c3aa <_malloc_r+0x82>
 800c35c:	4629      	mov	r1, r5
 800c35e:	4638      	mov	r0, r7
 800c360:	f7ff ffc2 	bl	800c2e8 <sbrk_aligned>
 800c364:	1c43      	adds	r3, r0, #1
 800c366:	4604      	mov	r4, r0
 800c368:	d14d      	bne.n	800c406 <_malloc_r+0xde>
 800c36a:	6834      	ldr	r4, [r6, #0]
 800c36c:	4626      	mov	r6, r4
 800c36e:	2e00      	cmp	r6, #0
 800c370:	d140      	bne.n	800c3f4 <_malloc_r+0xcc>
 800c372:	6823      	ldr	r3, [r4, #0]
 800c374:	4631      	mov	r1, r6
 800c376:	4638      	mov	r0, r7
 800c378:	eb04 0803 	add.w	r8, r4, r3
 800c37c:	f000 f9a4 	bl	800c6c8 <_sbrk_r>
 800c380:	4580      	cmp	r8, r0
 800c382:	d13a      	bne.n	800c3fa <_malloc_r+0xd2>
 800c384:	6821      	ldr	r1, [r4, #0]
 800c386:	3503      	adds	r5, #3
 800c388:	1a6d      	subs	r5, r5, r1
 800c38a:	f025 0503 	bic.w	r5, r5, #3
 800c38e:	3508      	adds	r5, #8
 800c390:	2d0c      	cmp	r5, #12
 800c392:	bf38      	it	cc
 800c394:	250c      	movcc	r5, #12
 800c396:	4629      	mov	r1, r5
 800c398:	4638      	mov	r0, r7
 800c39a:	f7ff ffa5 	bl	800c2e8 <sbrk_aligned>
 800c39e:	3001      	adds	r0, #1
 800c3a0:	d02b      	beq.n	800c3fa <_malloc_r+0xd2>
 800c3a2:	6823      	ldr	r3, [r4, #0]
 800c3a4:	442b      	add	r3, r5
 800c3a6:	6023      	str	r3, [r4, #0]
 800c3a8:	e00e      	b.n	800c3c8 <_malloc_r+0xa0>
 800c3aa:	6822      	ldr	r2, [r4, #0]
 800c3ac:	1b52      	subs	r2, r2, r5
 800c3ae:	d41e      	bmi.n	800c3ee <_malloc_r+0xc6>
 800c3b0:	2a0b      	cmp	r2, #11
 800c3b2:	d916      	bls.n	800c3e2 <_malloc_r+0xba>
 800c3b4:	1961      	adds	r1, r4, r5
 800c3b6:	42a3      	cmp	r3, r4
 800c3b8:	6025      	str	r5, [r4, #0]
 800c3ba:	bf18      	it	ne
 800c3bc:	6059      	strne	r1, [r3, #4]
 800c3be:	6863      	ldr	r3, [r4, #4]
 800c3c0:	bf08      	it	eq
 800c3c2:	6031      	streq	r1, [r6, #0]
 800c3c4:	5162      	str	r2, [r4, r5]
 800c3c6:	604b      	str	r3, [r1, #4]
 800c3c8:	4638      	mov	r0, r7
 800c3ca:	f104 060b 	add.w	r6, r4, #11
 800c3ce:	f000 f9ed 	bl	800c7ac <__malloc_unlock>
 800c3d2:	f026 0607 	bic.w	r6, r6, #7
 800c3d6:	1d23      	adds	r3, r4, #4
 800c3d8:	1af2      	subs	r2, r6, r3
 800c3da:	d0b6      	beq.n	800c34a <_malloc_r+0x22>
 800c3dc:	1b9b      	subs	r3, r3, r6
 800c3de:	50a3      	str	r3, [r4, r2]
 800c3e0:	e7b3      	b.n	800c34a <_malloc_r+0x22>
 800c3e2:	6862      	ldr	r2, [r4, #4]
 800c3e4:	42a3      	cmp	r3, r4
 800c3e6:	bf0c      	ite	eq
 800c3e8:	6032      	streq	r2, [r6, #0]
 800c3ea:	605a      	strne	r2, [r3, #4]
 800c3ec:	e7ec      	b.n	800c3c8 <_malloc_r+0xa0>
 800c3ee:	4623      	mov	r3, r4
 800c3f0:	6864      	ldr	r4, [r4, #4]
 800c3f2:	e7b2      	b.n	800c35a <_malloc_r+0x32>
 800c3f4:	4634      	mov	r4, r6
 800c3f6:	6876      	ldr	r6, [r6, #4]
 800c3f8:	e7b9      	b.n	800c36e <_malloc_r+0x46>
 800c3fa:	230c      	movs	r3, #12
 800c3fc:	603b      	str	r3, [r7, #0]
 800c3fe:	4638      	mov	r0, r7
 800c400:	f000 f9d4 	bl	800c7ac <__malloc_unlock>
 800c404:	e7a1      	b.n	800c34a <_malloc_r+0x22>
 800c406:	6025      	str	r5, [r4, #0]
 800c408:	e7de      	b.n	800c3c8 <_malloc_r+0xa0>
 800c40a:	bf00      	nop
 800c40c:	200052b0 	.word	0x200052b0

0800c410 <__ssputs_r>:
 800c410:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c414:	688e      	ldr	r6, [r1, #8]
 800c416:	429e      	cmp	r6, r3
 800c418:	4682      	mov	sl, r0
 800c41a:	460c      	mov	r4, r1
 800c41c:	4690      	mov	r8, r2
 800c41e:	461f      	mov	r7, r3
 800c420:	d838      	bhi.n	800c494 <__ssputs_r+0x84>
 800c422:	898a      	ldrh	r2, [r1, #12]
 800c424:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c428:	d032      	beq.n	800c490 <__ssputs_r+0x80>
 800c42a:	6825      	ldr	r5, [r4, #0]
 800c42c:	6909      	ldr	r1, [r1, #16]
 800c42e:	eba5 0901 	sub.w	r9, r5, r1
 800c432:	6965      	ldr	r5, [r4, #20]
 800c434:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c438:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c43c:	3301      	adds	r3, #1
 800c43e:	444b      	add	r3, r9
 800c440:	106d      	asrs	r5, r5, #1
 800c442:	429d      	cmp	r5, r3
 800c444:	bf38      	it	cc
 800c446:	461d      	movcc	r5, r3
 800c448:	0553      	lsls	r3, r2, #21
 800c44a:	d531      	bpl.n	800c4b0 <__ssputs_r+0xa0>
 800c44c:	4629      	mov	r1, r5
 800c44e:	f7ff ff6b 	bl	800c328 <_malloc_r>
 800c452:	4606      	mov	r6, r0
 800c454:	b950      	cbnz	r0, 800c46c <__ssputs_r+0x5c>
 800c456:	230c      	movs	r3, #12
 800c458:	f8ca 3000 	str.w	r3, [sl]
 800c45c:	89a3      	ldrh	r3, [r4, #12]
 800c45e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c462:	81a3      	strh	r3, [r4, #12]
 800c464:	f04f 30ff 	mov.w	r0, #4294967295
 800c468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c46c:	6921      	ldr	r1, [r4, #16]
 800c46e:	464a      	mov	r2, r9
 800c470:	f7fe f82e 	bl	800a4d0 <memcpy>
 800c474:	89a3      	ldrh	r3, [r4, #12]
 800c476:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c47a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c47e:	81a3      	strh	r3, [r4, #12]
 800c480:	6126      	str	r6, [r4, #16]
 800c482:	6165      	str	r5, [r4, #20]
 800c484:	444e      	add	r6, r9
 800c486:	eba5 0509 	sub.w	r5, r5, r9
 800c48a:	6026      	str	r6, [r4, #0]
 800c48c:	60a5      	str	r5, [r4, #8]
 800c48e:	463e      	mov	r6, r7
 800c490:	42be      	cmp	r6, r7
 800c492:	d900      	bls.n	800c496 <__ssputs_r+0x86>
 800c494:	463e      	mov	r6, r7
 800c496:	6820      	ldr	r0, [r4, #0]
 800c498:	4632      	mov	r2, r6
 800c49a:	4641      	mov	r1, r8
 800c49c:	f000 f966 	bl	800c76c <memmove>
 800c4a0:	68a3      	ldr	r3, [r4, #8]
 800c4a2:	1b9b      	subs	r3, r3, r6
 800c4a4:	60a3      	str	r3, [r4, #8]
 800c4a6:	6823      	ldr	r3, [r4, #0]
 800c4a8:	4433      	add	r3, r6
 800c4aa:	6023      	str	r3, [r4, #0]
 800c4ac:	2000      	movs	r0, #0
 800c4ae:	e7db      	b.n	800c468 <__ssputs_r+0x58>
 800c4b0:	462a      	mov	r2, r5
 800c4b2:	f000 f981 	bl	800c7b8 <_realloc_r>
 800c4b6:	4606      	mov	r6, r0
 800c4b8:	2800      	cmp	r0, #0
 800c4ba:	d1e1      	bne.n	800c480 <__ssputs_r+0x70>
 800c4bc:	6921      	ldr	r1, [r4, #16]
 800c4be:	4650      	mov	r0, sl
 800c4c0:	f7ff fec6 	bl	800c250 <_free_r>
 800c4c4:	e7c7      	b.n	800c456 <__ssputs_r+0x46>
	...

0800c4c8 <_svfiprintf_r>:
 800c4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4cc:	4698      	mov	r8, r3
 800c4ce:	898b      	ldrh	r3, [r1, #12]
 800c4d0:	061b      	lsls	r3, r3, #24
 800c4d2:	b09d      	sub	sp, #116	; 0x74
 800c4d4:	4607      	mov	r7, r0
 800c4d6:	460d      	mov	r5, r1
 800c4d8:	4614      	mov	r4, r2
 800c4da:	d50e      	bpl.n	800c4fa <_svfiprintf_r+0x32>
 800c4dc:	690b      	ldr	r3, [r1, #16]
 800c4de:	b963      	cbnz	r3, 800c4fa <_svfiprintf_r+0x32>
 800c4e0:	2140      	movs	r1, #64	; 0x40
 800c4e2:	f7ff ff21 	bl	800c328 <_malloc_r>
 800c4e6:	6028      	str	r0, [r5, #0]
 800c4e8:	6128      	str	r0, [r5, #16]
 800c4ea:	b920      	cbnz	r0, 800c4f6 <_svfiprintf_r+0x2e>
 800c4ec:	230c      	movs	r3, #12
 800c4ee:	603b      	str	r3, [r7, #0]
 800c4f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4f4:	e0d1      	b.n	800c69a <_svfiprintf_r+0x1d2>
 800c4f6:	2340      	movs	r3, #64	; 0x40
 800c4f8:	616b      	str	r3, [r5, #20]
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	9309      	str	r3, [sp, #36]	; 0x24
 800c4fe:	2320      	movs	r3, #32
 800c500:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c504:	f8cd 800c 	str.w	r8, [sp, #12]
 800c508:	2330      	movs	r3, #48	; 0x30
 800c50a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c6b4 <_svfiprintf_r+0x1ec>
 800c50e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c512:	f04f 0901 	mov.w	r9, #1
 800c516:	4623      	mov	r3, r4
 800c518:	469a      	mov	sl, r3
 800c51a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c51e:	b10a      	cbz	r2, 800c524 <_svfiprintf_r+0x5c>
 800c520:	2a25      	cmp	r2, #37	; 0x25
 800c522:	d1f9      	bne.n	800c518 <_svfiprintf_r+0x50>
 800c524:	ebba 0b04 	subs.w	fp, sl, r4
 800c528:	d00b      	beq.n	800c542 <_svfiprintf_r+0x7a>
 800c52a:	465b      	mov	r3, fp
 800c52c:	4622      	mov	r2, r4
 800c52e:	4629      	mov	r1, r5
 800c530:	4638      	mov	r0, r7
 800c532:	f7ff ff6d 	bl	800c410 <__ssputs_r>
 800c536:	3001      	adds	r0, #1
 800c538:	f000 80aa 	beq.w	800c690 <_svfiprintf_r+0x1c8>
 800c53c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c53e:	445a      	add	r2, fp
 800c540:	9209      	str	r2, [sp, #36]	; 0x24
 800c542:	f89a 3000 	ldrb.w	r3, [sl]
 800c546:	2b00      	cmp	r3, #0
 800c548:	f000 80a2 	beq.w	800c690 <_svfiprintf_r+0x1c8>
 800c54c:	2300      	movs	r3, #0
 800c54e:	f04f 32ff 	mov.w	r2, #4294967295
 800c552:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c556:	f10a 0a01 	add.w	sl, sl, #1
 800c55a:	9304      	str	r3, [sp, #16]
 800c55c:	9307      	str	r3, [sp, #28]
 800c55e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c562:	931a      	str	r3, [sp, #104]	; 0x68
 800c564:	4654      	mov	r4, sl
 800c566:	2205      	movs	r2, #5
 800c568:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c56c:	4851      	ldr	r0, [pc, #324]	; (800c6b4 <_svfiprintf_r+0x1ec>)
 800c56e:	f7f3 fe37 	bl	80001e0 <memchr>
 800c572:	9a04      	ldr	r2, [sp, #16]
 800c574:	b9d8      	cbnz	r0, 800c5ae <_svfiprintf_r+0xe6>
 800c576:	06d0      	lsls	r0, r2, #27
 800c578:	bf44      	itt	mi
 800c57a:	2320      	movmi	r3, #32
 800c57c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c580:	0711      	lsls	r1, r2, #28
 800c582:	bf44      	itt	mi
 800c584:	232b      	movmi	r3, #43	; 0x2b
 800c586:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c58a:	f89a 3000 	ldrb.w	r3, [sl]
 800c58e:	2b2a      	cmp	r3, #42	; 0x2a
 800c590:	d015      	beq.n	800c5be <_svfiprintf_r+0xf6>
 800c592:	9a07      	ldr	r2, [sp, #28]
 800c594:	4654      	mov	r4, sl
 800c596:	2000      	movs	r0, #0
 800c598:	f04f 0c0a 	mov.w	ip, #10
 800c59c:	4621      	mov	r1, r4
 800c59e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c5a2:	3b30      	subs	r3, #48	; 0x30
 800c5a4:	2b09      	cmp	r3, #9
 800c5a6:	d94e      	bls.n	800c646 <_svfiprintf_r+0x17e>
 800c5a8:	b1b0      	cbz	r0, 800c5d8 <_svfiprintf_r+0x110>
 800c5aa:	9207      	str	r2, [sp, #28]
 800c5ac:	e014      	b.n	800c5d8 <_svfiprintf_r+0x110>
 800c5ae:	eba0 0308 	sub.w	r3, r0, r8
 800c5b2:	fa09 f303 	lsl.w	r3, r9, r3
 800c5b6:	4313      	orrs	r3, r2
 800c5b8:	9304      	str	r3, [sp, #16]
 800c5ba:	46a2      	mov	sl, r4
 800c5bc:	e7d2      	b.n	800c564 <_svfiprintf_r+0x9c>
 800c5be:	9b03      	ldr	r3, [sp, #12]
 800c5c0:	1d19      	adds	r1, r3, #4
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	9103      	str	r1, [sp, #12]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	bfbb      	ittet	lt
 800c5ca:	425b      	neglt	r3, r3
 800c5cc:	f042 0202 	orrlt.w	r2, r2, #2
 800c5d0:	9307      	strge	r3, [sp, #28]
 800c5d2:	9307      	strlt	r3, [sp, #28]
 800c5d4:	bfb8      	it	lt
 800c5d6:	9204      	strlt	r2, [sp, #16]
 800c5d8:	7823      	ldrb	r3, [r4, #0]
 800c5da:	2b2e      	cmp	r3, #46	; 0x2e
 800c5dc:	d10c      	bne.n	800c5f8 <_svfiprintf_r+0x130>
 800c5de:	7863      	ldrb	r3, [r4, #1]
 800c5e0:	2b2a      	cmp	r3, #42	; 0x2a
 800c5e2:	d135      	bne.n	800c650 <_svfiprintf_r+0x188>
 800c5e4:	9b03      	ldr	r3, [sp, #12]
 800c5e6:	1d1a      	adds	r2, r3, #4
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	9203      	str	r2, [sp, #12]
 800c5ec:	2b00      	cmp	r3, #0
 800c5ee:	bfb8      	it	lt
 800c5f0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c5f4:	3402      	adds	r4, #2
 800c5f6:	9305      	str	r3, [sp, #20]
 800c5f8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c6c4 <_svfiprintf_r+0x1fc>
 800c5fc:	7821      	ldrb	r1, [r4, #0]
 800c5fe:	2203      	movs	r2, #3
 800c600:	4650      	mov	r0, sl
 800c602:	f7f3 fded 	bl	80001e0 <memchr>
 800c606:	b140      	cbz	r0, 800c61a <_svfiprintf_r+0x152>
 800c608:	2340      	movs	r3, #64	; 0x40
 800c60a:	eba0 000a 	sub.w	r0, r0, sl
 800c60e:	fa03 f000 	lsl.w	r0, r3, r0
 800c612:	9b04      	ldr	r3, [sp, #16]
 800c614:	4303      	orrs	r3, r0
 800c616:	3401      	adds	r4, #1
 800c618:	9304      	str	r3, [sp, #16]
 800c61a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c61e:	4826      	ldr	r0, [pc, #152]	; (800c6b8 <_svfiprintf_r+0x1f0>)
 800c620:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c624:	2206      	movs	r2, #6
 800c626:	f7f3 fddb 	bl	80001e0 <memchr>
 800c62a:	2800      	cmp	r0, #0
 800c62c:	d038      	beq.n	800c6a0 <_svfiprintf_r+0x1d8>
 800c62e:	4b23      	ldr	r3, [pc, #140]	; (800c6bc <_svfiprintf_r+0x1f4>)
 800c630:	bb1b      	cbnz	r3, 800c67a <_svfiprintf_r+0x1b2>
 800c632:	9b03      	ldr	r3, [sp, #12]
 800c634:	3307      	adds	r3, #7
 800c636:	f023 0307 	bic.w	r3, r3, #7
 800c63a:	3308      	adds	r3, #8
 800c63c:	9303      	str	r3, [sp, #12]
 800c63e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c640:	4433      	add	r3, r6
 800c642:	9309      	str	r3, [sp, #36]	; 0x24
 800c644:	e767      	b.n	800c516 <_svfiprintf_r+0x4e>
 800c646:	fb0c 3202 	mla	r2, ip, r2, r3
 800c64a:	460c      	mov	r4, r1
 800c64c:	2001      	movs	r0, #1
 800c64e:	e7a5      	b.n	800c59c <_svfiprintf_r+0xd4>
 800c650:	2300      	movs	r3, #0
 800c652:	3401      	adds	r4, #1
 800c654:	9305      	str	r3, [sp, #20]
 800c656:	4619      	mov	r1, r3
 800c658:	f04f 0c0a 	mov.w	ip, #10
 800c65c:	4620      	mov	r0, r4
 800c65e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c662:	3a30      	subs	r2, #48	; 0x30
 800c664:	2a09      	cmp	r2, #9
 800c666:	d903      	bls.n	800c670 <_svfiprintf_r+0x1a8>
 800c668:	2b00      	cmp	r3, #0
 800c66a:	d0c5      	beq.n	800c5f8 <_svfiprintf_r+0x130>
 800c66c:	9105      	str	r1, [sp, #20]
 800c66e:	e7c3      	b.n	800c5f8 <_svfiprintf_r+0x130>
 800c670:	fb0c 2101 	mla	r1, ip, r1, r2
 800c674:	4604      	mov	r4, r0
 800c676:	2301      	movs	r3, #1
 800c678:	e7f0      	b.n	800c65c <_svfiprintf_r+0x194>
 800c67a:	ab03      	add	r3, sp, #12
 800c67c:	9300      	str	r3, [sp, #0]
 800c67e:	462a      	mov	r2, r5
 800c680:	4b0f      	ldr	r3, [pc, #60]	; (800c6c0 <_svfiprintf_r+0x1f8>)
 800c682:	a904      	add	r1, sp, #16
 800c684:	4638      	mov	r0, r7
 800c686:	f7fd ffd9 	bl	800a63c <_printf_float>
 800c68a:	1c42      	adds	r2, r0, #1
 800c68c:	4606      	mov	r6, r0
 800c68e:	d1d6      	bne.n	800c63e <_svfiprintf_r+0x176>
 800c690:	89ab      	ldrh	r3, [r5, #12]
 800c692:	065b      	lsls	r3, r3, #25
 800c694:	f53f af2c 	bmi.w	800c4f0 <_svfiprintf_r+0x28>
 800c698:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c69a:	b01d      	add	sp, #116	; 0x74
 800c69c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6a0:	ab03      	add	r3, sp, #12
 800c6a2:	9300      	str	r3, [sp, #0]
 800c6a4:	462a      	mov	r2, r5
 800c6a6:	4b06      	ldr	r3, [pc, #24]	; (800c6c0 <_svfiprintf_r+0x1f8>)
 800c6a8:	a904      	add	r1, sp, #16
 800c6aa:	4638      	mov	r0, r7
 800c6ac:	f7fe fa6a 	bl	800ab84 <_printf_i>
 800c6b0:	e7eb      	b.n	800c68a <_svfiprintf_r+0x1c2>
 800c6b2:	bf00      	nop
 800c6b4:	0800ef54 	.word	0x0800ef54
 800c6b8:	0800ef5e 	.word	0x0800ef5e
 800c6bc:	0800a63d 	.word	0x0800a63d
 800c6c0:	0800c411 	.word	0x0800c411
 800c6c4:	0800ef5a 	.word	0x0800ef5a

0800c6c8 <_sbrk_r>:
 800c6c8:	b538      	push	{r3, r4, r5, lr}
 800c6ca:	4d06      	ldr	r5, [pc, #24]	; (800c6e4 <_sbrk_r+0x1c>)
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	4604      	mov	r4, r0
 800c6d0:	4608      	mov	r0, r1
 800c6d2:	602b      	str	r3, [r5, #0]
 800c6d4:	f7f6 fc10 	bl	8002ef8 <_sbrk>
 800c6d8:	1c43      	adds	r3, r0, #1
 800c6da:	d102      	bne.n	800c6e2 <_sbrk_r+0x1a>
 800c6dc:	682b      	ldr	r3, [r5, #0]
 800c6de:	b103      	cbz	r3, 800c6e2 <_sbrk_r+0x1a>
 800c6e0:	6023      	str	r3, [r4, #0]
 800c6e2:	bd38      	pop	{r3, r4, r5, pc}
 800c6e4:	200052b8 	.word	0x200052b8

0800c6e8 <__assert_func>:
 800c6e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c6ea:	4614      	mov	r4, r2
 800c6ec:	461a      	mov	r2, r3
 800c6ee:	4b09      	ldr	r3, [pc, #36]	; (800c714 <__assert_func+0x2c>)
 800c6f0:	681b      	ldr	r3, [r3, #0]
 800c6f2:	4605      	mov	r5, r0
 800c6f4:	68d8      	ldr	r0, [r3, #12]
 800c6f6:	b14c      	cbz	r4, 800c70c <__assert_func+0x24>
 800c6f8:	4b07      	ldr	r3, [pc, #28]	; (800c718 <__assert_func+0x30>)
 800c6fa:	9100      	str	r1, [sp, #0]
 800c6fc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c700:	4906      	ldr	r1, [pc, #24]	; (800c71c <__assert_func+0x34>)
 800c702:	462b      	mov	r3, r5
 800c704:	f000 f80e 	bl	800c724 <fiprintf>
 800c708:	f000 faac 	bl	800cc64 <abort>
 800c70c:	4b04      	ldr	r3, [pc, #16]	; (800c720 <__assert_func+0x38>)
 800c70e:	461c      	mov	r4, r3
 800c710:	e7f3      	b.n	800c6fa <__assert_func+0x12>
 800c712:	bf00      	nop
 800c714:	2000004c 	.word	0x2000004c
 800c718:	0800ef65 	.word	0x0800ef65
 800c71c:	0800ef72 	.word	0x0800ef72
 800c720:	0800efa0 	.word	0x0800efa0

0800c724 <fiprintf>:
 800c724:	b40e      	push	{r1, r2, r3}
 800c726:	b503      	push	{r0, r1, lr}
 800c728:	4601      	mov	r1, r0
 800c72a:	ab03      	add	r3, sp, #12
 800c72c:	4805      	ldr	r0, [pc, #20]	; (800c744 <fiprintf+0x20>)
 800c72e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c732:	6800      	ldr	r0, [r0, #0]
 800c734:	9301      	str	r3, [sp, #4]
 800c736:	f000 f897 	bl	800c868 <_vfiprintf_r>
 800c73a:	b002      	add	sp, #8
 800c73c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c740:	b003      	add	sp, #12
 800c742:	4770      	bx	lr
 800c744:	2000004c 	.word	0x2000004c

0800c748 <__ascii_mbtowc>:
 800c748:	b082      	sub	sp, #8
 800c74a:	b901      	cbnz	r1, 800c74e <__ascii_mbtowc+0x6>
 800c74c:	a901      	add	r1, sp, #4
 800c74e:	b142      	cbz	r2, 800c762 <__ascii_mbtowc+0x1a>
 800c750:	b14b      	cbz	r3, 800c766 <__ascii_mbtowc+0x1e>
 800c752:	7813      	ldrb	r3, [r2, #0]
 800c754:	600b      	str	r3, [r1, #0]
 800c756:	7812      	ldrb	r2, [r2, #0]
 800c758:	1e10      	subs	r0, r2, #0
 800c75a:	bf18      	it	ne
 800c75c:	2001      	movne	r0, #1
 800c75e:	b002      	add	sp, #8
 800c760:	4770      	bx	lr
 800c762:	4610      	mov	r0, r2
 800c764:	e7fb      	b.n	800c75e <__ascii_mbtowc+0x16>
 800c766:	f06f 0001 	mvn.w	r0, #1
 800c76a:	e7f8      	b.n	800c75e <__ascii_mbtowc+0x16>

0800c76c <memmove>:
 800c76c:	4288      	cmp	r0, r1
 800c76e:	b510      	push	{r4, lr}
 800c770:	eb01 0402 	add.w	r4, r1, r2
 800c774:	d902      	bls.n	800c77c <memmove+0x10>
 800c776:	4284      	cmp	r4, r0
 800c778:	4623      	mov	r3, r4
 800c77a:	d807      	bhi.n	800c78c <memmove+0x20>
 800c77c:	1e43      	subs	r3, r0, #1
 800c77e:	42a1      	cmp	r1, r4
 800c780:	d008      	beq.n	800c794 <memmove+0x28>
 800c782:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c786:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c78a:	e7f8      	b.n	800c77e <memmove+0x12>
 800c78c:	4402      	add	r2, r0
 800c78e:	4601      	mov	r1, r0
 800c790:	428a      	cmp	r2, r1
 800c792:	d100      	bne.n	800c796 <memmove+0x2a>
 800c794:	bd10      	pop	{r4, pc}
 800c796:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c79a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c79e:	e7f7      	b.n	800c790 <memmove+0x24>

0800c7a0 <__malloc_lock>:
 800c7a0:	4801      	ldr	r0, [pc, #4]	; (800c7a8 <__malloc_lock+0x8>)
 800c7a2:	f000 bc1f 	b.w	800cfe4 <__retarget_lock_acquire_recursive>
 800c7a6:	bf00      	nop
 800c7a8:	200052bc 	.word	0x200052bc

0800c7ac <__malloc_unlock>:
 800c7ac:	4801      	ldr	r0, [pc, #4]	; (800c7b4 <__malloc_unlock+0x8>)
 800c7ae:	f000 bc1a 	b.w	800cfe6 <__retarget_lock_release_recursive>
 800c7b2:	bf00      	nop
 800c7b4:	200052bc 	.word	0x200052bc

0800c7b8 <_realloc_r>:
 800c7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7bc:	4680      	mov	r8, r0
 800c7be:	4614      	mov	r4, r2
 800c7c0:	460e      	mov	r6, r1
 800c7c2:	b921      	cbnz	r1, 800c7ce <_realloc_r+0x16>
 800c7c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c7c8:	4611      	mov	r1, r2
 800c7ca:	f7ff bdad 	b.w	800c328 <_malloc_r>
 800c7ce:	b92a      	cbnz	r2, 800c7dc <_realloc_r+0x24>
 800c7d0:	f7ff fd3e 	bl	800c250 <_free_r>
 800c7d4:	4625      	mov	r5, r4
 800c7d6:	4628      	mov	r0, r5
 800c7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c7dc:	f000 fc6a 	bl	800d0b4 <_malloc_usable_size_r>
 800c7e0:	4284      	cmp	r4, r0
 800c7e2:	4607      	mov	r7, r0
 800c7e4:	d802      	bhi.n	800c7ec <_realloc_r+0x34>
 800c7e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c7ea:	d812      	bhi.n	800c812 <_realloc_r+0x5a>
 800c7ec:	4621      	mov	r1, r4
 800c7ee:	4640      	mov	r0, r8
 800c7f0:	f7ff fd9a 	bl	800c328 <_malloc_r>
 800c7f4:	4605      	mov	r5, r0
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	d0ed      	beq.n	800c7d6 <_realloc_r+0x1e>
 800c7fa:	42bc      	cmp	r4, r7
 800c7fc:	4622      	mov	r2, r4
 800c7fe:	4631      	mov	r1, r6
 800c800:	bf28      	it	cs
 800c802:	463a      	movcs	r2, r7
 800c804:	f7fd fe64 	bl	800a4d0 <memcpy>
 800c808:	4631      	mov	r1, r6
 800c80a:	4640      	mov	r0, r8
 800c80c:	f7ff fd20 	bl	800c250 <_free_r>
 800c810:	e7e1      	b.n	800c7d6 <_realloc_r+0x1e>
 800c812:	4635      	mov	r5, r6
 800c814:	e7df      	b.n	800c7d6 <_realloc_r+0x1e>

0800c816 <__sfputc_r>:
 800c816:	6893      	ldr	r3, [r2, #8]
 800c818:	3b01      	subs	r3, #1
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	b410      	push	{r4}
 800c81e:	6093      	str	r3, [r2, #8]
 800c820:	da08      	bge.n	800c834 <__sfputc_r+0x1e>
 800c822:	6994      	ldr	r4, [r2, #24]
 800c824:	42a3      	cmp	r3, r4
 800c826:	db01      	blt.n	800c82c <__sfputc_r+0x16>
 800c828:	290a      	cmp	r1, #10
 800c82a:	d103      	bne.n	800c834 <__sfputc_r+0x1e>
 800c82c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c830:	f000 b94a 	b.w	800cac8 <__swbuf_r>
 800c834:	6813      	ldr	r3, [r2, #0]
 800c836:	1c58      	adds	r0, r3, #1
 800c838:	6010      	str	r0, [r2, #0]
 800c83a:	7019      	strb	r1, [r3, #0]
 800c83c:	4608      	mov	r0, r1
 800c83e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c842:	4770      	bx	lr

0800c844 <__sfputs_r>:
 800c844:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c846:	4606      	mov	r6, r0
 800c848:	460f      	mov	r7, r1
 800c84a:	4614      	mov	r4, r2
 800c84c:	18d5      	adds	r5, r2, r3
 800c84e:	42ac      	cmp	r4, r5
 800c850:	d101      	bne.n	800c856 <__sfputs_r+0x12>
 800c852:	2000      	movs	r0, #0
 800c854:	e007      	b.n	800c866 <__sfputs_r+0x22>
 800c856:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c85a:	463a      	mov	r2, r7
 800c85c:	4630      	mov	r0, r6
 800c85e:	f7ff ffda 	bl	800c816 <__sfputc_r>
 800c862:	1c43      	adds	r3, r0, #1
 800c864:	d1f3      	bne.n	800c84e <__sfputs_r+0xa>
 800c866:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c868 <_vfiprintf_r>:
 800c868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c86c:	460d      	mov	r5, r1
 800c86e:	b09d      	sub	sp, #116	; 0x74
 800c870:	4614      	mov	r4, r2
 800c872:	4698      	mov	r8, r3
 800c874:	4606      	mov	r6, r0
 800c876:	b118      	cbz	r0, 800c880 <_vfiprintf_r+0x18>
 800c878:	6983      	ldr	r3, [r0, #24]
 800c87a:	b90b      	cbnz	r3, 800c880 <_vfiprintf_r+0x18>
 800c87c:	f000 fb14 	bl	800cea8 <__sinit>
 800c880:	4b89      	ldr	r3, [pc, #548]	; (800caa8 <_vfiprintf_r+0x240>)
 800c882:	429d      	cmp	r5, r3
 800c884:	d11b      	bne.n	800c8be <_vfiprintf_r+0x56>
 800c886:	6875      	ldr	r5, [r6, #4]
 800c888:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c88a:	07d9      	lsls	r1, r3, #31
 800c88c:	d405      	bmi.n	800c89a <_vfiprintf_r+0x32>
 800c88e:	89ab      	ldrh	r3, [r5, #12]
 800c890:	059a      	lsls	r2, r3, #22
 800c892:	d402      	bmi.n	800c89a <_vfiprintf_r+0x32>
 800c894:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c896:	f000 fba5 	bl	800cfe4 <__retarget_lock_acquire_recursive>
 800c89a:	89ab      	ldrh	r3, [r5, #12]
 800c89c:	071b      	lsls	r3, r3, #28
 800c89e:	d501      	bpl.n	800c8a4 <_vfiprintf_r+0x3c>
 800c8a0:	692b      	ldr	r3, [r5, #16]
 800c8a2:	b9eb      	cbnz	r3, 800c8e0 <_vfiprintf_r+0x78>
 800c8a4:	4629      	mov	r1, r5
 800c8a6:	4630      	mov	r0, r6
 800c8a8:	f000 f96e 	bl	800cb88 <__swsetup_r>
 800c8ac:	b1c0      	cbz	r0, 800c8e0 <_vfiprintf_r+0x78>
 800c8ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c8b0:	07dc      	lsls	r4, r3, #31
 800c8b2:	d50e      	bpl.n	800c8d2 <_vfiprintf_r+0x6a>
 800c8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c8b8:	b01d      	add	sp, #116	; 0x74
 800c8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c8be:	4b7b      	ldr	r3, [pc, #492]	; (800caac <_vfiprintf_r+0x244>)
 800c8c0:	429d      	cmp	r5, r3
 800c8c2:	d101      	bne.n	800c8c8 <_vfiprintf_r+0x60>
 800c8c4:	68b5      	ldr	r5, [r6, #8]
 800c8c6:	e7df      	b.n	800c888 <_vfiprintf_r+0x20>
 800c8c8:	4b79      	ldr	r3, [pc, #484]	; (800cab0 <_vfiprintf_r+0x248>)
 800c8ca:	429d      	cmp	r5, r3
 800c8cc:	bf08      	it	eq
 800c8ce:	68f5      	ldreq	r5, [r6, #12]
 800c8d0:	e7da      	b.n	800c888 <_vfiprintf_r+0x20>
 800c8d2:	89ab      	ldrh	r3, [r5, #12]
 800c8d4:	0598      	lsls	r0, r3, #22
 800c8d6:	d4ed      	bmi.n	800c8b4 <_vfiprintf_r+0x4c>
 800c8d8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c8da:	f000 fb84 	bl	800cfe6 <__retarget_lock_release_recursive>
 800c8de:	e7e9      	b.n	800c8b4 <_vfiprintf_r+0x4c>
 800c8e0:	2300      	movs	r3, #0
 800c8e2:	9309      	str	r3, [sp, #36]	; 0x24
 800c8e4:	2320      	movs	r3, #32
 800c8e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c8ea:	f8cd 800c 	str.w	r8, [sp, #12]
 800c8ee:	2330      	movs	r3, #48	; 0x30
 800c8f0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800cab4 <_vfiprintf_r+0x24c>
 800c8f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c8f8:	f04f 0901 	mov.w	r9, #1
 800c8fc:	4623      	mov	r3, r4
 800c8fe:	469a      	mov	sl, r3
 800c900:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c904:	b10a      	cbz	r2, 800c90a <_vfiprintf_r+0xa2>
 800c906:	2a25      	cmp	r2, #37	; 0x25
 800c908:	d1f9      	bne.n	800c8fe <_vfiprintf_r+0x96>
 800c90a:	ebba 0b04 	subs.w	fp, sl, r4
 800c90e:	d00b      	beq.n	800c928 <_vfiprintf_r+0xc0>
 800c910:	465b      	mov	r3, fp
 800c912:	4622      	mov	r2, r4
 800c914:	4629      	mov	r1, r5
 800c916:	4630      	mov	r0, r6
 800c918:	f7ff ff94 	bl	800c844 <__sfputs_r>
 800c91c:	3001      	adds	r0, #1
 800c91e:	f000 80aa 	beq.w	800ca76 <_vfiprintf_r+0x20e>
 800c922:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c924:	445a      	add	r2, fp
 800c926:	9209      	str	r2, [sp, #36]	; 0x24
 800c928:	f89a 3000 	ldrb.w	r3, [sl]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	f000 80a2 	beq.w	800ca76 <_vfiprintf_r+0x20e>
 800c932:	2300      	movs	r3, #0
 800c934:	f04f 32ff 	mov.w	r2, #4294967295
 800c938:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c93c:	f10a 0a01 	add.w	sl, sl, #1
 800c940:	9304      	str	r3, [sp, #16]
 800c942:	9307      	str	r3, [sp, #28]
 800c944:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c948:	931a      	str	r3, [sp, #104]	; 0x68
 800c94a:	4654      	mov	r4, sl
 800c94c:	2205      	movs	r2, #5
 800c94e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c952:	4858      	ldr	r0, [pc, #352]	; (800cab4 <_vfiprintf_r+0x24c>)
 800c954:	f7f3 fc44 	bl	80001e0 <memchr>
 800c958:	9a04      	ldr	r2, [sp, #16]
 800c95a:	b9d8      	cbnz	r0, 800c994 <_vfiprintf_r+0x12c>
 800c95c:	06d1      	lsls	r1, r2, #27
 800c95e:	bf44      	itt	mi
 800c960:	2320      	movmi	r3, #32
 800c962:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c966:	0713      	lsls	r3, r2, #28
 800c968:	bf44      	itt	mi
 800c96a:	232b      	movmi	r3, #43	; 0x2b
 800c96c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c970:	f89a 3000 	ldrb.w	r3, [sl]
 800c974:	2b2a      	cmp	r3, #42	; 0x2a
 800c976:	d015      	beq.n	800c9a4 <_vfiprintf_r+0x13c>
 800c978:	9a07      	ldr	r2, [sp, #28]
 800c97a:	4654      	mov	r4, sl
 800c97c:	2000      	movs	r0, #0
 800c97e:	f04f 0c0a 	mov.w	ip, #10
 800c982:	4621      	mov	r1, r4
 800c984:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c988:	3b30      	subs	r3, #48	; 0x30
 800c98a:	2b09      	cmp	r3, #9
 800c98c:	d94e      	bls.n	800ca2c <_vfiprintf_r+0x1c4>
 800c98e:	b1b0      	cbz	r0, 800c9be <_vfiprintf_r+0x156>
 800c990:	9207      	str	r2, [sp, #28]
 800c992:	e014      	b.n	800c9be <_vfiprintf_r+0x156>
 800c994:	eba0 0308 	sub.w	r3, r0, r8
 800c998:	fa09 f303 	lsl.w	r3, r9, r3
 800c99c:	4313      	orrs	r3, r2
 800c99e:	9304      	str	r3, [sp, #16]
 800c9a0:	46a2      	mov	sl, r4
 800c9a2:	e7d2      	b.n	800c94a <_vfiprintf_r+0xe2>
 800c9a4:	9b03      	ldr	r3, [sp, #12]
 800c9a6:	1d19      	adds	r1, r3, #4
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	9103      	str	r1, [sp, #12]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	bfbb      	ittet	lt
 800c9b0:	425b      	neglt	r3, r3
 800c9b2:	f042 0202 	orrlt.w	r2, r2, #2
 800c9b6:	9307      	strge	r3, [sp, #28]
 800c9b8:	9307      	strlt	r3, [sp, #28]
 800c9ba:	bfb8      	it	lt
 800c9bc:	9204      	strlt	r2, [sp, #16]
 800c9be:	7823      	ldrb	r3, [r4, #0]
 800c9c0:	2b2e      	cmp	r3, #46	; 0x2e
 800c9c2:	d10c      	bne.n	800c9de <_vfiprintf_r+0x176>
 800c9c4:	7863      	ldrb	r3, [r4, #1]
 800c9c6:	2b2a      	cmp	r3, #42	; 0x2a
 800c9c8:	d135      	bne.n	800ca36 <_vfiprintf_r+0x1ce>
 800c9ca:	9b03      	ldr	r3, [sp, #12]
 800c9cc:	1d1a      	adds	r2, r3, #4
 800c9ce:	681b      	ldr	r3, [r3, #0]
 800c9d0:	9203      	str	r2, [sp, #12]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	bfb8      	it	lt
 800c9d6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c9da:	3402      	adds	r4, #2
 800c9dc:	9305      	str	r3, [sp, #20]
 800c9de:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800cac4 <_vfiprintf_r+0x25c>
 800c9e2:	7821      	ldrb	r1, [r4, #0]
 800c9e4:	2203      	movs	r2, #3
 800c9e6:	4650      	mov	r0, sl
 800c9e8:	f7f3 fbfa 	bl	80001e0 <memchr>
 800c9ec:	b140      	cbz	r0, 800ca00 <_vfiprintf_r+0x198>
 800c9ee:	2340      	movs	r3, #64	; 0x40
 800c9f0:	eba0 000a 	sub.w	r0, r0, sl
 800c9f4:	fa03 f000 	lsl.w	r0, r3, r0
 800c9f8:	9b04      	ldr	r3, [sp, #16]
 800c9fa:	4303      	orrs	r3, r0
 800c9fc:	3401      	adds	r4, #1
 800c9fe:	9304      	str	r3, [sp, #16]
 800ca00:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ca04:	482c      	ldr	r0, [pc, #176]	; (800cab8 <_vfiprintf_r+0x250>)
 800ca06:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ca0a:	2206      	movs	r2, #6
 800ca0c:	f7f3 fbe8 	bl	80001e0 <memchr>
 800ca10:	2800      	cmp	r0, #0
 800ca12:	d03f      	beq.n	800ca94 <_vfiprintf_r+0x22c>
 800ca14:	4b29      	ldr	r3, [pc, #164]	; (800cabc <_vfiprintf_r+0x254>)
 800ca16:	bb1b      	cbnz	r3, 800ca60 <_vfiprintf_r+0x1f8>
 800ca18:	9b03      	ldr	r3, [sp, #12]
 800ca1a:	3307      	adds	r3, #7
 800ca1c:	f023 0307 	bic.w	r3, r3, #7
 800ca20:	3308      	adds	r3, #8
 800ca22:	9303      	str	r3, [sp, #12]
 800ca24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ca26:	443b      	add	r3, r7
 800ca28:	9309      	str	r3, [sp, #36]	; 0x24
 800ca2a:	e767      	b.n	800c8fc <_vfiprintf_r+0x94>
 800ca2c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ca30:	460c      	mov	r4, r1
 800ca32:	2001      	movs	r0, #1
 800ca34:	e7a5      	b.n	800c982 <_vfiprintf_r+0x11a>
 800ca36:	2300      	movs	r3, #0
 800ca38:	3401      	adds	r4, #1
 800ca3a:	9305      	str	r3, [sp, #20]
 800ca3c:	4619      	mov	r1, r3
 800ca3e:	f04f 0c0a 	mov.w	ip, #10
 800ca42:	4620      	mov	r0, r4
 800ca44:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ca48:	3a30      	subs	r2, #48	; 0x30
 800ca4a:	2a09      	cmp	r2, #9
 800ca4c:	d903      	bls.n	800ca56 <_vfiprintf_r+0x1ee>
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d0c5      	beq.n	800c9de <_vfiprintf_r+0x176>
 800ca52:	9105      	str	r1, [sp, #20]
 800ca54:	e7c3      	b.n	800c9de <_vfiprintf_r+0x176>
 800ca56:	fb0c 2101 	mla	r1, ip, r1, r2
 800ca5a:	4604      	mov	r4, r0
 800ca5c:	2301      	movs	r3, #1
 800ca5e:	e7f0      	b.n	800ca42 <_vfiprintf_r+0x1da>
 800ca60:	ab03      	add	r3, sp, #12
 800ca62:	9300      	str	r3, [sp, #0]
 800ca64:	462a      	mov	r2, r5
 800ca66:	4b16      	ldr	r3, [pc, #88]	; (800cac0 <_vfiprintf_r+0x258>)
 800ca68:	a904      	add	r1, sp, #16
 800ca6a:	4630      	mov	r0, r6
 800ca6c:	f7fd fde6 	bl	800a63c <_printf_float>
 800ca70:	4607      	mov	r7, r0
 800ca72:	1c78      	adds	r0, r7, #1
 800ca74:	d1d6      	bne.n	800ca24 <_vfiprintf_r+0x1bc>
 800ca76:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca78:	07d9      	lsls	r1, r3, #31
 800ca7a:	d405      	bmi.n	800ca88 <_vfiprintf_r+0x220>
 800ca7c:	89ab      	ldrh	r3, [r5, #12]
 800ca7e:	059a      	lsls	r2, r3, #22
 800ca80:	d402      	bmi.n	800ca88 <_vfiprintf_r+0x220>
 800ca82:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca84:	f000 faaf 	bl	800cfe6 <__retarget_lock_release_recursive>
 800ca88:	89ab      	ldrh	r3, [r5, #12]
 800ca8a:	065b      	lsls	r3, r3, #25
 800ca8c:	f53f af12 	bmi.w	800c8b4 <_vfiprintf_r+0x4c>
 800ca90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca92:	e711      	b.n	800c8b8 <_vfiprintf_r+0x50>
 800ca94:	ab03      	add	r3, sp, #12
 800ca96:	9300      	str	r3, [sp, #0]
 800ca98:	462a      	mov	r2, r5
 800ca9a:	4b09      	ldr	r3, [pc, #36]	; (800cac0 <_vfiprintf_r+0x258>)
 800ca9c:	a904      	add	r1, sp, #16
 800ca9e:	4630      	mov	r0, r6
 800caa0:	f7fe f870 	bl	800ab84 <_printf_i>
 800caa4:	e7e4      	b.n	800ca70 <_vfiprintf_r+0x208>
 800caa6:	bf00      	nop
 800caa8:	0800f0cc 	.word	0x0800f0cc
 800caac:	0800f0ec 	.word	0x0800f0ec
 800cab0:	0800f0ac 	.word	0x0800f0ac
 800cab4:	0800ef54 	.word	0x0800ef54
 800cab8:	0800ef5e 	.word	0x0800ef5e
 800cabc:	0800a63d 	.word	0x0800a63d
 800cac0:	0800c845 	.word	0x0800c845
 800cac4:	0800ef5a 	.word	0x0800ef5a

0800cac8 <__swbuf_r>:
 800cac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800caca:	460e      	mov	r6, r1
 800cacc:	4614      	mov	r4, r2
 800cace:	4605      	mov	r5, r0
 800cad0:	b118      	cbz	r0, 800cada <__swbuf_r+0x12>
 800cad2:	6983      	ldr	r3, [r0, #24]
 800cad4:	b90b      	cbnz	r3, 800cada <__swbuf_r+0x12>
 800cad6:	f000 f9e7 	bl	800cea8 <__sinit>
 800cada:	4b21      	ldr	r3, [pc, #132]	; (800cb60 <__swbuf_r+0x98>)
 800cadc:	429c      	cmp	r4, r3
 800cade:	d12b      	bne.n	800cb38 <__swbuf_r+0x70>
 800cae0:	686c      	ldr	r4, [r5, #4]
 800cae2:	69a3      	ldr	r3, [r4, #24]
 800cae4:	60a3      	str	r3, [r4, #8]
 800cae6:	89a3      	ldrh	r3, [r4, #12]
 800cae8:	071a      	lsls	r2, r3, #28
 800caea:	d52f      	bpl.n	800cb4c <__swbuf_r+0x84>
 800caec:	6923      	ldr	r3, [r4, #16]
 800caee:	b36b      	cbz	r3, 800cb4c <__swbuf_r+0x84>
 800caf0:	6923      	ldr	r3, [r4, #16]
 800caf2:	6820      	ldr	r0, [r4, #0]
 800caf4:	1ac0      	subs	r0, r0, r3
 800caf6:	6963      	ldr	r3, [r4, #20]
 800caf8:	b2f6      	uxtb	r6, r6
 800cafa:	4283      	cmp	r3, r0
 800cafc:	4637      	mov	r7, r6
 800cafe:	dc04      	bgt.n	800cb0a <__swbuf_r+0x42>
 800cb00:	4621      	mov	r1, r4
 800cb02:	4628      	mov	r0, r5
 800cb04:	f000 f93c 	bl	800cd80 <_fflush_r>
 800cb08:	bb30      	cbnz	r0, 800cb58 <__swbuf_r+0x90>
 800cb0a:	68a3      	ldr	r3, [r4, #8]
 800cb0c:	3b01      	subs	r3, #1
 800cb0e:	60a3      	str	r3, [r4, #8]
 800cb10:	6823      	ldr	r3, [r4, #0]
 800cb12:	1c5a      	adds	r2, r3, #1
 800cb14:	6022      	str	r2, [r4, #0]
 800cb16:	701e      	strb	r6, [r3, #0]
 800cb18:	6963      	ldr	r3, [r4, #20]
 800cb1a:	3001      	adds	r0, #1
 800cb1c:	4283      	cmp	r3, r0
 800cb1e:	d004      	beq.n	800cb2a <__swbuf_r+0x62>
 800cb20:	89a3      	ldrh	r3, [r4, #12]
 800cb22:	07db      	lsls	r3, r3, #31
 800cb24:	d506      	bpl.n	800cb34 <__swbuf_r+0x6c>
 800cb26:	2e0a      	cmp	r6, #10
 800cb28:	d104      	bne.n	800cb34 <__swbuf_r+0x6c>
 800cb2a:	4621      	mov	r1, r4
 800cb2c:	4628      	mov	r0, r5
 800cb2e:	f000 f927 	bl	800cd80 <_fflush_r>
 800cb32:	b988      	cbnz	r0, 800cb58 <__swbuf_r+0x90>
 800cb34:	4638      	mov	r0, r7
 800cb36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cb38:	4b0a      	ldr	r3, [pc, #40]	; (800cb64 <__swbuf_r+0x9c>)
 800cb3a:	429c      	cmp	r4, r3
 800cb3c:	d101      	bne.n	800cb42 <__swbuf_r+0x7a>
 800cb3e:	68ac      	ldr	r4, [r5, #8]
 800cb40:	e7cf      	b.n	800cae2 <__swbuf_r+0x1a>
 800cb42:	4b09      	ldr	r3, [pc, #36]	; (800cb68 <__swbuf_r+0xa0>)
 800cb44:	429c      	cmp	r4, r3
 800cb46:	bf08      	it	eq
 800cb48:	68ec      	ldreq	r4, [r5, #12]
 800cb4a:	e7ca      	b.n	800cae2 <__swbuf_r+0x1a>
 800cb4c:	4621      	mov	r1, r4
 800cb4e:	4628      	mov	r0, r5
 800cb50:	f000 f81a 	bl	800cb88 <__swsetup_r>
 800cb54:	2800      	cmp	r0, #0
 800cb56:	d0cb      	beq.n	800caf0 <__swbuf_r+0x28>
 800cb58:	f04f 37ff 	mov.w	r7, #4294967295
 800cb5c:	e7ea      	b.n	800cb34 <__swbuf_r+0x6c>
 800cb5e:	bf00      	nop
 800cb60:	0800f0cc 	.word	0x0800f0cc
 800cb64:	0800f0ec 	.word	0x0800f0ec
 800cb68:	0800f0ac 	.word	0x0800f0ac

0800cb6c <__ascii_wctomb>:
 800cb6c:	b149      	cbz	r1, 800cb82 <__ascii_wctomb+0x16>
 800cb6e:	2aff      	cmp	r2, #255	; 0xff
 800cb70:	bf85      	ittet	hi
 800cb72:	238a      	movhi	r3, #138	; 0x8a
 800cb74:	6003      	strhi	r3, [r0, #0]
 800cb76:	700a      	strbls	r2, [r1, #0]
 800cb78:	f04f 30ff 	movhi.w	r0, #4294967295
 800cb7c:	bf98      	it	ls
 800cb7e:	2001      	movls	r0, #1
 800cb80:	4770      	bx	lr
 800cb82:	4608      	mov	r0, r1
 800cb84:	4770      	bx	lr
	...

0800cb88 <__swsetup_r>:
 800cb88:	4b32      	ldr	r3, [pc, #200]	; (800cc54 <__swsetup_r+0xcc>)
 800cb8a:	b570      	push	{r4, r5, r6, lr}
 800cb8c:	681d      	ldr	r5, [r3, #0]
 800cb8e:	4606      	mov	r6, r0
 800cb90:	460c      	mov	r4, r1
 800cb92:	b125      	cbz	r5, 800cb9e <__swsetup_r+0x16>
 800cb94:	69ab      	ldr	r3, [r5, #24]
 800cb96:	b913      	cbnz	r3, 800cb9e <__swsetup_r+0x16>
 800cb98:	4628      	mov	r0, r5
 800cb9a:	f000 f985 	bl	800cea8 <__sinit>
 800cb9e:	4b2e      	ldr	r3, [pc, #184]	; (800cc58 <__swsetup_r+0xd0>)
 800cba0:	429c      	cmp	r4, r3
 800cba2:	d10f      	bne.n	800cbc4 <__swsetup_r+0x3c>
 800cba4:	686c      	ldr	r4, [r5, #4]
 800cba6:	89a3      	ldrh	r3, [r4, #12]
 800cba8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cbac:	0719      	lsls	r1, r3, #28
 800cbae:	d42c      	bmi.n	800cc0a <__swsetup_r+0x82>
 800cbb0:	06dd      	lsls	r5, r3, #27
 800cbb2:	d411      	bmi.n	800cbd8 <__swsetup_r+0x50>
 800cbb4:	2309      	movs	r3, #9
 800cbb6:	6033      	str	r3, [r6, #0]
 800cbb8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cbbc:	81a3      	strh	r3, [r4, #12]
 800cbbe:	f04f 30ff 	mov.w	r0, #4294967295
 800cbc2:	e03e      	b.n	800cc42 <__swsetup_r+0xba>
 800cbc4:	4b25      	ldr	r3, [pc, #148]	; (800cc5c <__swsetup_r+0xd4>)
 800cbc6:	429c      	cmp	r4, r3
 800cbc8:	d101      	bne.n	800cbce <__swsetup_r+0x46>
 800cbca:	68ac      	ldr	r4, [r5, #8]
 800cbcc:	e7eb      	b.n	800cba6 <__swsetup_r+0x1e>
 800cbce:	4b24      	ldr	r3, [pc, #144]	; (800cc60 <__swsetup_r+0xd8>)
 800cbd0:	429c      	cmp	r4, r3
 800cbd2:	bf08      	it	eq
 800cbd4:	68ec      	ldreq	r4, [r5, #12]
 800cbd6:	e7e6      	b.n	800cba6 <__swsetup_r+0x1e>
 800cbd8:	0758      	lsls	r0, r3, #29
 800cbda:	d512      	bpl.n	800cc02 <__swsetup_r+0x7a>
 800cbdc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cbde:	b141      	cbz	r1, 800cbf2 <__swsetup_r+0x6a>
 800cbe0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cbe4:	4299      	cmp	r1, r3
 800cbe6:	d002      	beq.n	800cbee <__swsetup_r+0x66>
 800cbe8:	4630      	mov	r0, r6
 800cbea:	f7ff fb31 	bl	800c250 <_free_r>
 800cbee:	2300      	movs	r3, #0
 800cbf0:	6363      	str	r3, [r4, #52]	; 0x34
 800cbf2:	89a3      	ldrh	r3, [r4, #12]
 800cbf4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cbf8:	81a3      	strh	r3, [r4, #12]
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	6063      	str	r3, [r4, #4]
 800cbfe:	6923      	ldr	r3, [r4, #16]
 800cc00:	6023      	str	r3, [r4, #0]
 800cc02:	89a3      	ldrh	r3, [r4, #12]
 800cc04:	f043 0308 	orr.w	r3, r3, #8
 800cc08:	81a3      	strh	r3, [r4, #12]
 800cc0a:	6923      	ldr	r3, [r4, #16]
 800cc0c:	b94b      	cbnz	r3, 800cc22 <__swsetup_r+0x9a>
 800cc0e:	89a3      	ldrh	r3, [r4, #12]
 800cc10:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cc14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc18:	d003      	beq.n	800cc22 <__swsetup_r+0x9a>
 800cc1a:	4621      	mov	r1, r4
 800cc1c:	4630      	mov	r0, r6
 800cc1e:	f000 fa09 	bl	800d034 <__smakebuf_r>
 800cc22:	89a0      	ldrh	r0, [r4, #12]
 800cc24:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc28:	f010 0301 	ands.w	r3, r0, #1
 800cc2c:	d00a      	beq.n	800cc44 <__swsetup_r+0xbc>
 800cc2e:	2300      	movs	r3, #0
 800cc30:	60a3      	str	r3, [r4, #8]
 800cc32:	6963      	ldr	r3, [r4, #20]
 800cc34:	425b      	negs	r3, r3
 800cc36:	61a3      	str	r3, [r4, #24]
 800cc38:	6923      	ldr	r3, [r4, #16]
 800cc3a:	b943      	cbnz	r3, 800cc4e <__swsetup_r+0xc6>
 800cc3c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cc40:	d1ba      	bne.n	800cbb8 <__swsetup_r+0x30>
 800cc42:	bd70      	pop	{r4, r5, r6, pc}
 800cc44:	0781      	lsls	r1, r0, #30
 800cc46:	bf58      	it	pl
 800cc48:	6963      	ldrpl	r3, [r4, #20]
 800cc4a:	60a3      	str	r3, [r4, #8]
 800cc4c:	e7f4      	b.n	800cc38 <__swsetup_r+0xb0>
 800cc4e:	2000      	movs	r0, #0
 800cc50:	e7f7      	b.n	800cc42 <__swsetup_r+0xba>
 800cc52:	bf00      	nop
 800cc54:	2000004c 	.word	0x2000004c
 800cc58:	0800f0cc 	.word	0x0800f0cc
 800cc5c:	0800f0ec 	.word	0x0800f0ec
 800cc60:	0800f0ac 	.word	0x0800f0ac

0800cc64 <abort>:
 800cc64:	b508      	push	{r3, lr}
 800cc66:	2006      	movs	r0, #6
 800cc68:	f000 fa54 	bl	800d114 <raise>
 800cc6c:	2001      	movs	r0, #1
 800cc6e:	f7f6 f8cb 	bl	8002e08 <_exit>
	...

0800cc74 <__sflush_r>:
 800cc74:	898a      	ldrh	r2, [r1, #12]
 800cc76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc7a:	4605      	mov	r5, r0
 800cc7c:	0710      	lsls	r0, r2, #28
 800cc7e:	460c      	mov	r4, r1
 800cc80:	d458      	bmi.n	800cd34 <__sflush_r+0xc0>
 800cc82:	684b      	ldr	r3, [r1, #4]
 800cc84:	2b00      	cmp	r3, #0
 800cc86:	dc05      	bgt.n	800cc94 <__sflush_r+0x20>
 800cc88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	dc02      	bgt.n	800cc94 <__sflush_r+0x20>
 800cc8e:	2000      	movs	r0, #0
 800cc90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc96:	2e00      	cmp	r6, #0
 800cc98:	d0f9      	beq.n	800cc8e <__sflush_r+0x1a>
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cca0:	682f      	ldr	r7, [r5, #0]
 800cca2:	602b      	str	r3, [r5, #0]
 800cca4:	d032      	beq.n	800cd0c <__sflush_r+0x98>
 800cca6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cca8:	89a3      	ldrh	r3, [r4, #12]
 800ccaa:	075a      	lsls	r2, r3, #29
 800ccac:	d505      	bpl.n	800ccba <__sflush_r+0x46>
 800ccae:	6863      	ldr	r3, [r4, #4]
 800ccb0:	1ac0      	subs	r0, r0, r3
 800ccb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800ccb4:	b10b      	cbz	r3, 800ccba <__sflush_r+0x46>
 800ccb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800ccb8:	1ac0      	subs	r0, r0, r3
 800ccba:	2300      	movs	r3, #0
 800ccbc:	4602      	mov	r2, r0
 800ccbe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800ccc0:	6a21      	ldr	r1, [r4, #32]
 800ccc2:	4628      	mov	r0, r5
 800ccc4:	47b0      	blx	r6
 800ccc6:	1c43      	adds	r3, r0, #1
 800ccc8:	89a3      	ldrh	r3, [r4, #12]
 800ccca:	d106      	bne.n	800ccda <__sflush_r+0x66>
 800cccc:	6829      	ldr	r1, [r5, #0]
 800ccce:	291d      	cmp	r1, #29
 800ccd0:	d82c      	bhi.n	800cd2c <__sflush_r+0xb8>
 800ccd2:	4a2a      	ldr	r2, [pc, #168]	; (800cd7c <__sflush_r+0x108>)
 800ccd4:	40ca      	lsrs	r2, r1
 800ccd6:	07d6      	lsls	r6, r2, #31
 800ccd8:	d528      	bpl.n	800cd2c <__sflush_r+0xb8>
 800ccda:	2200      	movs	r2, #0
 800ccdc:	6062      	str	r2, [r4, #4]
 800ccde:	04d9      	lsls	r1, r3, #19
 800cce0:	6922      	ldr	r2, [r4, #16]
 800cce2:	6022      	str	r2, [r4, #0]
 800cce4:	d504      	bpl.n	800ccf0 <__sflush_r+0x7c>
 800cce6:	1c42      	adds	r2, r0, #1
 800cce8:	d101      	bne.n	800ccee <__sflush_r+0x7a>
 800ccea:	682b      	ldr	r3, [r5, #0]
 800ccec:	b903      	cbnz	r3, 800ccf0 <__sflush_r+0x7c>
 800ccee:	6560      	str	r0, [r4, #84]	; 0x54
 800ccf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ccf2:	602f      	str	r7, [r5, #0]
 800ccf4:	2900      	cmp	r1, #0
 800ccf6:	d0ca      	beq.n	800cc8e <__sflush_r+0x1a>
 800ccf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ccfc:	4299      	cmp	r1, r3
 800ccfe:	d002      	beq.n	800cd06 <__sflush_r+0x92>
 800cd00:	4628      	mov	r0, r5
 800cd02:	f7ff faa5 	bl	800c250 <_free_r>
 800cd06:	2000      	movs	r0, #0
 800cd08:	6360      	str	r0, [r4, #52]	; 0x34
 800cd0a:	e7c1      	b.n	800cc90 <__sflush_r+0x1c>
 800cd0c:	6a21      	ldr	r1, [r4, #32]
 800cd0e:	2301      	movs	r3, #1
 800cd10:	4628      	mov	r0, r5
 800cd12:	47b0      	blx	r6
 800cd14:	1c41      	adds	r1, r0, #1
 800cd16:	d1c7      	bne.n	800cca8 <__sflush_r+0x34>
 800cd18:	682b      	ldr	r3, [r5, #0]
 800cd1a:	2b00      	cmp	r3, #0
 800cd1c:	d0c4      	beq.n	800cca8 <__sflush_r+0x34>
 800cd1e:	2b1d      	cmp	r3, #29
 800cd20:	d001      	beq.n	800cd26 <__sflush_r+0xb2>
 800cd22:	2b16      	cmp	r3, #22
 800cd24:	d101      	bne.n	800cd2a <__sflush_r+0xb6>
 800cd26:	602f      	str	r7, [r5, #0]
 800cd28:	e7b1      	b.n	800cc8e <__sflush_r+0x1a>
 800cd2a:	89a3      	ldrh	r3, [r4, #12]
 800cd2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd30:	81a3      	strh	r3, [r4, #12]
 800cd32:	e7ad      	b.n	800cc90 <__sflush_r+0x1c>
 800cd34:	690f      	ldr	r7, [r1, #16]
 800cd36:	2f00      	cmp	r7, #0
 800cd38:	d0a9      	beq.n	800cc8e <__sflush_r+0x1a>
 800cd3a:	0793      	lsls	r3, r2, #30
 800cd3c:	680e      	ldr	r6, [r1, #0]
 800cd3e:	bf08      	it	eq
 800cd40:	694b      	ldreq	r3, [r1, #20]
 800cd42:	600f      	str	r7, [r1, #0]
 800cd44:	bf18      	it	ne
 800cd46:	2300      	movne	r3, #0
 800cd48:	eba6 0807 	sub.w	r8, r6, r7
 800cd4c:	608b      	str	r3, [r1, #8]
 800cd4e:	f1b8 0f00 	cmp.w	r8, #0
 800cd52:	dd9c      	ble.n	800cc8e <__sflush_r+0x1a>
 800cd54:	6a21      	ldr	r1, [r4, #32]
 800cd56:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800cd58:	4643      	mov	r3, r8
 800cd5a:	463a      	mov	r2, r7
 800cd5c:	4628      	mov	r0, r5
 800cd5e:	47b0      	blx	r6
 800cd60:	2800      	cmp	r0, #0
 800cd62:	dc06      	bgt.n	800cd72 <__sflush_r+0xfe>
 800cd64:	89a3      	ldrh	r3, [r4, #12]
 800cd66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd6a:	81a3      	strh	r3, [r4, #12]
 800cd6c:	f04f 30ff 	mov.w	r0, #4294967295
 800cd70:	e78e      	b.n	800cc90 <__sflush_r+0x1c>
 800cd72:	4407      	add	r7, r0
 800cd74:	eba8 0800 	sub.w	r8, r8, r0
 800cd78:	e7e9      	b.n	800cd4e <__sflush_r+0xda>
 800cd7a:	bf00      	nop
 800cd7c:	20400001 	.word	0x20400001

0800cd80 <_fflush_r>:
 800cd80:	b538      	push	{r3, r4, r5, lr}
 800cd82:	690b      	ldr	r3, [r1, #16]
 800cd84:	4605      	mov	r5, r0
 800cd86:	460c      	mov	r4, r1
 800cd88:	b913      	cbnz	r3, 800cd90 <_fflush_r+0x10>
 800cd8a:	2500      	movs	r5, #0
 800cd8c:	4628      	mov	r0, r5
 800cd8e:	bd38      	pop	{r3, r4, r5, pc}
 800cd90:	b118      	cbz	r0, 800cd9a <_fflush_r+0x1a>
 800cd92:	6983      	ldr	r3, [r0, #24]
 800cd94:	b90b      	cbnz	r3, 800cd9a <_fflush_r+0x1a>
 800cd96:	f000 f887 	bl	800cea8 <__sinit>
 800cd9a:	4b14      	ldr	r3, [pc, #80]	; (800cdec <_fflush_r+0x6c>)
 800cd9c:	429c      	cmp	r4, r3
 800cd9e:	d11b      	bne.n	800cdd8 <_fflush_r+0x58>
 800cda0:	686c      	ldr	r4, [r5, #4]
 800cda2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d0ef      	beq.n	800cd8a <_fflush_r+0xa>
 800cdaa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cdac:	07d0      	lsls	r0, r2, #31
 800cdae:	d404      	bmi.n	800cdba <_fflush_r+0x3a>
 800cdb0:	0599      	lsls	r1, r3, #22
 800cdb2:	d402      	bmi.n	800cdba <_fflush_r+0x3a>
 800cdb4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdb6:	f000 f915 	bl	800cfe4 <__retarget_lock_acquire_recursive>
 800cdba:	4628      	mov	r0, r5
 800cdbc:	4621      	mov	r1, r4
 800cdbe:	f7ff ff59 	bl	800cc74 <__sflush_r>
 800cdc2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cdc4:	07da      	lsls	r2, r3, #31
 800cdc6:	4605      	mov	r5, r0
 800cdc8:	d4e0      	bmi.n	800cd8c <_fflush_r+0xc>
 800cdca:	89a3      	ldrh	r3, [r4, #12]
 800cdcc:	059b      	lsls	r3, r3, #22
 800cdce:	d4dd      	bmi.n	800cd8c <_fflush_r+0xc>
 800cdd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cdd2:	f000 f908 	bl	800cfe6 <__retarget_lock_release_recursive>
 800cdd6:	e7d9      	b.n	800cd8c <_fflush_r+0xc>
 800cdd8:	4b05      	ldr	r3, [pc, #20]	; (800cdf0 <_fflush_r+0x70>)
 800cdda:	429c      	cmp	r4, r3
 800cddc:	d101      	bne.n	800cde2 <_fflush_r+0x62>
 800cdde:	68ac      	ldr	r4, [r5, #8]
 800cde0:	e7df      	b.n	800cda2 <_fflush_r+0x22>
 800cde2:	4b04      	ldr	r3, [pc, #16]	; (800cdf4 <_fflush_r+0x74>)
 800cde4:	429c      	cmp	r4, r3
 800cde6:	bf08      	it	eq
 800cde8:	68ec      	ldreq	r4, [r5, #12]
 800cdea:	e7da      	b.n	800cda2 <_fflush_r+0x22>
 800cdec:	0800f0cc 	.word	0x0800f0cc
 800cdf0:	0800f0ec 	.word	0x0800f0ec
 800cdf4:	0800f0ac 	.word	0x0800f0ac

0800cdf8 <std>:
 800cdf8:	2300      	movs	r3, #0
 800cdfa:	b510      	push	{r4, lr}
 800cdfc:	4604      	mov	r4, r0
 800cdfe:	e9c0 3300 	strd	r3, r3, [r0]
 800ce02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800ce06:	6083      	str	r3, [r0, #8]
 800ce08:	8181      	strh	r1, [r0, #12]
 800ce0a:	6643      	str	r3, [r0, #100]	; 0x64
 800ce0c:	81c2      	strh	r2, [r0, #14]
 800ce0e:	6183      	str	r3, [r0, #24]
 800ce10:	4619      	mov	r1, r3
 800ce12:	2208      	movs	r2, #8
 800ce14:	305c      	adds	r0, #92	; 0x5c
 800ce16:	f7fd fb69 	bl	800a4ec <memset>
 800ce1a:	4b05      	ldr	r3, [pc, #20]	; (800ce30 <std+0x38>)
 800ce1c:	6263      	str	r3, [r4, #36]	; 0x24
 800ce1e:	4b05      	ldr	r3, [pc, #20]	; (800ce34 <std+0x3c>)
 800ce20:	62a3      	str	r3, [r4, #40]	; 0x28
 800ce22:	4b05      	ldr	r3, [pc, #20]	; (800ce38 <std+0x40>)
 800ce24:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ce26:	4b05      	ldr	r3, [pc, #20]	; (800ce3c <std+0x44>)
 800ce28:	6224      	str	r4, [r4, #32]
 800ce2a:	6323      	str	r3, [r4, #48]	; 0x30
 800ce2c:	bd10      	pop	{r4, pc}
 800ce2e:	bf00      	nop
 800ce30:	0800d14d 	.word	0x0800d14d
 800ce34:	0800d16f 	.word	0x0800d16f
 800ce38:	0800d1a7 	.word	0x0800d1a7
 800ce3c:	0800d1cb 	.word	0x0800d1cb

0800ce40 <_cleanup_r>:
 800ce40:	4901      	ldr	r1, [pc, #4]	; (800ce48 <_cleanup_r+0x8>)
 800ce42:	f000 b8af 	b.w	800cfa4 <_fwalk_reent>
 800ce46:	bf00      	nop
 800ce48:	0800cd81 	.word	0x0800cd81

0800ce4c <__sfmoreglue>:
 800ce4c:	b570      	push	{r4, r5, r6, lr}
 800ce4e:	2268      	movs	r2, #104	; 0x68
 800ce50:	1e4d      	subs	r5, r1, #1
 800ce52:	4355      	muls	r5, r2
 800ce54:	460e      	mov	r6, r1
 800ce56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800ce5a:	f7ff fa65 	bl	800c328 <_malloc_r>
 800ce5e:	4604      	mov	r4, r0
 800ce60:	b140      	cbz	r0, 800ce74 <__sfmoreglue+0x28>
 800ce62:	2100      	movs	r1, #0
 800ce64:	e9c0 1600 	strd	r1, r6, [r0]
 800ce68:	300c      	adds	r0, #12
 800ce6a:	60a0      	str	r0, [r4, #8]
 800ce6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800ce70:	f7fd fb3c 	bl	800a4ec <memset>
 800ce74:	4620      	mov	r0, r4
 800ce76:	bd70      	pop	{r4, r5, r6, pc}

0800ce78 <__sfp_lock_acquire>:
 800ce78:	4801      	ldr	r0, [pc, #4]	; (800ce80 <__sfp_lock_acquire+0x8>)
 800ce7a:	f000 b8b3 	b.w	800cfe4 <__retarget_lock_acquire_recursive>
 800ce7e:	bf00      	nop
 800ce80:	200052bd 	.word	0x200052bd

0800ce84 <__sfp_lock_release>:
 800ce84:	4801      	ldr	r0, [pc, #4]	; (800ce8c <__sfp_lock_release+0x8>)
 800ce86:	f000 b8ae 	b.w	800cfe6 <__retarget_lock_release_recursive>
 800ce8a:	bf00      	nop
 800ce8c:	200052bd 	.word	0x200052bd

0800ce90 <__sinit_lock_acquire>:
 800ce90:	4801      	ldr	r0, [pc, #4]	; (800ce98 <__sinit_lock_acquire+0x8>)
 800ce92:	f000 b8a7 	b.w	800cfe4 <__retarget_lock_acquire_recursive>
 800ce96:	bf00      	nop
 800ce98:	200052be 	.word	0x200052be

0800ce9c <__sinit_lock_release>:
 800ce9c:	4801      	ldr	r0, [pc, #4]	; (800cea4 <__sinit_lock_release+0x8>)
 800ce9e:	f000 b8a2 	b.w	800cfe6 <__retarget_lock_release_recursive>
 800cea2:	bf00      	nop
 800cea4:	200052be 	.word	0x200052be

0800cea8 <__sinit>:
 800cea8:	b510      	push	{r4, lr}
 800ceaa:	4604      	mov	r4, r0
 800ceac:	f7ff fff0 	bl	800ce90 <__sinit_lock_acquire>
 800ceb0:	69a3      	ldr	r3, [r4, #24]
 800ceb2:	b11b      	cbz	r3, 800cebc <__sinit+0x14>
 800ceb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ceb8:	f7ff bff0 	b.w	800ce9c <__sinit_lock_release>
 800cebc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800cec0:	6523      	str	r3, [r4, #80]	; 0x50
 800cec2:	4b13      	ldr	r3, [pc, #76]	; (800cf10 <__sinit+0x68>)
 800cec4:	4a13      	ldr	r2, [pc, #76]	; (800cf14 <__sinit+0x6c>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	62a2      	str	r2, [r4, #40]	; 0x28
 800ceca:	42a3      	cmp	r3, r4
 800cecc:	bf04      	itt	eq
 800cece:	2301      	moveq	r3, #1
 800ced0:	61a3      	streq	r3, [r4, #24]
 800ced2:	4620      	mov	r0, r4
 800ced4:	f000 f820 	bl	800cf18 <__sfp>
 800ced8:	6060      	str	r0, [r4, #4]
 800ceda:	4620      	mov	r0, r4
 800cedc:	f000 f81c 	bl	800cf18 <__sfp>
 800cee0:	60a0      	str	r0, [r4, #8]
 800cee2:	4620      	mov	r0, r4
 800cee4:	f000 f818 	bl	800cf18 <__sfp>
 800cee8:	2200      	movs	r2, #0
 800ceea:	60e0      	str	r0, [r4, #12]
 800ceec:	2104      	movs	r1, #4
 800ceee:	6860      	ldr	r0, [r4, #4]
 800cef0:	f7ff ff82 	bl	800cdf8 <std>
 800cef4:	68a0      	ldr	r0, [r4, #8]
 800cef6:	2201      	movs	r2, #1
 800cef8:	2109      	movs	r1, #9
 800cefa:	f7ff ff7d 	bl	800cdf8 <std>
 800cefe:	68e0      	ldr	r0, [r4, #12]
 800cf00:	2202      	movs	r2, #2
 800cf02:	2112      	movs	r1, #18
 800cf04:	f7ff ff78 	bl	800cdf8 <std>
 800cf08:	2301      	movs	r3, #1
 800cf0a:	61a3      	str	r3, [r4, #24]
 800cf0c:	e7d2      	b.n	800ceb4 <__sinit+0xc>
 800cf0e:	bf00      	nop
 800cf10:	0800ed30 	.word	0x0800ed30
 800cf14:	0800ce41 	.word	0x0800ce41

0800cf18 <__sfp>:
 800cf18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cf1a:	4607      	mov	r7, r0
 800cf1c:	f7ff ffac 	bl	800ce78 <__sfp_lock_acquire>
 800cf20:	4b1e      	ldr	r3, [pc, #120]	; (800cf9c <__sfp+0x84>)
 800cf22:	681e      	ldr	r6, [r3, #0]
 800cf24:	69b3      	ldr	r3, [r6, #24]
 800cf26:	b913      	cbnz	r3, 800cf2e <__sfp+0x16>
 800cf28:	4630      	mov	r0, r6
 800cf2a:	f7ff ffbd 	bl	800cea8 <__sinit>
 800cf2e:	3648      	adds	r6, #72	; 0x48
 800cf30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cf34:	3b01      	subs	r3, #1
 800cf36:	d503      	bpl.n	800cf40 <__sfp+0x28>
 800cf38:	6833      	ldr	r3, [r6, #0]
 800cf3a:	b30b      	cbz	r3, 800cf80 <__sfp+0x68>
 800cf3c:	6836      	ldr	r6, [r6, #0]
 800cf3e:	e7f7      	b.n	800cf30 <__sfp+0x18>
 800cf40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cf44:	b9d5      	cbnz	r5, 800cf7c <__sfp+0x64>
 800cf46:	4b16      	ldr	r3, [pc, #88]	; (800cfa0 <__sfp+0x88>)
 800cf48:	60e3      	str	r3, [r4, #12]
 800cf4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800cf4e:	6665      	str	r5, [r4, #100]	; 0x64
 800cf50:	f000 f847 	bl	800cfe2 <__retarget_lock_init_recursive>
 800cf54:	f7ff ff96 	bl	800ce84 <__sfp_lock_release>
 800cf58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cf5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cf60:	6025      	str	r5, [r4, #0]
 800cf62:	61a5      	str	r5, [r4, #24]
 800cf64:	2208      	movs	r2, #8
 800cf66:	4629      	mov	r1, r5
 800cf68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cf6c:	f7fd fabe 	bl	800a4ec <memset>
 800cf70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cf74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cf78:	4620      	mov	r0, r4
 800cf7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cf7c:	3468      	adds	r4, #104	; 0x68
 800cf7e:	e7d9      	b.n	800cf34 <__sfp+0x1c>
 800cf80:	2104      	movs	r1, #4
 800cf82:	4638      	mov	r0, r7
 800cf84:	f7ff ff62 	bl	800ce4c <__sfmoreglue>
 800cf88:	4604      	mov	r4, r0
 800cf8a:	6030      	str	r0, [r6, #0]
 800cf8c:	2800      	cmp	r0, #0
 800cf8e:	d1d5      	bne.n	800cf3c <__sfp+0x24>
 800cf90:	f7ff ff78 	bl	800ce84 <__sfp_lock_release>
 800cf94:	230c      	movs	r3, #12
 800cf96:	603b      	str	r3, [r7, #0]
 800cf98:	e7ee      	b.n	800cf78 <__sfp+0x60>
 800cf9a:	bf00      	nop
 800cf9c:	0800ed30 	.word	0x0800ed30
 800cfa0:	ffff0001 	.word	0xffff0001

0800cfa4 <_fwalk_reent>:
 800cfa4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cfa8:	4606      	mov	r6, r0
 800cfaa:	4688      	mov	r8, r1
 800cfac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cfb0:	2700      	movs	r7, #0
 800cfb2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cfb6:	f1b9 0901 	subs.w	r9, r9, #1
 800cfba:	d505      	bpl.n	800cfc8 <_fwalk_reent+0x24>
 800cfbc:	6824      	ldr	r4, [r4, #0]
 800cfbe:	2c00      	cmp	r4, #0
 800cfc0:	d1f7      	bne.n	800cfb2 <_fwalk_reent+0xe>
 800cfc2:	4638      	mov	r0, r7
 800cfc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfc8:	89ab      	ldrh	r3, [r5, #12]
 800cfca:	2b01      	cmp	r3, #1
 800cfcc:	d907      	bls.n	800cfde <_fwalk_reent+0x3a>
 800cfce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cfd2:	3301      	adds	r3, #1
 800cfd4:	d003      	beq.n	800cfde <_fwalk_reent+0x3a>
 800cfd6:	4629      	mov	r1, r5
 800cfd8:	4630      	mov	r0, r6
 800cfda:	47c0      	blx	r8
 800cfdc:	4307      	orrs	r7, r0
 800cfde:	3568      	adds	r5, #104	; 0x68
 800cfe0:	e7e9      	b.n	800cfb6 <_fwalk_reent+0x12>

0800cfe2 <__retarget_lock_init_recursive>:
 800cfe2:	4770      	bx	lr

0800cfe4 <__retarget_lock_acquire_recursive>:
 800cfe4:	4770      	bx	lr

0800cfe6 <__retarget_lock_release_recursive>:
 800cfe6:	4770      	bx	lr

0800cfe8 <__swhatbuf_r>:
 800cfe8:	b570      	push	{r4, r5, r6, lr}
 800cfea:	460e      	mov	r6, r1
 800cfec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cff0:	2900      	cmp	r1, #0
 800cff2:	b096      	sub	sp, #88	; 0x58
 800cff4:	4614      	mov	r4, r2
 800cff6:	461d      	mov	r5, r3
 800cff8:	da08      	bge.n	800d00c <__swhatbuf_r+0x24>
 800cffa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cffe:	2200      	movs	r2, #0
 800d000:	602a      	str	r2, [r5, #0]
 800d002:	061a      	lsls	r2, r3, #24
 800d004:	d410      	bmi.n	800d028 <__swhatbuf_r+0x40>
 800d006:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d00a:	e00e      	b.n	800d02a <__swhatbuf_r+0x42>
 800d00c:	466a      	mov	r2, sp
 800d00e:	f000 f903 	bl	800d218 <_fstat_r>
 800d012:	2800      	cmp	r0, #0
 800d014:	dbf1      	blt.n	800cffa <__swhatbuf_r+0x12>
 800d016:	9a01      	ldr	r2, [sp, #4]
 800d018:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d01c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d020:	425a      	negs	r2, r3
 800d022:	415a      	adcs	r2, r3
 800d024:	602a      	str	r2, [r5, #0]
 800d026:	e7ee      	b.n	800d006 <__swhatbuf_r+0x1e>
 800d028:	2340      	movs	r3, #64	; 0x40
 800d02a:	2000      	movs	r0, #0
 800d02c:	6023      	str	r3, [r4, #0]
 800d02e:	b016      	add	sp, #88	; 0x58
 800d030:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d034 <__smakebuf_r>:
 800d034:	898b      	ldrh	r3, [r1, #12]
 800d036:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d038:	079d      	lsls	r5, r3, #30
 800d03a:	4606      	mov	r6, r0
 800d03c:	460c      	mov	r4, r1
 800d03e:	d507      	bpl.n	800d050 <__smakebuf_r+0x1c>
 800d040:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d044:	6023      	str	r3, [r4, #0]
 800d046:	6123      	str	r3, [r4, #16]
 800d048:	2301      	movs	r3, #1
 800d04a:	6163      	str	r3, [r4, #20]
 800d04c:	b002      	add	sp, #8
 800d04e:	bd70      	pop	{r4, r5, r6, pc}
 800d050:	ab01      	add	r3, sp, #4
 800d052:	466a      	mov	r2, sp
 800d054:	f7ff ffc8 	bl	800cfe8 <__swhatbuf_r>
 800d058:	9900      	ldr	r1, [sp, #0]
 800d05a:	4605      	mov	r5, r0
 800d05c:	4630      	mov	r0, r6
 800d05e:	f7ff f963 	bl	800c328 <_malloc_r>
 800d062:	b948      	cbnz	r0, 800d078 <__smakebuf_r+0x44>
 800d064:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d068:	059a      	lsls	r2, r3, #22
 800d06a:	d4ef      	bmi.n	800d04c <__smakebuf_r+0x18>
 800d06c:	f023 0303 	bic.w	r3, r3, #3
 800d070:	f043 0302 	orr.w	r3, r3, #2
 800d074:	81a3      	strh	r3, [r4, #12]
 800d076:	e7e3      	b.n	800d040 <__smakebuf_r+0xc>
 800d078:	4b0d      	ldr	r3, [pc, #52]	; (800d0b0 <__smakebuf_r+0x7c>)
 800d07a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d07c:	89a3      	ldrh	r3, [r4, #12]
 800d07e:	6020      	str	r0, [r4, #0]
 800d080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d084:	81a3      	strh	r3, [r4, #12]
 800d086:	9b00      	ldr	r3, [sp, #0]
 800d088:	6163      	str	r3, [r4, #20]
 800d08a:	9b01      	ldr	r3, [sp, #4]
 800d08c:	6120      	str	r0, [r4, #16]
 800d08e:	b15b      	cbz	r3, 800d0a8 <__smakebuf_r+0x74>
 800d090:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d094:	4630      	mov	r0, r6
 800d096:	f000 f8d1 	bl	800d23c <_isatty_r>
 800d09a:	b128      	cbz	r0, 800d0a8 <__smakebuf_r+0x74>
 800d09c:	89a3      	ldrh	r3, [r4, #12]
 800d09e:	f023 0303 	bic.w	r3, r3, #3
 800d0a2:	f043 0301 	orr.w	r3, r3, #1
 800d0a6:	81a3      	strh	r3, [r4, #12]
 800d0a8:	89a0      	ldrh	r0, [r4, #12]
 800d0aa:	4305      	orrs	r5, r0
 800d0ac:	81a5      	strh	r5, [r4, #12]
 800d0ae:	e7cd      	b.n	800d04c <__smakebuf_r+0x18>
 800d0b0:	0800ce41 	.word	0x0800ce41

0800d0b4 <_malloc_usable_size_r>:
 800d0b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d0b8:	1f18      	subs	r0, r3, #4
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	bfbc      	itt	lt
 800d0be:	580b      	ldrlt	r3, [r1, r0]
 800d0c0:	18c0      	addlt	r0, r0, r3
 800d0c2:	4770      	bx	lr

0800d0c4 <_raise_r>:
 800d0c4:	291f      	cmp	r1, #31
 800d0c6:	b538      	push	{r3, r4, r5, lr}
 800d0c8:	4604      	mov	r4, r0
 800d0ca:	460d      	mov	r5, r1
 800d0cc:	d904      	bls.n	800d0d8 <_raise_r+0x14>
 800d0ce:	2316      	movs	r3, #22
 800d0d0:	6003      	str	r3, [r0, #0]
 800d0d2:	f04f 30ff 	mov.w	r0, #4294967295
 800d0d6:	bd38      	pop	{r3, r4, r5, pc}
 800d0d8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d0da:	b112      	cbz	r2, 800d0e2 <_raise_r+0x1e>
 800d0dc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d0e0:	b94b      	cbnz	r3, 800d0f6 <_raise_r+0x32>
 800d0e2:	4620      	mov	r0, r4
 800d0e4:	f000 f830 	bl	800d148 <_getpid_r>
 800d0e8:	462a      	mov	r2, r5
 800d0ea:	4601      	mov	r1, r0
 800d0ec:	4620      	mov	r0, r4
 800d0ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d0f2:	f000 b817 	b.w	800d124 <_kill_r>
 800d0f6:	2b01      	cmp	r3, #1
 800d0f8:	d00a      	beq.n	800d110 <_raise_r+0x4c>
 800d0fa:	1c59      	adds	r1, r3, #1
 800d0fc:	d103      	bne.n	800d106 <_raise_r+0x42>
 800d0fe:	2316      	movs	r3, #22
 800d100:	6003      	str	r3, [r0, #0]
 800d102:	2001      	movs	r0, #1
 800d104:	e7e7      	b.n	800d0d6 <_raise_r+0x12>
 800d106:	2400      	movs	r4, #0
 800d108:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d10c:	4628      	mov	r0, r5
 800d10e:	4798      	blx	r3
 800d110:	2000      	movs	r0, #0
 800d112:	e7e0      	b.n	800d0d6 <_raise_r+0x12>

0800d114 <raise>:
 800d114:	4b02      	ldr	r3, [pc, #8]	; (800d120 <raise+0xc>)
 800d116:	4601      	mov	r1, r0
 800d118:	6818      	ldr	r0, [r3, #0]
 800d11a:	f7ff bfd3 	b.w	800d0c4 <_raise_r>
 800d11e:	bf00      	nop
 800d120:	2000004c 	.word	0x2000004c

0800d124 <_kill_r>:
 800d124:	b538      	push	{r3, r4, r5, lr}
 800d126:	4d07      	ldr	r5, [pc, #28]	; (800d144 <_kill_r+0x20>)
 800d128:	2300      	movs	r3, #0
 800d12a:	4604      	mov	r4, r0
 800d12c:	4608      	mov	r0, r1
 800d12e:	4611      	mov	r1, r2
 800d130:	602b      	str	r3, [r5, #0]
 800d132:	f7f5 fe59 	bl	8002de8 <_kill>
 800d136:	1c43      	adds	r3, r0, #1
 800d138:	d102      	bne.n	800d140 <_kill_r+0x1c>
 800d13a:	682b      	ldr	r3, [r5, #0]
 800d13c:	b103      	cbz	r3, 800d140 <_kill_r+0x1c>
 800d13e:	6023      	str	r3, [r4, #0]
 800d140:	bd38      	pop	{r3, r4, r5, pc}
 800d142:	bf00      	nop
 800d144:	200052b8 	.word	0x200052b8

0800d148 <_getpid_r>:
 800d148:	f7f5 be46 	b.w	8002dd8 <_getpid>

0800d14c <__sread>:
 800d14c:	b510      	push	{r4, lr}
 800d14e:	460c      	mov	r4, r1
 800d150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d154:	f000 f894 	bl	800d280 <_read_r>
 800d158:	2800      	cmp	r0, #0
 800d15a:	bfab      	itete	ge
 800d15c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d15e:	89a3      	ldrhlt	r3, [r4, #12]
 800d160:	181b      	addge	r3, r3, r0
 800d162:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d166:	bfac      	ite	ge
 800d168:	6563      	strge	r3, [r4, #84]	; 0x54
 800d16a:	81a3      	strhlt	r3, [r4, #12]
 800d16c:	bd10      	pop	{r4, pc}

0800d16e <__swrite>:
 800d16e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d172:	461f      	mov	r7, r3
 800d174:	898b      	ldrh	r3, [r1, #12]
 800d176:	05db      	lsls	r3, r3, #23
 800d178:	4605      	mov	r5, r0
 800d17a:	460c      	mov	r4, r1
 800d17c:	4616      	mov	r6, r2
 800d17e:	d505      	bpl.n	800d18c <__swrite+0x1e>
 800d180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d184:	2302      	movs	r3, #2
 800d186:	2200      	movs	r2, #0
 800d188:	f000 f868 	bl	800d25c <_lseek_r>
 800d18c:	89a3      	ldrh	r3, [r4, #12]
 800d18e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d192:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d196:	81a3      	strh	r3, [r4, #12]
 800d198:	4632      	mov	r2, r6
 800d19a:	463b      	mov	r3, r7
 800d19c:	4628      	mov	r0, r5
 800d19e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d1a2:	f000 b817 	b.w	800d1d4 <_write_r>

0800d1a6 <__sseek>:
 800d1a6:	b510      	push	{r4, lr}
 800d1a8:	460c      	mov	r4, r1
 800d1aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1ae:	f000 f855 	bl	800d25c <_lseek_r>
 800d1b2:	1c43      	adds	r3, r0, #1
 800d1b4:	89a3      	ldrh	r3, [r4, #12]
 800d1b6:	bf15      	itete	ne
 800d1b8:	6560      	strne	r0, [r4, #84]	; 0x54
 800d1ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d1be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d1c2:	81a3      	strheq	r3, [r4, #12]
 800d1c4:	bf18      	it	ne
 800d1c6:	81a3      	strhne	r3, [r4, #12]
 800d1c8:	bd10      	pop	{r4, pc}

0800d1ca <__sclose>:
 800d1ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d1ce:	f000 b813 	b.w	800d1f8 <_close_r>
	...

0800d1d4 <_write_r>:
 800d1d4:	b538      	push	{r3, r4, r5, lr}
 800d1d6:	4d07      	ldr	r5, [pc, #28]	; (800d1f4 <_write_r+0x20>)
 800d1d8:	4604      	mov	r4, r0
 800d1da:	4608      	mov	r0, r1
 800d1dc:	4611      	mov	r1, r2
 800d1de:	2200      	movs	r2, #0
 800d1e0:	602a      	str	r2, [r5, #0]
 800d1e2:	461a      	mov	r2, r3
 800d1e4:	f7f5 fe37 	bl	8002e56 <_write>
 800d1e8:	1c43      	adds	r3, r0, #1
 800d1ea:	d102      	bne.n	800d1f2 <_write_r+0x1e>
 800d1ec:	682b      	ldr	r3, [r5, #0]
 800d1ee:	b103      	cbz	r3, 800d1f2 <_write_r+0x1e>
 800d1f0:	6023      	str	r3, [r4, #0]
 800d1f2:	bd38      	pop	{r3, r4, r5, pc}
 800d1f4:	200052b8 	.word	0x200052b8

0800d1f8 <_close_r>:
 800d1f8:	b538      	push	{r3, r4, r5, lr}
 800d1fa:	4d06      	ldr	r5, [pc, #24]	; (800d214 <_close_r+0x1c>)
 800d1fc:	2300      	movs	r3, #0
 800d1fe:	4604      	mov	r4, r0
 800d200:	4608      	mov	r0, r1
 800d202:	602b      	str	r3, [r5, #0]
 800d204:	f7f5 fe43 	bl	8002e8e <_close>
 800d208:	1c43      	adds	r3, r0, #1
 800d20a:	d102      	bne.n	800d212 <_close_r+0x1a>
 800d20c:	682b      	ldr	r3, [r5, #0]
 800d20e:	b103      	cbz	r3, 800d212 <_close_r+0x1a>
 800d210:	6023      	str	r3, [r4, #0]
 800d212:	bd38      	pop	{r3, r4, r5, pc}
 800d214:	200052b8 	.word	0x200052b8

0800d218 <_fstat_r>:
 800d218:	b538      	push	{r3, r4, r5, lr}
 800d21a:	4d07      	ldr	r5, [pc, #28]	; (800d238 <_fstat_r+0x20>)
 800d21c:	2300      	movs	r3, #0
 800d21e:	4604      	mov	r4, r0
 800d220:	4608      	mov	r0, r1
 800d222:	4611      	mov	r1, r2
 800d224:	602b      	str	r3, [r5, #0]
 800d226:	f7f5 fe3e 	bl	8002ea6 <_fstat>
 800d22a:	1c43      	adds	r3, r0, #1
 800d22c:	d102      	bne.n	800d234 <_fstat_r+0x1c>
 800d22e:	682b      	ldr	r3, [r5, #0]
 800d230:	b103      	cbz	r3, 800d234 <_fstat_r+0x1c>
 800d232:	6023      	str	r3, [r4, #0]
 800d234:	bd38      	pop	{r3, r4, r5, pc}
 800d236:	bf00      	nop
 800d238:	200052b8 	.word	0x200052b8

0800d23c <_isatty_r>:
 800d23c:	b538      	push	{r3, r4, r5, lr}
 800d23e:	4d06      	ldr	r5, [pc, #24]	; (800d258 <_isatty_r+0x1c>)
 800d240:	2300      	movs	r3, #0
 800d242:	4604      	mov	r4, r0
 800d244:	4608      	mov	r0, r1
 800d246:	602b      	str	r3, [r5, #0]
 800d248:	f7f5 fe3d 	bl	8002ec6 <_isatty>
 800d24c:	1c43      	adds	r3, r0, #1
 800d24e:	d102      	bne.n	800d256 <_isatty_r+0x1a>
 800d250:	682b      	ldr	r3, [r5, #0]
 800d252:	b103      	cbz	r3, 800d256 <_isatty_r+0x1a>
 800d254:	6023      	str	r3, [r4, #0]
 800d256:	bd38      	pop	{r3, r4, r5, pc}
 800d258:	200052b8 	.word	0x200052b8

0800d25c <_lseek_r>:
 800d25c:	b538      	push	{r3, r4, r5, lr}
 800d25e:	4d07      	ldr	r5, [pc, #28]	; (800d27c <_lseek_r+0x20>)
 800d260:	4604      	mov	r4, r0
 800d262:	4608      	mov	r0, r1
 800d264:	4611      	mov	r1, r2
 800d266:	2200      	movs	r2, #0
 800d268:	602a      	str	r2, [r5, #0]
 800d26a:	461a      	mov	r2, r3
 800d26c:	f7f5 fe36 	bl	8002edc <_lseek>
 800d270:	1c43      	adds	r3, r0, #1
 800d272:	d102      	bne.n	800d27a <_lseek_r+0x1e>
 800d274:	682b      	ldr	r3, [r5, #0]
 800d276:	b103      	cbz	r3, 800d27a <_lseek_r+0x1e>
 800d278:	6023      	str	r3, [r4, #0]
 800d27a:	bd38      	pop	{r3, r4, r5, pc}
 800d27c:	200052b8 	.word	0x200052b8

0800d280 <_read_r>:
 800d280:	b538      	push	{r3, r4, r5, lr}
 800d282:	4d07      	ldr	r5, [pc, #28]	; (800d2a0 <_read_r+0x20>)
 800d284:	4604      	mov	r4, r0
 800d286:	4608      	mov	r0, r1
 800d288:	4611      	mov	r1, r2
 800d28a:	2200      	movs	r2, #0
 800d28c:	602a      	str	r2, [r5, #0]
 800d28e:	461a      	mov	r2, r3
 800d290:	f7f5 fdc4 	bl	8002e1c <_read>
 800d294:	1c43      	adds	r3, r0, #1
 800d296:	d102      	bne.n	800d29e <_read_r+0x1e>
 800d298:	682b      	ldr	r3, [r5, #0]
 800d29a:	b103      	cbz	r3, 800d29e <_read_r+0x1e>
 800d29c:	6023      	str	r3, [r4, #0]
 800d29e:	bd38      	pop	{r3, r4, r5, pc}
 800d2a0:	200052b8 	.word	0x200052b8

0800d2a4 <roundf>:
 800d2a4:	ee10 0a10 	vmov	r0, s0
 800d2a8:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 800d2ac:	3a7f      	subs	r2, #127	; 0x7f
 800d2ae:	2a16      	cmp	r2, #22
 800d2b0:	dc15      	bgt.n	800d2de <roundf+0x3a>
 800d2b2:	2a00      	cmp	r2, #0
 800d2b4:	da08      	bge.n	800d2c8 <roundf+0x24>
 800d2b6:	3201      	adds	r2, #1
 800d2b8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800d2bc:	d101      	bne.n	800d2c2 <roundf+0x1e>
 800d2be:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800d2c2:	ee00 3a10 	vmov	s0, r3
 800d2c6:	4770      	bx	lr
 800d2c8:	4907      	ldr	r1, [pc, #28]	; (800d2e8 <roundf+0x44>)
 800d2ca:	4111      	asrs	r1, r2
 800d2cc:	4208      	tst	r0, r1
 800d2ce:	d0fa      	beq.n	800d2c6 <roundf+0x22>
 800d2d0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d2d4:	4113      	asrs	r3, r2
 800d2d6:	4403      	add	r3, r0
 800d2d8:	ea23 0301 	bic.w	r3, r3, r1
 800d2dc:	e7f1      	b.n	800d2c2 <roundf+0x1e>
 800d2de:	2a80      	cmp	r2, #128	; 0x80
 800d2e0:	d1f1      	bne.n	800d2c6 <roundf+0x22>
 800d2e2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800d2e6:	4770      	bx	lr
 800d2e8:	007fffff 	.word	0x007fffff

0800d2ec <pow>:
 800d2ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d2ee:	ed2d 8b02 	vpush	{d8}
 800d2f2:	eeb0 8a40 	vmov.f32	s16, s0
 800d2f6:	eef0 8a60 	vmov.f32	s17, s1
 800d2fa:	ec55 4b11 	vmov	r4, r5, d1
 800d2fe:	f000 f867 	bl	800d3d0 <__ieee754_pow>
 800d302:	4622      	mov	r2, r4
 800d304:	462b      	mov	r3, r5
 800d306:	4620      	mov	r0, r4
 800d308:	4629      	mov	r1, r5
 800d30a:	ec57 6b10 	vmov	r6, r7, d0
 800d30e:	f7f3 fc0d 	bl	8000b2c <__aeabi_dcmpun>
 800d312:	2800      	cmp	r0, #0
 800d314:	d13b      	bne.n	800d38e <pow+0xa2>
 800d316:	ec51 0b18 	vmov	r0, r1, d8
 800d31a:	2200      	movs	r2, #0
 800d31c:	2300      	movs	r3, #0
 800d31e:	f7f3 fbd3 	bl	8000ac8 <__aeabi_dcmpeq>
 800d322:	b1b8      	cbz	r0, 800d354 <pow+0x68>
 800d324:	2200      	movs	r2, #0
 800d326:	2300      	movs	r3, #0
 800d328:	4620      	mov	r0, r4
 800d32a:	4629      	mov	r1, r5
 800d32c:	f7f3 fbcc 	bl	8000ac8 <__aeabi_dcmpeq>
 800d330:	2800      	cmp	r0, #0
 800d332:	d146      	bne.n	800d3c2 <pow+0xd6>
 800d334:	ec45 4b10 	vmov	d0, r4, r5
 800d338:	f000 fe63 	bl	800e002 <finite>
 800d33c:	b338      	cbz	r0, 800d38e <pow+0xa2>
 800d33e:	2200      	movs	r2, #0
 800d340:	2300      	movs	r3, #0
 800d342:	4620      	mov	r0, r4
 800d344:	4629      	mov	r1, r5
 800d346:	f7f3 fbc9 	bl	8000adc <__aeabi_dcmplt>
 800d34a:	b300      	cbz	r0, 800d38e <pow+0xa2>
 800d34c:	f7fd f896 	bl	800a47c <__errno>
 800d350:	2322      	movs	r3, #34	; 0x22
 800d352:	e01b      	b.n	800d38c <pow+0xa0>
 800d354:	ec47 6b10 	vmov	d0, r6, r7
 800d358:	f000 fe53 	bl	800e002 <finite>
 800d35c:	b9e0      	cbnz	r0, 800d398 <pow+0xac>
 800d35e:	eeb0 0a48 	vmov.f32	s0, s16
 800d362:	eef0 0a68 	vmov.f32	s1, s17
 800d366:	f000 fe4c 	bl	800e002 <finite>
 800d36a:	b1a8      	cbz	r0, 800d398 <pow+0xac>
 800d36c:	ec45 4b10 	vmov	d0, r4, r5
 800d370:	f000 fe47 	bl	800e002 <finite>
 800d374:	b180      	cbz	r0, 800d398 <pow+0xac>
 800d376:	4632      	mov	r2, r6
 800d378:	463b      	mov	r3, r7
 800d37a:	4630      	mov	r0, r6
 800d37c:	4639      	mov	r1, r7
 800d37e:	f7f3 fbd5 	bl	8000b2c <__aeabi_dcmpun>
 800d382:	2800      	cmp	r0, #0
 800d384:	d0e2      	beq.n	800d34c <pow+0x60>
 800d386:	f7fd f879 	bl	800a47c <__errno>
 800d38a:	2321      	movs	r3, #33	; 0x21
 800d38c:	6003      	str	r3, [r0, #0]
 800d38e:	ecbd 8b02 	vpop	{d8}
 800d392:	ec47 6b10 	vmov	d0, r6, r7
 800d396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d398:	2200      	movs	r2, #0
 800d39a:	2300      	movs	r3, #0
 800d39c:	4630      	mov	r0, r6
 800d39e:	4639      	mov	r1, r7
 800d3a0:	f7f3 fb92 	bl	8000ac8 <__aeabi_dcmpeq>
 800d3a4:	2800      	cmp	r0, #0
 800d3a6:	d0f2      	beq.n	800d38e <pow+0xa2>
 800d3a8:	eeb0 0a48 	vmov.f32	s0, s16
 800d3ac:	eef0 0a68 	vmov.f32	s1, s17
 800d3b0:	f000 fe27 	bl	800e002 <finite>
 800d3b4:	2800      	cmp	r0, #0
 800d3b6:	d0ea      	beq.n	800d38e <pow+0xa2>
 800d3b8:	ec45 4b10 	vmov	d0, r4, r5
 800d3bc:	f000 fe21 	bl	800e002 <finite>
 800d3c0:	e7c3      	b.n	800d34a <pow+0x5e>
 800d3c2:	4f01      	ldr	r7, [pc, #4]	; (800d3c8 <pow+0xdc>)
 800d3c4:	2600      	movs	r6, #0
 800d3c6:	e7e2      	b.n	800d38e <pow+0xa2>
 800d3c8:	3ff00000 	.word	0x3ff00000
 800d3cc:	00000000 	.word	0x00000000

0800d3d0 <__ieee754_pow>:
 800d3d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3d4:	ed2d 8b06 	vpush	{d8-d10}
 800d3d8:	b089      	sub	sp, #36	; 0x24
 800d3da:	ed8d 1b00 	vstr	d1, [sp]
 800d3de:	e9dd 2900 	ldrd	r2, r9, [sp]
 800d3e2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800d3e6:	ea58 0102 	orrs.w	r1, r8, r2
 800d3ea:	ec57 6b10 	vmov	r6, r7, d0
 800d3ee:	d115      	bne.n	800d41c <__ieee754_pow+0x4c>
 800d3f0:	19b3      	adds	r3, r6, r6
 800d3f2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800d3f6:	4152      	adcs	r2, r2
 800d3f8:	4299      	cmp	r1, r3
 800d3fa:	4b89      	ldr	r3, [pc, #548]	; (800d620 <__ieee754_pow+0x250>)
 800d3fc:	4193      	sbcs	r3, r2
 800d3fe:	f080 84d2 	bcs.w	800dda6 <__ieee754_pow+0x9d6>
 800d402:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d406:	4630      	mov	r0, r6
 800d408:	4639      	mov	r1, r7
 800d40a:	f7f2 ff3f 	bl	800028c <__adddf3>
 800d40e:	ec41 0b10 	vmov	d0, r0, r1
 800d412:	b009      	add	sp, #36	; 0x24
 800d414:	ecbd 8b06 	vpop	{d8-d10}
 800d418:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d41c:	4b81      	ldr	r3, [pc, #516]	; (800d624 <__ieee754_pow+0x254>)
 800d41e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800d422:	429c      	cmp	r4, r3
 800d424:	ee10 aa10 	vmov	sl, s0
 800d428:	463d      	mov	r5, r7
 800d42a:	dc06      	bgt.n	800d43a <__ieee754_pow+0x6a>
 800d42c:	d101      	bne.n	800d432 <__ieee754_pow+0x62>
 800d42e:	2e00      	cmp	r6, #0
 800d430:	d1e7      	bne.n	800d402 <__ieee754_pow+0x32>
 800d432:	4598      	cmp	r8, r3
 800d434:	dc01      	bgt.n	800d43a <__ieee754_pow+0x6a>
 800d436:	d10f      	bne.n	800d458 <__ieee754_pow+0x88>
 800d438:	b172      	cbz	r2, 800d458 <__ieee754_pow+0x88>
 800d43a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800d43e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800d442:	ea55 050a 	orrs.w	r5, r5, sl
 800d446:	d1dc      	bne.n	800d402 <__ieee754_pow+0x32>
 800d448:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d44c:	18db      	adds	r3, r3, r3
 800d44e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800d452:	4152      	adcs	r2, r2
 800d454:	429d      	cmp	r5, r3
 800d456:	e7d0      	b.n	800d3fa <__ieee754_pow+0x2a>
 800d458:	2d00      	cmp	r5, #0
 800d45a:	da3b      	bge.n	800d4d4 <__ieee754_pow+0x104>
 800d45c:	4b72      	ldr	r3, [pc, #456]	; (800d628 <__ieee754_pow+0x258>)
 800d45e:	4598      	cmp	r8, r3
 800d460:	dc51      	bgt.n	800d506 <__ieee754_pow+0x136>
 800d462:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800d466:	4598      	cmp	r8, r3
 800d468:	f340 84ac 	ble.w	800ddc4 <__ieee754_pow+0x9f4>
 800d46c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d470:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d474:	2b14      	cmp	r3, #20
 800d476:	dd0f      	ble.n	800d498 <__ieee754_pow+0xc8>
 800d478:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800d47c:	fa22 f103 	lsr.w	r1, r2, r3
 800d480:	fa01 f303 	lsl.w	r3, r1, r3
 800d484:	4293      	cmp	r3, r2
 800d486:	f040 849d 	bne.w	800ddc4 <__ieee754_pow+0x9f4>
 800d48a:	f001 0101 	and.w	r1, r1, #1
 800d48e:	f1c1 0302 	rsb	r3, r1, #2
 800d492:	9304      	str	r3, [sp, #16]
 800d494:	b182      	cbz	r2, 800d4b8 <__ieee754_pow+0xe8>
 800d496:	e05f      	b.n	800d558 <__ieee754_pow+0x188>
 800d498:	2a00      	cmp	r2, #0
 800d49a:	d15b      	bne.n	800d554 <__ieee754_pow+0x184>
 800d49c:	f1c3 0314 	rsb	r3, r3, #20
 800d4a0:	fa48 f103 	asr.w	r1, r8, r3
 800d4a4:	fa01 f303 	lsl.w	r3, r1, r3
 800d4a8:	4543      	cmp	r3, r8
 800d4aa:	f040 8488 	bne.w	800ddbe <__ieee754_pow+0x9ee>
 800d4ae:	f001 0101 	and.w	r1, r1, #1
 800d4b2:	f1c1 0302 	rsb	r3, r1, #2
 800d4b6:	9304      	str	r3, [sp, #16]
 800d4b8:	4b5c      	ldr	r3, [pc, #368]	; (800d62c <__ieee754_pow+0x25c>)
 800d4ba:	4598      	cmp	r8, r3
 800d4bc:	d132      	bne.n	800d524 <__ieee754_pow+0x154>
 800d4be:	f1b9 0f00 	cmp.w	r9, #0
 800d4c2:	f280 8478 	bge.w	800ddb6 <__ieee754_pow+0x9e6>
 800d4c6:	4959      	ldr	r1, [pc, #356]	; (800d62c <__ieee754_pow+0x25c>)
 800d4c8:	4632      	mov	r2, r6
 800d4ca:	463b      	mov	r3, r7
 800d4cc:	2000      	movs	r0, #0
 800d4ce:	f7f3 f9bd 	bl	800084c <__aeabi_ddiv>
 800d4d2:	e79c      	b.n	800d40e <__ieee754_pow+0x3e>
 800d4d4:	2300      	movs	r3, #0
 800d4d6:	9304      	str	r3, [sp, #16]
 800d4d8:	2a00      	cmp	r2, #0
 800d4da:	d13d      	bne.n	800d558 <__ieee754_pow+0x188>
 800d4dc:	4b51      	ldr	r3, [pc, #324]	; (800d624 <__ieee754_pow+0x254>)
 800d4de:	4598      	cmp	r8, r3
 800d4e0:	d1ea      	bne.n	800d4b8 <__ieee754_pow+0xe8>
 800d4e2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800d4e6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d4ea:	ea53 030a 	orrs.w	r3, r3, sl
 800d4ee:	f000 845a 	beq.w	800dda6 <__ieee754_pow+0x9d6>
 800d4f2:	4b4f      	ldr	r3, [pc, #316]	; (800d630 <__ieee754_pow+0x260>)
 800d4f4:	429c      	cmp	r4, r3
 800d4f6:	dd08      	ble.n	800d50a <__ieee754_pow+0x13a>
 800d4f8:	f1b9 0f00 	cmp.w	r9, #0
 800d4fc:	f2c0 8457 	blt.w	800ddae <__ieee754_pow+0x9de>
 800d500:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d504:	e783      	b.n	800d40e <__ieee754_pow+0x3e>
 800d506:	2302      	movs	r3, #2
 800d508:	e7e5      	b.n	800d4d6 <__ieee754_pow+0x106>
 800d50a:	f1b9 0f00 	cmp.w	r9, #0
 800d50e:	f04f 0000 	mov.w	r0, #0
 800d512:	f04f 0100 	mov.w	r1, #0
 800d516:	f6bf af7a 	bge.w	800d40e <__ieee754_pow+0x3e>
 800d51a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800d51e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800d522:	e774      	b.n	800d40e <__ieee754_pow+0x3e>
 800d524:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800d528:	d106      	bne.n	800d538 <__ieee754_pow+0x168>
 800d52a:	4632      	mov	r2, r6
 800d52c:	463b      	mov	r3, r7
 800d52e:	4630      	mov	r0, r6
 800d530:	4639      	mov	r1, r7
 800d532:	f7f3 f861 	bl	80005f8 <__aeabi_dmul>
 800d536:	e76a      	b.n	800d40e <__ieee754_pow+0x3e>
 800d538:	4b3e      	ldr	r3, [pc, #248]	; (800d634 <__ieee754_pow+0x264>)
 800d53a:	4599      	cmp	r9, r3
 800d53c:	d10c      	bne.n	800d558 <__ieee754_pow+0x188>
 800d53e:	2d00      	cmp	r5, #0
 800d540:	db0a      	blt.n	800d558 <__ieee754_pow+0x188>
 800d542:	ec47 6b10 	vmov	d0, r6, r7
 800d546:	b009      	add	sp, #36	; 0x24
 800d548:	ecbd 8b06 	vpop	{d8-d10}
 800d54c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d550:	f000 bc6c 	b.w	800de2c <__ieee754_sqrt>
 800d554:	2300      	movs	r3, #0
 800d556:	9304      	str	r3, [sp, #16]
 800d558:	ec47 6b10 	vmov	d0, r6, r7
 800d55c:	f000 fd48 	bl	800dff0 <fabs>
 800d560:	ec51 0b10 	vmov	r0, r1, d0
 800d564:	f1ba 0f00 	cmp.w	sl, #0
 800d568:	d129      	bne.n	800d5be <__ieee754_pow+0x1ee>
 800d56a:	b124      	cbz	r4, 800d576 <__ieee754_pow+0x1a6>
 800d56c:	4b2f      	ldr	r3, [pc, #188]	; (800d62c <__ieee754_pow+0x25c>)
 800d56e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800d572:	429a      	cmp	r2, r3
 800d574:	d123      	bne.n	800d5be <__ieee754_pow+0x1ee>
 800d576:	f1b9 0f00 	cmp.w	r9, #0
 800d57a:	da05      	bge.n	800d588 <__ieee754_pow+0x1b8>
 800d57c:	4602      	mov	r2, r0
 800d57e:	460b      	mov	r3, r1
 800d580:	2000      	movs	r0, #0
 800d582:	492a      	ldr	r1, [pc, #168]	; (800d62c <__ieee754_pow+0x25c>)
 800d584:	f7f3 f962 	bl	800084c <__aeabi_ddiv>
 800d588:	2d00      	cmp	r5, #0
 800d58a:	f6bf af40 	bge.w	800d40e <__ieee754_pow+0x3e>
 800d58e:	9b04      	ldr	r3, [sp, #16]
 800d590:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800d594:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800d598:	4323      	orrs	r3, r4
 800d59a:	d108      	bne.n	800d5ae <__ieee754_pow+0x1de>
 800d59c:	4602      	mov	r2, r0
 800d59e:	460b      	mov	r3, r1
 800d5a0:	4610      	mov	r0, r2
 800d5a2:	4619      	mov	r1, r3
 800d5a4:	f7f2 fe70 	bl	8000288 <__aeabi_dsub>
 800d5a8:	4602      	mov	r2, r0
 800d5aa:	460b      	mov	r3, r1
 800d5ac:	e78f      	b.n	800d4ce <__ieee754_pow+0xfe>
 800d5ae:	9b04      	ldr	r3, [sp, #16]
 800d5b0:	2b01      	cmp	r3, #1
 800d5b2:	f47f af2c 	bne.w	800d40e <__ieee754_pow+0x3e>
 800d5b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d5ba:	4619      	mov	r1, r3
 800d5bc:	e727      	b.n	800d40e <__ieee754_pow+0x3e>
 800d5be:	0feb      	lsrs	r3, r5, #31
 800d5c0:	3b01      	subs	r3, #1
 800d5c2:	9306      	str	r3, [sp, #24]
 800d5c4:	9a06      	ldr	r2, [sp, #24]
 800d5c6:	9b04      	ldr	r3, [sp, #16]
 800d5c8:	4313      	orrs	r3, r2
 800d5ca:	d102      	bne.n	800d5d2 <__ieee754_pow+0x202>
 800d5cc:	4632      	mov	r2, r6
 800d5ce:	463b      	mov	r3, r7
 800d5d0:	e7e6      	b.n	800d5a0 <__ieee754_pow+0x1d0>
 800d5d2:	4b19      	ldr	r3, [pc, #100]	; (800d638 <__ieee754_pow+0x268>)
 800d5d4:	4598      	cmp	r8, r3
 800d5d6:	f340 80fb 	ble.w	800d7d0 <__ieee754_pow+0x400>
 800d5da:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d5de:	4598      	cmp	r8, r3
 800d5e0:	4b13      	ldr	r3, [pc, #76]	; (800d630 <__ieee754_pow+0x260>)
 800d5e2:	dd0c      	ble.n	800d5fe <__ieee754_pow+0x22e>
 800d5e4:	429c      	cmp	r4, r3
 800d5e6:	dc0f      	bgt.n	800d608 <__ieee754_pow+0x238>
 800d5e8:	f1b9 0f00 	cmp.w	r9, #0
 800d5ec:	da0f      	bge.n	800d60e <__ieee754_pow+0x23e>
 800d5ee:	2000      	movs	r0, #0
 800d5f0:	b009      	add	sp, #36	; 0x24
 800d5f2:	ecbd 8b06 	vpop	{d8-d10}
 800d5f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5fa:	f000 bcf0 	b.w	800dfde <__math_oflow>
 800d5fe:	429c      	cmp	r4, r3
 800d600:	dbf2      	blt.n	800d5e8 <__ieee754_pow+0x218>
 800d602:	4b0a      	ldr	r3, [pc, #40]	; (800d62c <__ieee754_pow+0x25c>)
 800d604:	429c      	cmp	r4, r3
 800d606:	dd19      	ble.n	800d63c <__ieee754_pow+0x26c>
 800d608:	f1b9 0f00 	cmp.w	r9, #0
 800d60c:	dcef      	bgt.n	800d5ee <__ieee754_pow+0x21e>
 800d60e:	2000      	movs	r0, #0
 800d610:	b009      	add	sp, #36	; 0x24
 800d612:	ecbd 8b06 	vpop	{d8-d10}
 800d616:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d61a:	f000 bcd7 	b.w	800dfcc <__math_uflow>
 800d61e:	bf00      	nop
 800d620:	fff00000 	.word	0xfff00000
 800d624:	7ff00000 	.word	0x7ff00000
 800d628:	433fffff 	.word	0x433fffff
 800d62c:	3ff00000 	.word	0x3ff00000
 800d630:	3fefffff 	.word	0x3fefffff
 800d634:	3fe00000 	.word	0x3fe00000
 800d638:	41e00000 	.word	0x41e00000
 800d63c:	4b60      	ldr	r3, [pc, #384]	; (800d7c0 <__ieee754_pow+0x3f0>)
 800d63e:	2200      	movs	r2, #0
 800d640:	f7f2 fe22 	bl	8000288 <__aeabi_dsub>
 800d644:	a354      	add	r3, pc, #336	; (adr r3, 800d798 <__ieee754_pow+0x3c8>)
 800d646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d64a:	4604      	mov	r4, r0
 800d64c:	460d      	mov	r5, r1
 800d64e:	f7f2 ffd3 	bl	80005f8 <__aeabi_dmul>
 800d652:	a353      	add	r3, pc, #332	; (adr r3, 800d7a0 <__ieee754_pow+0x3d0>)
 800d654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d658:	4606      	mov	r6, r0
 800d65a:	460f      	mov	r7, r1
 800d65c:	4620      	mov	r0, r4
 800d65e:	4629      	mov	r1, r5
 800d660:	f7f2 ffca 	bl	80005f8 <__aeabi_dmul>
 800d664:	4b57      	ldr	r3, [pc, #348]	; (800d7c4 <__ieee754_pow+0x3f4>)
 800d666:	4682      	mov	sl, r0
 800d668:	468b      	mov	fp, r1
 800d66a:	2200      	movs	r2, #0
 800d66c:	4620      	mov	r0, r4
 800d66e:	4629      	mov	r1, r5
 800d670:	f7f2 ffc2 	bl	80005f8 <__aeabi_dmul>
 800d674:	4602      	mov	r2, r0
 800d676:	460b      	mov	r3, r1
 800d678:	a14b      	add	r1, pc, #300	; (adr r1, 800d7a8 <__ieee754_pow+0x3d8>)
 800d67a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800d67e:	f7f2 fe03 	bl	8000288 <__aeabi_dsub>
 800d682:	4622      	mov	r2, r4
 800d684:	462b      	mov	r3, r5
 800d686:	f7f2 ffb7 	bl	80005f8 <__aeabi_dmul>
 800d68a:	4602      	mov	r2, r0
 800d68c:	460b      	mov	r3, r1
 800d68e:	2000      	movs	r0, #0
 800d690:	494d      	ldr	r1, [pc, #308]	; (800d7c8 <__ieee754_pow+0x3f8>)
 800d692:	f7f2 fdf9 	bl	8000288 <__aeabi_dsub>
 800d696:	4622      	mov	r2, r4
 800d698:	4680      	mov	r8, r0
 800d69a:	4689      	mov	r9, r1
 800d69c:	462b      	mov	r3, r5
 800d69e:	4620      	mov	r0, r4
 800d6a0:	4629      	mov	r1, r5
 800d6a2:	f7f2 ffa9 	bl	80005f8 <__aeabi_dmul>
 800d6a6:	4602      	mov	r2, r0
 800d6a8:	460b      	mov	r3, r1
 800d6aa:	4640      	mov	r0, r8
 800d6ac:	4649      	mov	r1, r9
 800d6ae:	f7f2 ffa3 	bl	80005f8 <__aeabi_dmul>
 800d6b2:	a33f      	add	r3, pc, #252	; (adr r3, 800d7b0 <__ieee754_pow+0x3e0>)
 800d6b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6b8:	f7f2 ff9e 	bl	80005f8 <__aeabi_dmul>
 800d6bc:	4602      	mov	r2, r0
 800d6be:	460b      	mov	r3, r1
 800d6c0:	4650      	mov	r0, sl
 800d6c2:	4659      	mov	r1, fp
 800d6c4:	f7f2 fde0 	bl	8000288 <__aeabi_dsub>
 800d6c8:	4602      	mov	r2, r0
 800d6ca:	460b      	mov	r3, r1
 800d6cc:	4680      	mov	r8, r0
 800d6ce:	4689      	mov	r9, r1
 800d6d0:	4630      	mov	r0, r6
 800d6d2:	4639      	mov	r1, r7
 800d6d4:	f7f2 fdda 	bl	800028c <__adddf3>
 800d6d8:	2000      	movs	r0, #0
 800d6da:	4632      	mov	r2, r6
 800d6dc:	463b      	mov	r3, r7
 800d6de:	4604      	mov	r4, r0
 800d6e0:	460d      	mov	r5, r1
 800d6e2:	f7f2 fdd1 	bl	8000288 <__aeabi_dsub>
 800d6e6:	4602      	mov	r2, r0
 800d6e8:	460b      	mov	r3, r1
 800d6ea:	4640      	mov	r0, r8
 800d6ec:	4649      	mov	r1, r9
 800d6ee:	f7f2 fdcb 	bl	8000288 <__aeabi_dsub>
 800d6f2:	9b04      	ldr	r3, [sp, #16]
 800d6f4:	9a06      	ldr	r2, [sp, #24]
 800d6f6:	3b01      	subs	r3, #1
 800d6f8:	4313      	orrs	r3, r2
 800d6fa:	4682      	mov	sl, r0
 800d6fc:	468b      	mov	fp, r1
 800d6fe:	f040 81e7 	bne.w	800dad0 <__ieee754_pow+0x700>
 800d702:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800d7b8 <__ieee754_pow+0x3e8>
 800d706:	eeb0 8a47 	vmov.f32	s16, s14
 800d70a:	eef0 8a67 	vmov.f32	s17, s15
 800d70e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800d712:	2600      	movs	r6, #0
 800d714:	4632      	mov	r2, r6
 800d716:	463b      	mov	r3, r7
 800d718:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d71c:	f7f2 fdb4 	bl	8000288 <__aeabi_dsub>
 800d720:	4622      	mov	r2, r4
 800d722:	462b      	mov	r3, r5
 800d724:	f7f2 ff68 	bl	80005f8 <__aeabi_dmul>
 800d728:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d72c:	4680      	mov	r8, r0
 800d72e:	4689      	mov	r9, r1
 800d730:	4650      	mov	r0, sl
 800d732:	4659      	mov	r1, fp
 800d734:	f7f2 ff60 	bl	80005f8 <__aeabi_dmul>
 800d738:	4602      	mov	r2, r0
 800d73a:	460b      	mov	r3, r1
 800d73c:	4640      	mov	r0, r8
 800d73e:	4649      	mov	r1, r9
 800d740:	f7f2 fda4 	bl	800028c <__adddf3>
 800d744:	4632      	mov	r2, r6
 800d746:	463b      	mov	r3, r7
 800d748:	4680      	mov	r8, r0
 800d74a:	4689      	mov	r9, r1
 800d74c:	4620      	mov	r0, r4
 800d74e:	4629      	mov	r1, r5
 800d750:	f7f2 ff52 	bl	80005f8 <__aeabi_dmul>
 800d754:	460b      	mov	r3, r1
 800d756:	4604      	mov	r4, r0
 800d758:	460d      	mov	r5, r1
 800d75a:	4602      	mov	r2, r0
 800d75c:	4649      	mov	r1, r9
 800d75e:	4640      	mov	r0, r8
 800d760:	f7f2 fd94 	bl	800028c <__adddf3>
 800d764:	4b19      	ldr	r3, [pc, #100]	; (800d7cc <__ieee754_pow+0x3fc>)
 800d766:	4299      	cmp	r1, r3
 800d768:	ec45 4b19 	vmov	d9, r4, r5
 800d76c:	4606      	mov	r6, r0
 800d76e:	460f      	mov	r7, r1
 800d770:	468b      	mov	fp, r1
 800d772:	f340 82f1 	ble.w	800dd58 <__ieee754_pow+0x988>
 800d776:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800d77a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800d77e:	4303      	orrs	r3, r0
 800d780:	f000 81e4 	beq.w	800db4c <__ieee754_pow+0x77c>
 800d784:	ec51 0b18 	vmov	r0, r1, d8
 800d788:	2200      	movs	r2, #0
 800d78a:	2300      	movs	r3, #0
 800d78c:	f7f3 f9a6 	bl	8000adc <__aeabi_dcmplt>
 800d790:	3800      	subs	r0, #0
 800d792:	bf18      	it	ne
 800d794:	2001      	movne	r0, #1
 800d796:	e72b      	b.n	800d5f0 <__ieee754_pow+0x220>
 800d798:	60000000 	.word	0x60000000
 800d79c:	3ff71547 	.word	0x3ff71547
 800d7a0:	f85ddf44 	.word	0xf85ddf44
 800d7a4:	3e54ae0b 	.word	0x3e54ae0b
 800d7a8:	55555555 	.word	0x55555555
 800d7ac:	3fd55555 	.word	0x3fd55555
 800d7b0:	652b82fe 	.word	0x652b82fe
 800d7b4:	3ff71547 	.word	0x3ff71547
 800d7b8:	00000000 	.word	0x00000000
 800d7bc:	bff00000 	.word	0xbff00000
 800d7c0:	3ff00000 	.word	0x3ff00000
 800d7c4:	3fd00000 	.word	0x3fd00000
 800d7c8:	3fe00000 	.word	0x3fe00000
 800d7cc:	408fffff 	.word	0x408fffff
 800d7d0:	4bd5      	ldr	r3, [pc, #852]	; (800db28 <__ieee754_pow+0x758>)
 800d7d2:	402b      	ands	r3, r5
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	b92b      	cbnz	r3, 800d7e4 <__ieee754_pow+0x414>
 800d7d8:	4bd4      	ldr	r3, [pc, #848]	; (800db2c <__ieee754_pow+0x75c>)
 800d7da:	f7f2 ff0d 	bl	80005f8 <__aeabi_dmul>
 800d7de:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d7e2:	460c      	mov	r4, r1
 800d7e4:	1523      	asrs	r3, r4, #20
 800d7e6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d7ea:	4413      	add	r3, r2
 800d7ec:	9305      	str	r3, [sp, #20]
 800d7ee:	4bd0      	ldr	r3, [pc, #832]	; (800db30 <__ieee754_pow+0x760>)
 800d7f0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800d7f4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800d7f8:	429c      	cmp	r4, r3
 800d7fa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d7fe:	dd08      	ble.n	800d812 <__ieee754_pow+0x442>
 800d800:	4bcc      	ldr	r3, [pc, #816]	; (800db34 <__ieee754_pow+0x764>)
 800d802:	429c      	cmp	r4, r3
 800d804:	f340 8162 	ble.w	800dacc <__ieee754_pow+0x6fc>
 800d808:	9b05      	ldr	r3, [sp, #20]
 800d80a:	3301      	adds	r3, #1
 800d80c:	9305      	str	r3, [sp, #20]
 800d80e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800d812:	2400      	movs	r4, #0
 800d814:	00e3      	lsls	r3, r4, #3
 800d816:	9307      	str	r3, [sp, #28]
 800d818:	4bc7      	ldr	r3, [pc, #796]	; (800db38 <__ieee754_pow+0x768>)
 800d81a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d81e:	ed93 7b00 	vldr	d7, [r3]
 800d822:	4629      	mov	r1, r5
 800d824:	ec53 2b17 	vmov	r2, r3, d7
 800d828:	eeb0 9a47 	vmov.f32	s18, s14
 800d82c:	eef0 9a67 	vmov.f32	s19, s15
 800d830:	4682      	mov	sl, r0
 800d832:	f7f2 fd29 	bl	8000288 <__aeabi_dsub>
 800d836:	4652      	mov	r2, sl
 800d838:	4606      	mov	r6, r0
 800d83a:	460f      	mov	r7, r1
 800d83c:	462b      	mov	r3, r5
 800d83e:	ec51 0b19 	vmov	r0, r1, d9
 800d842:	f7f2 fd23 	bl	800028c <__adddf3>
 800d846:	4602      	mov	r2, r0
 800d848:	460b      	mov	r3, r1
 800d84a:	2000      	movs	r0, #0
 800d84c:	49bb      	ldr	r1, [pc, #748]	; (800db3c <__ieee754_pow+0x76c>)
 800d84e:	f7f2 fffd 	bl	800084c <__aeabi_ddiv>
 800d852:	ec41 0b1a 	vmov	d10, r0, r1
 800d856:	4602      	mov	r2, r0
 800d858:	460b      	mov	r3, r1
 800d85a:	4630      	mov	r0, r6
 800d85c:	4639      	mov	r1, r7
 800d85e:	f7f2 fecb 	bl	80005f8 <__aeabi_dmul>
 800d862:	2300      	movs	r3, #0
 800d864:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d868:	9302      	str	r3, [sp, #8]
 800d86a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800d86e:	46ab      	mov	fp, r5
 800d870:	106d      	asrs	r5, r5, #1
 800d872:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800d876:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800d87a:	ec41 0b18 	vmov	d8, r0, r1
 800d87e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800d882:	2200      	movs	r2, #0
 800d884:	4640      	mov	r0, r8
 800d886:	4649      	mov	r1, r9
 800d888:	4614      	mov	r4, r2
 800d88a:	461d      	mov	r5, r3
 800d88c:	f7f2 feb4 	bl	80005f8 <__aeabi_dmul>
 800d890:	4602      	mov	r2, r0
 800d892:	460b      	mov	r3, r1
 800d894:	4630      	mov	r0, r6
 800d896:	4639      	mov	r1, r7
 800d898:	f7f2 fcf6 	bl	8000288 <__aeabi_dsub>
 800d89c:	ec53 2b19 	vmov	r2, r3, d9
 800d8a0:	4606      	mov	r6, r0
 800d8a2:	460f      	mov	r7, r1
 800d8a4:	4620      	mov	r0, r4
 800d8a6:	4629      	mov	r1, r5
 800d8a8:	f7f2 fcee 	bl	8000288 <__aeabi_dsub>
 800d8ac:	4602      	mov	r2, r0
 800d8ae:	460b      	mov	r3, r1
 800d8b0:	4650      	mov	r0, sl
 800d8b2:	4659      	mov	r1, fp
 800d8b4:	f7f2 fce8 	bl	8000288 <__aeabi_dsub>
 800d8b8:	4642      	mov	r2, r8
 800d8ba:	464b      	mov	r3, r9
 800d8bc:	f7f2 fe9c 	bl	80005f8 <__aeabi_dmul>
 800d8c0:	4602      	mov	r2, r0
 800d8c2:	460b      	mov	r3, r1
 800d8c4:	4630      	mov	r0, r6
 800d8c6:	4639      	mov	r1, r7
 800d8c8:	f7f2 fcde 	bl	8000288 <__aeabi_dsub>
 800d8cc:	ec53 2b1a 	vmov	r2, r3, d10
 800d8d0:	f7f2 fe92 	bl	80005f8 <__aeabi_dmul>
 800d8d4:	ec53 2b18 	vmov	r2, r3, d8
 800d8d8:	ec41 0b19 	vmov	d9, r0, r1
 800d8dc:	ec51 0b18 	vmov	r0, r1, d8
 800d8e0:	f7f2 fe8a 	bl	80005f8 <__aeabi_dmul>
 800d8e4:	a37c      	add	r3, pc, #496	; (adr r3, 800dad8 <__ieee754_pow+0x708>)
 800d8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8ea:	4604      	mov	r4, r0
 800d8ec:	460d      	mov	r5, r1
 800d8ee:	f7f2 fe83 	bl	80005f8 <__aeabi_dmul>
 800d8f2:	a37b      	add	r3, pc, #492	; (adr r3, 800dae0 <__ieee754_pow+0x710>)
 800d8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d8f8:	f7f2 fcc8 	bl	800028c <__adddf3>
 800d8fc:	4622      	mov	r2, r4
 800d8fe:	462b      	mov	r3, r5
 800d900:	f7f2 fe7a 	bl	80005f8 <__aeabi_dmul>
 800d904:	a378      	add	r3, pc, #480	; (adr r3, 800dae8 <__ieee754_pow+0x718>)
 800d906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d90a:	f7f2 fcbf 	bl	800028c <__adddf3>
 800d90e:	4622      	mov	r2, r4
 800d910:	462b      	mov	r3, r5
 800d912:	f7f2 fe71 	bl	80005f8 <__aeabi_dmul>
 800d916:	a376      	add	r3, pc, #472	; (adr r3, 800daf0 <__ieee754_pow+0x720>)
 800d918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d91c:	f7f2 fcb6 	bl	800028c <__adddf3>
 800d920:	4622      	mov	r2, r4
 800d922:	462b      	mov	r3, r5
 800d924:	f7f2 fe68 	bl	80005f8 <__aeabi_dmul>
 800d928:	a373      	add	r3, pc, #460	; (adr r3, 800daf8 <__ieee754_pow+0x728>)
 800d92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d92e:	f7f2 fcad 	bl	800028c <__adddf3>
 800d932:	4622      	mov	r2, r4
 800d934:	462b      	mov	r3, r5
 800d936:	f7f2 fe5f 	bl	80005f8 <__aeabi_dmul>
 800d93a:	a371      	add	r3, pc, #452	; (adr r3, 800db00 <__ieee754_pow+0x730>)
 800d93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d940:	f7f2 fca4 	bl	800028c <__adddf3>
 800d944:	4622      	mov	r2, r4
 800d946:	4606      	mov	r6, r0
 800d948:	460f      	mov	r7, r1
 800d94a:	462b      	mov	r3, r5
 800d94c:	4620      	mov	r0, r4
 800d94e:	4629      	mov	r1, r5
 800d950:	f7f2 fe52 	bl	80005f8 <__aeabi_dmul>
 800d954:	4602      	mov	r2, r0
 800d956:	460b      	mov	r3, r1
 800d958:	4630      	mov	r0, r6
 800d95a:	4639      	mov	r1, r7
 800d95c:	f7f2 fe4c 	bl	80005f8 <__aeabi_dmul>
 800d960:	4642      	mov	r2, r8
 800d962:	4604      	mov	r4, r0
 800d964:	460d      	mov	r5, r1
 800d966:	464b      	mov	r3, r9
 800d968:	ec51 0b18 	vmov	r0, r1, d8
 800d96c:	f7f2 fc8e 	bl	800028c <__adddf3>
 800d970:	ec53 2b19 	vmov	r2, r3, d9
 800d974:	f7f2 fe40 	bl	80005f8 <__aeabi_dmul>
 800d978:	4622      	mov	r2, r4
 800d97a:	462b      	mov	r3, r5
 800d97c:	f7f2 fc86 	bl	800028c <__adddf3>
 800d980:	4642      	mov	r2, r8
 800d982:	4682      	mov	sl, r0
 800d984:	468b      	mov	fp, r1
 800d986:	464b      	mov	r3, r9
 800d988:	4640      	mov	r0, r8
 800d98a:	4649      	mov	r1, r9
 800d98c:	f7f2 fe34 	bl	80005f8 <__aeabi_dmul>
 800d990:	4b6b      	ldr	r3, [pc, #428]	; (800db40 <__ieee754_pow+0x770>)
 800d992:	2200      	movs	r2, #0
 800d994:	4606      	mov	r6, r0
 800d996:	460f      	mov	r7, r1
 800d998:	f7f2 fc78 	bl	800028c <__adddf3>
 800d99c:	4652      	mov	r2, sl
 800d99e:	465b      	mov	r3, fp
 800d9a0:	f7f2 fc74 	bl	800028c <__adddf3>
 800d9a4:	2000      	movs	r0, #0
 800d9a6:	4604      	mov	r4, r0
 800d9a8:	460d      	mov	r5, r1
 800d9aa:	4602      	mov	r2, r0
 800d9ac:	460b      	mov	r3, r1
 800d9ae:	4640      	mov	r0, r8
 800d9b0:	4649      	mov	r1, r9
 800d9b2:	f7f2 fe21 	bl	80005f8 <__aeabi_dmul>
 800d9b6:	4b62      	ldr	r3, [pc, #392]	; (800db40 <__ieee754_pow+0x770>)
 800d9b8:	4680      	mov	r8, r0
 800d9ba:	4689      	mov	r9, r1
 800d9bc:	2200      	movs	r2, #0
 800d9be:	4620      	mov	r0, r4
 800d9c0:	4629      	mov	r1, r5
 800d9c2:	f7f2 fc61 	bl	8000288 <__aeabi_dsub>
 800d9c6:	4632      	mov	r2, r6
 800d9c8:	463b      	mov	r3, r7
 800d9ca:	f7f2 fc5d 	bl	8000288 <__aeabi_dsub>
 800d9ce:	4602      	mov	r2, r0
 800d9d0:	460b      	mov	r3, r1
 800d9d2:	4650      	mov	r0, sl
 800d9d4:	4659      	mov	r1, fp
 800d9d6:	f7f2 fc57 	bl	8000288 <__aeabi_dsub>
 800d9da:	ec53 2b18 	vmov	r2, r3, d8
 800d9de:	f7f2 fe0b 	bl	80005f8 <__aeabi_dmul>
 800d9e2:	4622      	mov	r2, r4
 800d9e4:	4606      	mov	r6, r0
 800d9e6:	460f      	mov	r7, r1
 800d9e8:	462b      	mov	r3, r5
 800d9ea:	ec51 0b19 	vmov	r0, r1, d9
 800d9ee:	f7f2 fe03 	bl	80005f8 <__aeabi_dmul>
 800d9f2:	4602      	mov	r2, r0
 800d9f4:	460b      	mov	r3, r1
 800d9f6:	4630      	mov	r0, r6
 800d9f8:	4639      	mov	r1, r7
 800d9fa:	f7f2 fc47 	bl	800028c <__adddf3>
 800d9fe:	4606      	mov	r6, r0
 800da00:	460f      	mov	r7, r1
 800da02:	4602      	mov	r2, r0
 800da04:	460b      	mov	r3, r1
 800da06:	4640      	mov	r0, r8
 800da08:	4649      	mov	r1, r9
 800da0a:	f7f2 fc3f 	bl	800028c <__adddf3>
 800da0e:	a33e      	add	r3, pc, #248	; (adr r3, 800db08 <__ieee754_pow+0x738>)
 800da10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da14:	2000      	movs	r0, #0
 800da16:	4604      	mov	r4, r0
 800da18:	460d      	mov	r5, r1
 800da1a:	f7f2 fded 	bl	80005f8 <__aeabi_dmul>
 800da1e:	4642      	mov	r2, r8
 800da20:	ec41 0b18 	vmov	d8, r0, r1
 800da24:	464b      	mov	r3, r9
 800da26:	4620      	mov	r0, r4
 800da28:	4629      	mov	r1, r5
 800da2a:	f7f2 fc2d 	bl	8000288 <__aeabi_dsub>
 800da2e:	4602      	mov	r2, r0
 800da30:	460b      	mov	r3, r1
 800da32:	4630      	mov	r0, r6
 800da34:	4639      	mov	r1, r7
 800da36:	f7f2 fc27 	bl	8000288 <__aeabi_dsub>
 800da3a:	a335      	add	r3, pc, #212	; (adr r3, 800db10 <__ieee754_pow+0x740>)
 800da3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da40:	f7f2 fdda 	bl	80005f8 <__aeabi_dmul>
 800da44:	a334      	add	r3, pc, #208	; (adr r3, 800db18 <__ieee754_pow+0x748>)
 800da46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da4a:	4606      	mov	r6, r0
 800da4c:	460f      	mov	r7, r1
 800da4e:	4620      	mov	r0, r4
 800da50:	4629      	mov	r1, r5
 800da52:	f7f2 fdd1 	bl	80005f8 <__aeabi_dmul>
 800da56:	4602      	mov	r2, r0
 800da58:	460b      	mov	r3, r1
 800da5a:	4630      	mov	r0, r6
 800da5c:	4639      	mov	r1, r7
 800da5e:	f7f2 fc15 	bl	800028c <__adddf3>
 800da62:	9a07      	ldr	r2, [sp, #28]
 800da64:	4b37      	ldr	r3, [pc, #220]	; (800db44 <__ieee754_pow+0x774>)
 800da66:	4413      	add	r3, r2
 800da68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da6c:	f7f2 fc0e 	bl	800028c <__adddf3>
 800da70:	4682      	mov	sl, r0
 800da72:	9805      	ldr	r0, [sp, #20]
 800da74:	468b      	mov	fp, r1
 800da76:	f7f2 fd55 	bl	8000524 <__aeabi_i2d>
 800da7a:	9a07      	ldr	r2, [sp, #28]
 800da7c:	4b32      	ldr	r3, [pc, #200]	; (800db48 <__ieee754_pow+0x778>)
 800da7e:	4413      	add	r3, r2
 800da80:	e9d3 8900 	ldrd	r8, r9, [r3]
 800da84:	4606      	mov	r6, r0
 800da86:	460f      	mov	r7, r1
 800da88:	4652      	mov	r2, sl
 800da8a:	465b      	mov	r3, fp
 800da8c:	ec51 0b18 	vmov	r0, r1, d8
 800da90:	f7f2 fbfc 	bl	800028c <__adddf3>
 800da94:	4642      	mov	r2, r8
 800da96:	464b      	mov	r3, r9
 800da98:	f7f2 fbf8 	bl	800028c <__adddf3>
 800da9c:	4632      	mov	r2, r6
 800da9e:	463b      	mov	r3, r7
 800daa0:	f7f2 fbf4 	bl	800028c <__adddf3>
 800daa4:	2000      	movs	r0, #0
 800daa6:	4632      	mov	r2, r6
 800daa8:	463b      	mov	r3, r7
 800daaa:	4604      	mov	r4, r0
 800daac:	460d      	mov	r5, r1
 800daae:	f7f2 fbeb 	bl	8000288 <__aeabi_dsub>
 800dab2:	4642      	mov	r2, r8
 800dab4:	464b      	mov	r3, r9
 800dab6:	f7f2 fbe7 	bl	8000288 <__aeabi_dsub>
 800daba:	ec53 2b18 	vmov	r2, r3, d8
 800dabe:	f7f2 fbe3 	bl	8000288 <__aeabi_dsub>
 800dac2:	4602      	mov	r2, r0
 800dac4:	460b      	mov	r3, r1
 800dac6:	4650      	mov	r0, sl
 800dac8:	4659      	mov	r1, fp
 800daca:	e610      	b.n	800d6ee <__ieee754_pow+0x31e>
 800dacc:	2401      	movs	r4, #1
 800dace:	e6a1      	b.n	800d814 <__ieee754_pow+0x444>
 800dad0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800db20 <__ieee754_pow+0x750>
 800dad4:	e617      	b.n	800d706 <__ieee754_pow+0x336>
 800dad6:	bf00      	nop
 800dad8:	4a454eef 	.word	0x4a454eef
 800dadc:	3fca7e28 	.word	0x3fca7e28
 800dae0:	93c9db65 	.word	0x93c9db65
 800dae4:	3fcd864a 	.word	0x3fcd864a
 800dae8:	a91d4101 	.word	0xa91d4101
 800daec:	3fd17460 	.word	0x3fd17460
 800daf0:	518f264d 	.word	0x518f264d
 800daf4:	3fd55555 	.word	0x3fd55555
 800daf8:	db6fabff 	.word	0xdb6fabff
 800dafc:	3fdb6db6 	.word	0x3fdb6db6
 800db00:	33333303 	.word	0x33333303
 800db04:	3fe33333 	.word	0x3fe33333
 800db08:	e0000000 	.word	0xe0000000
 800db0c:	3feec709 	.word	0x3feec709
 800db10:	dc3a03fd 	.word	0xdc3a03fd
 800db14:	3feec709 	.word	0x3feec709
 800db18:	145b01f5 	.word	0x145b01f5
 800db1c:	be3e2fe0 	.word	0xbe3e2fe0
 800db20:	00000000 	.word	0x00000000
 800db24:	3ff00000 	.word	0x3ff00000
 800db28:	7ff00000 	.word	0x7ff00000
 800db2c:	43400000 	.word	0x43400000
 800db30:	0003988e 	.word	0x0003988e
 800db34:	000bb679 	.word	0x000bb679
 800db38:	0800f110 	.word	0x0800f110
 800db3c:	3ff00000 	.word	0x3ff00000
 800db40:	40080000 	.word	0x40080000
 800db44:	0800f130 	.word	0x0800f130
 800db48:	0800f120 	.word	0x0800f120
 800db4c:	a3b5      	add	r3, pc, #724	; (adr r3, 800de24 <__ieee754_pow+0xa54>)
 800db4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db52:	4640      	mov	r0, r8
 800db54:	4649      	mov	r1, r9
 800db56:	f7f2 fb99 	bl	800028c <__adddf3>
 800db5a:	4622      	mov	r2, r4
 800db5c:	ec41 0b1a 	vmov	d10, r0, r1
 800db60:	462b      	mov	r3, r5
 800db62:	4630      	mov	r0, r6
 800db64:	4639      	mov	r1, r7
 800db66:	f7f2 fb8f 	bl	8000288 <__aeabi_dsub>
 800db6a:	4602      	mov	r2, r0
 800db6c:	460b      	mov	r3, r1
 800db6e:	ec51 0b1a 	vmov	r0, r1, d10
 800db72:	f7f2 ffd1 	bl	8000b18 <__aeabi_dcmpgt>
 800db76:	2800      	cmp	r0, #0
 800db78:	f47f ae04 	bne.w	800d784 <__ieee754_pow+0x3b4>
 800db7c:	4aa4      	ldr	r2, [pc, #656]	; (800de10 <__ieee754_pow+0xa40>)
 800db7e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800db82:	4293      	cmp	r3, r2
 800db84:	f340 8108 	ble.w	800dd98 <__ieee754_pow+0x9c8>
 800db88:	151b      	asrs	r3, r3, #20
 800db8a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800db8e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800db92:	fa4a f303 	asr.w	r3, sl, r3
 800db96:	445b      	add	r3, fp
 800db98:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800db9c:	4e9d      	ldr	r6, [pc, #628]	; (800de14 <__ieee754_pow+0xa44>)
 800db9e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800dba2:	4116      	asrs	r6, r2
 800dba4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800dba8:	2000      	movs	r0, #0
 800dbaa:	ea23 0106 	bic.w	r1, r3, r6
 800dbae:	f1c2 0214 	rsb	r2, r2, #20
 800dbb2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800dbb6:	fa4a fa02 	asr.w	sl, sl, r2
 800dbba:	f1bb 0f00 	cmp.w	fp, #0
 800dbbe:	4602      	mov	r2, r0
 800dbc0:	460b      	mov	r3, r1
 800dbc2:	4620      	mov	r0, r4
 800dbc4:	4629      	mov	r1, r5
 800dbc6:	bfb8      	it	lt
 800dbc8:	f1ca 0a00 	rsblt	sl, sl, #0
 800dbcc:	f7f2 fb5c 	bl	8000288 <__aeabi_dsub>
 800dbd0:	ec41 0b19 	vmov	d9, r0, r1
 800dbd4:	4642      	mov	r2, r8
 800dbd6:	464b      	mov	r3, r9
 800dbd8:	ec51 0b19 	vmov	r0, r1, d9
 800dbdc:	f7f2 fb56 	bl	800028c <__adddf3>
 800dbe0:	a37b      	add	r3, pc, #492	; (adr r3, 800ddd0 <__ieee754_pow+0xa00>)
 800dbe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbe6:	2000      	movs	r0, #0
 800dbe8:	4604      	mov	r4, r0
 800dbea:	460d      	mov	r5, r1
 800dbec:	f7f2 fd04 	bl	80005f8 <__aeabi_dmul>
 800dbf0:	ec53 2b19 	vmov	r2, r3, d9
 800dbf4:	4606      	mov	r6, r0
 800dbf6:	460f      	mov	r7, r1
 800dbf8:	4620      	mov	r0, r4
 800dbfa:	4629      	mov	r1, r5
 800dbfc:	f7f2 fb44 	bl	8000288 <__aeabi_dsub>
 800dc00:	4602      	mov	r2, r0
 800dc02:	460b      	mov	r3, r1
 800dc04:	4640      	mov	r0, r8
 800dc06:	4649      	mov	r1, r9
 800dc08:	f7f2 fb3e 	bl	8000288 <__aeabi_dsub>
 800dc0c:	a372      	add	r3, pc, #456	; (adr r3, 800ddd8 <__ieee754_pow+0xa08>)
 800dc0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc12:	f7f2 fcf1 	bl	80005f8 <__aeabi_dmul>
 800dc16:	a372      	add	r3, pc, #456	; (adr r3, 800dde0 <__ieee754_pow+0xa10>)
 800dc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc1c:	4680      	mov	r8, r0
 800dc1e:	4689      	mov	r9, r1
 800dc20:	4620      	mov	r0, r4
 800dc22:	4629      	mov	r1, r5
 800dc24:	f7f2 fce8 	bl	80005f8 <__aeabi_dmul>
 800dc28:	4602      	mov	r2, r0
 800dc2a:	460b      	mov	r3, r1
 800dc2c:	4640      	mov	r0, r8
 800dc2e:	4649      	mov	r1, r9
 800dc30:	f7f2 fb2c 	bl	800028c <__adddf3>
 800dc34:	4604      	mov	r4, r0
 800dc36:	460d      	mov	r5, r1
 800dc38:	4602      	mov	r2, r0
 800dc3a:	460b      	mov	r3, r1
 800dc3c:	4630      	mov	r0, r6
 800dc3e:	4639      	mov	r1, r7
 800dc40:	f7f2 fb24 	bl	800028c <__adddf3>
 800dc44:	4632      	mov	r2, r6
 800dc46:	463b      	mov	r3, r7
 800dc48:	4680      	mov	r8, r0
 800dc4a:	4689      	mov	r9, r1
 800dc4c:	f7f2 fb1c 	bl	8000288 <__aeabi_dsub>
 800dc50:	4602      	mov	r2, r0
 800dc52:	460b      	mov	r3, r1
 800dc54:	4620      	mov	r0, r4
 800dc56:	4629      	mov	r1, r5
 800dc58:	f7f2 fb16 	bl	8000288 <__aeabi_dsub>
 800dc5c:	4642      	mov	r2, r8
 800dc5e:	4606      	mov	r6, r0
 800dc60:	460f      	mov	r7, r1
 800dc62:	464b      	mov	r3, r9
 800dc64:	4640      	mov	r0, r8
 800dc66:	4649      	mov	r1, r9
 800dc68:	f7f2 fcc6 	bl	80005f8 <__aeabi_dmul>
 800dc6c:	a35e      	add	r3, pc, #376	; (adr r3, 800dde8 <__ieee754_pow+0xa18>)
 800dc6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc72:	4604      	mov	r4, r0
 800dc74:	460d      	mov	r5, r1
 800dc76:	f7f2 fcbf 	bl	80005f8 <__aeabi_dmul>
 800dc7a:	a35d      	add	r3, pc, #372	; (adr r3, 800ddf0 <__ieee754_pow+0xa20>)
 800dc7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc80:	f7f2 fb02 	bl	8000288 <__aeabi_dsub>
 800dc84:	4622      	mov	r2, r4
 800dc86:	462b      	mov	r3, r5
 800dc88:	f7f2 fcb6 	bl	80005f8 <__aeabi_dmul>
 800dc8c:	a35a      	add	r3, pc, #360	; (adr r3, 800ddf8 <__ieee754_pow+0xa28>)
 800dc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc92:	f7f2 fafb 	bl	800028c <__adddf3>
 800dc96:	4622      	mov	r2, r4
 800dc98:	462b      	mov	r3, r5
 800dc9a:	f7f2 fcad 	bl	80005f8 <__aeabi_dmul>
 800dc9e:	a358      	add	r3, pc, #352	; (adr r3, 800de00 <__ieee754_pow+0xa30>)
 800dca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca4:	f7f2 faf0 	bl	8000288 <__aeabi_dsub>
 800dca8:	4622      	mov	r2, r4
 800dcaa:	462b      	mov	r3, r5
 800dcac:	f7f2 fca4 	bl	80005f8 <__aeabi_dmul>
 800dcb0:	a355      	add	r3, pc, #340	; (adr r3, 800de08 <__ieee754_pow+0xa38>)
 800dcb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcb6:	f7f2 fae9 	bl	800028c <__adddf3>
 800dcba:	4622      	mov	r2, r4
 800dcbc:	462b      	mov	r3, r5
 800dcbe:	f7f2 fc9b 	bl	80005f8 <__aeabi_dmul>
 800dcc2:	4602      	mov	r2, r0
 800dcc4:	460b      	mov	r3, r1
 800dcc6:	4640      	mov	r0, r8
 800dcc8:	4649      	mov	r1, r9
 800dcca:	f7f2 fadd 	bl	8000288 <__aeabi_dsub>
 800dcce:	4604      	mov	r4, r0
 800dcd0:	460d      	mov	r5, r1
 800dcd2:	4602      	mov	r2, r0
 800dcd4:	460b      	mov	r3, r1
 800dcd6:	4640      	mov	r0, r8
 800dcd8:	4649      	mov	r1, r9
 800dcda:	f7f2 fc8d 	bl	80005f8 <__aeabi_dmul>
 800dcde:	2200      	movs	r2, #0
 800dce0:	ec41 0b19 	vmov	d9, r0, r1
 800dce4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800dce8:	4620      	mov	r0, r4
 800dcea:	4629      	mov	r1, r5
 800dcec:	f7f2 facc 	bl	8000288 <__aeabi_dsub>
 800dcf0:	4602      	mov	r2, r0
 800dcf2:	460b      	mov	r3, r1
 800dcf4:	ec51 0b19 	vmov	r0, r1, d9
 800dcf8:	f7f2 fda8 	bl	800084c <__aeabi_ddiv>
 800dcfc:	4632      	mov	r2, r6
 800dcfe:	4604      	mov	r4, r0
 800dd00:	460d      	mov	r5, r1
 800dd02:	463b      	mov	r3, r7
 800dd04:	4640      	mov	r0, r8
 800dd06:	4649      	mov	r1, r9
 800dd08:	f7f2 fc76 	bl	80005f8 <__aeabi_dmul>
 800dd0c:	4632      	mov	r2, r6
 800dd0e:	463b      	mov	r3, r7
 800dd10:	f7f2 fabc 	bl	800028c <__adddf3>
 800dd14:	4602      	mov	r2, r0
 800dd16:	460b      	mov	r3, r1
 800dd18:	4620      	mov	r0, r4
 800dd1a:	4629      	mov	r1, r5
 800dd1c:	f7f2 fab4 	bl	8000288 <__aeabi_dsub>
 800dd20:	4642      	mov	r2, r8
 800dd22:	464b      	mov	r3, r9
 800dd24:	f7f2 fab0 	bl	8000288 <__aeabi_dsub>
 800dd28:	460b      	mov	r3, r1
 800dd2a:	4602      	mov	r2, r0
 800dd2c:	493a      	ldr	r1, [pc, #232]	; (800de18 <__ieee754_pow+0xa48>)
 800dd2e:	2000      	movs	r0, #0
 800dd30:	f7f2 faaa 	bl	8000288 <__aeabi_dsub>
 800dd34:	ec41 0b10 	vmov	d0, r0, r1
 800dd38:	ee10 3a90 	vmov	r3, s1
 800dd3c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800dd40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800dd44:	da2b      	bge.n	800dd9e <__ieee754_pow+0x9ce>
 800dd46:	4650      	mov	r0, sl
 800dd48:	f000 f966 	bl	800e018 <scalbn>
 800dd4c:	ec51 0b10 	vmov	r0, r1, d0
 800dd50:	ec53 2b18 	vmov	r2, r3, d8
 800dd54:	f7ff bbed 	b.w	800d532 <__ieee754_pow+0x162>
 800dd58:	4b30      	ldr	r3, [pc, #192]	; (800de1c <__ieee754_pow+0xa4c>)
 800dd5a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800dd5e:	429e      	cmp	r6, r3
 800dd60:	f77f af0c 	ble.w	800db7c <__ieee754_pow+0x7ac>
 800dd64:	4b2e      	ldr	r3, [pc, #184]	; (800de20 <__ieee754_pow+0xa50>)
 800dd66:	440b      	add	r3, r1
 800dd68:	4303      	orrs	r3, r0
 800dd6a:	d009      	beq.n	800dd80 <__ieee754_pow+0x9b0>
 800dd6c:	ec51 0b18 	vmov	r0, r1, d8
 800dd70:	2200      	movs	r2, #0
 800dd72:	2300      	movs	r3, #0
 800dd74:	f7f2 feb2 	bl	8000adc <__aeabi_dcmplt>
 800dd78:	3800      	subs	r0, #0
 800dd7a:	bf18      	it	ne
 800dd7c:	2001      	movne	r0, #1
 800dd7e:	e447      	b.n	800d610 <__ieee754_pow+0x240>
 800dd80:	4622      	mov	r2, r4
 800dd82:	462b      	mov	r3, r5
 800dd84:	f7f2 fa80 	bl	8000288 <__aeabi_dsub>
 800dd88:	4642      	mov	r2, r8
 800dd8a:	464b      	mov	r3, r9
 800dd8c:	f7f2 feba 	bl	8000b04 <__aeabi_dcmpge>
 800dd90:	2800      	cmp	r0, #0
 800dd92:	f43f aef3 	beq.w	800db7c <__ieee754_pow+0x7ac>
 800dd96:	e7e9      	b.n	800dd6c <__ieee754_pow+0x99c>
 800dd98:	f04f 0a00 	mov.w	sl, #0
 800dd9c:	e71a      	b.n	800dbd4 <__ieee754_pow+0x804>
 800dd9e:	ec51 0b10 	vmov	r0, r1, d0
 800dda2:	4619      	mov	r1, r3
 800dda4:	e7d4      	b.n	800dd50 <__ieee754_pow+0x980>
 800dda6:	491c      	ldr	r1, [pc, #112]	; (800de18 <__ieee754_pow+0xa48>)
 800dda8:	2000      	movs	r0, #0
 800ddaa:	f7ff bb30 	b.w	800d40e <__ieee754_pow+0x3e>
 800ddae:	2000      	movs	r0, #0
 800ddb0:	2100      	movs	r1, #0
 800ddb2:	f7ff bb2c 	b.w	800d40e <__ieee754_pow+0x3e>
 800ddb6:	4630      	mov	r0, r6
 800ddb8:	4639      	mov	r1, r7
 800ddba:	f7ff bb28 	b.w	800d40e <__ieee754_pow+0x3e>
 800ddbe:	9204      	str	r2, [sp, #16]
 800ddc0:	f7ff bb7a 	b.w	800d4b8 <__ieee754_pow+0xe8>
 800ddc4:	2300      	movs	r3, #0
 800ddc6:	f7ff bb64 	b.w	800d492 <__ieee754_pow+0xc2>
 800ddca:	bf00      	nop
 800ddcc:	f3af 8000 	nop.w
 800ddd0:	00000000 	.word	0x00000000
 800ddd4:	3fe62e43 	.word	0x3fe62e43
 800ddd8:	fefa39ef 	.word	0xfefa39ef
 800dddc:	3fe62e42 	.word	0x3fe62e42
 800dde0:	0ca86c39 	.word	0x0ca86c39
 800dde4:	be205c61 	.word	0xbe205c61
 800dde8:	72bea4d0 	.word	0x72bea4d0
 800ddec:	3e663769 	.word	0x3e663769
 800ddf0:	c5d26bf1 	.word	0xc5d26bf1
 800ddf4:	3ebbbd41 	.word	0x3ebbbd41
 800ddf8:	af25de2c 	.word	0xaf25de2c
 800ddfc:	3f11566a 	.word	0x3f11566a
 800de00:	16bebd93 	.word	0x16bebd93
 800de04:	3f66c16c 	.word	0x3f66c16c
 800de08:	5555553e 	.word	0x5555553e
 800de0c:	3fc55555 	.word	0x3fc55555
 800de10:	3fe00000 	.word	0x3fe00000
 800de14:	000fffff 	.word	0x000fffff
 800de18:	3ff00000 	.word	0x3ff00000
 800de1c:	4090cbff 	.word	0x4090cbff
 800de20:	3f6f3400 	.word	0x3f6f3400
 800de24:	652b82fe 	.word	0x652b82fe
 800de28:	3c971547 	.word	0x3c971547

0800de2c <__ieee754_sqrt>:
 800de2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800de30:	ec55 4b10 	vmov	r4, r5, d0
 800de34:	4e55      	ldr	r6, [pc, #340]	; (800df8c <__ieee754_sqrt+0x160>)
 800de36:	43ae      	bics	r6, r5
 800de38:	ee10 0a10 	vmov	r0, s0
 800de3c:	ee10 3a10 	vmov	r3, s0
 800de40:	462a      	mov	r2, r5
 800de42:	4629      	mov	r1, r5
 800de44:	d110      	bne.n	800de68 <__ieee754_sqrt+0x3c>
 800de46:	ee10 2a10 	vmov	r2, s0
 800de4a:	462b      	mov	r3, r5
 800de4c:	f7f2 fbd4 	bl	80005f8 <__aeabi_dmul>
 800de50:	4602      	mov	r2, r0
 800de52:	460b      	mov	r3, r1
 800de54:	4620      	mov	r0, r4
 800de56:	4629      	mov	r1, r5
 800de58:	f7f2 fa18 	bl	800028c <__adddf3>
 800de5c:	4604      	mov	r4, r0
 800de5e:	460d      	mov	r5, r1
 800de60:	ec45 4b10 	vmov	d0, r4, r5
 800de64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de68:	2d00      	cmp	r5, #0
 800de6a:	dc10      	bgt.n	800de8e <__ieee754_sqrt+0x62>
 800de6c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800de70:	4330      	orrs	r0, r6
 800de72:	d0f5      	beq.n	800de60 <__ieee754_sqrt+0x34>
 800de74:	b15d      	cbz	r5, 800de8e <__ieee754_sqrt+0x62>
 800de76:	ee10 2a10 	vmov	r2, s0
 800de7a:	462b      	mov	r3, r5
 800de7c:	ee10 0a10 	vmov	r0, s0
 800de80:	f7f2 fa02 	bl	8000288 <__aeabi_dsub>
 800de84:	4602      	mov	r2, r0
 800de86:	460b      	mov	r3, r1
 800de88:	f7f2 fce0 	bl	800084c <__aeabi_ddiv>
 800de8c:	e7e6      	b.n	800de5c <__ieee754_sqrt+0x30>
 800de8e:	1512      	asrs	r2, r2, #20
 800de90:	d074      	beq.n	800df7c <__ieee754_sqrt+0x150>
 800de92:	07d4      	lsls	r4, r2, #31
 800de94:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800de98:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800de9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800dea0:	bf5e      	ittt	pl
 800dea2:	0fda      	lsrpl	r2, r3, #31
 800dea4:	005b      	lslpl	r3, r3, #1
 800dea6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800deaa:	2400      	movs	r4, #0
 800deac:	0fda      	lsrs	r2, r3, #31
 800deae:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800deb2:	107f      	asrs	r7, r7, #1
 800deb4:	005b      	lsls	r3, r3, #1
 800deb6:	2516      	movs	r5, #22
 800deb8:	4620      	mov	r0, r4
 800deba:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800debe:	1886      	adds	r6, r0, r2
 800dec0:	428e      	cmp	r6, r1
 800dec2:	bfde      	ittt	le
 800dec4:	1b89      	suble	r1, r1, r6
 800dec6:	18b0      	addle	r0, r6, r2
 800dec8:	18a4      	addle	r4, r4, r2
 800deca:	0049      	lsls	r1, r1, #1
 800decc:	3d01      	subs	r5, #1
 800dece:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800ded2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ded6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800deda:	d1f0      	bne.n	800debe <__ieee754_sqrt+0x92>
 800dedc:	462a      	mov	r2, r5
 800dede:	f04f 0e20 	mov.w	lr, #32
 800dee2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800dee6:	4281      	cmp	r1, r0
 800dee8:	eb06 0c05 	add.w	ip, r6, r5
 800deec:	dc02      	bgt.n	800def4 <__ieee754_sqrt+0xc8>
 800deee:	d113      	bne.n	800df18 <__ieee754_sqrt+0xec>
 800def0:	459c      	cmp	ip, r3
 800def2:	d811      	bhi.n	800df18 <__ieee754_sqrt+0xec>
 800def4:	f1bc 0f00 	cmp.w	ip, #0
 800def8:	eb0c 0506 	add.w	r5, ip, r6
 800defc:	da43      	bge.n	800df86 <__ieee754_sqrt+0x15a>
 800defe:	2d00      	cmp	r5, #0
 800df00:	db41      	blt.n	800df86 <__ieee754_sqrt+0x15a>
 800df02:	f100 0801 	add.w	r8, r0, #1
 800df06:	1a09      	subs	r1, r1, r0
 800df08:	459c      	cmp	ip, r3
 800df0a:	bf88      	it	hi
 800df0c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800df10:	eba3 030c 	sub.w	r3, r3, ip
 800df14:	4432      	add	r2, r6
 800df16:	4640      	mov	r0, r8
 800df18:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800df1c:	f1be 0e01 	subs.w	lr, lr, #1
 800df20:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800df24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800df28:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800df2c:	d1db      	bne.n	800dee6 <__ieee754_sqrt+0xba>
 800df2e:	430b      	orrs	r3, r1
 800df30:	d006      	beq.n	800df40 <__ieee754_sqrt+0x114>
 800df32:	1c50      	adds	r0, r2, #1
 800df34:	bf13      	iteet	ne
 800df36:	3201      	addne	r2, #1
 800df38:	3401      	addeq	r4, #1
 800df3a:	4672      	moveq	r2, lr
 800df3c:	f022 0201 	bicne.w	r2, r2, #1
 800df40:	1063      	asrs	r3, r4, #1
 800df42:	0852      	lsrs	r2, r2, #1
 800df44:	07e1      	lsls	r1, r4, #31
 800df46:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800df4a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800df4e:	bf48      	it	mi
 800df50:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800df54:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800df58:	4614      	mov	r4, r2
 800df5a:	e781      	b.n	800de60 <__ieee754_sqrt+0x34>
 800df5c:	0ad9      	lsrs	r1, r3, #11
 800df5e:	3815      	subs	r0, #21
 800df60:	055b      	lsls	r3, r3, #21
 800df62:	2900      	cmp	r1, #0
 800df64:	d0fa      	beq.n	800df5c <__ieee754_sqrt+0x130>
 800df66:	02cd      	lsls	r5, r1, #11
 800df68:	d50a      	bpl.n	800df80 <__ieee754_sqrt+0x154>
 800df6a:	f1c2 0420 	rsb	r4, r2, #32
 800df6e:	fa23 f404 	lsr.w	r4, r3, r4
 800df72:	1e55      	subs	r5, r2, #1
 800df74:	4093      	lsls	r3, r2
 800df76:	4321      	orrs	r1, r4
 800df78:	1b42      	subs	r2, r0, r5
 800df7a:	e78a      	b.n	800de92 <__ieee754_sqrt+0x66>
 800df7c:	4610      	mov	r0, r2
 800df7e:	e7f0      	b.n	800df62 <__ieee754_sqrt+0x136>
 800df80:	0049      	lsls	r1, r1, #1
 800df82:	3201      	adds	r2, #1
 800df84:	e7ef      	b.n	800df66 <__ieee754_sqrt+0x13a>
 800df86:	4680      	mov	r8, r0
 800df88:	e7bd      	b.n	800df06 <__ieee754_sqrt+0xda>
 800df8a:	bf00      	nop
 800df8c:	7ff00000 	.word	0x7ff00000

0800df90 <with_errno>:
 800df90:	b570      	push	{r4, r5, r6, lr}
 800df92:	4604      	mov	r4, r0
 800df94:	460d      	mov	r5, r1
 800df96:	4616      	mov	r6, r2
 800df98:	f7fc fa70 	bl	800a47c <__errno>
 800df9c:	4629      	mov	r1, r5
 800df9e:	6006      	str	r6, [r0, #0]
 800dfa0:	4620      	mov	r0, r4
 800dfa2:	bd70      	pop	{r4, r5, r6, pc}

0800dfa4 <xflow>:
 800dfa4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dfa6:	4614      	mov	r4, r2
 800dfa8:	461d      	mov	r5, r3
 800dfaa:	b108      	cbz	r0, 800dfb0 <xflow+0xc>
 800dfac:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800dfb0:	e9cd 2300 	strd	r2, r3, [sp]
 800dfb4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800dfb8:	4620      	mov	r0, r4
 800dfba:	4629      	mov	r1, r5
 800dfbc:	f7f2 fb1c 	bl	80005f8 <__aeabi_dmul>
 800dfc0:	2222      	movs	r2, #34	; 0x22
 800dfc2:	b003      	add	sp, #12
 800dfc4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dfc8:	f7ff bfe2 	b.w	800df90 <with_errno>

0800dfcc <__math_uflow>:
 800dfcc:	b508      	push	{r3, lr}
 800dfce:	2200      	movs	r2, #0
 800dfd0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800dfd4:	f7ff ffe6 	bl	800dfa4 <xflow>
 800dfd8:	ec41 0b10 	vmov	d0, r0, r1
 800dfdc:	bd08      	pop	{r3, pc}

0800dfde <__math_oflow>:
 800dfde:	b508      	push	{r3, lr}
 800dfe0:	2200      	movs	r2, #0
 800dfe2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800dfe6:	f7ff ffdd 	bl	800dfa4 <xflow>
 800dfea:	ec41 0b10 	vmov	d0, r0, r1
 800dfee:	bd08      	pop	{r3, pc}

0800dff0 <fabs>:
 800dff0:	ec51 0b10 	vmov	r0, r1, d0
 800dff4:	ee10 2a10 	vmov	r2, s0
 800dff8:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800dffc:	ec43 2b10 	vmov	d0, r2, r3
 800e000:	4770      	bx	lr

0800e002 <finite>:
 800e002:	b082      	sub	sp, #8
 800e004:	ed8d 0b00 	vstr	d0, [sp]
 800e008:	9801      	ldr	r0, [sp, #4]
 800e00a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e00e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e012:	0fc0      	lsrs	r0, r0, #31
 800e014:	b002      	add	sp, #8
 800e016:	4770      	bx	lr

0800e018 <scalbn>:
 800e018:	b570      	push	{r4, r5, r6, lr}
 800e01a:	ec55 4b10 	vmov	r4, r5, d0
 800e01e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e022:	4606      	mov	r6, r0
 800e024:	462b      	mov	r3, r5
 800e026:	b99a      	cbnz	r2, 800e050 <scalbn+0x38>
 800e028:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e02c:	4323      	orrs	r3, r4
 800e02e:	d036      	beq.n	800e09e <scalbn+0x86>
 800e030:	4b39      	ldr	r3, [pc, #228]	; (800e118 <scalbn+0x100>)
 800e032:	4629      	mov	r1, r5
 800e034:	ee10 0a10 	vmov	r0, s0
 800e038:	2200      	movs	r2, #0
 800e03a:	f7f2 fadd 	bl	80005f8 <__aeabi_dmul>
 800e03e:	4b37      	ldr	r3, [pc, #220]	; (800e11c <scalbn+0x104>)
 800e040:	429e      	cmp	r6, r3
 800e042:	4604      	mov	r4, r0
 800e044:	460d      	mov	r5, r1
 800e046:	da10      	bge.n	800e06a <scalbn+0x52>
 800e048:	a32b      	add	r3, pc, #172	; (adr r3, 800e0f8 <scalbn+0xe0>)
 800e04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e04e:	e03a      	b.n	800e0c6 <scalbn+0xae>
 800e050:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e054:	428a      	cmp	r2, r1
 800e056:	d10c      	bne.n	800e072 <scalbn+0x5a>
 800e058:	ee10 2a10 	vmov	r2, s0
 800e05c:	4620      	mov	r0, r4
 800e05e:	4629      	mov	r1, r5
 800e060:	f7f2 f914 	bl	800028c <__adddf3>
 800e064:	4604      	mov	r4, r0
 800e066:	460d      	mov	r5, r1
 800e068:	e019      	b.n	800e09e <scalbn+0x86>
 800e06a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e06e:	460b      	mov	r3, r1
 800e070:	3a36      	subs	r2, #54	; 0x36
 800e072:	4432      	add	r2, r6
 800e074:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e078:	428a      	cmp	r2, r1
 800e07a:	dd08      	ble.n	800e08e <scalbn+0x76>
 800e07c:	2d00      	cmp	r5, #0
 800e07e:	a120      	add	r1, pc, #128	; (adr r1, 800e100 <scalbn+0xe8>)
 800e080:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e084:	da1c      	bge.n	800e0c0 <scalbn+0xa8>
 800e086:	a120      	add	r1, pc, #128	; (adr r1, 800e108 <scalbn+0xf0>)
 800e088:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e08c:	e018      	b.n	800e0c0 <scalbn+0xa8>
 800e08e:	2a00      	cmp	r2, #0
 800e090:	dd08      	ble.n	800e0a4 <scalbn+0x8c>
 800e092:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e096:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e09a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e09e:	ec45 4b10 	vmov	d0, r4, r5
 800e0a2:	bd70      	pop	{r4, r5, r6, pc}
 800e0a4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e0a8:	da19      	bge.n	800e0de <scalbn+0xc6>
 800e0aa:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e0ae:	429e      	cmp	r6, r3
 800e0b0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e0b4:	dd0a      	ble.n	800e0cc <scalbn+0xb4>
 800e0b6:	a112      	add	r1, pc, #72	; (adr r1, 800e100 <scalbn+0xe8>)
 800e0b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0bc:	2b00      	cmp	r3, #0
 800e0be:	d1e2      	bne.n	800e086 <scalbn+0x6e>
 800e0c0:	a30f      	add	r3, pc, #60	; (adr r3, 800e100 <scalbn+0xe8>)
 800e0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0c6:	f7f2 fa97 	bl	80005f8 <__aeabi_dmul>
 800e0ca:	e7cb      	b.n	800e064 <scalbn+0x4c>
 800e0cc:	a10a      	add	r1, pc, #40	; (adr r1, 800e0f8 <scalbn+0xe0>)
 800e0ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d0b8      	beq.n	800e048 <scalbn+0x30>
 800e0d6:	a10e      	add	r1, pc, #56	; (adr r1, 800e110 <scalbn+0xf8>)
 800e0d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0dc:	e7b4      	b.n	800e048 <scalbn+0x30>
 800e0de:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e0e2:	3236      	adds	r2, #54	; 0x36
 800e0e4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e0e8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e0ec:	4620      	mov	r0, r4
 800e0ee:	4b0c      	ldr	r3, [pc, #48]	; (800e120 <scalbn+0x108>)
 800e0f0:	2200      	movs	r2, #0
 800e0f2:	e7e8      	b.n	800e0c6 <scalbn+0xae>
 800e0f4:	f3af 8000 	nop.w
 800e0f8:	c2f8f359 	.word	0xc2f8f359
 800e0fc:	01a56e1f 	.word	0x01a56e1f
 800e100:	8800759c 	.word	0x8800759c
 800e104:	7e37e43c 	.word	0x7e37e43c
 800e108:	8800759c 	.word	0x8800759c
 800e10c:	fe37e43c 	.word	0xfe37e43c
 800e110:	c2f8f359 	.word	0xc2f8f359
 800e114:	81a56e1f 	.word	0x81a56e1f
 800e118:	43500000 	.word	0x43500000
 800e11c:	ffff3cb0 	.word	0xffff3cb0
 800e120:	3c900000 	.word	0x3c900000

0800e124 <_init>:
 800e124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e126:	bf00      	nop
 800e128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e12a:	bc08      	pop	{r3}
 800e12c:	469e      	mov	lr, r3
 800e12e:	4770      	bx	lr

0800e130 <_fini>:
 800e130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e132:	bf00      	nop
 800e134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e136:	bc08      	pop	{r3}
 800e138:	469e      	mov	lr, r3
 800e13a:	4770      	bx	lr
