
MDP_HelloWorld.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000108bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001168  08010a50  08010a50  00020a50  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011bb8  08011bb8  000301f8  2**0
                  CONTENTS
  4 .ARM          00000008  08011bb8  08011bb8  00021bb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011bc0  08011bc0  000301f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011bc0  08011bc0  00021bc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011bc4  08011bc4  00021bc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08011bc8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000301f8  2**0
                  CONTENTS
 10 .bss          00005138  200001f8  200001f8  000301f8  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20005330  20005330  000301f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000301f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001e9e4  00000000  00000000  00030228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b83  00000000  00000000  0004ec0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b98  00000000  00000000  00052790  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001a48  00000000  00000000  00054328  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00004c9c  00000000  00000000  00055d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001dec0  00000000  00000000  0005aa0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8206  00000000  00000000  000788cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00160ad2  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008c28  00000000  00000000  00160b24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010a34 	.word	0x08010a34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	08010a34 	.word	0x08010a34

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <PIDController_Init>:
 */

#include "PID.h"
#include "math.h"

void PIDController_Init(PIDController *pid) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]

  /* Clear controller variables */
  pid->integrator = 0;
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f04f 0200 	mov.w	r2, #0
 8000f9a:	61da      	str	r2, [r3, #28]
  pid->prevError  = 0.0f;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	f04f 0200 	mov.w	r2, #0
 8000fa2:	621a      	str	r2, [r3, #32]
  pid->prevMeasurement = 0.0f;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	f04f 0200 	mov.w	r2, #0
 8000faa:	629a      	str	r2, [r3, #40]	; 0x28
  pid->out = 0;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f04f 0200 	mov.w	r2, #0
 8000fb2:	62da      	str	r2, [r3, #44]	; 0x2c

}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr

08000fc0 <MotorPIDController_Init>:

void MotorPIDController_Init(PIDController *pid) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b082      	sub	sp, #8
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  pid->T = 0.2;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	4a0c      	ldr	r2, [pc, #48]	; (8000ffc <MotorPIDController_Init+0x3c>)
 8000fcc:	619a      	str	r2, [r3, #24]
//  pid->Kp = 0.11;
//  pid->Ki = 0.15;
//  pid->Kd = 0.03;
//  pid->Kp = 0.25; //our previous value
  pid->Kp = 0.5;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8000fd4:	601a      	str	r2, [r3, #0]
  pid->Ki = 0;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f04f 0200 	mov.w	r2, #0
 8000fdc:	605a      	str	r2, [r3, #4]
  pid->limMax = 6000; pid->limMin = 0;
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a07      	ldr	r2, [pc, #28]	; (8001000 <MotorPIDController_Init+0x40>)
 8000fe2:	615a      	str	r2, [r3, #20]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	f04f 0200 	mov.w	r2, #0
 8000fea:	611a      	str	r2, [r3, #16]
  PIDController_Init(pid);
 8000fec:	6878      	ldr	r0, [r7, #4]
 8000fee:	f7ff ffcd 	bl	8000f8c <PIDController_Init>
}
 8000ff2:	bf00      	nop
 8000ff4:	3708      	adds	r7, #8
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	3e4ccccd 	.word	0x3e4ccccd
 8001000:	45bb8000 	.word	0x45bb8000

08001004 <PIDController_Update>:
	pid->prevError = error;

	return (int)pid->out;
}

int PIDController_Update(PIDController *pid, float measurement, float setpoint, int currentpwm) {
 8001004:	b480      	push	{r7}
 8001006:	b089      	sub	sp, #36	; 0x24
 8001008:	af00      	add	r7, sp, #0
 800100a:	60f8      	str	r0, [r7, #12]
 800100c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001010:	edc7 0a01 	vstr	s1, [r7, #4]
 8001014:	6039      	str	r1, [r7, #0]

  /*
  * Error signal
  */
    float error = setpoint - measurement;
 8001016:	ed97 7a01 	vldr	s14, [r7, #4]
 800101a:	edd7 7a02 	vldr	s15, [r7, #8]
 800101e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001022:	edc7 7a07 	vstr	s15, [r7, #28]
    if (isnan(error) == 1) error = 0;
 8001026:	ed97 7a07 	vldr	s14, [r7, #28]
 800102a:	edd7 7a07 	vldr	s15, [r7, #28]
 800102e:	eeb4 7a67 	vcmp.f32	s14, s15
 8001032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001036:	d702      	bvc.n	800103e <PIDController_Update+0x3a>
 8001038:	f04f 0300 	mov.w	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]

  // Proportional
    int proportional;

    // velocity implementation (instead of distance)
    if (error >= 0) // positive error, need to increase pwm
 800103e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001042:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104a:	db1b      	blt.n	8001084 <PIDController_Update+0x80>
    {
    	proportional = (int)((1 + pid->Kp * (error / setpoint)) * currentpwm); // kP * (1 + percentage of error based on setpoint) * currentpwm
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	ed93 7a00 	vldr	s14, [r3]
 8001052:	ed97 6a07 	vldr	s12, [r7, #28]
 8001056:	edd7 6a01 	vldr	s13, [r7, #4]
 800105a:	eec6 7a26 	vdiv.f32	s15, s12, s13
 800105e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001062:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001066:	ee37 7a87 	vadd.f32	s14, s15, s14
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	ee07 3a90 	vmov	s15, r3
 8001070:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001074:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001078:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800107c:	ee17 3a90 	vmov	r3, s15
 8001080:	61bb      	str	r3, [r7, #24]
 8001082:	e01a      	b.n	80010ba <PIDController_Update+0xb6>
    }
    else // negative error, need to decrease pwm
    {
    	proportional = (int)((1 + pid->Kp * (error / measurement)) * currentpwm); // kP * (1 + percentage of error based on measurement) * currentpwm
 8001084:	68fb      	ldr	r3, [r7, #12]
 8001086:	ed93 7a00 	vldr	s14, [r3]
 800108a:	ed97 6a07 	vldr	s12, [r7, #28]
 800108e:	edd7 6a02 	vldr	s13, [r7, #8]
 8001092:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8001096:	ee67 7a27 	vmul.f32	s15, s14, s15
 800109a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800109e:	ee37 7a87 	vadd.f32	s14, s15, s14
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	ee07 3a90 	vmov	s15, r3
 80010a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80010b4:	ee17 3a90 	vmov	r3, s15
 80010b8:	61bb      	str	r3, [r7, #24]
    }

  // Integral
    pid->integrator = pid->integrator + 0.5f * pid->Ki * pid->T * (error + pid->prevError) * currentpwm;
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	ed93 7a07 	vldr	s14, [r3, #28]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80010c6:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 80010ca:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	edd3 7a06 	vldr	s15, [r3, #24]
 80010d4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	ed93 6a08 	vldr	s12, [r3, #32]
 80010de:	edd7 7a07 	vldr	s15, [r7, #28]
 80010e2:	ee76 7a27 	vadd.f32	s15, s12, s15
 80010e6:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	ee07 3a90 	vmov	s15, r3
 80010f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010f4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	edc3 7a07 	vstr	s15, [r3, #28]

  // Anti-wind-up via dynamic integrator clamping
  int limMinInt, limMaxInt;

  // Compute integrator limits
  if (pid->limMax > proportional) {
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	ed93 7a05 	vldr	s14, [r3, #20]
 8001108:	69bb      	ldr	r3, [r7, #24]
 800110a:	ee07 3a90 	vmov	s15, r3
 800110e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001112:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800111a:	dd0f      	ble.n	800113c <PIDController_Update+0x138>

    limMaxInt = pid->limMax - proportional;
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	ed93 7a05 	vldr	s14, [r3, #20]
 8001122:	69bb      	ldr	r3, [r7, #24]
 8001124:	ee07 3a90 	vmov	s15, r3
 8001128:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800112c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001130:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001134:	ee17 3a90 	vmov	r3, s15
 8001138:	613b      	str	r3, [r7, #16]
 800113a:	e001      	b.n	8001140 <PIDController_Update+0x13c>

  } else {

    limMaxInt = 0;
 800113c:	2300      	movs	r3, #0
 800113e:	613b      	str	r3, [r7, #16]

  }

  if (pid->limMin < proportional) {
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	ed93 7a04 	vldr	s14, [r3, #16]
 8001146:	69bb      	ldr	r3, [r7, #24]
 8001148:	ee07 3a90 	vmov	s15, r3
 800114c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001150:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001158:	d50f      	bpl.n	800117a <PIDController_Update+0x176>

    limMinInt = pid->limMin - proportional;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	ed93 7a04 	vldr	s14, [r3, #16]
 8001160:	69bb      	ldr	r3, [r7, #24]
 8001162:	ee07 3a90 	vmov	s15, r3
 8001166:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800116a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800116e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001172:	ee17 3a90 	vmov	r3, s15
 8001176:	617b      	str	r3, [r7, #20]
 8001178:	e001      	b.n	800117e <PIDController_Update+0x17a>

  } else {

    limMinInt = 0;
 800117a:	2300      	movs	r3, #0
 800117c:	617b      	str	r3, [r7, #20]

  }

  // Clamp integrator
	if (pid->integrator > limMaxInt) {
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	ed93 7a07 	vldr	s14, [r3, #28]
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	ee07 3a90 	vmov	s15, r3
 800118a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800118e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001192:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001196:	dd08      	ble.n	80011aa <PIDController_Update+0x1a6>

		pid->integrator = limMaxInt;
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	ee07 3a90 	vmov	s15, r3
 800119e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	edc3 7a07 	vstr	s15, [r3, #28]
 80011a8:	e014      	b.n	80011d4 <PIDController_Update+0x1d0>

	} else if (pid->integrator < limMinInt) {
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	ed93 7a07 	vldr	s14, [r3, #28]
 80011b0:	697b      	ldr	r3, [r7, #20]
 80011b2:	ee07 3a90 	vmov	s15, r3
 80011b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011c2:	d507      	bpl.n	80011d4 <PIDController_Update+0x1d0>

		pid->integrator = limMinInt;
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	ee07 3a90 	vmov	s15, r3
 80011ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	edc3 7a07 	vstr	s15, [r3, #28]

  /*
  * Compute output and apply limits
  */

    pid->out = proportional + pid->integrator;
 80011d4:	69bb      	ldr	r3, [r7, #24]
 80011d6:	ee07 3a90 	vmov	s15, r3
 80011da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	edd3 7a07 	vldr	s15, [r3, #28]
 80011e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

    if (pid->out > pid->limMax) {
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	edd3 7a05 	vldr	s15, [r3, #20]
 80011fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80011fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001202:	dd04      	ble.n	800120e <PIDController_Update+0x20a>

        pid->out = pid->limMax;
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	695a      	ldr	r2, [r3, #20]
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	62da      	str	r2, [r3, #44]	; 0x2c
 800120c:	e00e      	b.n	800122c <PIDController_Update+0x228>

    } else if (pid->out < pid->limMin) {
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	edd3 7a04 	vldr	s15, [r3, #16]
 800121a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800121e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001222:	d503      	bpl.n	800122c <PIDController_Update+0x228>

        pid->out = pid->limMin;
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	691a      	ldr	r2, [r3, #16]
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	62da      	str	r2, [r3, #44]	; 0x2c

    }

  /* Store error and measurement for later use */
    pid->prevError       = error;
 800122c:	68fb      	ldr	r3, [r7, #12]
 800122e:	69fa      	ldr	r2, [r7, #28]
 8001230:	621a      	str	r2, [r3, #32]
    pid->prevMeasurement = measurement;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	68ba      	ldr	r2, [r7, #8]
 8001236:	629a      	str	r2, [r3, #40]	; 0x28

  /* Return controller output */
    return pid->out;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800123e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001242:	ee17 3a90 	vmov	r3, s15

}
 8001246:	4618      	mov	r0, r3
 8001248:	3724      	adds	r7, #36	; 0x24
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
	...

08001254 <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800125a:	2300      	movs	r3, #0
 800125c:	71fb      	strb	r3, [r7, #7]
 800125e:	e026      	b.n	80012ae <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 8001260:	79fb      	ldrb	r3, [r7, #7]
 8001262:	3b50      	subs	r3, #80	; 0x50
 8001264:	b2db      	uxtb	r3, r3
 8001266:	2100      	movs	r1, #0
 8001268:	4618      	mov	r0, r3
 800126a:	f000 f82b 	bl	80012c4 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800126e:	2100      	movs	r1, #0
 8001270:	2000      	movs	r0, #0
 8001272:	f000 f827 	bl	80012c4 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 8001276:	2100      	movs	r1, #0
 8001278:	2010      	movs	r0, #16
 800127a:	f000 f823 	bl	80012c4 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800127e:	2300      	movs	r3, #0
 8001280:	71bb      	strb	r3, [r7, #6]
 8001282:	e00d      	b.n	80012a0 <OLED_Refresh_Gram+0x4c>
 8001284:	79ba      	ldrb	r2, [r7, #6]
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	490d      	ldr	r1, [pc, #52]	; (80012c0 <OLED_Refresh_Gram+0x6c>)
 800128a:	00d2      	lsls	r2, r2, #3
 800128c:	440a      	add	r2, r1
 800128e:	4413      	add	r3, r2
 8001290:	781b      	ldrb	r3, [r3, #0]
 8001292:	2101      	movs	r1, #1
 8001294:	4618      	mov	r0, r3
 8001296:	f000 f815 	bl	80012c4 <OLED_WR_Byte>
 800129a:	79bb      	ldrb	r3, [r7, #6]
 800129c:	3301      	adds	r3, #1
 800129e:	71bb      	strb	r3, [r7, #6]
 80012a0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	daed      	bge.n	8001284 <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 80012a8:	79fb      	ldrb	r3, [r7, #7]
 80012aa:	3301      	adds	r3, #1
 80012ac:	71fb      	strb	r3, [r7, #7]
 80012ae:	79fb      	ldrb	r3, [r7, #7]
 80012b0:	2b07      	cmp	r3, #7
 80012b2:	d9d5      	bls.n	8001260 <OLED_Refresh_Gram+0xc>
	}   
}
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	20000214 	.word	0x20000214

080012c4 <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	4603      	mov	r3, r0
 80012cc:	460a      	mov	r2, r1
 80012ce:	71fb      	strb	r3, [r7, #7]
 80012d0:	4613      	mov	r3, r2
 80012d2:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 80012d4:	79bb      	ldrb	r3, [r7, #6]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d006      	beq.n	80012e8 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 80012da:	2201      	movs	r2, #1
 80012dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012e0:	481c      	ldr	r0, [pc, #112]	; (8001354 <OLED_WR_Byte+0x90>)
 80012e2:	f004 fa49 	bl	8005778 <HAL_GPIO_WritePin>
 80012e6:	e005      	b.n	80012f4 <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 80012e8:	2200      	movs	r2, #0
 80012ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80012ee:	4819      	ldr	r0, [pc, #100]	; (8001354 <OLED_WR_Byte+0x90>)
 80012f0:	f004 fa42 	bl	8005778 <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 80012f4:	2300      	movs	r3, #0
 80012f6:	73fb      	strb	r3, [r7, #15]
 80012f8:	e01e      	b.n	8001338 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 80012fa:	2200      	movs	r2, #0
 80012fc:	2120      	movs	r1, #32
 80012fe:	4815      	ldr	r0, [pc, #84]	; (8001354 <OLED_WR_Byte+0x90>)
 8001300:	f004 fa3a 	bl	8005778 <HAL_GPIO_WritePin>
		if(dat&0x80)
 8001304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001308:	2b00      	cmp	r3, #0
 800130a:	da05      	bge.n	8001318 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 800130c:	2201      	movs	r2, #1
 800130e:	2140      	movs	r1, #64	; 0x40
 8001310:	4810      	ldr	r0, [pc, #64]	; (8001354 <OLED_WR_Byte+0x90>)
 8001312:	f004 fa31 	bl	8005778 <HAL_GPIO_WritePin>
 8001316:	e004      	b.n	8001322 <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 8001318:	2200      	movs	r2, #0
 800131a:	2140      	movs	r1, #64	; 0x40
 800131c:	480d      	ldr	r0, [pc, #52]	; (8001354 <OLED_WR_Byte+0x90>)
 800131e:	f004 fa2b 	bl	8005778 <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 8001322:	2201      	movs	r2, #1
 8001324:	2120      	movs	r1, #32
 8001326:	480b      	ldr	r0, [pc, #44]	; (8001354 <OLED_WR_Byte+0x90>)
 8001328:	f004 fa26 	bl	8005778 <HAL_GPIO_WritePin>
		dat<<=1;   
 800132c:	79fb      	ldrb	r3, [r7, #7]
 800132e:	005b      	lsls	r3, r3, #1
 8001330:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 8001332:	7bfb      	ldrb	r3, [r7, #15]
 8001334:	3301      	adds	r3, #1
 8001336:	73fb      	strb	r3, [r7, #15]
 8001338:	7bfb      	ldrb	r3, [r7, #15]
 800133a:	2b07      	cmp	r3, #7
 800133c:	d9dd      	bls.n	80012fa <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800133e:	2201      	movs	r2, #1
 8001340:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001344:	4803      	ldr	r0, [pc, #12]	; (8001354 <OLED_WR_Byte+0x90>)
 8001346:	f004 fa17 	bl	8005778 <HAL_GPIO_WritePin>
} 
 800134a:	bf00      	nop
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	40021000 	.word	0x40021000

08001358 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800135e:	2300      	movs	r3, #0
 8001360:	71fb      	strb	r3, [r7, #7]
 8001362:	e014      	b.n	800138e <OLED_Clear+0x36>
 8001364:	2300      	movs	r3, #0
 8001366:	71bb      	strb	r3, [r7, #6]
 8001368:	e00a      	b.n	8001380 <OLED_Clear+0x28>
 800136a:	79ba      	ldrb	r2, [r7, #6]
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	490c      	ldr	r1, [pc, #48]	; (80013a0 <OLED_Clear+0x48>)
 8001370:	00d2      	lsls	r2, r2, #3
 8001372:	440a      	add	r2, r1
 8001374:	4413      	add	r3, r2
 8001376:	2200      	movs	r2, #0
 8001378:	701a      	strb	r2, [r3, #0]
 800137a:	79bb      	ldrb	r3, [r7, #6]
 800137c:	3301      	adds	r3, #1
 800137e:	71bb      	strb	r3, [r7, #6]
 8001380:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001384:	2b00      	cmp	r3, #0
 8001386:	daf0      	bge.n	800136a <OLED_Clear+0x12>
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	3301      	adds	r3, #1
 800138c:	71fb      	strb	r3, [r7, #7]
 800138e:	79fb      	ldrb	r3, [r7, #7]
 8001390:	2b07      	cmp	r3, #7
 8001392:	d9e7      	bls.n	8001364 <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 8001394:	f7ff ff5e 	bl	8001254 <OLED_Refresh_Gram>
}
 8001398:	bf00      	nop
 800139a:	3708      	adds	r7, #8
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	20000214 	.word	0x20000214

080013a4 <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b085      	sub	sp, #20
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	4603      	mov	r3, r0
 80013ac:	71fb      	strb	r3, [r7, #7]
 80013ae:	460b      	mov	r3, r1
 80013b0:	71bb      	strb	r3, [r7, #6]
 80013b2:	4613      	mov	r3, r2
 80013b4:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 80013b6:	2300      	movs	r3, #0
 80013b8:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 80013ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	db41      	blt.n	8001446 <OLED_DrawPoint+0xa2>
 80013c2:	79bb      	ldrb	r3, [r7, #6]
 80013c4:	2b3f      	cmp	r3, #63	; 0x3f
 80013c6:	d83e      	bhi.n	8001446 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 80013c8:	79bb      	ldrb	r3, [r7, #6]
 80013ca:	08db      	lsrs	r3, r3, #3
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	f1c3 0307 	rsb	r3, r3, #7
 80013d2:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 80013d4:	79bb      	ldrb	r3, [r7, #6]
 80013d6:	f003 0307 	and.w	r3, r3, #7
 80013da:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 80013dc:	7b7b      	ldrb	r3, [r7, #13]
 80013de:	f1c3 0307 	rsb	r3, r3, #7
 80013e2:	2201      	movs	r2, #1
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 80013ea:	797b      	ldrb	r3, [r7, #5]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d012      	beq.n	8001416 <OLED_DrawPoint+0x72>
 80013f0:	79fa      	ldrb	r2, [r7, #7]
 80013f2:	7bbb      	ldrb	r3, [r7, #14]
 80013f4:	4917      	ldr	r1, [pc, #92]	; (8001454 <OLED_DrawPoint+0xb0>)
 80013f6:	00d2      	lsls	r2, r2, #3
 80013f8:	440a      	add	r2, r1
 80013fa:	4413      	add	r3, r2
 80013fc:	7818      	ldrb	r0, [r3, #0]
 80013fe:	79fa      	ldrb	r2, [r7, #7]
 8001400:	7bbb      	ldrb	r3, [r7, #14]
 8001402:	7bf9      	ldrb	r1, [r7, #15]
 8001404:	4301      	orrs	r1, r0
 8001406:	b2c8      	uxtb	r0, r1
 8001408:	4912      	ldr	r1, [pc, #72]	; (8001454 <OLED_DrawPoint+0xb0>)
 800140a:	00d2      	lsls	r2, r2, #3
 800140c:	440a      	add	r2, r1
 800140e:	4413      	add	r3, r2
 8001410:	4602      	mov	r2, r0
 8001412:	701a      	strb	r2, [r3, #0]
 8001414:	e018      	b.n	8001448 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 8001416:	79fa      	ldrb	r2, [r7, #7]
 8001418:	7bbb      	ldrb	r3, [r7, #14]
 800141a:	490e      	ldr	r1, [pc, #56]	; (8001454 <OLED_DrawPoint+0xb0>)
 800141c:	00d2      	lsls	r2, r2, #3
 800141e:	440a      	add	r2, r1
 8001420:	4413      	add	r3, r2
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	b25a      	sxtb	r2, r3
 8001426:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800142a:	43db      	mvns	r3, r3
 800142c:	b25b      	sxtb	r3, r3
 800142e:	4013      	ands	r3, r2
 8001430:	b259      	sxtb	r1, r3
 8001432:	79fa      	ldrb	r2, [r7, #7]
 8001434:	7bbb      	ldrb	r3, [r7, #14]
 8001436:	b2c8      	uxtb	r0, r1
 8001438:	4906      	ldr	r1, [pc, #24]	; (8001454 <OLED_DrawPoint+0xb0>)
 800143a:	00d2      	lsls	r2, r2, #3
 800143c:	440a      	add	r2, r1
 800143e:	4413      	add	r3, r2
 8001440:	4602      	mov	r2, r0
 8001442:	701a      	strb	r2, [r3, #0]
 8001444:	e000      	b.n	8001448 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 8001446:	bf00      	nop
}
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	20000214 	.word	0x20000214

08001458 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 8001458:	b590      	push	{r4, r7, lr}
 800145a:	b085      	sub	sp, #20
 800145c:	af00      	add	r7, sp, #0
 800145e:	4604      	mov	r4, r0
 8001460:	4608      	mov	r0, r1
 8001462:	4611      	mov	r1, r2
 8001464:	461a      	mov	r2, r3
 8001466:	4623      	mov	r3, r4
 8001468:	71fb      	strb	r3, [r7, #7]
 800146a:	4603      	mov	r3, r0
 800146c:	71bb      	strb	r3, [r7, #6]
 800146e:	460b      	mov	r3, r1
 8001470:	717b      	strb	r3, [r7, #5]
 8001472:	4613      	mov	r3, r2
 8001474:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 8001476:	79bb      	ldrb	r3, [r7, #6]
 8001478:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800147a:	797b      	ldrb	r3, [r7, #5]
 800147c:	3b20      	subs	r3, #32
 800147e:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8001480:	2300      	movs	r3, #0
 8001482:	73bb      	strb	r3, [r7, #14]
 8001484:	e04d      	b.n	8001522 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 8001486:	793b      	ldrb	r3, [r7, #4]
 8001488:	2b0c      	cmp	r3, #12
 800148a:	d10b      	bne.n	80014a4 <OLED_ShowChar+0x4c>
 800148c:	797a      	ldrb	r2, [r7, #5]
 800148e:	7bb9      	ldrb	r1, [r7, #14]
 8001490:	4828      	ldr	r0, [pc, #160]	; (8001534 <OLED_ShowChar+0xdc>)
 8001492:	4613      	mov	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	4413      	add	r3, r2
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	4403      	add	r3, r0
 800149c:	440b      	add	r3, r1
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	73fb      	strb	r3, [r7, #15]
 80014a2:	e007      	b.n	80014b4 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 80014a4:	797a      	ldrb	r2, [r7, #5]
 80014a6:	7bbb      	ldrb	r3, [r7, #14]
 80014a8:	4923      	ldr	r1, [pc, #140]	; (8001538 <OLED_ShowChar+0xe0>)
 80014aa:	0112      	lsls	r2, r2, #4
 80014ac:	440a      	add	r2, r1
 80014ae:	4413      	add	r3, r2
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 80014b4:	2300      	movs	r3, #0
 80014b6:	737b      	strb	r3, [r7, #13]
 80014b8:	e02d      	b.n	8001516 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 80014ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	da07      	bge.n	80014d2 <OLED_ShowChar+0x7a>
 80014c2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80014c6:	79b9      	ldrb	r1, [r7, #6]
 80014c8:	79fb      	ldrb	r3, [r7, #7]
 80014ca:	4618      	mov	r0, r3
 80014cc:	f7ff ff6a 	bl	80013a4 <OLED_DrawPoint>
 80014d0:	e00c      	b.n	80014ec <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 80014d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	bf0c      	ite	eq
 80014da:	2301      	moveq	r3, #1
 80014dc:	2300      	movne	r3, #0
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	461a      	mov	r2, r3
 80014e2:	79b9      	ldrb	r1, [r7, #6]
 80014e4:	79fb      	ldrb	r3, [r7, #7]
 80014e6:	4618      	mov	r0, r3
 80014e8:	f7ff ff5c 	bl	80013a4 <OLED_DrawPoint>
			temp<<=1;
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	73fb      	strb	r3, [r7, #15]
			y++;
 80014f2:	79bb      	ldrb	r3, [r7, #6]
 80014f4:	3301      	adds	r3, #1
 80014f6:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 80014f8:	79ba      	ldrb	r2, [r7, #6]
 80014fa:	7b3b      	ldrb	r3, [r7, #12]
 80014fc:	1ad2      	subs	r2, r2, r3
 80014fe:	793b      	ldrb	r3, [r7, #4]
 8001500:	429a      	cmp	r2, r3
 8001502:	d105      	bne.n	8001510 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8001504:	7b3b      	ldrb	r3, [r7, #12]
 8001506:	71bb      	strb	r3, [r7, #6]
				x++;
 8001508:	79fb      	ldrb	r3, [r7, #7]
 800150a:	3301      	adds	r3, #1
 800150c:	71fb      	strb	r3, [r7, #7]
				break;
 800150e:	e005      	b.n	800151c <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8001510:	7b7b      	ldrb	r3, [r7, #13]
 8001512:	3301      	adds	r3, #1
 8001514:	737b      	strb	r3, [r7, #13]
 8001516:	7b7b      	ldrb	r3, [r7, #13]
 8001518:	2b07      	cmp	r3, #7
 800151a:	d9ce      	bls.n	80014ba <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800151c:	7bbb      	ldrb	r3, [r7, #14]
 800151e:	3301      	adds	r3, #1
 8001520:	73bb      	strb	r3, [r7, #14]
 8001522:	7bba      	ldrb	r2, [r7, #14]
 8001524:	793b      	ldrb	r3, [r7, #4]
 8001526:	429a      	cmp	r2, r3
 8001528:	d3ad      	bcc.n	8001486 <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800152a:	bf00      	nop
 800152c:	bf00      	nop
 800152e:	3714      	adds	r7, #20
 8001530:	46bd      	mov	sp, r7
 8001532:	bd90      	pop	{r4, r7, pc}
 8001534:	08010b60 	.word	0x08010b60
 8001538:	08010fd4 	.word	0x08010fd4

0800153c <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af02      	add	r7, sp, #8
 8001542:	4603      	mov	r3, r0
 8001544:	603a      	str	r2, [r7, #0]
 8001546:	71fb      	strb	r3, [r7, #7]
 8001548:	460b      	mov	r3, r1
 800154a:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 800154c:	e01f      	b.n	800158e <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800154e:	79fb      	ldrb	r3, [r7, #7]
 8001550:	2b7a      	cmp	r3, #122	; 0x7a
 8001552:	d904      	bls.n	800155e <OLED_ShowString+0x22>
 8001554:	2300      	movs	r3, #0
 8001556:	71fb      	strb	r3, [r7, #7]
 8001558:	79bb      	ldrb	r3, [r7, #6]
 800155a:	3310      	adds	r3, #16
 800155c:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800155e:	79bb      	ldrb	r3, [r7, #6]
 8001560:	2b3a      	cmp	r3, #58	; 0x3a
 8001562:	d905      	bls.n	8001570 <OLED_ShowString+0x34>
 8001564:	2300      	movs	r3, #0
 8001566:	71fb      	strb	r3, [r7, #7]
 8001568:	79fb      	ldrb	r3, [r7, #7]
 800156a:	71bb      	strb	r3, [r7, #6]
 800156c:	f7ff fef4 	bl	8001358 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	781a      	ldrb	r2, [r3, #0]
 8001574:	79b9      	ldrb	r1, [r7, #6]
 8001576:	79f8      	ldrb	r0, [r7, #7]
 8001578:	2301      	movs	r3, #1
 800157a:	9300      	str	r3, [sp, #0]
 800157c:	230c      	movs	r3, #12
 800157e:	f7ff ff6b 	bl	8001458 <OLED_ShowChar>
        x+=8;
 8001582:	79fb      	ldrb	r3, [r7, #7]
 8001584:	3308      	adds	r3, #8
 8001586:	71fb      	strb	r3, [r7, #7]
        p++;
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	3301      	adds	r3, #1
 800158c:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d1db      	bne.n	800154e <OLED_ShowString+0x12>
    }  
}	 
 8001596:	bf00      	nop
 8001598:	bf00      	nop
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}

080015a0 <OLED_Init>:

void OLED_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 80015a4:	f005 f898 	bl	80066d8 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 80015a8:	4b41      	ldr	r3, [pc, #260]	; (80016b0 <OLED_Init+0x110>)
 80015aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015ac:	4a40      	ldr	r2, [pc, #256]	; (80016b0 <OLED_Init+0x110>)
 80015ae:	f023 0301 	bic.w	r3, r3, #1
 80015b2:	6713      	str	r3, [r2, #112]	; 0x70
 80015b4:	4b3e      	ldr	r3, [pc, #248]	; (80016b0 <OLED_Init+0x110>)
 80015b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b8:	4a3d      	ldr	r2, [pc, #244]	; (80016b0 <OLED_Init+0x110>)
 80015ba:	f023 0304 	bic.w	r3, r3, #4
 80015be:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 80015c0:	f005 f89e 	bl	8006700 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 80015c4:	2200      	movs	r2, #0
 80015c6:	2180      	movs	r1, #128	; 0x80
 80015c8:	483a      	ldr	r0, [pc, #232]	; (80016b4 <OLED_Init+0x114>)
 80015ca:	f004 f8d5 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80015ce:	2064      	movs	r0, #100	; 0x64
 80015d0:	f003 f96e 	bl	80048b0 <HAL_Delay>
	OLED_RST_Set();
 80015d4:	2201      	movs	r2, #1
 80015d6:	2180      	movs	r1, #128	; 0x80
 80015d8:	4836      	ldr	r0, [pc, #216]	; (80016b4 <OLED_Init+0x114>)
 80015da:	f004 f8cd 	bl	8005778 <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 80015de:	2100      	movs	r1, #0
 80015e0:	20ae      	movs	r0, #174	; 0xae
 80015e2:	f7ff fe6f 	bl	80012c4 <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 80015e6:	2100      	movs	r1, #0
 80015e8:	20d5      	movs	r0, #213	; 0xd5
 80015ea:	f7ff fe6b 	bl	80012c4 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 80015ee:	2100      	movs	r1, #0
 80015f0:	2050      	movs	r0, #80	; 0x50
 80015f2:	f7ff fe67 	bl	80012c4 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 80015f6:	2100      	movs	r1, #0
 80015f8:	20a8      	movs	r0, #168	; 0xa8
 80015fa:	f7ff fe63 	bl	80012c4 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 80015fe:	2100      	movs	r1, #0
 8001600:	203f      	movs	r0, #63	; 0x3f
 8001602:	f7ff fe5f 	bl	80012c4 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 8001606:	2100      	movs	r1, #0
 8001608:	20d3      	movs	r0, #211	; 0xd3
 800160a:	f7ff fe5b 	bl	80012c4 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800160e:	2100      	movs	r1, #0
 8001610:	2000      	movs	r0, #0
 8001612:	f7ff fe57 	bl	80012c4 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 8001616:	2100      	movs	r1, #0
 8001618:	2040      	movs	r0, #64	; 0x40
 800161a:	f7ff fe53 	bl	80012c4 <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800161e:	2100      	movs	r1, #0
 8001620:	208d      	movs	r0, #141	; 0x8d
 8001622:	f7ff fe4f 	bl	80012c4 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 8001626:	2100      	movs	r1, #0
 8001628:	2014      	movs	r0, #20
 800162a:	f7ff fe4b 	bl	80012c4 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800162e:	2100      	movs	r1, #0
 8001630:	2020      	movs	r0, #32
 8001632:	f7ff fe47 	bl	80012c4 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 8001636:	2100      	movs	r1, #0
 8001638:	2002      	movs	r0, #2
 800163a:	f7ff fe43 	bl	80012c4 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800163e:	2100      	movs	r1, #0
 8001640:	20a1      	movs	r0, #161	; 0xa1
 8001642:	f7ff fe3f 	bl	80012c4 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 8001646:	2100      	movs	r1, #0
 8001648:	20c0      	movs	r0, #192	; 0xc0
 800164a:	f7ff fe3b 	bl	80012c4 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800164e:	2100      	movs	r1, #0
 8001650:	20da      	movs	r0, #218	; 0xda
 8001652:	f7ff fe37 	bl	80012c4 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 8001656:	2100      	movs	r1, #0
 8001658:	2012      	movs	r0, #18
 800165a:	f7ff fe33 	bl	80012c4 <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800165e:	2100      	movs	r1, #0
 8001660:	2081      	movs	r0, #129	; 0x81
 8001662:	f7ff fe2f 	bl	80012c4 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 8001666:	2100      	movs	r1, #0
 8001668:	20ef      	movs	r0, #239	; 0xef
 800166a:	f7ff fe2b 	bl	80012c4 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800166e:	2100      	movs	r1, #0
 8001670:	20d9      	movs	r0, #217	; 0xd9
 8001672:	f7ff fe27 	bl	80012c4 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8001676:	2100      	movs	r1, #0
 8001678:	20f1      	movs	r0, #241	; 0xf1
 800167a:	f7ff fe23 	bl	80012c4 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800167e:	2100      	movs	r1, #0
 8001680:	20db      	movs	r0, #219	; 0xdb
 8001682:	f7ff fe1f 	bl	80012c4 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8001686:	2100      	movs	r1, #0
 8001688:	2030      	movs	r0, #48	; 0x30
 800168a:	f7ff fe1b 	bl	80012c4 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800168e:	2100      	movs	r1, #0
 8001690:	20a4      	movs	r0, #164	; 0xa4
 8001692:	f7ff fe17 	bl	80012c4 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 8001696:	2100      	movs	r1, #0
 8001698:	20a6      	movs	r0, #166	; 0xa6
 800169a:	f7ff fe13 	bl	80012c4 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800169e:	2100      	movs	r1, #0
 80016a0:	20af      	movs	r0, #175	; 0xaf
 80016a2:	f7ff fe0f 	bl	80012c4 <OLED_WR_Byte>
	OLED_Clear(); 
 80016a6:	f7ff fe57 	bl	8001358 <OLED_Clear>
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40021000 	.word	0x40021000

080016b8 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80016bc:	f003 f886 	bl	80047cc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80016c0:	f000 f8b6 	bl	8001830 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80016c4:	f000 fc6e 	bl	8001fa4 <MX_GPIO_Init>
	MX_TIM8_Init();
 80016c8:	f000 fb98 	bl	8001dfc <MX_TIM8_Init>
	MX_TIM2_Init();
 80016cc:	f000 fa7e 	bl	8001bcc <MX_TIM2_Init>
	MX_TIM1_Init();
 80016d0:	f000 f9de 	bl	8001a90 <MX_TIM1_Init>
	MX_USART3_UART_Init();
 80016d4:	f000 fc3c 	bl	8001f50 <MX_USART3_UART_Init>
	MX_TIM3_Init();
 80016d8:	f000 facc 	bl	8001c74 <MX_TIM3_Init>
	MX_TIM4_Init();
 80016dc:	f000 fb1e 	bl	8001d1c <MX_TIM4_Init>
	MX_I2C1_Init();
 80016e0:	f000 f9a8 	bl	8001a34 <MX_I2C1_Init>
	MX_ADC1_Init();
 80016e4:	f000 f902 	bl	80018ec <MX_ADC1_Init>
	MX_ADC2_Init();
 80016e8:	f000 f952 	bl	8001990 <MX_ADC2_Init>
	/* USER CODE BEGIN 2 */
	OLED_Init();
 80016ec:	f7ff ff58 	bl	80015a0 <OLED_Init>
	//HAL_TIM_Base_Start(&htim7); //start timer to use delay_ms function for ultrasonic task
	HAL_UART_Receive_IT(&huart3,(uint8_t *)aRxBuffer, RX_BUFFER_SIZE); //Receive 5 bytes
 80016f0:	4b2e      	ldr	r3, [pc, #184]	; (80017ac <main+0xf4>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	b29b      	uxth	r3, r3
 80016f6:	461a      	mov	r2, r3
 80016f8:	492d      	ldr	r1, [pc, #180]	; (80017b0 <main+0xf8>)
 80016fa:	482e      	ldr	r0, [pc, #184]	; (80017b4 <main+0xfc>)
 80016fc:	f007 fa27 	bl	8008b4e <HAL_UART_Receive_IT>
	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8001700:	f008 f9f2 	bl	8009ae8 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001704:	4a2c      	ldr	r2, [pc, #176]	; (80017b8 <main+0x100>)
 8001706:	2100      	movs	r1, #0
 8001708:	482c      	ldr	r0, [pc, #176]	; (80017bc <main+0x104>)
 800170a:	f008 fa37 	bl	8009b7c <osThreadNew>
 800170e:	4603      	mov	r3, r0
 8001710:	4a2b      	ldr	r2, [pc, #172]	; (80017c0 <main+0x108>)
 8001712:	6013      	str	r3, [r2, #0]

	/* creation of OLED */
	OLEDHandle = osThreadNew(Show, NULL, &OLED_attributes);
 8001714:	4a2b      	ldr	r2, [pc, #172]	; (80017c4 <main+0x10c>)
 8001716:	2100      	movs	r1, #0
 8001718:	482b      	ldr	r0, [pc, #172]	; (80017c8 <main+0x110>)
 800171a:	f008 fa2f 	bl	8009b7c <osThreadNew>
 800171e:	4603      	mov	r3, r0
 8001720:	4a2a      	ldr	r2, [pc, #168]	; (80017cc <main+0x114>)
 8001722:	6013      	str	r3, [r2, #0]

	/* creation of MotorTask */
	MotorTaskHandle = osThreadNew(Motor, NULL, &MotorTask_attributes);
 8001724:	4a2a      	ldr	r2, [pc, #168]	; (80017d0 <main+0x118>)
 8001726:	2100      	movs	r1, #0
 8001728:	482a      	ldr	r0, [pc, #168]	; (80017d4 <main+0x11c>)
 800172a:	f008 fa27 	bl	8009b7c <osThreadNew>
 800172e:	4603      	mov	r3, r0
 8001730:	4a29      	ldr	r2, [pc, #164]	; (80017d8 <main+0x120>)
 8001732:	6013      	str	r3, [r2, #0]

	/* creation of EncoderTask */
	EncoderTaskHandle = osThreadNew(encoder_task, NULL, &EncoderTask_attributes);
 8001734:	4a29      	ldr	r2, [pc, #164]	; (80017dc <main+0x124>)
 8001736:	2100      	movs	r1, #0
 8001738:	4829      	ldr	r0, [pc, #164]	; (80017e0 <main+0x128>)
 800173a:	f008 fa1f 	bl	8009b7c <osThreadNew>
 800173e:	4603      	mov	r3, r0
 8001740:	4a28      	ldr	r2, [pc, #160]	; (80017e4 <main+0x12c>)
 8001742:	6013      	str	r3, [r2, #0]

	/* creation of motorTasktwo */
	motorTasktwoHandle = osThreadNew(motorTwo, NULL, &motorTasktwo_attributes);
 8001744:	4a28      	ldr	r2, [pc, #160]	; (80017e8 <main+0x130>)
 8001746:	2100      	movs	r1, #0
 8001748:	4828      	ldr	r0, [pc, #160]	; (80017ec <main+0x134>)
 800174a:	f008 fa17 	bl	8009b7c <osThreadNew>
 800174e:	4603      	mov	r3, r0
 8001750:	4a27      	ldr	r2, [pc, #156]	; (80017f0 <main+0x138>)
 8001752:	6013      	str	r3, [r2, #0]

	/* creation of servoMotor */
	servoMotorHandle = osThreadNew(servomotor, NULL, &servoMotor_attributes);
 8001754:	4a27      	ldr	r2, [pc, #156]	; (80017f4 <main+0x13c>)
 8001756:	2100      	movs	r1, #0
 8001758:	4827      	ldr	r0, [pc, #156]	; (80017f8 <main+0x140>)
 800175a:	f008 fa0f 	bl	8009b7c <osThreadNew>
 800175e:	4603      	mov	r3, r0
 8001760:	4a26      	ldr	r2, [pc, #152]	; (80017fc <main+0x144>)
 8001762:	6013      	str	r3, [r2, #0]

	/* creation of EncoderTask2 */
	EncoderTask2Handle = osThreadNew(encoder_Task2, NULL, &EncoderTask2_attributes);
 8001764:	4a26      	ldr	r2, [pc, #152]	; (8001800 <main+0x148>)
 8001766:	2100      	movs	r1, #0
 8001768:	4826      	ldr	r0, [pc, #152]	; (8001804 <main+0x14c>)
 800176a:	f008 fa07 	bl	8009b7c <osThreadNew>
 800176e:	4603      	mov	r3, r0
 8001770:	4a25      	ldr	r2, [pc, #148]	; (8001808 <main+0x150>)
 8001772:	6013      	str	r3, [r2, #0]

	/* creation of Ultrasonicsenso */
	UltrasonicsensoHandle = osThreadNew(Ultrasonicsensor, NULL, &Ultrasonicsenso_attributes);
 8001774:	4a25      	ldr	r2, [pc, #148]	; (800180c <main+0x154>)
 8001776:	2100      	movs	r1, #0
 8001778:	4825      	ldr	r0, [pc, #148]	; (8001810 <main+0x158>)
 800177a:	f008 f9ff 	bl	8009b7c <osThreadNew>
 800177e:	4603      	mov	r3, r0
 8001780:	4a24      	ldr	r2, [pc, #144]	; (8001814 <main+0x15c>)
 8001782:	6013      	str	r3, [r2, #0]

	/* creation of GyroTask */
	GyroTaskHandle = osThreadNew(Gyroscopetask, NULL, &GyroTask_attributes);
 8001784:	4a24      	ldr	r2, [pc, #144]	; (8001818 <main+0x160>)
 8001786:	2100      	movs	r1, #0
 8001788:	4824      	ldr	r0, [pc, #144]	; (800181c <main+0x164>)
 800178a:	f008 f9f7 	bl	8009b7c <osThreadNew>
 800178e:	4603      	mov	r3, r0
 8001790:	4a23      	ldr	r2, [pc, #140]	; (8001820 <main+0x168>)
 8001792:	6013      	str	r3, [r2, #0]

	/* creation of PIDControl */
	PIDControlHandle = osThreadNew(PID, NULL, &PIDControl_attributes);
 8001794:	4a23      	ldr	r2, [pc, #140]	; (8001824 <main+0x16c>)
 8001796:	2100      	movs	r1, #0
 8001798:	4823      	ldr	r0, [pc, #140]	; (8001828 <main+0x170>)
 800179a:	f008 f9ef 	bl	8009b7c <osThreadNew>
 800179e:	4603      	mov	r3, r0
 80017a0:	4a22      	ldr	r2, [pc, #136]	; (800182c <main+0x174>)
 80017a2:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 80017a4:	f008 f9c4 	bl	8009b30 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1)
 80017a8:	e7fe      	b.n	80017a8 <main+0xf0>
 80017aa:	bf00      	nop
 80017ac:	20000000 	.word	0x20000000
 80017b0:	200008cc 	.word	0x200008cc
 80017b4:	20000860 	.word	0x20000860
 80017b8:	080115c4 	.word	0x080115c4
 80017bc:	08003051 	.word	0x08003051
 80017c0:	200008a4 	.word	0x200008a4
 80017c4:	080115e8 	.word	0x080115e8
 80017c8:	08003591 	.word	0x08003591
 80017cc:	200008a8 	.word	0x200008a8
 80017d0:	0801160c 	.word	0x0801160c
 80017d4:	080035f5 	.word	0x080035f5
 80017d8:	200008ac 	.word	0x200008ac
 80017dc:	08011630 	.word	0x08011630
 80017e0:	08003a89 	.word	0x08003a89
 80017e4:	200008b0 	.word	0x200008b0
 80017e8:	08011654 	.word	0x08011654
 80017ec:	08003ca1 	.word	0x08003ca1
 80017f0:	200008b4 	.word	0x200008b4
 80017f4:	08011678 	.word	0x08011678
 80017f8:	08003cb1 	.word	0x08003cb1
 80017fc:	200008b8 	.word	0x200008b8
 8001800:	0801169c 	.word	0x0801169c
 8001804:	08003cc1 	.word	0x08003cc1
 8001808:	200008bc 	.word	0x200008bc
 800180c:	080116c0 	.word	0x080116c0
 8001810:	08003cd1 	.word	0x08003cd1
 8001814:	200008c0 	.word	0x200008c0
 8001818:	080116e4 	.word	0x080116e4
 800181c:	08003de1 	.word	0x08003de1
 8001820:	200008c4 	.word	0x200008c4
 8001824:	08011708 	.word	0x08011708
 8001828:	08003fa5 	.word	0x08003fa5
 800182c:	200008c8 	.word	0x200008c8

08001830 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b094      	sub	sp, #80	; 0x50
 8001834:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001836:	f107 0320 	add.w	r3, r7, #32
 800183a:	2230      	movs	r2, #48	; 0x30
 800183c:	2100      	movs	r1, #0
 800183e:	4618      	mov	r0, r3
 8001840:	f00a ff88 	bl	800c754 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001844:	f107 030c 	add.w	r3, r7, #12
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]
 8001852:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001854:	2300      	movs	r3, #0
 8001856:	60bb      	str	r3, [r7, #8]
 8001858:	4b22      	ldr	r3, [pc, #136]	; (80018e4 <SystemClock_Config+0xb4>)
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	4a21      	ldr	r2, [pc, #132]	; (80018e4 <SystemClock_Config+0xb4>)
 800185e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001862:	6413      	str	r3, [r2, #64]	; 0x40
 8001864:	4b1f      	ldr	r3, [pc, #124]	; (80018e4 <SystemClock_Config+0xb4>)
 8001866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001868:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800186c:	60bb      	str	r3, [r7, #8]
 800186e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001870:	2300      	movs	r3, #0
 8001872:	607b      	str	r3, [r7, #4]
 8001874:	4b1c      	ldr	r3, [pc, #112]	; (80018e8 <SystemClock_Config+0xb8>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a1b      	ldr	r2, [pc, #108]	; (80018e8 <SystemClock_Config+0xb8>)
 800187a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800187e:	6013      	str	r3, [r2, #0]
 8001880:	4b19      	ldr	r3, [pc, #100]	; (80018e8 <SystemClock_Config+0xb8>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800188c:	2302      	movs	r3, #2
 800188e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001890:	2301      	movs	r3, #1
 8001892:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001894:	2310      	movs	r3, #16
 8001896:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001898:	2300      	movs	r3, #0
 800189a:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800189c:	f107 0320 	add.w	r3, r7, #32
 80018a0:	4618      	mov	r0, r3
 80018a2:	f004 ff41 	bl	8006728 <HAL_RCC_OscConfig>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <SystemClock_Config+0x80>
	{
		Error_Handler();
 80018ac:	f002 fb82 	bl	8003fb4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018b0:	230f      	movs	r3, #15
 80018b2:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80018b4:	2300      	movs	r3, #0
 80018b6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018b8:	2300      	movs	r3, #0
 80018ba:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80018bc:	2300      	movs	r3, #0
 80018be:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018c0:	2300      	movs	r3, #0
 80018c2:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80018c4:	f107 030c 	add.w	r3, r7, #12
 80018c8:	2100      	movs	r1, #0
 80018ca:	4618      	mov	r0, r3
 80018cc:	f005 f9a4 	bl	8006c18 <HAL_RCC_ClockConfig>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <SystemClock_Config+0xaa>
	{
		Error_Handler();
 80018d6:	f002 fb6d 	bl	8003fb4 <Error_Handler>
	}
}
 80018da:	bf00      	nop
 80018dc:	3750      	adds	r7, #80	; 0x50
 80018de:	46bd      	mov	sp, r7
 80018e0:	bd80      	pop	{r7, pc}
 80018e2:	bf00      	nop
 80018e4:	40023800 	.word	0x40023800
 80018e8:	40007000 	.word	0x40007000

080018ec <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b084      	sub	sp, #16
 80018f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 80018f2:	463b      	mov	r3, r7
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 80018fe:	4b21      	ldr	r3, [pc, #132]	; (8001984 <MX_ADC1_Init+0x98>)
 8001900:	4a21      	ldr	r2, [pc, #132]	; (8001988 <MX_ADC1_Init+0x9c>)
 8001902:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001904:	4b1f      	ldr	r3, [pc, #124]	; (8001984 <MX_ADC1_Init+0x98>)
 8001906:	2200      	movs	r2, #0
 8001908:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800190a:	4b1e      	ldr	r3, [pc, #120]	; (8001984 <MX_ADC1_Init+0x98>)
 800190c:	2200      	movs	r2, #0
 800190e:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = DISABLE;
 8001910:	4b1c      	ldr	r3, [pc, #112]	; (8001984 <MX_ADC1_Init+0x98>)
 8001912:	2200      	movs	r2, #0
 8001914:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8001916:	4b1b      	ldr	r3, [pc, #108]	; (8001984 <MX_ADC1_Init+0x98>)
 8001918:	2200      	movs	r2, #0
 800191a:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 800191c:	4b19      	ldr	r3, [pc, #100]	; (8001984 <MX_ADC1_Init+0x98>)
 800191e:	2200      	movs	r2, #0
 8001920:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001924:	4b17      	ldr	r3, [pc, #92]	; (8001984 <MX_ADC1_Init+0x98>)
 8001926:	2200      	movs	r2, #0
 8001928:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800192a:	4b16      	ldr	r3, [pc, #88]	; (8001984 <MX_ADC1_Init+0x98>)
 800192c:	4a17      	ldr	r2, [pc, #92]	; (800198c <MX_ADC1_Init+0xa0>)
 800192e:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001930:	4b14      	ldr	r3, [pc, #80]	; (8001984 <MX_ADC1_Init+0x98>)
 8001932:	2200      	movs	r2, #0
 8001934:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 1;
 8001936:	4b13      	ldr	r3, [pc, #76]	; (8001984 <MX_ADC1_Init+0x98>)
 8001938:	2201      	movs	r2, #1
 800193a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800193c:	4b11      	ldr	r3, [pc, #68]	; (8001984 <MX_ADC1_Init+0x98>)
 800193e:	2200      	movs	r2, #0
 8001940:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001944:	4b0f      	ldr	r3, [pc, #60]	; (8001984 <MX_ADC1_Init+0x98>)
 8001946:	2201      	movs	r2, #1
 8001948:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800194a:	480e      	ldr	r0, [pc, #56]	; (8001984 <MX_ADC1_Init+0x98>)
 800194c:	f002 ffd4 	bl	80048f8 <HAL_ADC_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_ADC1_Init+0x6e>
	{
		Error_Handler();
 8001956:	f002 fb2d 	bl	8003fb4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_11;
 800195a:	230b      	movs	r3, #11
 800195c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 800195e:	2301      	movs	r3, #1
 8001960:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001962:	2300      	movs	r3, #0
 8001964:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001966:	463b      	mov	r3, r7
 8001968:	4619      	mov	r1, r3
 800196a:	4806      	ldr	r0, [pc, #24]	; (8001984 <MX_ADC1_Init+0x98>)
 800196c:	f003 f9a6 	bl	8004cbc <HAL_ADC_ConfigChannel>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <MX_ADC1_Init+0x8e>
	{
		Error_Handler();
 8001976:	f002 fb1d 	bl	8003fb4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800197a:	bf00      	nop
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000614 	.word	0x20000614
 8001988:	40012000 	.word	0x40012000
 800198c:	0f000001 	.word	0x0f000001

08001990 <MX_ADC2_Init>:
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8001996:	463b      	mov	r3, r7
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]
 800199c:	605a      	str	r2, [r3, #4]
 800199e:	609a      	str	r2, [r3, #8]
 80019a0:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC2_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 80019a2:	4b21      	ldr	r3, [pc, #132]	; (8001a28 <MX_ADC2_Init+0x98>)
 80019a4:	4a21      	ldr	r2, [pc, #132]	; (8001a2c <MX_ADC2_Init+0x9c>)
 80019a6:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80019a8:	4b1f      	ldr	r3, [pc, #124]	; (8001a28 <MX_ADC2_Init+0x98>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80019ae:	4b1e      	ldr	r3, [pc, #120]	; (8001a28 <MX_ADC2_Init+0x98>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 80019b4:	4b1c      	ldr	r3, [pc, #112]	; (8001a28 <MX_ADC2_Init+0x98>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = DISABLE;
 80019ba:	4b1b      	ldr	r3, [pc, #108]	; (8001a28 <MX_ADC2_Init+0x98>)
 80019bc:	2200      	movs	r2, #0
 80019be:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 80019c0:	4b19      	ldr	r3, [pc, #100]	; (8001a28 <MX_ADC2_Init+0x98>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80019c8:	4b17      	ldr	r3, [pc, #92]	; (8001a28 <MX_ADC2_Init+0x98>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80019ce:	4b16      	ldr	r3, [pc, #88]	; (8001a28 <MX_ADC2_Init+0x98>)
 80019d0:	4a17      	ldr	r2, [pc, #92]	; (8001a30 <MX_ADC2_Init+0xa0>)
 80019d2:	629a      	str	r2, [r3, #40]	; 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80019d4:	4b14      	ldr	r3, [pc, #80]	; (8001a28 <MX_ADC2_Init+0x98>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 80019da:	4b13      	ldr	r3, [pc, #76]	; (8001a28 <MX_ADC2_Init+0x98>)
 80019dc:	2201      	movs	r2, #1
 80019de:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 80019e0:	4b11      	ldr	r3, [pc, #68]	; (8001a28 <MX_ADC2_Init+0x98>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80019e8:	4b0f      	ldr	r3, [pc, #60]	; (8001a28 <MX_ADC2_Init+0x98>)
 80019ea:	2201      	movs	r2, #1
 80019ec:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80019ee:	480e      	ldr	r0, [pc, #56]	; (8001a28 <MX_ADC2_Init+0x98>)
 80019f0:	f002 ff82 	bl	80048f8 <HAL_ADC_Init>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_ADC2_Init+0x6e>
	{
		Error_Handler();
 80019fa:	f002 fadb 	bl	8003fb4 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_12;
 80019fe:	230c      	movs	r3, #12
 8001a00:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8001a02:	2301      	movs	r3, #1
 8001a04:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001a06:	2300      	movs	r3, #0
 8001a08:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001a0a:	463b      	mov	r3, r7
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4806      	ldr	r0, [pc, #24]	; (8001a28 <MX_ADC2_Init+0x98>)
 8001a10:	f003 f954 	bl	8004cbc <HAL_ADC_ConfigChannel>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <MX_ADC2_Init+0x8e>
	{
		Error_Handler();
 8001a1a:	f002 facb 	bl	8003fb4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8001a1e:	bf00      	nop
 8001a20:	3710      	adds	r7, #16
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	2000065c 	.word	0x2000065c
 8001a2c:	40012100 	.word	0x40012100
 8001a30:	0f000001 	.word	0x0f000001

08001a34 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001a38:	4b12      	ldr	r3, [pc, #72]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a3a:	4a13      	ldr	r2, [pc, #76]	; (8001a88 <MX_I2C1_Init+0x54>)
 8001a3c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001a3e:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a40:	4a12      	ldr	r2, [pc, #72]	; (8001a8c <MX_I2C1_Init+0x58>)
 8001a42:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a44:	4b0f      	ldr	r3, [pc, #60]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001a4a:	4b0e      	ldr	r3, [pc, #56]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a50:	4b0c      	ldr	r3, [pc, #48]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a52:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001a56:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a58:	4b0a      	ldr	r3, [pc, #40]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001a5e:	4b09      	ldr	r3, [pc, #36]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a64:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a6a:	4b06      	ldr	r3, [pc, #24]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001a70:	4804      	ldr	r0, [pc, #16]	; (8001a84 <MX_I2C1_Init+0x50>)
 8001a72:	f003 fe9b 	bl	80057ac <HAL_I2C_Init>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d001      	beq.n	8001a80 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8001a7c:	f002 fa9a 	bl	8003fb4 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001a80:	bf00      	nop
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	200006a4 	.word	0x200006a4
 8001a88:	40005400 	.word	0x40005400
 8001a8c:	000186a0 	.word	0x000186a0

08001a90 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b096      	sub	sp, #88	; 0x58
 8001a94:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a96:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	605a      	str	r2, [r3, #4]
 8001aa0:	609a      	str	r2, [r3, #8]
 8001aa2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aa4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
 8001aac:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001aae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	601a      	str	r2, [r3, #0]
 8001ab6:	605a      	str	r2, [r3, #4]
 8001ab8:	609a      	str	r2, [r3, #8]
 8001aba:	60da      	str	r2, [r3, #12]
 8001abc:	611a      	str	r2, [r3, #16]
 8001abe:	615a      	str	r2, [r3, #20]
 8001ac0:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001ac2:	1d3b      	adds	r3, r7, #4
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	2100      	movs	r1, #0
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f00a fe43 	bl	800c754 <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001ace:	4b3d      	ldr	r3, [pc, #244]	; (8001bc4 <MX_TIM1_Init+0x134>)
 8001ad0:	4a3d      	ldr	r2, [pc, #244]	; (8001bc8 <MX_TIM1_Init+0x138>)
 8001ad2:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 160;
 8001ad4:	4b3b      	ldr	r3, [pc, #236]	; (8001bc4 <MX_TIM1_Init+0x134>)
 8001ad6:	22a0      	movs	r2, #160	; 0xa0
 8001ad8:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ada:	4b3a      	ldr	r3, [pc, #232]	; (8001bc4 <MX_TIM1_Init+0x134>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 1000;
 8001ae0:	4b38      	ldr	r3, [pc, #224]	; (8001bc4 <MX_TIM1_Init+0x134>)
 8001ae2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001ae6:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ae8:	4b36      	ldr	r3, [pc, #216]	; (8001bc4 <MX_TIM1_Init+0x134>)
 8001aea:	2200      	movs	r2, #0
 8001aec:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001aee:	4b35      	ldr	r3, [pc, #212]	; (8001bc4 <MX_TIM1_Init+0x134>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001af4:	4b33      	ldr	r3, [pc, #204]	; (8001bc4 <MX_TIM1_Init+0x134>)
 8001af6:	2280      	movs	r2, #128	; 0x80
 8001af8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001afa:	4832      	ldr	r0, [pc, #200]	; (8001bc4 <MX_TIM1_Init+0x134>)
 8001afc:	f005 fa6c 	bl	8006fd8 <HAL_TIM_Base_Init>
 8001b00:	4603      	mov	r3, r0
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d001      	beq.n	8001b0a <MX_TIM1_Init+0x7a>
	{
		Error_Handler();
 8001b06:	f002 fa55 	bl	8003fb4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b0a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b0e:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b10:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b14:	4619      	mov	r1, r3
 8001b16:	482b      	ldr	r0, [pc, #172]	; (8001bc4 <MX_TIM1_Init+0x134>)
 8001b18:	f006 f8ea 	bl	8007cf0 <HAL_TIM_ConfigClockSource>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_TIM1_Init+0x96>
	{
		Error_Handler();
 8001b22:	f002 fa47 	bl	8003fb4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b26:	4827      	ldr	r0, [pc, #156]	; (8001bc4 <MX_TIM1_Init+0x134>)
 8001b28:	f005 faa5 	bl	8007076 <HAL_TIM_PWM_Init>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d001      	beq.n	8001b36 <MX_TIM1_Init+0xa6>
	{
		Error_Handler();
 8001b32:	f002 fa3f 	bl	8003fb4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b36:	2300      	movs	r3, #0
 8001b38:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b3e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b42:	4619      	mov	r1, r3
 8001b44:	481f      	ldr	r0, [pc, #124]	; (8001bc4 <MX_TIM1_Init+0x134>)
 8001b46:	f006 fe41 	bl	80087cc <HAL_TIMEx_MasterConfigSynchronization>
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d001      	beq.n	8001b54 <MX_TIM1_Init+0xc4>
	{
		Error_Handler();
 8001b50:	f002 fa30 	bl	8003fb4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b54:	2360      	movs	r3, #96	; 0x60
 8001b56:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8001b58:	2300      	movs	r3, #0
 8001b5a:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b60:	2300      	movs	r3, #0
 8001b62:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001b64:	2300      	movs	r3, #0
 8001b66:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b70:	220c      	movs	r2, #12
 8001b72:	4619      	mov	r1, r3
 8001b74:	4813      	ldr	r0, [pc, #76]	; (8001bc4 <MX_TIM1_Init+0x134>)
 8001b76:	f005 fff9 	bl	8007b6c <HAL_TIM_PWM_ConfigChannel>
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d001      	beq.n	8001b84 <MX_TIM1_Init+0xf4>
	{
		Error_Handler();
 8001b80:	f002 fa18 	bl	8003fb4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001b84:	2300      	movs	r3, #0
 8001b86:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001b90:	2300      	movs	r3, #0
 8001b92:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001b98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b9c:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001ba2:	1d3b      	adds	r3, r7, #4
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4807      	ldr	r0, [pc, #28]	; (8001bc4 <MX_TIM1_Init+0x134>)
 8001ba8:	f006 fe8c 	bl	80088c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001bac:	4603      	mov	r3, r0
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d001      	beq.n	8001bb6 <MX_TIM1_Init+0x126>
	{
		Error_Handler();
 8001bb2:	f002 f9ff 	bl	8003fb4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 8001bb6:	4803      	ldr	r0, [pc, #12]	; (8001bc4 <MX_TIM1_Init+0x134>)
 8001bb8:	f002 fc30 	bl	800441c <HAL_TIM_MspPostInit>

}
 8001bbc:	bf00      	nop
 8001bbe:	3758      	adds	r7, #88	; 0x58
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	200006f8 	.word	0x200006f8
 8001bc8:	40010000 	.word	0x40010000

08001bcc <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08c      	sub	sp, #48	; 0x30
 8001bd0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 8001bd2:	f107 030c 	add.w	r3, r7, #12
 8001bd6:	2224      	movs	r2, #36	; 0x24
 8001bd8:	2100      	movs	r1, #0
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f00a fdba 	bl	800c754 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001be8:	4b21      	ldr	r3, [pc, #132]	; (8001c70 <MX_TIM2_Init+0xa4>)
 8001bea:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001bee:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 8001bf0:	4b1f      	ldr	r3, [pc, #124]	; (8001c70 <MX_TIM2_Init+0xa4>)
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf6:	4b1e      	ldr	r3, [pc, #120]	; (8001c70 <MX_TIM2_Init+0xa4>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8001bfc:	4b1c      	ldr	r3, [pc, #112]	; (8001c70 <MX_TIM2_Init+0xa4>)
 8001bfe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c02:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c04:	4b1a      	ldr	r3, [pc, #104]	; (8001c70 <MX_TIM2_Init+0xa4>)
 8001c06:	2200      	movs	r2, #0
 8001c08:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c0a:	4b19      	ldr	r3, [pc, #100]	; (8001c70 <MX_TIM2_Init+0xa4>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c10:	2303      	movs	r3, #3
 8001c12:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c14:	2300      	movs	r3, #0
 8001c16:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 8001c20:	230a      	movs	r3, #10
 8001c22:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c24:	2300      	movs	r3, #0
 8001c26:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 10;
 8001c30:	230a      	movs	r3, #10
 8001c32:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001c34:	f107 030c 	add.w	r3, r7, #12
 8001c38:	4619      	mov	r1, r3
 8001c3a:	480d      	ldr	r0, [pc, #52]	; (8001c70 <MX_TIM2_Init+0xa4>)
 8001c3c:	f005 fcbe 	bl	80075bc <HAL_TIM_Encoder_Init>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d001      	beq.n	8001c4a <MX_TIM2_Init+0x7e>
	{
		Error_Handler();
 8001c46:	f002 f9b5 	bl	8003fb4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001c52:	1d3b      	adds	r3, r7, #4
 8001c54:	4619      	mov	r1, r3
 8001c56:	4806      	ldr	r0, [pc, #24]	; (8001c70 <MX_TIM2_Init+0xa4>)
 8001c58:	f006 fdb8 	bl	80087cc <HAL_TIMEx_MasterConfigSynchronization>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_TIM2_Init+0x9a>
	{
		Error_Handler();
 8001c62:	f002 f9a7 	bl	8003fb4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001c66:	bf00      	nop
 8001c68:	3730      	adds	r7, #48	; 0x30
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000740 	.word	0x20000740

08001c74 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b08c      	sub	sp, #48	; 0x30
 8001c78:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 8001c7a:	f107 030c 	add.w	r3, r7, #12
 8001c7e:	2224      	movs	r2, #36	; 0x24
 8001c80:	2100      	movs	r1, #0
 8001c82:	4618      	mov	r0, r3
 8001c84:	f00a fd66 	bl	800c754 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c88:	1d3b      	adds	r3, r7, #4
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001c90:	4b20      	ldr	r3, [pc, #128]	; (8001d14 <MX_TIM3_Init+0xa0>)
 8001c92:	4a21      	ldr	r2, [pc, #132]	; (8001d18 <MX_TIM3_Init+0xa4>)
 8001c94:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8001c96:	4b1f      	ldr	r3, [pc, #124]	; (8001d14 <MX_TIM3_Init+0xa0>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9c:	4b1d      	ldr	r3, [pc, #116]	; (8001d14 <MX_TIM3_Init+0xa0>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8001ca2:	4b1c      	ldr	r3, [pc, #112]	; (8001d14 <MX_TIM3_Init+0xa0>)
 8001ca4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ca8:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001caa:	4b1a      	ldr	r3, [pc, #104]	; (8001d14 <MX_TIM3_Init+0xa0>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb0:	4b18      	ldr	r3, [pc, #96]	; (8001d14 <MX_TIM3_Init+0xa0>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 10;
 8001cc6:	230a      	movs	r3, #10
 8001cc8:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 10;
 8001cd6:	230a      	movs	r3, #10
 8001cd8:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001cda:	f107 030c 	add.w	r3, r7, #12
 8001cde:	4619      	mov	r1, r3
 8001ce0:	480c      	ldr	r0, [pc, #48]	; (8001d14 <MX_TIM3_Init+0xa0>)
 8001ce2:	f005 fc6b 	bl	80075bc <HAL_TIM_Encoder_Init>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d001      	beq.n	8001cf0 <MX_TIM3_Init+0x7c>
	{
		Error_Handler();
 8001cec:	f002 f962 	bl	8003fb4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cf8:	1d3b      	adds	r3, r7, #4
 8001cfa:	4619      	mov	r1, r3
 8001cfc:	4805      	ldr	r0, [pc, #20]	; (8001d14 <MX_TIM3_Init+0xa0>)
 8001cfe:	f006 fd65 	bl	80087cc <HAL_TIMEx_MasterConfigSynchronization>
 8001d02:	4603      	mov	r3, r0
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d001      	beq.n	8001d0c <MX_TIM3_Init+0x98>
	{
		Error_Handler();
 8001d08:	f002 f954 	bl	8003fb4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8001d0c:	bf00      	nop
 8001d0e:	3730      	adds	r7, #48	; 0x30
 8001d10:	46bd      	mov	sp, r7
 8001d12:	bd80      	pop	{r7, pc}
 8001d14:	20000788 	.word	0x20000788
 8001d18:	40000400 	.word	0x40000400

08001d1c <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b08a      	sub	sp, #40	; 0x28
 8001d20:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d22:	f107 0318 	add.w	r3, r7, #24
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
 8001d2c:	609a      	str	r2, [r3, #8]
 8001d2e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d30:	f107 0310 	add.w	r3, r7, #16
 8001d34:	2200      	movs	r2, #0
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = {0};
 8001d3a:	463b      	mov	r3, r7
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8001d46:	4b2b      	ldr	r3, [pc, #172]	; (8001df4 <MX_TIM4_Init+0xd8>)
 8001d48:	4a2b      	ldr	r2, [pc, #172]	; (8001df8 <MX_TIM4_Init+0xdc>)
 8001d4a:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 16-1;
 8001d4c:	4b29      	ldr	r3, [pc, #164]	; (8001df4 <MX_TIM4_Init+0xd8>)
 8001d4e:	220f      	movs	r2, #15
 8001d50:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d52:	4b28      	ldr	r3, [pc, #160]	; (8001df4 <MX_TIM4_Init+0xd8>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8001d58:	4b26      	ldr	r3, [pc, #152]	; (8001df4 <MX_TIM4_Init+0xd8>)
 8001d5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d5e:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d60:	4b24      	ldr	r3, [pc, #144]	; (8001df4 <MX_TIM4_Init+0xd8>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d66:	4b23      	ldr	r3, [pc, #140]	; (8001df4 <MX_TIM4_Init+0xd8>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001d6c:	4821      	ldr	r0, [pc, #132]	; (8001df4 <MX_TIM4_Init+0xd8>)
 8001d6e:	f005 f933 	bl	8006fd8 <HAL_TIM_Base_Init>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <MX_TIM4_Init+0x60>
	{
		Error_Handler();
 8001d78:	f002 f91c 	bl	8003fb4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d7c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d80:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001d82:	f107 0318 	add.w	r3, r7, #24
 8001d86:	4619      	mov	r1, r3
 8001d88:	481a      	ldr	r0, [pc, #104]	; (8001df4 <MX_TIM4_Init+0xd8>)
 8001d8a:	f005 ffb1 	bl	8007cf0 <HAL_TIM_ConfigClockSource>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_TIM4_Init+0x7c>
	{
		Error_Handler();
 8001d94:	f002 f90e 	bl	8003fb4 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim4) != HAL_OK)
 8001d98:	4816      	ldr	r0, [pc, #88]	; (8001df4 <MX_TIM4_Init+0xd8>)
 8001d9a:	f005 fa8d 	bl	80072b8 <HAL_TIM_IC_Init>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <MX_TIM4_Init+0x8c>
	{
		Error_Handler();
 8001da4:	f002 f906 	bl	8003fb4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001da8:	2300      	movs	r3, #0
 8001daa:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dac:	2300      	movs	r3, #0
 8001dae:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001db0:	f107 0310 	add.w	r3, r7, #16
 8001db4:	4619      	mov	r1, r3
 8001db6:	480f      	ldr	r0, [pc, #60]	; (8001df4 <MX_TIM4_Init+0xd8>)
 8001db8:	f006 fd08 	bl	80087cc <HAL_TIMEx_MasterConfigSynchronization>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d001      	beq.n	8001dc6 <MX_TIM4_Init+0xaa>
	{
		Error_Handler();
 8001dc2:	f002 f8f7 	bl	8003fb4 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001dc6:	230a      	movs	r3, #10
 8001dc8:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim4, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001dd6:	463b      	mov	r3, r7
 8001dd8:	2200      	movs	r2, #0
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4805      	ldr	r0, [pc, #20]	; (8001df4 <MX_TIM4_Init+0xd8>)
 8001dde:	f005 fe29 	bl	8007a34 <HAL_TIM_IC_ConfigChannel>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d001      	beq.n	8001dec <MX_TIM4_Init+0xd0>
	{
		Error_Handler();
 8001de8:	f002 f8e4 	bl	8003fb4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8001dec:	bf00      	nop
 8001dee:	3728      	adds	r7, #40	; 0x28
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	200007d0 	.word	0x200007d0
 8001df8:	40000800 	.word	0x40000800

08001dfc <MX_TIM8_Init>:
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b096      	sub	sp, #88	; 0x58
 8001e00:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e06:	2200      	movs	r2, #0
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	605a      	str	r2, [r3, #4]
 8001e0c:	609a      	str	r2, [r3, #8]
 8001e0e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e10:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e1e:	2200      	movs	r2, #0
 8001e20:	601a      	str	r2, [r3, #0]
 8001e22:	605a      	str	r2, [r3, #4]
 8001e24:	609a      	str	r2, [r3, #8]
 8001e26:	60da      	str	r2, [r3, #12]
 8001e28:	611a      	str	r2, [r3, #16]
 8001e2a:	615a      	str	r2, [r3, #20]
 8001e2c:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001e2e:	1d3b      	adds	r3, r7, #4
 8001e30:	2220      	movs	r2, #32
 8001e32:	2100      	movs	r1, #0
 8001e34:	4618      	mov	r0, r3
 8001e36:	f00a fc8d 	bl	800c754 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8001e3a:	4b43      	ldr	r3, [pc, #268]	; (8001f48 <MX_TIM8_Init+0x14c>)
 8001e3c:	4a43      	ldr	r2, [pc, #268]	; (8001f4c <MX_TIM8_Init+0x150>)
 8001e3e:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 0;
 8001e40:	4b41      	ldr	r3, [pc, #260]	; (8001f48 <MX_TIM8_Init+0x14c>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e46:	4b40      	ldr	r3, [pc, #256]	; (8001f48 <MX_TIM8_Init+0x14c>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 7199;
 8001e4c:	4b3e      	ldr	r3, [pc, #248]	; (8001f48 <MX_TIM8_Init+0x14c>)
 8001e4e:	f641 421f 	movw	r2, #7199	; 0x1c1f
 8001e52:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e54:	4b3c      	ldr	r3, [pc, #240]	; (8001f48 <MX_TIM8_Init+0x14c>)
 8001e56:	2200      	movs	r2, #0
 8001e58:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8001e5a:	4b3b      	ldr	r3, [pc, #236]	; (8001f48 <MX_TIM8_Init+0x14c>)
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e60:	4b39      	ldr	r3, [pc, #228]	; (8001f48 <MX_TIM8_Init+0x14c>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001e66:	4838      	ldr	r0, [pc, #224]	; (8001f48 <MX_TIM8_Init+0x14c>)
 8001e68:	f005 f8b6 	bl	8006fd8 <HAL_TIM_Base_Init>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_TIM8_Init+0x7a>
	{
		Error_Handler();
 8001e72:	f002 f89f 	bl	8003fb4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e7a:	64bb      	str	r3, [r7, #72]	; 0x48
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001e7c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001e80:	4619      	mov	r1, r3
 8001e82:	4831      	ldr	r0, [pc, #196]	; (8001f48 <MX_TIM8_Init+0x14c>)
 8001e84:	f005 ff34 	bl	8007cf0 <HAL_TIM_ConfigClockSource>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_TIM8_Init+0x96>
	{
		Error_Handler();
 8001e8e:	f002 f891 	bl	8003fb4 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001e92:	482d      	ldr	r0, [pc, #180]	; (8001f48 <MX_TIM8_Init+0x14c>)
 8001e94:	f005 f8ef 	bl	8007076 <HAL_TIM_PWM_Init>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_TIM8_Init+0xa6>
	{
		Error_Handler();
 8001e9e:	f002 f889 	bl	8003fb4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001eaa:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001eae:	4619      	mov	r1, r3
 8001eb0:	4825      	ldr	r0, [pc, #148]	; (8001f48 <MX_TIM8_Init+0x14c>)
 8001eb2:	f006 fc8b 	bl	80087cc <HAL_TIMEx_MasterConfigSynchronization>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <MX_TIM8_Init+0xc4>
	{
		Error_Handler();
 8001ebc:	f002 f87a 	bl	8003fb4 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ec0:	2360      	movs	r3, #96	; 0x60
 8001ec2:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001ecc:	2300      	movs	r3, #0
 8001ece:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001ed4:	2300      	movs	r3, #0
 8001ed6:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001ed8:	2300      	movs	r3, #0
 8001eda:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	4818      	ldr	r0, [pc, #96]	; (8001f48 <MX_TIM8_Init+0x14c>)
 8001ee6:	f005 fe41 	bl	8007b6c <HAL_TIM_PWM_ConfigChannel>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_TIM8_Init+0xf8>
	{
		Error_Handler();
 8001ef0:	f002 f860 	bl	8003fb4 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001ef4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ef8:	2204      	movs	r2, #4
 8001efa:	4619      	mov	r1, r3
 8001efc:	4812      	ldr	r0, [pc, #72]	; (8001f48 <MX_TIM8_Init+0x14c>)
 8001efe:	f005 fe35 	bl	8007b6c <HAL_TIM_PWM_ConfigChannel>
 8001f02:	4603      	mov	r3, r0
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d001      	beq.n	8001f0c <MX_TIM8_Init+0x110>
	{
		Error_Handler();
 8001f08:	f002 f854 	bl	8003fb4 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001f10:	2300      	movs	r3, #0
 8001f12:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001f14:	2300      	movs	r3, #0
 8001f16:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001f20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f24:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001f26:	2300      	movs	r3, #0
 8001f28:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001f2a:	1d3b      	adds	r3, r7, #4
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4806      	ldr	r0, [pc, #24]	; (8001f48 <MX_TIM8_Init+0x14c>)
 8001f30:	f006 fcc8 	bl	80088c4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_TIM8_Init+0x142>
	{
		Error_Handler();
 8001f3a:	f002 f83b 	bl	8003fb4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */

}
 8001f3e:	bf00      	nop
 8001f40:	3758      	adds	r7, #88	; 0x58
 8001f42:	46bd      	mov	sp, r7
 8001f44:	bd80      	pop	{r7, pc}
 8001f46:	bf00      	nop
 8001f48:	20000818 	.word	0x20000818
 8001f4c:	40010400 	.word	0x40010400

08001f50 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8001f54:	4b11      	ldr	r3, [pc, #68]	; (8001f9c <MX_USART3_UART_Init+0x4c>)
 8001f56:	4a12      	ldr	r2, [pc, #72]	; (8001fa0 <MX_USART3_UART_Init+0x50>)
 8001f58:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8001f5a:	4b10      	ldr	r3, [pc, #64]	; (8001f9c <MX_USART3_UART_Init+0x4c>)
 8001f5c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f60:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f62:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <MX_USART3_UART_Init+0x4c>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001f68:	4b0c      	ldr	r3, [pc, #48]	; (8001f9c <MX_USART3_UART_Init+0x4c>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001f6e:	4b0b      	ldr	r3, [pc, #44]	; (8001f9c <MX_USART3_UART_Init+0x4c>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8001f74:	4b09      	ldr	r3, [pc, #36]	; (8001f9c <MX_USART3_UART_Init+0x4c>)
 8001f76:	220c      	movs	r2, #12
 8001f78:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f7a:	4b08      	ldr	r3, [pc, #32]	; (8001f9c <MX_USART3_UART_Init+0x4c>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f80:	4b06      	ldr	r3, [pc, #24]	; (8001f9c <MX_USART3_UART_Init+0x4c>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 8001f86:	4805      	ldr	r0, [pc, #20]	; (8001f9c <MX_USART3_UART_Init+0x4c>)
 8001f88:	f006 fd02 	bl	8008990 <HAL_UART_Init>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8001f92:	f002 f80f 	bl	8003fb4 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8001f96:	bf00      	nop
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000860 	.word	0x20000860
 8001fa0:	40004800 	.word	0x40004800

08001fa4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	b08a      	sub	sp, #40	; 0x28
 8001fa8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001faa:	f107 0314 	add.w	r3, r7, #20
 8001fae:	2200      	movs	r2, #0
 8001fb0:	601a      	str	r2, [r3, #0]
 8001fb2:	605a      	str	r2, [r3, #4]
 8001fb4:	609a      	str	r2, [r3, #8]
 8001fb6:	60da      	str	r2, [r3, #12]
 8001fb8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	4b38      	ldr	r3, [pc, #224]	; (80020a0 <MX_GPIO_Init+0xfc>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc2:	4a37      	ldr	r2, [pc, #220]	; (80020a0 <MX_GPIO_Init+0xfc>)
 8001fc4:	f043 0310 	orr.w	r3, r3, #16
 8001fc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001fca:	4b35      	ldr	r3, [pc, #212]	; (80020a0 <MX_GPIO_Init+0xfc>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fce:	f003 0310 	and.w	r3, r3, #16
 8001fd2:	613b      	str	r3, [r7, #16]
 8001fd4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60fb      	str	r3, [r7, #12]
 8001fda:	4b31      	ldr	r3, [pc, #196]	; (80020a0 <MX_GPIO_Init+0xfc>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fde:	4a30      	ldr	r2, [pc, #192]	; (80020a0 <MX_GPIO_Init+0xfc>)
 8001fe0:	f043 0304 	orr.w	r3, r3, #4
 8001fe4:	6313      	str	r3, [r2, #48]	; 0x30
 8001fe6:	4b2e      	ldr	r3, [pc, #184]	; (80020a0 <MX_GPIO_Init+0xfc>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fea:	f003 0304 	and.w	r3, r3, #4
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	60bb      	str	r3, [r7, #8]
 8001ff6:	4b2a      	ldr	r3, [pc, #168]	; (80020a0 <MX_GPIO_Init+0xfc>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	4a29      	ldr	r2, [pc, #164]	; (80020a0 <MX_GPIO_Init+0xfc>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	6313      	str	r3, [r2, #48]	; 0x30
 8002002:	4b27      	ldr	r3, [pc, #156]	; (80020a0 <MX_GPIO_Init+0xfc>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	60bb      	str	r3, [r7, #8]
 800200c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	607b      	str	r3, [r7, #4]
 8002012:	4b23      	ldr	r3, [pc, #140]	; (80020a0 <MX_GPIO_Init+0xfc>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	4a22      	ldr	r2, [pc, #136]	; (80020a0 <MX_GPIO_Init+0xfc>)
 8002018:	f043 0308 	orr.w	r3, r3, #8
 800201c:	6313      	str	r3, [r2, #48]	; 0x30
 800201e:	4b20      	ldr	r3, [pc, #128]	; (80020a0 <MX_GPIO_Init+0xfc>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f003 0308 	and.w	r3, r3, #8
 8002026:	607b      	str	r3, [r7, #4]
 8002028:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	603b      	str	r3, [r7, #0]
 800202e:	4b1c      	ldr	r3, [pc, #112]	; (80020a0 <MX_GPIO_Init+0xfc>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a1b      	ldr	r2, [pc, #108]	; (80020a0 <MX_GPIO_Init+0xfc>)
 8002034:	f043 0302 	orr.w	r3, r3, #2
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b19      	ldr	r3, [pc, #100]	; (80020a0 <MX_GPIO_Init+0xfc>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	603b      	str	r3, [r7, #0]
 8002044:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8002046:	2200      	movs	r2, #0
 8002048:	f44f 615e 	mov.w	r1, #3552	; 0xde0
 800204c:	4815      	ldr	r0, [pc, #84]	; (80020a4 <MX_GPIO_Init+0x100>)
 800204e:	f003 fb93 	bl	8005778 <HAL_GPIO_WritePin>
			|LED3_Pin|Trig_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 8002052:	2200      	movs	r2, #0
 8002054:	213c      	movs	r1, #60	; 0x3c
 8002056:	4814      	ldr	r0, [pc, #80]	; (80020a8 <MX_GPIO_Init+0x104>)
 8002058:	f003 fb8e 	bl	8005778 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           LED3_Pin Trig_Pin */
	GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 800205c:	f44f 635e 	mov.w	r3, #3552	; 0xde0
 8002060:	617b      	str	r3, [r7, #20]
			|LED3_Pin|Trig_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002062:	2301      	movs	r3, #1
 8002064:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002066:	2300      	movs	r3, #0
 8002068:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206a:	2300      	movs	r3, #0
 800206c:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800206e:	f107 0314 	add.w	r3, r7, #20
 8002072:	4619      	mov	r1, r3
 8002074:	480b      	ldr	r0, [pc, #44]	; (80020a4 <MX_GPIO_Init+0x100>)
 8002076:	f003 f9e3 	bl	8005440 <HAL_GPIO_Init>

	/*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
	GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 800207a:	233c      	movs	r3, #60	; 0x3c
 800207c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800207e:	2301      	movs	r3, #1
 8002080:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002082:	2300      	movs	r3, #0
 8002084:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002086:	2302      	movs	r3, #2
 8002088:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208a:	f107 0314 	add.w	r3, r7, #20
 800208e:	4619      	mov	r1, r3
 8002090:	4805      	ldr	r0, [pc, #20]	; (80020a8 <MX_GPIO_Init+0x104>)
 8002092:	f003 f9d5 	bl	8005440 <HAL_GPIO_Init>

}
 8002096:	bf00      	nop
 8002098:	3728      	adds	r7, #40	; 0x28
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40023800 	.word	0x40023800
 80020a4:	40021000 	.word	0x40021000
 80020a8:	40020000 	.word	0x40020000

080020ac <stop>:

/* USER CODE BEGIN 4 */
void stop()
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
	//Stop both wheels
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,0);
 80020b0:	4b06      	ldr	r3, [pc, #24]	; (80020cc <stop+0x20>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2200      	movs	r2, #0
 80020b6:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,0);
 80020b8:	4b04      	ldr	r3, [pc, #16]	; (80020cc <stop+0x20>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2200      	movs	r2, #0
 80020be:	639a      	str	r2, [r3, #56]	; 0x38
}
 80020c0:	bf00      	nop
 80020c2:	46bd      	mov	sp, r7
 80020c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c8:	4770      	bx	lr
 80020ca:	bf00      	nop
 80020cc:	20000818 	.word	0x20000818

080020d0 <forward>:

void forward()
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
	//PID
	pwmvalL = pwmval-50;
 80020d4:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80020d8:	b29b      	uxth	r3, r3
 80020da:	3b32      	subs	r3, #50	; 0x32
 80020dc:	b29a      	uxth	r2, r3
 80020de:	4b15      	ldr	r3, [pc, #84]	; (8002134 <forward+0x64>)
 80020e0:	801a      	strh	r2, [r3, #0]
	pwmvalR = pwmval;
 80020e2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80020e6:	b29a      	uxth	r2, r3
 80020e8:	4b13      	ldr	r3, [pc, #76]	; (8002138 <forward+0x68>)
 80020ea:	801a      	strh	r2, [r3, #0]
	//servomotor_center();
	//Right motor
	HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_SET);
 80020ec:	2201      	movs	r2, #1
 80020ee:	2108      	movs	r1, #8
 80020f0:	4812      	ldr	r0, [pc, #72]	; (800213c <forward+0x6c>)
 80020f2:	f003 fb41 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_RESET);
 80020f6:	2200      	movs	r2, #0
 80020f8:	2104      	movs	r1, #4
 80020fa:	4810      	ldr	r0, [pc, #64]	; (800213c <forward+0x6c>)
 80020fc:	f003 fb3c 	bl	8005778 <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmvalR);
 8002100:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <forward+0x68>)
 8002102:	881a      	ldrh	r2, [r3, #0]
 8002104:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <forward+0x70>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	635a      	str	r2, [r3, #52]	; 0x34
	//Left motor
	HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_SET);
 800210a:	2201      	movs	r2, #1
 800210c:	2110      	movs	r1, #16
 800210e:	480b      	ldr	r0, [pc, #44]	; (800213c <forward+0x6c>)
 8002110:	f003 fb32 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_RESET);
 8002114:	2200      	movs	r2, #0
 8002116:	2120      	movs	r1, #32
 8002118:	4808      	ldr	r0, [pc, #32]	; (800213c <forward+0x6c>)
 800211a:	f003 fb2d 	bl	8005778 <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmvalL);
 800211e:	4b05      	ldr	r3, [pc, #20]	; (8002134 <forward+0x64>)
 8002120:	881a      	ldrh	r2, [r3, #0]
 8002122:	4b07      	ldr	r3, [pc, #28]	; (8002140 <forward+0x70>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	639a      	str	r2, [r3, #56]	; 0x38

	HAL_Delay(10);
 8002128:	200a      	movs	r0, #10
 800212a:	f002 fbc1 	bl	80048b0 <HAL_Delay>
}
 800212e:	bf00      	nop
 8002130:	bd80      	pop	{r7, pc}
 8002132:	bf00      	nop
 8002134:	20000934 	.word	0x20000934
 8002138:	20000936 	.word	0x20000936
 800213c:	40020000 	.word	0x40020000
 8002140:	20000818 	.word	0x20000818

08002144 <reverse>:
	HAL_Delay(10);
}


void reverse()
{
 8002144:	b580      	push	{r7, lr}
 8002146:	af00      	add	r7, sp, #0
	//PID
	pwmvalR = pwmval;
 8002148:	f640 13c4 	movw	r3, #2500	; 0x9c4
 800214c:	b29a      	uxth	r2, r3
 800214e:	4b17      	ldr	r3, [pc, #92]	; (80021ac <reverse+0x68>)
 8002150:	801a      	strh	r2, [r3, #0]
	pwmvalL = pwmval;
 8002152:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002156:	b29a      	uxth	r2, r3
 8002158:	4b15      	ldr	r3, [pc, #84]	; (80021b0 <reverse+0x6c>)
 800215a:	801a      	strh	r2, [r3, #0]
	//Left motor
	htim1.Instance->CCR4=135; //Center before starting
 800215c:	4b15      	ldr	r3, [pc, #84]	; (80021b4 <reverse+0x70>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2287      	movs	r2, #135	; 0x87
 8002162:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_RESET);
 8002164:	2200      	movs	r2, #0
 8002166:	2108      	movs	r1, #8
 8002168:	4813      	ldr	r0, [pc, #76]	; (80021b8 <reverse+0x74>)
 800216a:	f003 fb05 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_SET);
 800216e:	2201      	movs	r2, #1
 8002170:	2104      	movs	r1, #4
 8002172:	4811      	ldr	r0, [pc, #68]	; (80021b8 <reverse+0x74>)
 8002174:	f003 fb00 	bl	8005778 <HAL_GPIO_WritePin>
	//	pwmval=PIDController_Update(&motorL_PID,pwmval,spdL);
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_1,pwmvalL);
 8002178:	4b0d      	ldr	r3, [pc, #52]	; (80021b0 <reverse+0x6c>)
 800217a:	881a      	ldrh	r2, [r3, #0]
 800217c:	4b0f      	ldr	r3, [pc, #60]	; (80021bc <reverse+0x78>)
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	635a      	str	r2, [r3, #52]	; 0x34

	//Right motor
	HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_RESET);
 8002182:	2200      	movs	r2, #0
 8002184:	2110      	movs	r1, #16
 8002186:	480c      	ldr	r0, [pc, #48]	; (80021b8 <reverse+0x74>)
 8002188:	f003 faf6 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_SET);
 800218c:	2201      	movs	r2, #1
 800218e:	2120      	movs	r1, #32
 8002190:	4809      	ldr	r0, [pc, #36]	; (80021b8 <reverse+0x74>)
 8002192:	f003 faf1 	bl	8005778 <HAL_GPIO_WritePin>
	__HAL_TIM_SetCompare(&htim8,TIM_CHANNEL_2,pwmvalR);
 8002196:	4b05      	ldr	r3, [pc, #20]	; (80021ac <reverse+0x68>)
 8002198:	881a      	ldrh	r2, [r3, #0]
 800219a:	4b08      	ldr	r3, [pc, #32]	; (80021bc <reverse+0x78>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	639a      	str	r2, [r3, #56]	; 0x38

	HAL_Delay(300);
 80021a0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80021a4:	f002 fb84 	bl	80048b0 <HAL_Delay>
}
 80021a8:	bf00      	nop
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20000936 	.word	0x20000936
 80021b0:	20000934 	.word	0x20000934
 80021b4:	200006f8 	.word	0x200006f8
 80021b8:	40020000 	.word	0x40020000
 80021bc:	20000818 	.word	0x20000818

080021c0 <fullLeftForward>:

void fullLeftForward(float value)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	ed87 0a01 	vstr	s0, [r7, #4]
	//Time taken=3.5s
	servomotor_center(); //Center before starting
 80021ca:	f000 f987 	bl	80024dc <servomotor_center>
	forward();
 80021ce:	f7ff ff7f 	bl	80020d0 <forward>
	htim1.Instance->CCR4=LEFT; //Extreme left
 80021d2:	4b0a      	ldr	r3, [pc, #40]	; (80021fc <fullLeftForward+0x3c>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	225a      	movs	r2, #90	; 0x5a
 80021d8:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(value);
 80021da:	edd7 7a01 	vldr	s15, [r7, #4]
 80021de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80021e2:	ee17 0a90 	vmov	r0, s15
 80021e6:	f002 fb63 	bl	80048b0 <HAL_Delay>
	servomotor_center(); //Center
 80021ea:	f000 f977 	bl	80024dc <servomotor_center>
	stop();
 80021ee:	f7ff ff5d 	bl	80020ac <stop>
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	200006f8 	.word	0x200006f8

08002200 <fullRightForward>:

void fullRightForward(float value)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	ed87 0a01 	vstr	s0, [r7, #4]
	//Time taken=3.95s
	servomotor_center(); //Center before starting
 800220a:	f000 f967 	bl	80024dc <servomotor_center>
	forward();
 800220e:	f7ff ff5f 	bl	80020d0 <forward>
	htim1.Instance->CCR4=RIGHT; //Extreme right
 8002212:	4b0a      	ldr	r3, [pc, #40]	; (800223c <fullRightForward+0x3c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	22ce      	movs	r2, #206	; 0xce
 8002218:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(value);
 800221a:	edd7 7a01 	vldr	s15, [r7, #4]
 800221e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002222:	ee17 0a90 	vmov	r0, s15
 8002226:	f002 fb43 	bl	80048b0 <HAL_Delay>
	servomotor_center(); //Center
 800222a:	f000 f957 	bl	80024dc <servomotor_center>
	stop();
 800222e:	f7ff ff3d 	bl	80020ac <stop>
}
 8002232:	bf00      	nop
 8002234:	3708      	adds	r7, #8
 8002236:	46bd      	mov	sp, r7
 8002238:	bd80      	pop	{r7, pc}
 800223a:	bf00      	nop
 800223c:	200006f8 	.word	0x200006f8

08002240 <fullRightReverse>:

void fullRightReverse(float value)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	ed87 0a01 	vstr	s0, [r7, #4]
	servomotor_center(); //Center before starting
 800224a:	f000 f947 	bl	80024dc <servomotor_center>
	reverse();
 800224e:	f7ff ff79 	bl	8002144 <reverse>
	htim1.Instance->CCR4=RIGHT; //Extreme right
 8002252:	4b0a      	ldr	r3, [pc, #40]	; (800227c <fullRightReverse+0x3c>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	22ce      	movs	r2, #206	; 0xce
 8002258:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(value);
 800225a:	edd7 7a01 	vldr	s15, [r7, #4]
 800225e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002262:	ee17 0a90 	vmov	r0, s15
 8002266:	f002 fb23 	bl	80048b0 <HAL_Delay>
	servomotor_center(); //Center
 800226a:	f000 f937 	bl	80024dc <servomotor_center>
	stop();
 800226e:	f7ff ff1d 	bl	80020ac <stop>
}
 8002272:	bf00      	nop
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	200006f8 	.word	0x200006f8

08002280 <fullLeftReverse>:

void fullLeftReverse(float value)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	ed87 0a01 	vstr	s0, [r7, #4]
	servomotor_center();
 800228a:	f000 f927 	bl	80024dc <servomotor_center>
	HAL_Delay(1000);//Center before starting
 800228e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002292:	f002 fb0d 	bl	80048b0 <HAL_Delay>
	reverse();
 8002296:	f7ff ff55 	bl	8002144 <reverse>
	HAL_Delay(250);
 800229a:	20fa      	movs	r0, #250	; 0xfa
 800229c:	f002 fb08 	bl	80048b0 <HAL_Delay>
	htim1.Instance->CCR4=LEFT; //Extreme left
 80022a0:	4b09      	ldr	r3, [pc, #36]	; (80022c8 <fullLeftReverse+0x48>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	225a      	movs	r2, #90	; 0x5a
 80022a6:	641a      	str	r2, [r3, #64]	; 0x40
	HAL_Delay(value);
 80022a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80022ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022b0:	ee17 0a90 	vmov	r0, s15
 80022b4:	f002 fafc 	bl	80048b0 <HAL_Delay>
	servomotor_center(); //Center
 80022b8:	f000 f910 	bl	80024dc <servomotor_center>
	stop();
 80022bc:	f7ff fef6 	bl	80020ac <stop>
}
 80022c0:	bf00      	nop
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}
 80022c8:	200006f8 	.word	0x200006f8

080022cc <tightRightTurn>:

//Calibrated fully absolutely 20x20cm
//Lab floor and hall
void tightRightTurn(int angle)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
	//Super tight left complete (Used)
	servomotor_center();
 80022d4:	f000 f902 	bl	80024dc <servomotor_center>
	HAL_Delay(1000);
 80022d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80022dc:	f002 fae8 	bl	80048b0 <HAL_Delay>
	forward();
 80022e0:	f7ff fef6 	bl	80020d0 <forward>
	int duration = angle == 90 ? 1950 : angle == 180 ? 3700 : angle == 270 ? 5200 : 7100; // 1950 for 90deg, 3600 for 180deg, 5500 for 270deg, 7400 for 360deg
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b5a      	cmp	r3, #90	; 0x5a
 80022e8:	d00f      	beq.n	800230a <tightRightTurn+0x3e>
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2bb4      	cmp	r3, #180	; 0xb4
 80022ee:	d009      	beq.n	8002304 <tightRightTurn+0x38>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80022f6:	d102      	bne.n	80022fe <tightRightTurn+0x32>
 80022f8:	f241 4350 	movw	r3, #5200	; 0x1450
 80022fc:	e007      	b.n	800230e <tightRightTurn+0x42>
 80022fe:	f641 33bc 	movw	r3, #7100	; 0x1bbc
 8002302:	e004      	b.n	800230e <tightRightTurn+0x42>
 8002304:	f640 6374 	movw	r3, #3700	; 0xe74
 8002308:	e001      	b.n	800230e <tightRightTurn+0x42>
 800230a:	f240 739e 	movw	r3, #1950	; 0x79e
 800230e:	60fb      	str	r3, [r7, #12]
	fullRightForward(duration);
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	ee07 3a90 	vmov	s15, r3
 8002316:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800231a:	eeb0 0a67 	vmov.f32	s0, s15
 800231e:	f7ff ff6f 	bl	8002200 <fullRightForward>
	fullLeftReverse(750);
 8002322:	ed9f 0a0b 	vldr	s0, [pc, #44]	; 8002350 <tightRightTurn+0x84>
 8002326:	f7ff ffab 	bl	8002280 <fullLeftReverse>
	servomotor_set(153);
 800232a:	2099      	movs	r0, #153	; 0x99
 800232c:	f000 f93a 	bl	80025a4 <servomotor_set>
	HAL_Delay(500);
 8002330:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002334:	f002 fabc 	bl	80048b0 <HAL_Delay>
	forward();
 8002338:	f7ff feca 	bl	80020d0 <forward>
	HAL_Delay(100);
 800233c:	2064      	movs	r0, #100	; 0x64
 800233e:	f002 fab7 	bl	80048b0 <HAL_Delay>
	stop();
 8002342:	f7ff feb3 	bl	80020ac <stop>
}
 8002346:	bf00      	nop
 8002348:	3710      	adds	r7, #16
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	443b8000 	.word	0x443b8000

08002354 <tightLeftTurn>:
}

//Calibrated fully absolutely 20x20cm
//Lab floor and Hall
void tightLeftTurn(int angle)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b084      	sub	sp, #16
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
	//Super tight right completed (Used)
	servomotor_set(136);
 800235c:	2088      	movs	r0, #136	; 0x88
 800235e:	f000 f921 	bl	80025a4 <servomotor_set>
	HAL_Delay(1000);
 8002362:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002366:	f002 faa3 	bl	80048b0 <HAL_Delay>
	forward();
 800236a:	f7ff feb1 	bl	80020d0 <forward>
	int duration = angle == 90 ? 2050 : angle == 180 ? 4000 : angle == 270 ? 6100 : 8000; // 2000 for 90deg, 4050 for 180deg, 6200 for 270deg, 8200 for 360deg
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2b5a      	cmp	r3, #90	; 0x5a
 8002372:	d00f      	beq.n	8002394 <tightLeftTurn+0x40>
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2bb4      	cmp	r3, #180	; 0xb4
 8002378:	d009      	beq.n	800238e <tightLeftTurn+0x3a>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8002380:	d102      	bne.n	8002388 <tightLeftTurn+0x34>
 8002382:	f241 73d4 	movw	r3, #6100	; 0x17d4
 8002386:	e007      	b.n	8002398 <tightLeftTurn+0x44>
 8002388:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 800238c:	e004      	b.n	8002398 <tightLeftTurn+0x44>
 800238e:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8002392:	e001      	b.n	8002398 <tightLeftTurn+0x44>
 8002394:	f640 0302 	movw	r3, #2050	; 0x802
 8002398:	60fb      	str	r3, [r7, #12]
	fullLeftForward(duration);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	ee07 3a90 	vmov	s15, r3
 80023a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023a4:	eeb0 0a67 	vmov.f32	s0, s15
 80023a8:	f7ff ff0a 	bl	80021c0 <fullLeftForward>
	fullRightReverse(750);
 80023ac:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 80023d8 <tightLeftTurn+0x84>
 80023b0:	f7ff ff46 	bl	8002240 <fullRightReverse>
	servomotor_set(136);
 80023b4:	2088      	movs	r0, #136	; 0x88
 80023b6:	f000 f8f5 	bl	80025a4 <servomotor_set>
	HAL_Delay(500);
 80023ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023be:	f002 fa77 	bl	80048b0 <HAL_Delay>
	forward();
 80023c2:	f7ff fe85 	bl	80020d0 <forward>
	HAL_Delay(100);
 80023c6:	2064      	movs	r0, #100	; 0x64
 80023c8:	f002 fa72 	bl	80048b0 <HAL_Delay>
	stop();
 80023cc:	f7ff fe6e 	bl	80020ac <stop>
}
 80023d0:	bf00      	nop
 80023d2:	3710      	adds	r7, #16
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	443b8000 	.word	0x443b8000

080023dc <tight2LeftTurn>:
	HAL_Delay(800); //To achieve 20cm
	stop();
}

void tight2LeftTurn(int angle)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b082      	sub	sp, #8
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
	//Super tight right completed (Used)
	servomotor_center();
 80023e4:	f000 f87a 	bl	80024dc <servomotor_center>
	HAL_Delay(1000);
 80023e8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80023ec:	f002 fa60 	bl	80048b0 <HAL_Delay>
	//forward();
	left_turn(180);	//angle=180 to circulate the obstacle 1
 80023f0:	20b4      	movs	r0, #180	; 0xb4
 80023f2:	f000 fa69 	bl	80028c8 <left_turn>
	//fullRightReverse(750);		//back to face the center
	//servomotor_center();
	HAL_Delay(500);
 80023f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023fa:	f002 fa59 	bl	80048b0 <HAL_Delay>
	forward();
 80023fe:	f7ff fe67 	bl	80020d0 <forward>
	HAL_Delay(6000);   //make sure it circle the obstacle
 8002402:	f241 7070 	movw	r0, #6000	; 0x1770
 8002406:	f002 fa53 	bl	80048b0 <HAL_Delay>
	right_turn(180);
 800240a:	20b4      	movs	r0, #180	; 0xb4
 800240c:	f000 fa20 	bl	8002850 <right_turn>
	fullLeftReverse(750);
 8002410:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8002424 <tight2LeftTurn+0x48>
 8002414:	f7ff ff34 	bl	8002280 <fullLeftReverse>
	stop();
 8002418:	f7ff fe48 	bl	80020ac <stop>
}
 800241c:	bf00      	nop
 800241e:	3708      	adds	r7, #8
 8002420:	46bd      	mov	sp, r7
 8002422:	bd80      	pop	{r7, pc}
 8002424:	443b8000 	.word	0x443b8000

08002428 <tight2RightTurn>:

void tight2RightTurn(int angle)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
	servomotor_center();
 8002430:	f000 f854 	bl	80024dc <servomotor_center>
	HAL_Delay(1000);
 8002434:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002438:	f002 fa3a 	bl	80048b0 <HAL_Delay>
	//forward();
	right_turn(180);
 800243c:	20b4      	movs	r0, #180	; 0xb4
 800243e:	f000 fa07 	bl	8002850 <right_turn>
	//fullLeftReverse(750);
	//servomotor_center();	//calibrate it face to the left
	HAL_Delay(500);
 8002442:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002446:	f002 fa33 	bl	80048b0 <HAL_Delay>
	forward();
 800244a:	f7ff fe41 	bl	80020d0 <forward>
	HAL_Delay(6000);   //make sure it circle the obstacle
 800244e:	f241 7070 	movw	r0, #6000	; 0x1770
 8002452:	f002 fa2d 	bl	80048b0 <HAL_Delay>
	left_turn(180);
 8002456:	20b4      	movs	r0, #180	; 0xb4
 8002458:	f000 fa36 	bl	80028c8 <left_turn>
	fullRightReverse(750);
 800245c:	ed9f 0a04 	vldr	s0, [pc, #16]	; 8002470 <tight2RightTurn+0x48>
 8002460:	f7ff feee 	bl	8002240 <fullRightReverse>
	stop();
 8002464:	f7ff fe22 	bl	80020ac <stop>
}
 8002468:	bf00      	nop
 800246a:	3708      	adds	r7, #8
 800246c:	46bd      	mov	sp, r7
 800246e:	bd80      	pop	{r7, pc}
 8002470:	443b8000 	.word	0x443b8000

08002474 <forward_motor_prep>:
}



void forward_motor_prep()
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_RESET);
 8002478:	2200      	movs	r2, #0
 800247a:	2104      	movs	r1, #4
 800247c:	4809      	ldr	r0, [pc, #36]	; (80024a4 <forward_motor_prep+0x30>)
 800247e:	f003 f97b 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_SET);
 8002482:	2201      	movs	r2, #1
 8002484:	2108      	movs	r1, #8
 8002486:	4807      	ldr	r0, [pc, #28]	; (80024a4 <forward_motor_prep+0x30>)
 8002488:	f003 f976 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_RESET);
 800248c:	2200      	movs	r2, #0
 800248e:	2120      	movs	r1, #32
 8002490:	4804      	ldr	r0, [pc, #16]	; (80024a4 <forward_motor_prep+0x30>)
 8002492:	f003 f971 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_SET);
 8002496:	2201      	movs	r2, #1
 8002498:	2110      	movs	r1, #16
 800249a:	4802      	ldr	r0, [pc, #8]	; (80024a4 <forward_motor_prep+0x30>)
 800249c:	f003 f96c 	bl	8005778 <HAL_GPIO_WritePin>
}
 80024a0:	bf00      	nop
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	40020000 	.word	0x40020000

080024a8 <backward_motor_prep>:

void backward_motor_prep()
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA,AIN2_Pin,GPIO_PIN_SET);
 80024ac:	2201      	movs	r2, #1
 80024ae:	2104      	movs	r1, #4
 80024b0:	4809      	ldr	r0, [pc, #36]	; (80024d8 <backward_motor_prep+0x30>)
 80024b2:	f003 f961 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,AIN1_Pin,GPIO_PIN_RESET);
 80024b6:	2200      	movs	r2, #0
 80024b8:	2108      	movs	r1, #8
 80024ba:	4807      	ldr	r0, [pc, #28]	; (80024d8 <backward_motor_prep+0x30>)
 80024bc:	f003 f95c 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_SET);
 80024c0:	2201      	movs	r2, #1
 80024c2:	2120      	movs	r1, #32
 80024c4:	4804      	ldr	r0, [pc, #16]	; (80024d8 <backward_motor_prep+0x30>)
 80024c6:	f003 f957 	bl	8005778 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_RESET);
 80024ca:	2200      	movs	r2, #0
 80024cc:	2110      	movs	r1, #16
 80024ce:	4802      	ldr	r0, [pc, #8]	; (80024d8 <backward_motor_prep+0x30>)
 80024d0:	f003 f952 	bl	8005778 <HAL_GPIO_WritePin>
}
 80024d4:	bf00      	nop
 80024d6:	bd80      	pop	{r7, pc}
 80024d8:	40020000 	.word	0x40020000

080024dc <servomotor_center>:

void servomotor_center()
{
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
	// default: 150
	uint32_t value;
	if (htim1.Instance->CCR4 == 96)
 80024e2:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <servomotor_center+0x44>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e8:	2b60      	cmp	r3, #96	; 0x60
 80024ea:	d102      	bne.n	80024f2 <servomotor_center+0x16>
		value = 145;
 80024ec:	2391      	movs	r3, #145	; 0x91
 80024ee:	607b      	str	r3, [r7, #4]
 80024f0:	e001      	b.n	80024f6 <servomotor_center+0x1a>
	else
		value = 127;
 80024f2:	237f      	movs	r3, #127	; 0x7f
 80024f4:	607b      	str	r3, [r7, #4]
	if (htim1.Instance->CCR4 == value){
 80024f6:	4b0a      	ldr	r3, [pc, #40]	; (8002520 <servomotor_center+0x44>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d00a      	beq.n	8002518 <servomotor_center+0x3c>
		return;
	}
	htim1.Instance->CCR4 = value;
 8002502:	4b07      	ldr	r3, [pc, #28]	; (8002520 <servomotor_center+0x44>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	687a      	ldr	r2, [r7, #4]
 8002508:	641a      	str	r2, [r3, #64]	; 0x40
	servo_dir = 0;
 800250a:	4b06      	ldr	r3, [pc, #24]	; (8002524 <servomotor_center+0x48>)
 800250c:	2200      	movs	r2, #0
 800250e:	601a      	str	r2, [r3, #0]
	osDelay(200);
 8002510:	20c8      	movs	r0, #200	; 0xc8
 8002512:	f007 fbc5 	bl	8009ca0 <osDelay>
 8002516:	e000      	b.n	800251a <servomotor_center+0x3e>
		return;
 8002518:	bf00      	nop
}
 800251a:	3708      	adds	r7, #8
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	200006f8 	.word	0x200006f8
 8002524:	20000958 	.word	0x20000958

08002528 <servomotor_left>:

void servomotor_left()
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b082      	sub	sp, #8
 800252c:	af00      	add	r7, sp, #0
	// default: 107
	uint32_t value = 96;
 800252e:	2360      	movs	r3, #96	; 0x60
 8002530:	607b      	str	r3, [r7, #4]
	if (htim1.Instance->CCR4 == value){
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <servomotor_left+0x34>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002538:	687a      	ldr	r2, [r7, #4]
 800253a:	429a      	cmp	r2, r3
 800253c:	d00a      	beq.n	8002554 <servomotor_left+0x2c>
		return;
	}
	htim1.Instance->CCR4 = value;
 800253e:	4b07      	ldr	r3, [pc, #28]	; (800255c <servomotor_left+0x34>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	687a      	ldr	r2, [r7, #4]
 8002544:	641a      	str	r2, [r3, #64]	; 0x40
	servo_dir = 1;
 8002546:	4b06      	ldr	r3, [pc, #24]	; (8002560 <servomotor_left+0x38>)
 8002548:	2201      	movs	r2, #1
 800254a:	601a      	str	r2, [r3, #0]
	osDelay(200);
 800254c:	20c8      	movs	r0, #200	; 0xc8
 800254e:	f007 fba7 	bl	8009ca0 <osDelay>
 8002552:	e000      	b.n	8002556 <servomotor_left+0x2e>
		return;
 8002554:	bf00      	nop
}
 8002556:	3708      	adds	r7, #8
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	200006f8 	.word	0x200006f8
 8002560:	20000958 	.word	0x20000958

08002564 <servomotor_right>:

void servomotor_right()
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
	// default: 225
	uint32_t value = 200;
 800256a:	23c8      	movs	r3, #200	; 0xc8
 800256c:	607b      	str	r3, [r7, #4]
	if (htim1.Instance->CCR4 == value){
 800256e:	4b0b      	ldr	r3, [pc, #44]	; (800259c <servomotor_right+0x38>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002574:	687a      	ldr	r2, [r7, #4]
 8002576:	429a      	cmp	r2, r3
 8002578:	d00b      	beq.n	8002592 <servomotor_right+0x2e>
		return;
	}
	htim1.Instance->CCR4 = value;
 800257a:	4b08      	ldr	r3, [pc, #32]	; (800259c <servomotor_right+0x38>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	641a      	str	r2, [r3, #64]	; 0x40
	servo_dir = -1;
 8002582:	4b07      	ldr	r3, [pc, #28]	; (80025a0 <servomotor_right+0x3c>)
 8002584:	f04f 32ff 	mov.w	r2, #4294967295
 8002588:	601a      	str	r2, [r3, #0]
	osDelay(200);
 800258a:	20c8      	movs	r0, #200	; 0xc8
 800258c:	f007 fb88 	bl	8009ca0 <osDelay>
 8002590:	e000      	b.n	8002594 <servomotor_right+0x30>
		return;
 8002592:	bf00      	nop
}
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	200006f8 	.word	0x200006f8
 80025a0:	20000958 	.word	0x20000958

080025a4 <servomotor_set>:

void servomotor_set(int value)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
	//	if (value >= 200) value = 200;
	//	if (value <= 100) value = 100;
	if (htim1.Instance->CCR4 == value){
 80025ac:	4b08      	ldr	r3, [pc, #32]	; (80025d0 <servomotor_set+0x2c>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d007      	beq.n	80025c8 <servomotor_set+0x24>
		return;
	}
	htim1.Instance->CCR4 = value;
 80025b8:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <servomotor_set+0x2c>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(200);
 80025c0:	20c8      	movs	r0, #200	; 0xc8
 80025c2:	f007 fb6d 	bl	8009ca0 <osDelay>
 80025c6:	e000      	b.n	80025ca <servomotor_set+0x26>
		return;
 80025c8:	bf00      	nop
}
 80025ca:	3708      	adds	r7, #8
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	200006f8 	.word	0x200006f8

080025d4 <move>:

//Move function is for making the car travel a specified distance, straight line motion is determined by Motor()
// frontorback : 1 - forward, 0 - backward
// leftorright : -1 - left, 1 - right, 0 - straight
void move(float distance, int frontorback , int leftorright)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b09e      	sub	sp, #120	; 0x78
 80025d8:	af00      	add	r7, sp, #0
 80025da:	ed87 0a03 	vstr	s0, [r7, #12]
 80025de:	60b8      	str	r0, [r7, #8]
 80025e0:	6079      	str	r1, [r7, #4]
	HAL_TIM_PWM_Start(&htim8 , TIM_CHANNEL_1); // MotorA
 80025e2:	2100      	movs	r1, #0
 80025e4:	4893      	ldr	r0, [pc, #588]	; (8002834 <move+0x260>)
 80025e6:	f004 fd9f 	bl	8007128 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8 , TIM_CHANNEL_2); // MotorB
 80025ea:	2104      	movs	r1, #4
 80025ec:	4891      	ldr	r0, [pc, #580]	; (8002834 <move+0x260>)
 80025ee:	f004 fd9b 	bl	8007128 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); // Servo Motor
 80025f2:	210c      	movs	r1, #12
 80025f4:	4890      	ldr	r0, [pc, #576]	; (8002838 <move+0x264>)
 80025f6:	f004 fd97 	bl	8007128 <HAL_TIM_PWM_Start>

	//default PWM values
	int pwmval_L = pwmval+400;
 80025fa:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80025fe:	f503 73c8 	add.w	r3, r3, #400	; 0x190
 8002602:	677b      	str	r3, [r7, #116]	; 0x74
	int pwmval_R = pwmval;
 8002604:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8002608:	653b      	str	r3, [r7, #80]	; 0x50
	int flag = 1;
 800260a:	2301      	movs	r3, #1
 800260c:	673b      	str	r3, [r7, #112]	; 0x70

	//distance of the left & right wheel travelled
	float LEFTWHEEL_DIST = 0;
 800260e:	f04f 0300 	mov.w	r3, #0
 8002612:	66fb      	str	r3, [r7, #108]	; 0x6c
	float RIGHTWHEEL_DIST = 0;
 8002614:	f04f 0300 	mov.w	r3, #0
 8002618:	66bb      	str	r3, [r7, #104]	; 0x68
	float temp_leftwheel_dist = 0;
 800261a:	f04f 0300 	mov.w	r3, #0
 800261e:	64fb      	str	r3, [r7, #76]	; 0x4c
	float temp_rightwheel_dist = 0;
 8002620:	f04f 0300 	mov.w	r3, #0
 8002624:	64bb      	str	r3, [r7, #72]	; 0x48

	//used to determine the rate at which we make adjustments
	uint32_t start_time , prev_time, curr_time;

	//Decide the correct motion based on the input parameters
	if (frontorback){ // forward: frontorback = 1
 8002626:	68bb      	ldr	r3, [r7, #8]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00a      	beq.n	8002642 <move+0x6e>
		forward_motor_prep();
 800262c:	f7ff ff22 	bl	8002474 <forward_motor_prep>
		distError = DISTANCE_ERROR_OFFSETF * distance;
 8002630:	edd7 7a03 	vldr	s15, [r7, #12]
 8002634:	ed9f 7a81 	vldr	s14, [pc, #516]	; 800283c <move+0x268>
 8002638:	ee67 7a87 	vmul.f32	s15, s15, s14
 800263c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
 8002640:	e00c      	b.n	800265c <move+0x88>
	}
	else { // backward: frontorback = 0
		backward_motor_prep();
 8002642:	f7ff ff31 	bl	80024a8 <backward_motor_prep>
		pwmval_L = pwmval_L+150;
 8002646:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002648:	3396      	adds	r3, #150	; 0x96
 800264a:	677b      	str	r3, [r7, #116]	; 0x74
		distError = DISTANCE_ERROR_OFFSETR * distance;
 800264c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002650:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 800283c <move+0x268>
 8002654:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002658:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
	}

	if(leftorright == -1){
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002662:	d102      	bne.n	800266a <move+0x96>
		servomotor_left();
 8002664:	f7ff ff60 	bl	8002528 <servomotor_left>
 8002668:	e007      	b.n	800267a <move+0xa6>
	}
	else if(leftorright == 1){
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d102      	bne.n	8002676 <move+0xa2>
		servomotor_right();
 8002670:	f7ff ff78 	bl	8002564 <servomotor_right>
 8002674:	e001      	b.n	800267a <move+0xa6>
	}
	else {
		servomotor_center();
 8002676:	f7ff ff31 	bl	80024dc <servomotor_center>
	}

	left_encoder_prev = __HAL_TIM_GET_COUNTER(&htim2);
 800267a:	4b71      	ldr	r3, [pc, #452]	; (8002840 <move+0x26c>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002680:	667b      	str	r3, [r7, #100]	; 0x64
	right_encoder_prev = __HAL_TIM_GET_COUNTER(&htim3);
 8002682:	4b70      	ldr	r3, [pc, #448]	; (8002844 <move+0x270>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002688:	663b      	str	r3, [r7, #96]	; 0x60
	start_time = HAL_GetTick();
 800268a:	f002 f905 	bl	8004898 <HAL_GetTick>
 800268e:	6578      	str	r0, [r7, #84]	; 0x54
	prev_time = start_time;
 8002690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002692:	643b      	str	r3, [r7, #64]	; 0x40

	// //Start the motor
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwmval_L);
 8002694:	4b67      	ldr	r3, [pc, #412]	; (8002834 <move+0x260>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800269a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwmval_R);
 800269c:	4b65      	ldr	r3, [pc, #404]	; (8002834 <move+0x260>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80026a2:	639a      	str	r2, [r3, #56]	; 0x38

	uint8_t hello[20], hello1[20];
	//run until my duration set is up
	while (flag){
 80026a4:	e0bb      	b.n	800281e <move+0x24a>
		if(HAL_GetTick() - start_time > 50L){
 80026a6:	f002 f8f7 	bl	8004898 <HAL_GetTick>
 80026aa:	4602      	mov	r2, r0
 80026ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80026ae:	1ad3      	subs	r3, r2, r3
 80026b0:	2b32      	cmp	r3, #50	; 0x32
 80026b2:	f240 80b4 	bls.w	800281e <move+0x24a>
			left_encoder = __HAL_TIM_GET_COUNTER(&htim2);
 80026b6:	4b62      	ldr	r3, [pc, #392]	; (8002840 <move+0x26c>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026bc:	63fb      	str	r3, [r7, #60]	; 0x3c
			right_encoder = __HAL_TIM_GET_COUNTER(&htim3);
 80026be:	4b61      	ldr	r3, [pc, #388]	; (8002844 <move+0x270>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026c4:	63bb      	str	r3, [r7, #56]	; 0x38

			if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2))
 80026c6:	4b5e      	ldr	r3, [pc, #376]	; (8002840 <move+0x26c>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f003 0310 	and.w	r3, r3, #16
 80026d0:	2b10      	cmp	r3, #16
 80026d2:	d110      	bne.n	80026f6 <move+0x122>
			{
				if(left_encoder < left_encoder_prev)
 80026d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026d8:	429a      	cmp	r2, r3
 80026da:	da04      	bge.n	80026e6 <move+0x112>
				{
					diff_left = left_encoder_prev - left_encoder;
 80026dc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80026de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026e4:	e015      	b.n	8002712 <move+0x13e>
				}
				else
				{
					diff_left = (65535 - left_encoder) + left_encoder_prev;
 80026e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026e8:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 80026ec:	33ff      	adds	r3, #255	; 0xff
 80026ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80026f0:	4413      	add	r3, r2
 80026f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80026f4:	e00d      	b.n	8002712 <move+0x13e>
				}
			}
			else
			{
				if(left_encoder > left_encoder_prev)
 80026f6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80026f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026fa:	429a      	cmp	r2, r3
 80026fc:	dd04      	ble.n	8002708 <move+0x134>
				{
					diff_left = left_encoder - left_encoder_prev;
 80026fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002700:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002702:	1ad3      	subs	r3, r2, r3
 8002704:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002706:	e004      	b.n	8002712 <move+0x13e>
				}
				else
				{
					diff_left = (65535 - left_encoder_prev);
 8002708:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800270a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800270e:	33ff      	adds	r3, #255	; 0xff
 8002710:	65fb      	str	r3, [r7, #92]	; 0x5c
				}
			}
			if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3))
 8002712:	4b4c      	ldr	r3, [pc, #304]	; (8002844 <move+0x270>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0310 	and.w	r3, r3, #16
 800271c:	2b10      	cmp	r3, #16
 800271e:	d110      	bne.n	8002742 <move+0x16e>
			{
				if(right_encoder < right_encoder_prev)
 8002720:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002722:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002724:	429a      	cmp	r2, r3
 8002726:	da04      	bge.n	8002732 <move+0x15e>
				{
					diff_right = right_encoder_prev - right_encoder;
 8002728:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800272a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800272c:	1ad3      	subs	r3, r2, r3
 800272e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002730:	e015      	b.n	800275e <move+0x18a>
				}
				else
				{
					diff_right = (65535 - right_encoder) + right_encoder_prev;
 8002732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002734:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8002738:	33ff      	adds	r3, #255	; 0xff
 800273a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800273c:	4413      	add	r3, r2
 800273e:	65bb      	str	r3, [r7, #88]	; 0x58
 8002740:	e00d      	b.n	800275e <move+0x18a>
				}
			}
			else
			{
				if(right_encoder > right_encoder_prev)
 8002742:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002744:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002746:	429a      	cmp	r2, r3
 8002748:	dd04      	ble.n	8002754 <move+0x180>
				{
					diff_right = right_encoder - right_encoder_prev;
 800274a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800274c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	65bb      	str	r3, [r7, #88]	; 0x58
 8002752:	e004      	b.n	800275e <move+0x18a>
				}
				else
				{
					diff_right = (65535 - right_encoder_prev);
 8002754:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002756:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 800275a:	33ff      	adds	r3, #255	; 0xff
 800275c:	65bb      	str	r3, [r7, #88]	; 0x58
				}
			}
			left_encoder_prev = __HAL_TIM_GET_COUNTER(&htim2);
 800275e:	4b38      	ldr	r3, [pc, #224]	; (8002840 <move+0x26c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	667b      	str	r3, [r7, #100]	; 0x64
			right_encoder_prev = __HAL_TIM_GET_COUNTER(&htim3);
 8002766:	4b37      	ldr	r3, [pc, #220]	; (8002844 <move+0x270>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800276c:	663b      	str	r3, [r7, #96]	; 0x60
			start_time = HAL_GetTick(); //tick value in milliseconds
 800276e:	f002 f893 	bl	8004898 <HAL_GetTick>
 8002772:	6578      	str	r0, [r7, #84]	; 0x54

			//Calculate the distance covered and compare with distance we input
			temp_leftwheel_dist = ((float)diff_left/FULL_ROTATION_TICKS) * CIRCUMFERENCE_WHEEL;
 8002774:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002776:	ee07 3a90 	vmov	s15, r3
 800277a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800277e:	4b32      	ldr	r3, [pc, #200]	; (8002848 <move+0x274>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	ee07 3a90 	vmov	s15, r3
 8002786:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800278a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800278e:	4b2f      	ldr	r3, [pc, #188]	; (800284c <move+0x278>)
 8002790:	edd3 7a00 	vldr	s15, [r3]
 8002794:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002798:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
			LEFTWHEEL_DIST += temp_leftwheel_dist;
 800279c:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80027a0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80027a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027a8:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

			temp_rightwheel_dist = ((float)diff_right/FULL_ROTATION_TICKS) * CIRCUMFERENCE_WHEEL;
 80027ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80027ae:	ee07 3a90 	vmov	s15, r3
 80027b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80027b6:	4b24      	ldr	r3, [pc, #144]	; (8002848 <move+0x274>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	ee07 3a90 	vmov	s15, r3
 80027be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80027c6:	4b21      	ldr	r3, [pc, #132]	; (800284c <move+0x278>)
 80027c8:	edd3 7a00 	vldr	s15, [r3]
 80027cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027d0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
			RIGHTWHEEL_DIST += temp_rightwheel_dist;
 80027d4:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80027d8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 80027dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027e0:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68

			if (LEFTWHEEL_DIST >= (distance) || RIGHTWHEEL_DIST >= (distance)){ //stop condition
 80027e4:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 80027e8:	edd7 7a03 	vldr	s15, [r7, #12]
 80027ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f4:	da09      	bge.n	800280a <move+0x236>
 80027f6:	ed97 7a1a 	vldr	s14, [r7, #104]	; 0x68
 80027fa:	edd7 7a03 	vldr	s15, [r7, #12]
 80027fe:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002806:	da00      	bge.n	800280a <move+0x236>
 8002808:	e009      	b.n	800281e <move+0x24a>
				__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
 800280a:	4b0a      	ldr	r3, [pc, #40]	; (8002834 <move+0x260>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2200      	movs	r2, #0
 8002810:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0);
 8002812:	4b08      	ldr	r3, [pc, #32]	; (8002834 <move+0x260>)
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	2200      	movs	r2, #0
 8002818:	639a      	str	r2, [r3, #56]	; 0x38
				flag = 0;
 800281a:	2300      	movs	r3, #0
 800281c:	673b      	str	r3, [r7, #112]	; 0x70
	while (flag){
 800281e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002820:	2b00      	cmp	r3, #0
 8002822:	f47f af40 	bne.w	80026a6 <move+0xd2>
			}
		}
	}
	HAL_Delay(100);
 8002826:	2064      	movs	r0, #100	; 0x64
 8002828:	f002 f842 	bl	80048b0 <HAL_Delay>
}
 800282c:	bf00      	nop
 800282e:	3778      	adds	r7, #120	; 0x78
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	20000818 	.word	0x20000818
 8002838:	200006f8 	.word	0x200006f8
 800283c:	3e8f5c29 	.word	0x3e8f5c29
 8002840:	20000740 	.word	0x20000740
 8002844:	20000788 	.word	0x20000788
 8002848:	20000008 	.word	0x20000008
 800284c:	2000000c 	.word	0x2000000c

08002850 <right_turn>:

void right_turn(int angle)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
	//Prep the servomotor to right
	servomotor_right();
 8002858:	f7ff fe84 	bl	8002564 <servomotor_right>

	osDelay(250);
 800285c:	20fa      	movs	r0, #250	; 0xfa
 800285e:	f007 fa1f 	bl	8009ca0 <osDelay>
	TURNING_ANGLE = 0;
 8002862:	4917      	ldr	r1, [pc, #92]	; (80028c0 <right_turn+0x70>)
 8002864:	f04f 0200 	mov.w	r2, #0
 8002868:	f04f 0300 	mov.w	r3, #0
 800286c:	e9c1 2300 	strd	r2, r3, [r1]

	forward_motor_prep();
 8002870:	f7ff fe00 	bl	8002474 <forward_motor_prep>

	//Start the motor
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 1500);
 8002874:	4b13      	ldr	r3, [pc, #76]	; (80028c4 <right_turn+0x74>)
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800287c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 70);
 800287e:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <right_turn+0x74>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	2246      	movs	r2, #70	; 0x46
 8002884:	639a      	str	r2, [r3, #56]	; 0x38
	//	while (fabs(TURNING_ANGLE) < fabs(angle)) //while it is still turning to the correct angle
	//	{
	//		servomotor_right();
	//		osDelay(10);
	//	}
	while (TURNING_ANGLE > -1*angle){ //while it is still turning to the correct angle
 8002886:	e004      	b.n	8002892 <right_turn+0x42>
		servomotor_right();
 8002888:	f7ff fe6c 	bl	8002564 <servomotor_right>
		osDelay(10);
 800288c:	200a      	movs	r0, #10
 800288e:	f007 fa07 	bl	8009ca0 <osDelay>
	while (TURNING_ANGLE > -1*angle){ //while it is still turning to the correct angle
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	425b      	negs	r3, r3
 8002896:	4618      	mov	r0, r3
 8002898:	f7fd fe44 	bl	8000524 <__aeabi_i2d>
 800289c:	4b08      	ldr	r3, [pc, #32]	; (80028c0 <right_turn+0x70>)
 800289e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028a2:	f7fe f91b 	bl	8000adc <__aeabi_dcmplt>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1ed      	bne.n	8002888 <right_turn+0x38>


	//Stop the Motor are completing the turn
	//__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
	//__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0);
	stop();
 80028ac:	f7ff fbfe 	bl	80020ac <stop>
	servomotor_set(127);
 80028b0:	207f      	movs	r0, #127	; 0x7f
 80028b2:	f7ff fe77 	bl	80025a4 <servomotor_set>
	//Stop the Motor after completing the turn
	//	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
	//	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0);

}
 80028b6:	bf00      	nop
 80028b8:	3708      	adds	r7, #8
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	20000908 	.word	0x20000908
 80028c4:	20000818 	.word	0x20000818

080028c8 <left_turn>:

void left_turn(int angle)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
	//Prep the servomotor to left
	servomotor_left();
 80028d0:	f7ff fe2a 	bl	8002528 <servomotor_left>

	osDelay(250);
 80028d4:	20fa      	movs	r0, #250	; 0xfa
 80028d6:	f007 f9e3 	bl	8009ca0 <osDelay>

	TURNING_ANGLE = 0;
 80028da:	4916      	ldr	r1, [pc, #88]	; (8002934 <left_turn+0x6c>)
 80028dc:	f04f 0200 	mov.w	r2, #0
 80028e0:	f04f 0300 	mov.w	r3, #0
 80028e4:	e9c1 2300 	strd	r2, r3, [r1]
	forward_motor_prep();
 80028e8:	f7ff fdc4 	bl	8002474 <forward_motor_prep>
	//Start the motor
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 70);
 80028ec:	4b12      	ldr	r3, [pc, #72]	; (8002938 <left_turn+0x70>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2246      	movs	r2, #70	; 0x46
 80028f2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 1500);
 80028f4:	4b10      	ldr	r3, [pc, #64]	; (8002938 <left_turn+0x70>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80028fc:	639a      	str	r2, [r3, #56]	; 0x38
	//osDelay(angle);

	while (TURNING_ANGLE < angle){ //while it is still turning to the correct angle
 80028fe:	e004      	b.n	800290a <left_turn+0x42>
		servomotor_left();
 8002900:	f7ff fe12 	bl	8002528 <servomotor_left>
		osDelay(10);
 8002904:	200a      	movs	r0, #10
 8002906:	f007 f9cb 	bl	8009ca0 <osDelay>
	while (TURNING_ANGLE < angle){ //while it is still turning to the correct angle
 800290a:	6878      	ldr	r0, [r7, #4]
 800290c:	f7fd fe0a 	bl	8000524 <__aeabi_i2d>
 8002910:	4b08      	ldr	r3, [pc, #32]	; (8002934 <left_turn+0x6c>)
 8002912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002916:	f7fe f8ff 	bl	8000b18 <__aeabi_dcmpgt>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1ef      	bne.n	8002900 <left_turn+0x38>


	//Stop the Motor are completing the turn
	//__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
	//__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0);
	stop();
 8002920:	f7ff fbc4 	bl	80020ac <stop>
	servomotor_set(145);
 8002924:	2091      	movs	r0, #145	; 0x91
 8002926:	f7ff fe3d 	bl	80025a4 <servomotor_set>
	//	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
	//	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0);
	//
	//	servomotor_center();

}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	20000908 	.word	0x20000908
 8002938:	20000818 	.word	0x20000818

0800293c <right_turnb>:

void right_turnb(int angle)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b082      	sub	sp, #8
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
	//Prep the servomotor to right
	servomotor_right();
 8002944:	f7ff fe0e 	bl	8002564 <servomotor_right>

	osDelay(250);
 8002948:	20fa      	movs	r0, #250	; 0xfa
 800294a:	f007 f9a9 	bl	8009ca0 <osDelay>
	TURNING_ANGLE = 0;
 800294e:	4916      	ldr	r1, [pc, #88]	; (80029a8 <right_turnb+0x6c>)
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	f04f 0300 	mov.w	r3, #0
 8002958:	e9c1 2300 	strd	r2, r3, [r1]

	backward_motor_prep();
 800295c:	f7ff fda4 	bl	80024a8 <backward_motor_prep>
	//	HAL_GPIO_WritePin(GPIOA,BIN2_Pin,GPIO_PIN_RESET);
	//	HAL_GPIO_WritePin(GPIOA,BIN1_Pin,GPIO_PIN_SET);
	//Start the motor
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 1500);
 8002960:	4b12      	ldr	r3, [pc, #72]	; (80029ac <right_turnb+0x70>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8002968:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 10);
 800296a:	4b10      	ldr	r3, [pc, #64]	; (80029ac <right_turnb+0x70>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	220a      	movs	r2, #10
 8002970:	639a      	str	r2, [r3, #56]	; 0x38
	//	while (fabs(TURNING_ANGLE) < fabs(angle)) //while it is still turning to the correct angle
	//	{
	//		servomotor_right();
	//		osDelay(10);
	//	}
	while (TURNING_ANGLE < angle){ //while it is still turning to the correct angle
 8002972:	e004      	b.n	800297e <right_turnb+0x42>
		servomotor_right();
 8002974:	f7ff fdf6 	bl	8002564 <servomotor_right>
		osDelay(10);
 8002978:	200a      	movs	r0, #10
 800297a:	f007 f991 	bl	8009ca0 <osDelay>
	while (TURNING_ANGLE < angle){ //while it is still turning to the correct angle
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7fd fdd0 	bl	8000524 <__aeabi_i2d>
 8002984:	4b08      	ldr	r3, [pc, #32]	; (80029a8 <right_turnb+0x6c>)
 8002986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298a:	f7fe f8c5 	bl	8000b18 <__aeabi_dcmpgt>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1ef      	bne.n	8002974 <right_turnb+0x38>


	//Stop the Motor are completing the turn
	//__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
	//__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0);
	stop();
 8002994:	f7ff fb8a 	bl	80020ac <stop>
	servomotor_set(127);
 8002998:	207f      	movs	r0, #127	; 0x7f
 800299a:	f7ff fe03 	bl	80025a4 <servomotor_set>
	//Stop the Motor after completing the turn
	//	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
	//	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0);

}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20000908 	.word	0x20000908
 80029ac:	20000818 	.word	0x20000818

080029b0 <left_turnb>:

void left_turnb(int angle)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
	//Prep the servomotor to left
	servomotor_left();
 80029b8:	f7ff fdb6 	bl	8002528 <servomotor_left>

	osDelay(250);
 80029bc:	20fa      	movs	r0, #250	; 0xfa
 80029be:	f007 f96f 	bl	8009ca0 <osDelay>

	TURNING_ANGLE = 0;
 80029c2:	4917      	ldr	r1, [pc, #92]	; (8002a20 <left_turnb+0x70>)
 80029c4:	f04f 0200 	mov.w	r2, #0
 80029c8:	f04f 0300 	mov.w	r3, #0
 80029cc:	e9c1 2300 	strd	r2, r3, [r1]
	backward_motor_prep();
 80029d0:	f7ff fd6a 	bl	80024a8 <backward_motor_prep>
	//Start the motor
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 50);
 80029d4:	4b13      	ldr	r3, [pc, #76]	; (8002a24 <left_turnb+0x74>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2232      	movs	r2, #50	; 0x32
 80029da:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 1500);
 80029dc:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <left_turnb+0x74>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80029e4:	639a      	str	r2, [r3, #56]	; 0x38

	//	while (TURNING_ANGLE < angle){ //while it is still turning to the correct angle
	//		servomotor_left();
	//		osDelay(10);
	//	}
	while (TURNING_ANGLE >  -1*angle){ //while it is still turning to the correct angle
 80029e6:	e004      	b.n	80029f2 <left_turnb+0x42>
		servomotor_left();
 80029e8:	f7ff fd9e 	bl	8002528 <servomotor_left>
		osDelay(10);
 80029ec:	200a      	movs	r0, #10
 80029ee:	f007 f957 	bl	8009ca0 <osDelay>
	while (TURNING_ANGLE >  -1*angle){ //while it is still turning to the correct angle
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	425b      	negs	r3, r3
 80029f6:	4618      	mov	r0, r3
 80029f8:	f7fd fd94 	bl	8000524 <__aeabi_i2d>
 80029fc:	4b08      	ldr	r3, [pc, #32]	; (8002a20 <left_turnb+0x70>)
 80029fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a02:	f7fe f86b 	bl	8000adc <__aeabi_dcmplt>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1ed      	bne.n	80029e8 <left_turnb+0x38>


	//Stop the Motor are completing the turn
	//__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
	//__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0);
	stop();
 8002a0c:	f7ff fb4e 	bl	80020ac <stop>
	servomotor_set(145);
 8002a10:	2091      	movs	r0, #145	; 0x91
 8002a12:	f7ff fdc7 	bl	80025a4 <servomotor_set>
	//	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0);
	//	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0);
	//
	//	servomotor_center();

}
 8002a16:	bf00      	nop
 8002a18:	3708      	adds	r7, #8
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	20000908 	.word	0x20000908
 8002a24:	20000818 	.word	0x20000818

08002a28 <gyroInit>:

void gyroInit()
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
	writeByte(0x06, 0x00);
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	2006      	movs	r0, #6
 8002a30:	f000 f88a 	bl	8002b48 <writeByte>
	osDelayUntil(10);
 8002a34:	200a      	movs	r0, #10
 8002a36:	f007 f94e 	bl	8009cd6 <osDelayUntil>
	writeByte(0x03, 0x80);
 8002a3a:	2180      	movs	r1, #128	; 0x80
 8002a3c:	2003      	movs	r0, #3
 8002a3e:	f000 f883 	bl	8002b48 <writeByte>
	osDelayUntil(10);
 8002a42:	200a      	movs	r0, #10
 8002a44:	f007 f947 	bl	8009cd6 <osDelayUntil>
	writeByte(0x07, 0x3F);
 8002a48:	213f      	movs	r1, #63	; 0x3f
 8002a4a:	2007      	movs	r0, #7
 8002a4c:	f000 f87c 	bl	8002b48 <writeByte>
	osDelayUntil(10);
 8002a50:	200a      	movs	r0, #10
 8002a52:	f007 f940 	bl	8009cd6 <osDelayUntil>
	writeByte(0x06, 0x01);
 8002a56:	2101      	movs	r1, #1
 8002a58:	2006      	movs	r0, #6
 8002a5a:	f000 f875 	bl	8002b48 <writeByte>
	osDelayUntil(10);
 8002a5e:	200a      	movs	r0, #10
 8002a60:	f007 f939 	bl	8009cd6 <osDelayUntil>
	writeByte(0x7F, 0x20); // go to bank 2
 8002a64:	2120      	movs	r1, #32
 8002a66:	207f      	movs	r0, #127	; 0x7f
 8002a68:	f000 f86e 	bl	8002b48 <writeByte>
	osDelayUntil(10);
 8002a6c:	200a      	movs	r0, #10
 8002a6e:	f007 f932 	bl	8009cd6 <osDelayUntil>
	writeByte(0x01, 0x2F); // config gyro, enable gyro, dlpf, set gyro to +-2000dps; gyro lpf = 3'b101
 8002a72:	212f      	movs	r1, #47	; 0x2f
 8002a74:	2001      	movs	r0, #1
 8002a76:	f000 f867 	bl	8002b48 <writeByte>
	osDelayUntil(10);
 8002a7a:	200a      	movs	r0, #10
 8002a7c:	f007 f92b 	bl	8009cd6 <osDelayUntil>
	writeByte(0x00, 0x00); // set gyro sample rate divider = 1 + 0(GYRO_SMPLRT_DIV[7:0])
 8002a80:	2100      	movs	r1, #0
 8002a82:	2000      	movs	r0, #0
 8002a84:	f000 f860 	bl	8002b48 <writeByte>
	osDelayUntil(10);
 8002a88:	200a      	movs	r0, #10
 8002a8a:	f007 f924 	bl	8009cd6 <osDelayUntil>
	writeByte(0x01, 0x2F); // config accel, enable gyro, dlpf, set gyro to +-2000dps; gyro lpf = 3'b101
 8002a8e:	212f      	movs	r1, #47	; 0x2f
 8002a90:	2001      	movs	r0, #1
 8002a92:	f000 f859 	bl	8002b48 <writeByte>
	osDelayUntil(10);
 8002a96:	200a      	movs	r0, #10
 8002a98:	f007 f91d 	bl	8009cd6 <osDelayUntil>
	writeByte(0x00, 0x00); // set gyro sample rate divider = 1 + 0(GYRO_SMPLRT_DIV[7:0])
 8002a9c:	2100      	movs	r1, #0
 8002a9e:	2000      	movs	r0, #0
 8002aa0:	f000 f852 	bl	8002b48 <writeByte>
	osDelayUntil(10);
 8002aa4:	200a      	movs	r0, #10
 8002aa6:	f007 f916 	bl	8009cd6 <osDelayUntil>
	writeByte(0x7F, 0x00); // return to bank 1
 8002aaa:	2100      	movs	r1, #0
 8002aac:	207f      	movs	r0, #127	; 0x7f
 8002aae:	f000 f84b 	bl	8002b48 <writeByte>
	osDelayUntil(10);
 8002ab2:	200a      	movs	r0, #10
 8002ab4:	f007 f90f 	bl	8009cd6 <osDelayUntil>
	writeByte(0x07, 0x00);
 8002ab8:	2100      	movs	r1, #0
 8002aba:	2007      	movs	r0, #7
 8002abc:	f000 f844 	bl	8002b48 <writeByte>
	osDelayUntil(10);
 8002ac0:	200a      	movs	r0, #10
 8002ac2:	f007 f908 	bl	8009cd6 <osDelayUntil>
}
 8002ac6:	bf00      	nop
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
	/*Prevent unused argument(s) compilation warning*/
	UNUSED(huart);

	if(RX_FLAG == 0){
 8002ad4:	4b17      	ldr	r3, [pc, #92]	; (8002b34 <HAL_UART_RxCpltCallback+0x68>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d11c      	bne.n	8002b16 <HAL_UART_RxCpltCallback+0x4a>
		char RX_MOTOR = (char) aRxBuffer[0];
 8002adc:	4b16      	ldr	r3, [pc, #88]	; (8002b38 <HAL_UART_RxCpltCallback+0x6c>)
 8002ade:	781b      	ldrb	r3, [r3, #0]
 8002ae0:	73fb      	strb	r3, [r7, #15]
		char RX_SERVO = (char) aRxBuffer[1];
 8002ae2:	4b15      	ldr	r3, [pc, #84]	; (8002b38 <HAL_UART_RxCpltCallback+0x6c>)
 8002ae4:	785b      	ldrb	r3, [r3, #1]
 8002ae6:	73bb      	strb	r3, [r7, #14]
		int RX_MAG = ((int)(aRxBuffer[2] - '0') * 100) + ((int)(aRxBuffer[3] - '0') * 10) + ((int)(aRxBuffer[4] - '0'));
 8002ae8:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <HAL_UART_RxCpltCallback+0x6c>)
 8002aea:	789b      	ldrb	r3, [r3, #2]
 8002aec:	3b30      	subs	r3, #48	; 0x30
 8002aee:	2264      	movs	r2, #100	; 0x64
 8002af0:	fb02 f103 	mul.w	r1, r2, r3
 8002af4:	4b10      	ldr	r3, [pc, #64]	; (8002b38 <HAL_UART_RxCpltCallback+0x6c>)
 8002af6:	78db      	ldrb	r3, [r3, #3]
 8002af8:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8002afc:	4613      	mov	r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	4413      	add	r3, r2
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	18ca      	adds	r2, r1, r3
 8002b06:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <HAL_UART_RxCpltCallback+0x6c>)
 8002b08:	791b      	ldrb	r3, [r3, #4]
 8002b0a:	3b30      	subs	r3, #48	; 0x30
 8002b0c:	4413      	add	r3, r2
 8002b0e:	60bb      	str	r3, [r7, #8]
		RX_FLAG = 1;
 8002b10:	4b08      	ldr	r3, [pc, #32]	; (8002b34 <HAL_UART_RxCpltCallback+0x68>)
 8002b12:	2201      	movs	r2, #1
 8002b14:	601a      	str	r2, [r3, #0]
	}

	new_cmd_received = 1;
 8002b16:	4b09      	ldr	r3, [pc, #36]	; (8002b3c <HAL_UART_RxCpltCallback+0x70>)
 8002b18:	2201      	movs	r2, #1
 8002b1a:	601a      	str	r2, [r3, #0]

	// reinitialize buffer for next reception
	//HAL_UART_Transmit_IT(&huart3, (uint8_t *)aRxBuffer, RX_BUFFER_SIZE);
	HAL_UART_Receive_IT(&huart3,(uint8_t *)aRxBuffer,RX_BUFFER_SIZE);
 8002b1c:	4b08      	ldr	r3, [pc, #32]	; (8002b40 <HAL_UART_RxCpltCallback+0x74>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	461a      	mov	r2, r3
 8002b24:	4904      	ldr	r1, [pc, #16]	; (8002b38 <HAL_UART_RxCpltCallback+0x6c>)
 8002b26:	4807      	ldr	r0, [pc, #28]	; (8002b44 <HAL_UART_RxCpltCallback+0x78>)
 8002b28:	f006 f811 	bl	8008b4e <HAL_UART_Receive_IT>
}
 8002b2c:	bf00      	nop
 8002b2e:	3710      	adds	r7, #16
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	200008e8 	.word	0x200008e8
 8002b38:	200008cc 	.word	0x200008cc
 8002b3c:	200008e4 	.word	0x200008e4
 8002b40:	20000000 	.word	0x20000000
 8002b44:	20000860 	.word	0x20000860

08002b48 <writeByte>:
}



void writeByte(uint8_t addr, uint8_t data)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af02      	add	r7, sp, #8
 8002b4e:	4603      	mov	r3, r0
 8002b50:	460a      	mov	r2, r1
 8002b52:	71fb      	strb	r3, [r7, #7]
 8002b54:	4613      	mov	r3, r2
 8002b56:	71bb      	strb	r3, [r7, #6]
	buff[0] = addr;
 8002b58:	4a0a      	ldr	r2, [pc, #40]	; (8002b84 <writeByte+0x3c>)
 8002b5a:	79fb      	ldrb	r3, [r7, #7]
 8002b5c:	7013      	strb	r3, [r2, #0]
	buff[1] = data;
 8002b5e:	4a09      	ldr	r2, [pc, #36]	; (8002b84 <writeByte+0x3c>)
 8002b60:	79bb      	ldrb	r3, [r7, #6]
 8002b62:	7053      	strb	r3, [r2, #1]
	HAL_I2C_Master_Transmit(&hi2c1, ICM_ADDR<<1, buff, 2, 20);
 8002b64:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <writeByte+0x40>)
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	b299      	uxth	r1, r3
 8002b6e:	2314      	movs	r3, #20
 8002b70:	9300      	str	r3, [sp, #0]
 8002b72:	2302      	movs	r3, #2
 8002b74:	4a03      	ldr	r2, [pc, #12]	; (8002b84 <writeByte+0x3c>)
 8002b76:	4805      	ldr	r0, [pc, #20]	; (8002b8c <writeByte+0x44>)
 8002b78:	f002 ff5c 	bl	8005a34 <HAL_I2C_Master_Transmit>
}
 8002b7c:	bf00      	nop
 8002b7e:	3708      	adds	r7, #8
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bd80      	pop	{r7, pc}
 8002b84:	200008ec 	.word	0x200008ec
 8002b88:	20000004 	.word	0x20000004
 8002b8c:	200006a4 	.word	0x200006a4

08002b90 <readByte>:

void readByte(uint8_t addr, uint8_t *data)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af02      	add	r7, sp, #8
 8002b96:	4603      	mov	r3, r0
 8002b98:	6039      	str	r1, [r7, #0]
 8002b9a:	71fb      	strb	r3, [r7, #7]
	buff[0] = addr;
 8002b9c:	4a0f      	ldr	r2, [pc, #60]	; (8002bdc <readByte+0x4c>)
 8002b9e:	79fb      	ldrb	r3, [r7, #7]
 8002ba0:	7013      	strb	r3, [r2, #0]
	// Tell we want to read from the register
	HAL_I2C_Master_Transmit(&hi2c1, ICM_ADDR<<1, buff, 1, 10);
 8002ba2:	4b0f      	ldr	r3, [pc, #60]	; (8002be0 <readByte+0x50>)
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	b29b      	uxth	r3, r3
 8002ba8:	005b      	lsls	r3, r3, #1
 8002baa:	b299      	uxth	r1, r3
 8002bac:	230a      	movs	r3, #10
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	4a0a      	ldr	r2, [pc, #40]	; (8002bdc <readByte+0x4c>)
 8002bb4:	480b      	ldr	r0, [pc, #44]	; (8002be4 <readByte+0x54>)
 8002bb6:	f002 ff3d 	bl	8005a34 <HAL_I2C_Master_Transmit>
	// Read 2 byte from z dir register
	HAL_I2C_Master_Receive(&hi2c1, ICM_ADDR<<1, data, 2, 20);
 8002bba:	4b09      	ldr	r3, [pc, #36]	; (8002be0 <readByte+0x50>)
 8002bbc:	781b      	ldrb	r3, [r3, #0]
 8002bbe:	b29b      	uxth	r3, r3
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	b299      	uxth	r1, r3
 8002bc4:	2314      	movs	r3, #20
 8002bc6:	9300      	str	r3, [sp, #0]
 8002bc8:	2302      	movs	r3, #2
 8002bca:	683a      	ldr	r2, [r7, #0]
 8002bcc:	4805      	ldr	r0, [pc, #20]	; (8002be4 <readByte+0x54>)
 8002bce:	f003 f82f 	bl	8005c30 <HAL_I2C_Master_Receive>
}
 8002bd2:	bf00      	nop
 8002bd4:	3708      	adds	r7, #8
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	200008ec 	.word	0x200008ec
 8002be0:	20000004 	.word	0x20000004
 8002be4:	200006a4 	.word	0x200006a4

08002be8 <delay_us>:

void delay_us(uint16_t us)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	4603      	mov	r3, r0
 8002bf0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim4,0);  // set the counter value a 0
 8002bf2:	4b09      	ldr	r3, [pc, #36]	; (8002c18 <delay_us+0x30>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	2200      	movs	r2, #0
 8002bf8:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim4) < us);  // wait for the counter to reach the us input in the parameter
 8002bfa:	bf00      	nop
 8002bfc:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <delay_us+0x30>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c02:	88fb      	ldrh	r3, [r7, #6]
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d3f9      	bcc.n	8002bfc <delay_us+0x14>
}
 8002c08:	bf00      	nop
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr
 8002c16:	bf00      	nop
 8002c18:	200007d0 	.word	0x200007d0
 8002c1c:	00000000 	.word	0x00000000

08002c20 <HAL_TIM_IC_CaptureCallback>:


void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	7f1b      	ldrb	r3, [r3, #28]
 8002c2c:	2b01      	cmp	r3, #1
 8002c2e:	f040 8083 	bne.w	8002d38 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8002c32:	4b45      	ldr	r3, [pc, #276]	; (8002d48 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d11a      	bne.n	8002c70 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			Echo_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8002c3a:	2100      	movs	r1, #0
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f005 f91f 	bl	8007e80 <HAL_TIM_ReadCapturedValue>
 8002c42:	4603      	mov	r3, r0
 8002c44:	4a41      	ldr	r2, [pc, #260]	; (8002d4c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002c46:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 8002c48:	4b3f      	ldr	r3, [pc, #252]	; (8002d48 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6a1a      	ldr	r2, [r3, #32]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 020a 	bic.w	r2, r2, #10
 8002c5c:	621a      	str	r2, [r3, #32]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	6a1a      	ldr	r2, [r3, #32]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f042 0202 	orr.w	r2, r2, #2
 8002c6c:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
		}
	}
}
 8002c6e:	e063      	b.n	8002d38 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8002c70:	4b35      	ldr	r3, [pc, #212]	; (8002d48 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002c72:	781b      	ldrb	r3, [r3, #0]
 8002c74:	2b01      	cmp	r3, #1
 8002c76:	d15f      	bne.n	8002d38 <HAL_TIM_IC_CaptureCallback+0x118>
			Echo_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8002c78:	2100      	movs	r1, #0
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f005 f900 	bl	8007e80 <HAL_TIM_ReadCapturedValue>
 8002c80:	4603      	mov	r3, r0
 8002c82:	4a33      	ldr	r2, [pc, #204]	; (8002d50 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002c84:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	625a      	str	r2, [r3, #36]	; 0x24
			if (Echo_Val2 > Echo_Val1)
 8002c8e:	4b30      	ldr	r3, [pc, #192]	; (8002d50 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002c90:	681a      	ldr	r2, [r3, #0]
 8002c92:	4b2e      	ldr	r3, [pc, #184]	; (8002d4c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d907      	bls.n	8002caa <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = Echo_Val2-Echo_Val1;
 8002c9a:	4b2d      	ldr	r3, [pc, #180]	; (8002d50 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	4b2b      	ldr	r3, [pc, #172]	; (8002d4c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	1ad3      	subs	r3, r2, r3
 8002ca4:	4a2b      	ldr	r2, [pc, #172]	; (8002d54 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002ca6:	6013      	str	r3, [r2, #0]
 8002ca8:	e00f      	b.n	8002cca <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (Echo_Val1 > Echo_Val2)
 8002caa:	4b28      	ldr	r3, [pc, #160]	; (8002d4c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	4b28      	ldr	r3, [pc, #160]	; (8002d50 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d909      	bls.n	8002cca <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - Echo_Val1) + Echo_Val2;
 8002cb6:	4b26      	ldr	r3, [pc, #152]	; (8002d50 <HAL_TIM_IC_CaptureCallback+0x130>)
 8002cb8:	681a      	ldr	r2, [r3, #0]
 8002cba:	4b24      	ldr	r3, [pc, #144]	; (8002d4c <HAL_TIM_IC_CaptureCallback+0x12c>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8002cc4:	33ff      	adds	r3, #255	; 0xff
 8002cc6:	4a23      	ldr	r2, [pc, #140]	; (8002d54 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002cc8:	6013      	str	r3, [r2, #0]
			UD = (Difference * 0.034)/2;
 8002cca:	4b22      	ldr	r3, [pc, #136]	; (8002d54 <HAL_TIM_IC_CaptureCallback+0x134>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4618      	mov	r0, r3
 8002cd0:	f7fd fc18 	bl	8000504 <__aeabi_ui2d>
 8002cd4:	a31a      	add	r3, pc, #104	; (adr r3, 8002d40 <HAL_TIM_IC_CaptureCallback+0x120>)
 8002cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cda:	f7fd fc8d 	bl	80005f8 <__aeabi_dmul>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4610      	mov	r0, r2
 8002ce4:	4619      	mov	r1, r3
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002cee:	f7fd fdad 	bl	800084c <__aeabi_ddiv>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	460b      	mov	r3, r1
 8002cf6:	4610      	mov	r0, r2
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	f7fd ff55 	bl	8000ba8 <__aeabi_d2uiz>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	4b15      	ldr	r3, [pc, #84]	; (8002d58 <HAL_TIM_IC_CaptureCallback+0x138>)
 8002d04:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 8002d06:	4b10      	ldr	r3, [pc, #64]	; (8002d48 <HAL_TIM_IC_CaptureCallback+0x128>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	6a1a      	ldr	r2, [r3, #32]
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f022 020a 	bic.w	r2, r2, #10
 8002d1a:	621a      	str	r2, [r3, #32]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6a12      	ldr	r2, [r2, #32]
 8002d26:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim4, TIM_IT_CC1);
 8002d28:	4b0c      	ldr	r3, [pc, #48]	; (8002d5c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	68da      	ldr	r2, [r3, #12]
 8002d2e:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <HAL_TIM_IC_CaptureCallback+0x13c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0202 	bic.w	r2, r2, #2
 8002d36:	60da      	str	r2, [r3, #12]
}
 8002d38:	bf00      	nop
 8002d3a:	3708      	adds	r7, #8
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	b020c49c 	.word	0xb020c49c
 8002d44:	3fa16872 	.word	0x3fa16872
 8002d48:	20000968 	.word	0x20000968
 8002d4c:	2000095c 	.word	0x2000095c
 8002d50:	20000960 	.word	0x20000960
 8002d54:	20000964 	.word	0x20000964
 8002d58:	20000006 	.word	0x20000006
 8002d5c:	200007d0 	.word	0x200007d0

08002d60 <HCSR04_Read>:

void HCSR04_Read (void)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_SET);  // pull the TRIG pin HIGH
 8002d64:	2201      	movs	r2, #1
 8002d66:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d6a:	480b      	ldr	r0, [pc, #44]	; (8002d98 <HCSR04_Read+0x38>)
 8002d6c:	f002 fd04 	bl	8005778 <HAL_GPIO_WritePin>
	delay_us(10);  // wait f or 10 us
 8002d70:	200a      	movs	r0, #10
 8002d72:	f7ff ff39 	bl	8002be8 <delay_us>
	HAL_GPIO_WritePin(Trig_GPIO_Port, Trig_Pin, GPIO_PIN_RESET);  // pull the TRIG pin low
 8002d76:	2200      	movs	r2, #0
 8002d78:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002d7c:	4806      	ldr	r0, [pc, #24]	; (8002d98 <HCSR04_Read+0x38>)
 8002d7e:	f002 fcfb 	bl	8005778 <HAL_GPIO_WritePin>
	__HAL_TIM_ENABLE_IT(&htim4, TIM_IT_CC1);
 8002d82:	4b06      	ldr	r3, [pc, #24]	; (8002d9c <HCSR04_Read+0x3c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	68da      	ldr	r2, [r3, #12]
 8002d88:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <HCSR04_Read+0x3c>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f042 0202 	orr.w	r2, r2, #2
 8002d90:	60da      	str	r2, [r3, #12]
}
 8002d92:	bf00      	nop
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40021000 	.word	0x40021000
 8002d9c:	200007d0 	.word	0x200007d0

08002da0 <left_irRead>:

void left_irRead(){
 8002da0:	b5b0      	push	{r4, r5, r7, lr}
 8002da2:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8002da4:	484c      	ldr	r0, [pc, #304]	; (8002ed8 <left_irRead+0x138>)
 8002da6:	f001 fdeb 	bl	8004980 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 10);
 8002daa:	210a      	movs	r1, #10
 8002dac:	484a      	ldr	r0, [pc, #296]	; (8002ed8 <left_irRead+0x138>)
 8002dae:	f001 feec 	bl	8004b8a <HAL_ADC_PollForConversion>
	iDistanceL = HAL_ADC_GetValue(&hadc1);
 8002db2:	4849      	ldr	r0, [pc, #292]	; (8002ed8 <left_irRead+0x138>)
 8002db4:	f001 ff74 	bl	8004ca0 <HAL_ADC_GetValue>
 8002db8:	4603      	mov	r3, r0
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	4b47      	ldr	r3, [pc, #284]	; (8002edc <left_irRead+0x13c>)
 8002dbe:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc1);
 8002dc0:	4845      	ldr	r0, [pc, #276]	; (8002ed8 <left_irRead+0x138>)
 8002dc2:	f001 feaf 	bl	8004b24 <HAL_ADC_Stop>

	// Low-pass filter equation
	filtered_irreadingL = (FILTER_ALPHA2 * iDistanceL) + ((1 - FILTER_ALPHA2) * filtered_irreadingL);
 8002dc6:	4b45      	ldr	r3, [pc, #276]	; (8002edc <left_irRead+0x13c>)
 8002dc8:	881b      	ldrh	r3, [r3, #0]
 8002dca:	4618      	mov	r0, r3
 8002dcc:	f7fd fbaa 	bl	8000524 <__aeabi_i2d>
 8002dd0:	a337      	add	r3, pc, #220	; (adr r3, 8002eb0 <left_irRead+0x110>)
 8002dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dd6:	f7fd fc0f 	bl	80005f8 <__aeabi_dmul>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	460b      	mov	r3, r1
 8002dde:	4614      	mov	r4, r2
 8002de0:	461d      	mov	r5, r3
 8002de2:	4b3f      	ldr	r3, [pc, #252]	; (8002ee0 <left_irRead+0x140>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fd fbae 	bl	8000548 <__aeabi_f2d>
 8002dec:	a332      	add	r3, pc, #200	; (adr r3, 8002eb8 <left_irRead+0x118>)
 8002dee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002df2:	f7fd fc01 	bl	80005f8 <__aeabi_dmul>
 8002df6:	4602      	mov	r2, r0
 8002df8:	460b      	mov	r3, r1
 8002dfa:	4620      	mov	r0, r4
 8002dfc:	4629      	mov	r1, r5
 8002dfe:	f7fd fa45 	bl	800028c <__adddf3>
 8002e02:	4602      	mov	r2, r0
 8002e04:	460b      	mov	r3, r1
 8002e06:	4610      	mov	r0, r2
 8002e08:	4619      	mov	r1, r3
 8002e0a:	f7fd feed 	bl	8000be8 <__aeabi_d2f>
 8002e0e:	4603      	mov	r3, r0
 8002e10:	4a33      	ldr	r2, [pc, #204]	; (8002ee0 <left_irRead+0x140>)
 8002e12:	6013      	str	r3, [r2, #0]
	filtered_irreading_intL = (int) filtered_irreadingL;
 8002e14:	4b32      	ldr	r3, [pc, #200]	; (8002ee0 <left_irRead+0x140>)
 8002e16:	edd3 7a00 	vldr	s15, [r3]
 8002e1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e1e:	ee17 3a90 	vmov	r3, s15
 8002e22:	b29a      	uxth	r2, r3
 8002e24:	4b2f      	ldr	r3, [pc, #188]	; (8002ee4 <left_irRead+0x144>)
 8002e26:	801a      	strh	r2, [r3, #0]

	// Linear-regression formula to convert IR Values to distance
	distanceirrL = pow(10, -1.754*(log10((float) filtered_irreadingL))+7.064);
 8002e28:	4b2d      	ldr	r3, [pc, #180]	; (8002ee0 <left_irRead+0x140>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4618      	mov	r0, r3
 8002e2e:	f7fd fb8b 	bl	8000548 <__aeabi_f2d>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	ec43 2b10 	vmov	d0, r2, r3
 8002e3a:	f00c fc51 	bl	800f6e0 <log10>
 8002e3e:	ec51 0b10 	vmov	r0, r1, d0
 8002e42:	a31f      	add	r3, pc, #124	; (adr r3, 8002ec0 <left_irRead+0x120>)
 8002e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e48:	f7fd fbd6 	bl	80005f8 <__aeabi_dmul>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	4610      	mov	r0, r2
 8002e52:	4619      	mov	r1, r3
 8002e54:	a31c      	add	r3, pc, #112	; (adr r3, 8002ec8 <left_irRead+0x128>)
 8002e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5a:	f7fd fa17 	bl	800028c <__adddf3>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	ec43 2b17 	vmov	d7, r2, r3
 8002e66:	eeb0 1a47 	vmov.f32	s2, s14
 8002e6a:	eef0 1a67 	vmov.f32	s3, s15
 8002e6e:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8002ed0 <left_irRead+0x130>
 8002e72:	f00c fc73 	bl	800f75c <pow>
 8002e76:	ec53 2b10 	vmov	r2, r3, d0
 8002e7a:	4610      	mov	r0, r2
 8002e7c:	4619      	mov	r1, r3
 8002e7e:	f7fd feb3 	bl	8000be8 <__aeabi_d2f>
 8002e82:	4603      	mov	r3, r0
 8002e84:	4a18      	ldr	r2, [pc, #96]	; (8002ee8 <left_irRead+0x148>)
 8002e86:	6013      	str	r3, [r2, #0]
	distanceirL = (int) distanceirrL;
 8002e88:	4b17      	ldr	r3, [pc, #92]	; (8002ee8 <left_irRead+0x148>)
 8002e8a:	edd3 7a00 	vldr	s15, [r3]
 8002e8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e92:	ee17 3a90 	vmov	r3, s15
 8002e96:	b29a      	uxth	r2, r3
 8002e98:	4b14      	ldr	r3, [pc, #80]	; (8002eec <left_irRead+0x14c>)
 8002e9a:	801a      	strh	r2, [r3, #0]
	sprintf(irLeft, "IR LEFT: %5d", distanceirL);
 8002e9c:	4b13      	ldr	r3, [pc, #76]	; (8002eec <left_irRead+0x14c>)
 8002e9e:	881b      	ldrh	r3, [r3, #0]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	4913      	ldr	r1, [pc, #76]	; (8002ef0 <left_irRead+0x150>)
 8002ea4:	4813      	ldr	r0, [pc, #76]	; (8002ef4 <left_irRead+0x154>)
 8002ea6:	f00a f8c7 	bl	800d038 <siprintf>
}
 8002eaa:	bf00      	nop
 8002eac:	bdb0      	pop	{r4, r5, r7, pc}
 8002eae:	bf00      	nop
 8002eb0:	33333333 	.word	0x33333333
 8002eb4:	3fc33333 	.word	0x3fc33333
 8002eb8:	33333333 	.word	0x33333333
 8002ebc:	3feb3333 	.word	0x3feb3333
 8002ec0:	4dd2f1aa 	.word	0x4dd2f1aa
 8002ec4:	bffc1062 	.word	0xbffc1062
 8002ec8:	374bc6a8 	.word	0x374bc6a8
 8002ecc:	401c4189 	.word	0x401c4189
 8002ed0:	00000000 	.word	0x00000000
 8002ed4:	40240000 	.word	0x40240000
 8002ed8:	20000614 	.word	0x20000614
 8002edc:	2000099a 	.word	0x2000099a
 8002ee0:	20000010 	.word	0x20000010
 8002ee4:	20000988 	.word	0x20000988
 8002ee8:	2000098c 	.word	0x2000098c
 8002eec:	20000990 	.word	0x20000990
 8002ef0:	08010ad0 	.word	0x08010ad0
 8002ef4:	200009a0 	.word	0x200009a0

08002ef8 <right_irRead>:

void right_irRead(){
 8002ef8:	b5b0      	push	{r4, r5, r7, lr}
 8002efa:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc2);
 8002efc:	484c      	ldr	r0, [pc, #304]	; (8003030 <right_irRead+0x138>)
 8002efe:	f001 fd3f 	bl	8004980 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc2, 10);
 8002f02:	210a      	movs	r1, #10
 8002f04:	484a      	ldr	r0, [pc, #296]	; (8003030 <right_irRead+0x138>)
 8002f06:	f001 fe40 	bl	8004b8a <HAL_ADC_PollForConversion>
	iDistanceR = HAL_ADC_GetValue(&hadc2);
 8002f0a:	4849      	ldr	r0, [pc, #292]	; (8003030 <right_irRead+0x138>)
 8002f0c:	f001 fec8 	bl	8004ca0 <HAL_ADC_GetValue>
 8002f10:	4603      	mov	r3, r0
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	4b47      	ldr	r3, [pc, #284]	; (8003034 <right_irRead+0x13c>)
 8002f16:	801a      	strh	r2, [r3, #0]
	HAL_ADC_Stop(&hadc2);
 8002f18:	4845      	ldr	r0, [pc, #276]	; (8003030 <right_irRead+0x138>)
 8002f1a:	f001 fe03 	bl	8004b24 <HAL_ADC_Stop>

	// Low-pass filter equation
	filtered_irreadingR = (FILTER_ALPHA2 * iDistanceR) + ((1 - FILTER_ALPHA2) * filtered_irreadingR);
 8002f1e:	4b45      	ldr	r3, [pc, #276]	; (8003034 <right_irRead+0x13c>)
 8002f20:	881b      	ldrh	r3, [r3, #0]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f7fd fafe 	bl	8000524 <__aeabi_i2d>
 8002f28:	a337      	add	r3, pc, #220	; (adr r3, 8003008 <right_irRead+0x110>)
 8002f2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f2e:	f7fd fb63 	bl	80005f8 <__aeabi_dmul>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4614      	mov	r4, r2
 8002f38:	461d      	mov	r5, r3
 8002f3a:	4b3f      	ldr	r3, [pc, #252]	; (8003038 <right_irRead+0x140>)
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f7fd fb02 	bl	8000548 <__aeabi_f2d>
 8002f44:	a332      	add	r3, pc, #200	; (adr r3, 8003010 <right_irRead+0x118>)
 8002f46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f4a:	f7fd fb55 	bl	80005f8 <__aeabi_dmul>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	460b      	mov	r3, r1
 8002f52:	4620      	mov	r0, r4
 8002f54:	4629      	mov	r1, r5
 8002f56:	f7fd f999 	bl	800028c <__adddf3>
 8002f5a:	4602      	mov	r2, r0
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	4610      	mov	r0, r2
 8002f60:	4619      	mov	r1, r3
 8002f62:	f7fd fe41 	bl	8000be8 <__aeabi_d2f>
 8002f66:	4603      	mov	r3, r0
 8002f68:	4a33      	ldr	r2, [pc, #204]	; (8003038 <right_irRead+0x140>)
 8002f6a:	6013      	str	r3, [r2, #0]
	filtered_irreading_intR = (int) filtered_irreadingR;
 8002f6c:	4b32      	ldr	r3, [pc, #200]	; (8003038 <right_irRead+0x140>)
 8002f6e:	edd3 7a00 	vldr	s15, [r3]
 8002f72:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f76:	ee17 3a90 	vmov	r3, s15
 8002f7a:	b29a      	uxth	r2, r3
 8002f7c:	4b2f      	ldr	r3, [pc, #188]	; (800303c <right_irRead+0x144>)
 8002f7e:	801a      	strh	r2, [r3, #0]

	// Linear-regression formula to convert IR Values to distance
	distanceirrR = pow(10, -1.754*(log10((float) filtered_irreadingR))+7.064);
 8002f80:	4b2d      	ldr	r3, [pc, #180]	; (8003038 <right_irRead+0x140>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7fd fadf 	bl	8000548 <__aeabi_f2d>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	ec43 2b10 	vmov	d0, r2, r3
 8002f92:	f00c fba5 	bl	800f6e0 <log10>
 8002f96:	ec51 0b10 	vmov	r0, r1, d0
 8002f9a:	a31f      	add	r3, pc, #124	; (adr r3, 8003018 <right_irRead+0x120>)
 8002f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa0:	f7fd fb2a 	bl	80005f8 <__aeabi_dmul>
 8002fa4:	4602      	mov	r2, r0
 8002fa6:	460b      	mov	r3, r1
 8002fa8:	4610      	mov	r0, r2
 8002faa:	4619      	mov	r1, r3
 8002fac:	a31c      	add	r3, pc, #112	; (adr r3, 8003020 <right_irRead+0x128>)
 8002fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fb2:	f7fd f96b 	bl	800028c <__adddf3>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	460b      	mov	r3, r1
 8002fba:	ec43 2b17 	vmov	d7, r2, r3
 8002fbe:	eeb0 1a47 	vmov.f32	s2, s14
 8002fc2:	eef0 1a67 	vmov.f32	s3, s15
 8002fc6:	ed9f 0b18 	vldr	d0, [pc, #96]	; 8003028 <right_irRead+0x130>
 8002fca:	f00c fbc7 	bl	800f75c <pow>
 8002fce:	ec53 2b10 	vmov	r2, r3, d0
 8002fd2:	4610      	mov	r0, r2
 8002fd4:	4619      	mov	r1, r3
 8002fd6:	f7fd fe07 	bl	8000be8 <__aeabi_d2f>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	4a18      	ldr	r2, [pc, #96]	; (8003040 <right_irRead+0x148>)
 8002fde:	6013      	str	r3, [r2, #0]
	distanceirR = (int) distanceirrR;
 8002fe0:	4b17      	ldr	r3, [pc, #92]	; (8003040 <right_irRead+0x148>)
 8002fe2:	edd3 7a00 	vldr	s15, [r3]
 8002fe6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fea:	ee17 3a90 	vmov	r3, s15
 8002fee:	b29a      	uxth	r2, r3
 8002ff0:	4b14      	ldr	r3, [pc, #80]	; (8003044 <right_irRead+0x14c>)
 8002ff2:	801a      	strh	r2, [r3, #0]
	sprintf(irRight, "IR RIGHT: %5d", distanceirR);
 8002ff4:	4b13      	ldr	r3, [pc, #76]	; (8003044 <right_irRead+0x14c>)
 8002ff6:	881b      	ldrh	r3, [r3, #0]
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	4913      	ldr	r1, [pc, #76]	; (8003048 <right_irRead+0x150>)
 8002ffc:	4813      	ldr	r0, [pc, #76]	; (800304c <right_irRead+0x154>)
 8002ffe:	f00a f81b 	bl	800d038 <siprintf>
}
 8003002:	bf00      	nop
 8003004:	bdb0      	pop	{r4, r5, r7, pc}
 8003006:	bf00      	nop
 8003008:	33333333 	.word	0x33333333
 800300c:	3fc33333 	.word	0x3fc33333
 8003010:	33333333 	.word	0x33333333
 8003014:	3feb3333 	.word	0x3feb3333
 8003018:	4dd2f1aa 	.word	0x4dd2f1aa
 800301c:	bffc1062 	.word	0xbffc1062
 8003020:	374bc6a8 	.word	0x374bc6a8
 8003024:	401c4189 	.word	0x401c4189
 8003028:	00000000 	.word	0x00000000
 800302c:	40240000 	.word	0x40240000
 8003030:	2000065c 	.word	0x2000065c
 8003034:	2000099c 	.word	0x2000099c
 8003038:	20000014 	.word	0x20000014
 800303c:	20000992 	.word	0x20000992
 8003040:	20000994 	.word	0x20000994
 8003044:	20000998 	.word	0x20000998
 8003048:	08010ae0 	.word	0x08010ae0
 800304c:	200009b4 	.word	0x200009b4

08003050 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	int progress = -1;
 8003058:	f04f 33ff 	mov.w	r3, #4294967295
 800305c:	61fb      	str	r3, [r7, #28]
	command.MOTOR_DIR = 0;
 800305e:	4bb7      	ldr	r3, [pc, #732]	; (800333c <StartDefaultTask+0x2ec>)
 8003060:	2200      	movs	r2, #0
 8003062:	701a      	strb	r2, [r3, #0]
	command.SERVO_DIR = 0;
 8003064:	4bb5      	ldr	r3, [pc, #724]	; (800333c <StartDefaultTask+0x2ec>)
 8003066:	2200      	movs	r2, #0
 8003068:	705a      	strb	r2, [r3, #1]
	command.MAGNITUDE = 0;
 800306a:	4bb4      	ldr	r3, [pc, #720]	; (800333c <StartDefaultTask+0x2ec>)
 800306c:	2200      	movs	r2, #0
 800306e:	605a      	str	r2, [r3, #4]
	TURNING_ANGLE = 0;
 8003070:	49b3      	ldr	r1, [pc, #716]	; (8003340 <StartDefaultTask+0x2f0>)
 8003072:	f04f 0200 	mov.w	r2, #0
 8003076:	f04f 0300 	mov.w	r3, #0
 800307a:	e9c1 2300 	strd	r2, r3, [r1]
	LEFTWHEEL_DIST = 0;
 800307e:	49b1      	ldr	r1, [pc, #708]	; (8003344 <StartDefaultTask+0x2f4>)
 8003080:	f04f 0200 	mov.w	r2, #0
 8003084:	f04f 0300 	mov.w	r3, #0
 8003088:	e9c1 2300 	strd	r2, r3, [r1]
	RIGHTWHEEL_DIST = 0;
 800308c:	49ae      	ldr	r1, [pc, #696]	; (8003348 <StartDefaultTask+0x2f8>)
 800308e:	f04f 0200 	mov.w	r2, #0
 8003092:	f04f 0300 	mov.w	r3, #0
 8003096:	e9c1 2300 	strd	r2, r3, [r1]
	char d;
	uint16_t dis= 0;
 800309a:	2300      	movs	r3, #0
 800309c:	837b      	strh	r3, [r7, #26]
	osDelay(1000);
 800309e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030a2:	f006 fdfd 	bl	8009ca0 <osDelay>

	/* Infinite loop */
	new_cmd_received = 1;
 80030a6:	4ba9      	ldr	r3, [pc, #676]	; (800334c <StartDefaultTask+0x2fc>)
 80030a8:	2201      	movs	r2, #1
 80030aa:	601a      	str	r2, [r3, #0]
	//char temp26[100] = "a10,b30,l22,r18,v00,b10,a10";
	//	char temp26[100] = "a30";
	int first_command = 0;
 80030ac:	2300      	movs	r3, #0
 80030ae:	617b      	str	r3, [r7, #20]
	int last_turn = 0;
 80030b0:	2300      	movs	r3, #0
 80030b2:	613b      	str	r3, [r7, #16]
	//HAL_UART_Transmit_IT(&huart3,(uint8_t *)start,10);
	HAL_UART_Transmit(&huart3,"started\n",8,0xFFFF);
 80030b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80030b8:	2208      	movs	r2, #8
 80030ba:	49a5      	ldr	r1, [pc, #660]	; (8003350 <StartDefaultTask+0x300>)
 80030bc:	48a5      	ldr	r0, [pc, #660]	; (8003354 <StartDefaultTask+0x304>)
 80030be:	f005 fcb4 	bl	8008a2a <HAL_UART_Transmit>
	{
		//	  OLED_ShowString(10,10,aRxBuffer);
		//	  OLED_Refresh_Gram();
		//	  osDelay(2000);
		//	  OLED_Clear();
		left_irRead();
 80030c2:	f7ff fe6d 	bl	8002da0 <left_irRead>
		right_irRead();
 80030c6:	f7ff ff17 	bl	8002ef8 <right_irRead>
		if (new_cmd_received)
 80030ca:	4ba0      	ldr	r3, [pc, #640]	; (800334c <StartDefaultTask+0x2fc>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	f000 8248 	beq.w	8003564 <StartDefaultTask+0x514>
		{
			//		   Split the buffer by the delimiter (,)
			token = strtok(aRxBuffer, delim);
 80030d4:	49a0      	ldr	r1, [pc, #640]	; (8003358 <StartDefaultTask+0x308>)
 80030d6:	48a1      	ldr	r0, [pc, #644]	; (800335c <StartDefaultTask+0x30c>)
 80030d8:	f009 ffce 	bl	800d078 <strtok>
 80030dc:	4603      	mov	r3, r0
 80030de:	461a      	mov	r2, r3
 80030e0:	4b9f      	ldr	r3, [pc, #636]	; (8003360 <StartDefaultTask+0x310>)
 80030e2:	601a      	str	r2, [r3, #0]
			//		  token = strtok(temp26, delim);

			// Reset for next command
			new_cmd_received = 0;
 80030e4:	4b99      	ldr	r3, [pc, #612]	; (800334c <StartDefaultTask+0x2fc>)
 80030e6:	2200      	movs	r2, #0
 80030e8:	601a      	str	r2, [r3, #0]
			osDelay(1000);
 80030ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80030ee:	f006 fdd7 	bl	8009ca0 <osDelay>

			while(token != NULL)
 80030f2:	e232      	b.n	800355a <StartDefaultTask+0x50a>
			{
				timef = 0;
 80030f4:	499b      	ldr	r1, [pc, #620]	; (8003364 <StartDefaultTask+0x314>)
 80030f6:	f04f 0200 	mov.w	r2, #0
 80030fa:	f04f 0300 	mov.w	r3, #0
 80030fe:	e9c1 2300 	strd	r2, r3, [r1]
				//char * time_string;
				//if (token[2] != 48) time_string = token+2;
				//else time_string = token+3;
				//timef = atoi(time_string);
				if (strlen(token) > 2) timef = atoi(&token[2]);
 8003102:	4b97      	ldr	r3, [pc, #604]	; (8003360 <StartDefaultTask+0x310>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4618      	mov	r0, r3
 8003108:	f7fd f862 	bl	80001d0 <strlen>
 800310c:	4603      	mov	r3, r0
 800310e:	2b02      	cmp	r3, #2
 8003110:	d90e      	bls.n	8003130 <StartDefaultTask+0xe0>
 8003112:	4b93      	ldr	r3, [pc, #588]	; (8003360 <StartDefaultTask+0x310>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	3302      	adds	r3, #2
 8003118:	4618      	mov	r0, r3
 800311a:	f009 fadf 	bl	800c6dc <atoi>
 800311e:	4603      	mov	r3, r0
 8003120:	4618      	mov	r0, r3
 8003122:	f7fd f9ff 	bl	8000524 <__aeabi_i2d>
 8003126:	4602      	mov	r2, r0
 8003128:	460b      	mov	r3, r1
 800312a:	498e      	ldr	r1, [pc, #568]	; (8003364 <StartDefaultTask+0x314>)
 800312c:	e9c1 2300 	strd	r2, r3, [r1]
				//sprintf(uknow, "uknow: %d", timef);
				switch(token[0])
 8003130:	4b8b      	ldr	r3, [pc, #556]	; (8003360 <StartDefaultTask+0x310>)
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	3b41      	subs	r3, #65	; 0x41
 8003138:	2b14      	cmp	r3, #20
 800313a:	f200 81e5 	bhi.w	8003508 <StartDefaultTask+0x4b8>
 800313e:	a201      	add	r2, pc, #4	; (adr r2, 8003144 <StartDefaultTask+0xf4>)
 8003140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003144:	08003199 	.word	0x08003199
 8003148:	080032e7 	.word	0x080032e7
 800314c:	08003509 	.word	0x08003509
 8003150:	08003509 	.word	0x08003509
 8003154:	08003509 	.word	0x08003509
 8003158:	080031d5 	.word	0x080031d5
 800315c:	08003509 	.word	0x08003509
 8003160:	08003509 	.word	0x08003509
 8003164:	08003509 	.word	0x08003509
 8003168:	08003509 	.word	0x08003509
 800316c:	08003509 	.word	0x08003509
 8003170:	08003509 	.word	0x08003509
 8003174:	08003509 	.word	0x08003509
 8003178:	08003509 	.word	0x08003509
 800317c:	08003477 	.word	0x08003477
 8003180:	080034f3 	.word	0x080034f3
 8003184:	08003509 	.word	0x08003509
 8003188:	08003509 	.word	0x08003509
 800318c:	08003509 	.word	0x08003509
 8003190:	08003509 	.word	0x08003509
 8003194:	08003433 	.word	0x08003433
				{
				case 'A':
					while (1)
					{
						forward(); // Move forward
 8003198:	f7fe ff9a 	bl	80020d0 <forward>
						osDelay(100); // Allow some time for movement
 800319c:	2064      	movs	r0, #100	; 0x64
 800319e:	f006 fd7f 	bl	8009ca0 <osDelay>

						// Check the distance from the ultrasonic sensor
						if (Distance <= timef)
 80031a2:	4b71      	ldr	r3, [pc, #452]	; (8003368 <StartDefaultTask+0x318>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fd f9bc 	bl	8000524 <__aeabi_i2d>
 80031ac:	4b6d      	ldr	r3, [pc, #436]	; (8003364 <StartDefaultTask+0x314>)
 80031ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031b2:	f7fd fc9d 	bl	8000af0 <__aeabi_dcmple>
 80031b6:	4603      	mov	r3, r0
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00a      	beq.n	80031d2 <StartDefaultTask+0x182>
						{
							stop(); // Stop if Distance is smaller or equal to specified distance
 80031bc:	f7fe ff76 	bl	80020ac <stop>
							//uint8_t temp[10] = "stop\0";
							HAL_UART_Transmit(&huart3,"R",1,0xFFFF);
 80031c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031c4:	2201      	movs	r2, #1
 80031c6:	4969      	ldr	r1, [pc, #420]	; (800336c <StartDefaultTask+0x31c>)
 80031c8:	4862      	ldr	r0, [pc, #392]	; (8003354 <StartDefaultTask+0x304>)
 80031ca:	f005 fc2e 	bl	8008a2a <HAL_UART_Transmit>
							break; // Exit the loop
 80031ce:	bf00      	nop
						}
					}

					break;
 80031d0:	e1b4      	b.n	800353c <StartDefaultTask+0x4ec>
						forward(); // Move forward
 80031d2:	e7e1      	b.n	8003198 <StartDefaultTask+0x148>
					//				  }
					//				  break;

					// Move for a specified distance
				case 'F':
					if (token[1] == 'W') {
 80031d4:	4b62      	ldr	r3, [pc, #392]	; (8003360 <StartDefaultTask+0x310>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	3301      	adds	r3, #1
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	2b57      	cmp	r3, #87	; 0x57
 80031de:	d123      	bne.n	8003228 <StartDefaultTask+0x1d8>
						TURNING_ANGLE = 0;
 80031e0:	4957      	ldr	r1, [pc, #348]	; (8003340 <StartDefaultTask+0x2f0>)
 80031e2:	f04f 0200 	mov.w	r2, #0
 80031e6:	f04f 0300 	mov.w	r3, #0
 80031ea:	e9c1 2300 	strd	r2, r3, [r1]
						move(timef, 1, 0);
 80031ee:	4b5d      	ldr	r3, [pc, #372]	; (8003364 <StartDefaultTask+0x314>)
 80031f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031f4:	4610      	mov	r0, r2
 80031f6:	4619      	mov	r1, r3
 80031f8:	f7fd fcf6 	bl	8000be8 <__aeabi_d2f>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2100      	movs	r1, #0
 8003200:	2001      	movs	r0, #1
 8003202:	ee00 3a10 	vmov	s0, r3
 8003206:	f7ff f9e5 	bl	80025d4 <move>
						TURNING_ANGLE = 0;
 800320a:	494d      	ldr	r1, [pc, #308]	; (8003340 <StartDefaultTask+0x2f0>)
 800320c:	f04f 0200 	mov.w	r2, #0
 8003210:	f04f 0300 	mov.w	r3, #0
 8003214:	e9c1 2300 	strd	r2, r3, [r1]
						HAL_UART_Transmit(&huart3,"R",1,0xFFFF);
 8003218:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800321c:	2201      	movs	r2, #1
 800321e:	4953      	ldr	r1, [pc, #332]	; (800336c <StartDefaultTask+0x31c>)
 8003220:	484c      	ldr	r0, [pc, #304]	; (8003354 <StartDefaultTask+0x304>)
 8003222:	f005 fc02 	bl	8008a2a <HAL_UART_Transmit>
						right_turn(timef);
						TURNING_ANGLE=0;
						HAL_UART_Transmit(&huart3,"R",1,0xFFFF);
						stop();
					}
					break;
 8003226:	e182      	b.n	800352e <StartDefaultTask+0x4de>
					else if (token[1] == 'L'){
 8003228:	4b4d      	ldr	r3, [pc, #308]	; (8003360 <StartDefaultTask+0x310>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	3301      	adds	r3, #1
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	2b4c      	cmp	r3, #76	; 0x4c
 8003232:	d128      	bne.n	8003286 <StartDefaultTask+0x236>
						TARGET_ANGLE = timef;
 8003234:	4b4b      	ldr	r3, [pc, #300]	; (8003364 <StartDefaultTask+0x314>)
 8003236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800323a:	494d      	ldr	r1, [pc, #308]	; (8003370 <StartDefaultTask+0x320>)
 800323c:	e9c1 2300 	strd	r2, r3, [r1]
						TURNING_ANGLE = 0;
 8003240:	493f      	ldr	r1, [pc, #252]	; (8003340 <StartDefaultTask+0x2f0>)
 8003242:	f04f 0200 	mov.w	r2, #0
 8003246:	f04f 0300 	mov.w	r3, #0
 800324a:	e9c1 2300 	strd	r2, r3, [r1]
						left_turn(timef);
 800324e:	4b45      	ldr	r3, [pc, #276]	; (8003364 <StartDefaultTask+0x314>)
 8003250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003254:	4610      	mov	r0, r2
 8003256:	4619      	mov	r1, r3
 8003258:	f7fd fc7e 	bl	8000b58 <__aeabi_d2iz>
 800325c:	4603      	mov	r3, r0
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff fb32 	bl	80028c8 <left_turn>
						TURNING_ANGLE=0;
 8003264:	4936      	ldr	r1, [pc, #216]	; (8003340 <StartDefaultTask+0x2f0>)
 8003266:	f04f 0200 	mov.w	r2, #0
 800326a:	f04f 0300 	mov.w	r3, #0
 800326e:	e9c1 2300 	strd	r2, r3, [r1]
						HAL_UART_Transmit(&huart3,"R",1,0xFFFF);
 8003272:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003276:	2201      	movs	r2, #1
 8003278:	493c      	ldr	r1, [pc, #240]	; (800336c <StartDefaultTask+0x31c>)
 800327a:	4836      	ldr	r0, [pc, #216]	; (8003354 <StartDefaultTask+0x304>)
 800327c:	f005 fbd5 	bl	8008a2a <HAL_UART_Transmit>
						stop();
 8003280:	f7fe ff14 	bl	80020ac <stop>
					break;
 8003284:	e153      	b.n	800352e <StartDefaultTask+0x4de>
					else if (token[1] == 'R'){
 8003286:	4b36      	ldr	r3, [pc, #216]	; (8003360 <StartDefaultTask+0x310>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	3301      	adds	r3, #1
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	2b52      	cmp	r3, #82	; 0x52
 8003290:	f040 814d 	bne.w	800352e <StartDefaultTask+0x4de>
						TARGET_ANGLE = timef;
 8003294:	4b33      	ldr	r3, [pc, #204]	; (8003364 <StartDefaultTask+0x314>)
 8003296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800329a:	4935      	ldr	r1, [pc, #212]	; (8003370 <StartDefaultTask+0x320>)
 800329c:	e9c1 2300 	strd	r2, r3, [r1]
						TURNING_ANGLE = 0;
 80032a0:	4927      	ldr	r1, [pc, #156]	; (8003340 <StartDefaultTask+0x2f0>)
 80032a2:	f04f 0200 	mov.w	r2, #0
 80032a6:	f04f 0300 	mov.w	r3, #0
 80032aa:	e9c1 2300 	strd	r2, r3, [r1]
						right_turn(timef);
 80032ae:	4b2d      	ldr	r3, [pc, #180]	; (8003364 <StartDefaultTask+0x314>)
 80032b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b4:	4610      	mov	r0, r2
 80032b6:	4619      	mov	r1, r3
 80032b8:	f7fd fc4e 	bl	8000b58 <__aeabi_d2iz>
 80032bc:	4603      	mov	r3, r0
 80032be:	4618      	mov	r0, r3
 80032c0:	f7ff fac6 	bl	8002850 <right_turn>
						TURNING_ANGLE=0;
 80032c4:	491e      	ldr	r1, [pc, #120]	; (8003340 <StartDefaultTask+0x2f0>)
 80032c6:	f04f 0200 	mov.w	r2, #0
 80032ca:	f04f 0300 	mov.w	r3, #0
 80032ce:	e9c1 2300 	strd	r2, r3, [r1]
						HAL_UART_Transmit(&huart3,"R",1,0xFFFF);
 80032d2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80032d6:	2201      	movs	r2, #1
 80032d8:	4924      	ldr	r1, [pc, #144]	; (800336c <StartDefaultTask+0x31c>)
 80032da:	481e      	ldr	r0, [pc, #120]	; (8003354 <StartDefaultTask+0x304>)
 80032dc:	f005 fba5 	bl	8008a2a <HAL_UART_Transmit>
						stop();
 80032e0:	f7fe fee4 	bl	80020ac <stop>
					break;
 80032e4:	e123      	b.n	800352e <StartDefaultTask+0x4de>
					//				  stop();
					//				  break;

					//backward
				case 'B':
					if (token[1] == 'W'){
 80032e6:	4b1e      	ldr	r3, [pc, #120]	; (8003360 <StartDefaultTask+0x310>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	3301      	adds	r3, #1
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	2b57      	cmp	r3, #87	; 0x57
 80032f0:	d140      	bne.n	8003374 <StartDefaultTask+0x324>
						TURNING_ANGLE = 0;
 80032f2:	4913      	ldr	r1, [pc, #76]	; (8003340 <StartDefaultTask+0x2f0>)
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	f04f 0300 	mov.w	r3, #0
 80032fc:	e9c1 2300 	strd	r2, r3, [r1]
						move(timef,0,0);
 8003300:	4b18      	ldr	r3, [pc, #96]	; (8003364 <StartDefaultTask+0x314>)
 8003302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003306:	4610      	mov	r0, r2
 8003308:	4619      	mov	r1, r3
 800330a:	f7fd fc6d 	bl	8000be8 <__aeabi_d2f>
 800330e:	4603      	mov	r3, r0
 8003310:	2100      	movs	r1, #0
 8003312:	2000      	movs	r0, #0
 8003314:	ee00 3a10 	vmov	s0, r3
 8003318:	f7ff f95c 	bl	80025d4 <move>
						//TARGET_ANGLE = timef;
						TURNING_ANGLE = 0;
 800331c:	4908      	ldr	r1, [pc, #32]	; (8003340 <StartDefaultTask+0x2f0>)
 800331e:	f04f 0200 	mov.w	r2, #0
 8003322:	f04f 0300 	mov.w	r3, #0
 8003326:	e9c1 2300 	strd	r2, r3, [r1]
						HAL_UART_Transmit(&huart3,"R",1,0xFFFF);
 800332a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800332e:	2201      	movs	r2, #1
 8003330:	490e      	ldr	r1, [pc, #56]	; (800336c <StartDefaultTask+0x31c>)
 8003332:	4808      	ldr	r0, [pc, #32]	; (8003354 <StartDefaultTask+0x304>)
 8003334:	f005 fb79 	bl	8008a2a <HAL_UART_Transmit>
						right_turnb(timef);
						TURNING_ANGLE = 0;
						HAL_UART_Transmit(&huart3,"R",1,0xFFFF);
						stop();
					}
					break;
 8003338:	e0fb      	b.n	8003532 <StartDefaultTask+0x4e2>
 800333a:	bf00      	nop
 800333c:	20000980 	.word	0x20000980
 8003340:	20000908 	.word	0x20000908
 8003344:	20000948 	.word	0x20000948
 8003348:	20000950 	.word	0x20000950
 800334c:	200008e4 	.word	0x200008e4
 8003350:	08010af0 	.word	0x08010af0
 8003354:	20000860 	.word	0x20000860
 8003358:	0801172c 	.word	0x0801172c
 800335c:	200008cc 	.word	0x200008cc
 8003360:	200008e0 	.word	0x200008e0
 8003364:	200008d8 	.word	0x200008d8
 8003368:	20000005 	.word	0x20000005
 800336c:	08010afc 	.word	0x08010afc
 8003370:	20000910 	.word	0x20000910
					else if (token[1] == 'L'){
 8003374:	4b7d      	ldr	r3, [pc, #500]	; (800356c <StartDefaultTask+0x51c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	3301      	adds	r3, #1
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	2b4c      	cmp	r3, #76	; 0x4c
 800337e:	d128      	bne.n	80033d2 <StartDefaultTask+0x382>
						TARGET_ANGLE = timef;
 8003380:	4b7b      	ldr	r3, [pc, #492]	; (8003570 <StartDefaultTask+0x520>)
 8003382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003386:	497b      	ldr	r1, [pc, #492]	; (8003574 <StartDefaultTask+0x524>)
 8003388:	e9c1 2300 	strd	r2, r3, [r1]
						TURNING_ANGLE = 0;
 800338c:	497a      	ldr	r1, [pc, #488]	; (8003578 <StartDefaultTask+0x528>)
 800338e:	f04f 0200 	mov.w	r2, #0
 8003392:	f04f 0300 	mov.w	r3, #0
 8003396:	e9c1 2300 	strd	r2, r3, [r1]
						left_turnb(timef);
 800339a:	4b75      	ldr	r3, [pc, #468]	; (8003570 <StartDefaultTask+0x520>)
 800339c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a0:	4610      	mov	r0, r2
 80033a2:	4619      	mov	r1, r3
 80033a4:	f7fd fbd8 	bl	8000b58 <__aeabi_d2iz>
 80033a8:	4603      	mov	r3, r0
 80033aa:	4618      	mov	r0, r3
 80033ac:	f7ff fb00 	bl	80029b0 <left_turnb>
						TURNING_ANGLE = 0;
 80033b0:	4971      	ldr	r1, [pc, #452]	; (8003578 <StartDefaultTask+0x528>)
 80033b2:	f04f 0200 	mov.w	r2, #0
 80033b6:	f04f 0300 	mov.w	r3, #0
 80033ba:	e9c1 2300 	strd	r2, r3, [r1]
						HAL_UART_Transmit(&huart3,"R",1,0xFFFF);
 80033be:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80033c2:	2201      	movs	r2, #1
 80033c4:	496d      	ldr	r1, [pc, #436]	; (800357c <StartDefaultTask+0x52c>)
 80033c6:	486e      	ldr	r0, [pc, #440]	; (8003580 <StartDefaultTask+0x530>)
 80033c8:	f005 fb2f 	bl	8008a2a <HAL_UART_Transmit>
						stop();
 80033cc:	f7fe fe6e 	bl	80020ac <stop>
					break;
 80033d0:	e0af      	b.n	8003532 <StartDefaultTask+0x4e2>
					else if (token[1] == 'R'){
 80033d2:	4b66      	ldr	r3, [pc, #408]	; (800356c <StartDefaultTask+0x51c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	3301      	adds	r3, #1
 80033d8:	781b      	ldrb	r3, [r3, #0]
 80033da:	2b52      	cmp	r3, #82	; 0x52
 80033dc:	f040 80a9 	bne.w	8003532 <StartDefaultTask+0x4e2>
						TARGET_ANGLE = timef;
 80033e0:	4b63      	ldr	r3, [pc, #396]	; (8003570 <StartDefaultTask+0x520>)
 80033e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e6:	4963      	ldr	r1, [pc, #396]	; (8003574 <StartDefaultTask+0x524>)
 80033e8:	e9c1 2300 	strd	r2, r3, [r1]
						TURNING_ANGLE = 0;
 80033ec:	4962      	ldr	r1, [pc, #392]	; (8003578 <StartDefaultTask+0x528>)
 80033ee:	f04f 0200 	mov.w	r2, #0
 80033f2:	f04f 0300 	mov.w	r3, #0
 80033f6:	e9c1 2300 	strd	r2, r3, [r1]
						right_turnb(timef);
 80033fa:	4b5d      	ldr	r3, [pc, #372]	; (8003570 <StartDefaultTask+0x520>)
 80033fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003400:	4610      	mov	r0, r2
 8003402:	4619      	mov	r1, r3
 8003404:	f7fd fba8 	bl	8000b58 <__aeabi_d2iz>
 8003408:	4603      	mov	r3, r0
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff fa96 	bl	800293c <right_turnb>
						TURNING_ANGLE = 0;
 8003410:	4959      	ldr	r1, [pc, #356]	; (8003578 <StartDefaultTask+0x528>)
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	f04f 0300 	mov.w	r3, #0
 800341a:	e9c1 2300 	strd	r2, r3, [r1]
						HAL_UART_Transmit(&huart3,"R",1,0xFFFF);
 800341e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003422:	2201      	movs	r2, #1
 8003424:	4955      	ldr	r1, [pc, #340]	; (800357c <StartDefaultTask+0x52c>)
 8003426:	4856      	ldr	r0, [pc, #344]	; (8003580 <StartDefaultTask+0x530>)
 8003428:	f005 faff 	bl	8008a2a <HAL_UART_Transmit>
						stop();
 800342c:	f7fe fe3e 	bl	80020ac <stop>
					break;
 8003430:	e07f      	b.n	8003532 <StartDefaultTask+0x4e2>

				case 'U':
					if (token[1] == 'L'){
 8003432:	4b4e      	ldr	r3, [pc, #312]	; (800356c <StartDefaultTask+0x51c>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	3301      	adds	r3, #1
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2b4c      	cmp	r3, #76	; 0x4c
 800343c:	d10a      	bne.n	8003454 <StartDefaultTask+0x404>
						tightLeftTurn(90);
 800343e:	205a      	movs	r0, #90	; 0x5a
 8003440:	f7fe ff88 	bl	8002354 <tightLeftTurn>
						HAL_UART_Transmit(&huart3,"R",1,0xFFFF);
 8003444:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003448:	2201      	movs	r2, #1
 800344a:	494c      	ldr	r1, [pc, #304]	; (800357c <StartDefaultTask+0x52c>)
 800344c:	484c      	ldr	r0, [pc, #304]	; (8003580 <StartDefaultTask+0x530>)
 800344e:	f005 faec 	bl	8008a2a <HAL_UART_Transmit>
					}
					else if (token[1] == 'R'){
						tightRightTurn(90);
						HAL_UART_Transmit(&huart3,"R",1,0xFFFF);
					}
					break;
 8003452:	e070      	b.n	8003536 <StartDefaultTask+0x4e6>
					else if (token[1] == 'R'){
 8003454:	4b45      	ldr	r3, [pc, #276]	; (800356c <StartDefaultTask+0x51c>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	3301      	adds	r3, #1
 800345a:	781b      	ldrb	r3, [r3, #0]
 800345c:	2b52      	cmp	r3, #82	; 0x52
 800345e:	d16a      	bne.n	8003536 <StartDefaultTask+0x4e6>
						tightRightTurn(90);
 8003460:	205a      	movs	r0, #90	; 0x5a
 8003462:	f7fe ff33 	bl	80022cc <tightRightTurn>
						HAL_UART_Transmit(&huart3,"R",1,0xFFFF);
 8003466:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800346a:	2201      	movs	r2, #1
 800346c:	4943      	ldr	r1, [pc, #268]	; (800357c <StartDefaultTask+0x52c>)
 800346e:	4844      	ldr	r0, [pc, #272]	; (8003580 <StartDefaultTask+0x530>)
 8003470:	f005 fadb 	bl	8008a2a <HAL_UART_Transmit>
					break;
 8003474:	e05f      	b.n	8003536 <StartDefaultTask+0x4e6>

				case 'O':
					if (token[1] == 'L'){
 8003476:	4b3d      	ldr	r3, [pc, #244]	; (800356c <StartDefaultTask+0x51c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	3301      	adds	r3, #1
 800347c:	781b      	ldrb	r3, [r3, #0]
 800347e:	2b4c      	cmp	r3, #76	; 0x4c
 8003480:	d118      	bne.n	80034b4 <StartDefaultTask+0x464>
						reverse();
 8003482:	f7fe fe5f 	bl	8002144 <reverse>
						HAL_Delay(1500);
 8003486:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800348a:	f001 fa11 	bl	80048b0 <HAL_Delay>
						left_turn(90);
 800348e:	205a      	movs	r0, #90	; 0x5a
 8003490:	f7ff fa1a 	bl	80028c8 <left_turn>
						while (1)
						{
							forward(); // Move forward
 8003494:	f7fe fe1c 	bl	80020d0 <forward>
							osDelay(100); // Allow some time for movement
 8003498:	2064      	movs	r0, #100	; 0x64
 800349a:	f006 fc01 	bl	8009ca0 <osDelay>

							// Check the distance from the ultrasonic sensor
							if (Distance <= 30)
 800349e:	4b39      	ldr	r3, [pc, #228]	; (8003584 <StartDefaultTask+0x534>)
 80034a0:	781b      	ldrb	r3, [r3, #0]
 80034a2:	2b1e      	cmp	r3, #30
 80034a4:	d8f6      	bhi.n	8003494 <StartDefaultTask+0x444>
							{
								stop(); // Stop if Distance is smaller or equal to specified distance
 80034a6:	f7fe fe01 	bl	80020ac <stop>
								//uint8_t temp[10] = "stop\0";
								//HAL_UART_Transmit(&huart3,"stop\n",8,0xFFFF);
								break; // Exit the loop
 80034aa:	bf00      	nop
							}
						}
						tight2LeftTurn(180);
 80034ac:	20b4      	movs	r0, #180	; 0xb4
 80034ae:	f7fe ff95 	bl	80023dc <tight2LeftTurn>
								break; // Exit the loop
							}
						}
						tight2RightTurn(180);
					}
					break;
 80034b2:	e042      	b.n	800353a <StartDefaultTask+0x4ea>
					else if (token[1] == 'R'){
 80034b4:	4b2d      	ldr	r3, [pc, #180]	; (800356c <StartDefaultTask+0x51c>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	3301      	adds	r3, #1
 80034ba:	781b      	ldrb	r3, [r3, #0]
 80034bc:	2b52      	cmp	r3, #82	; 0x52
 80034be:	d13c      	bne.n	800353a <StartDefaultTask+0x4ea>
						reverse();
 80034c0:	f7fe fe40 	bl	8002144 <reverse>
						HAL_Delay(1500);
 80034c4:	f240 50dc 	movw	r0, #1500	; 0x5dc
 80034c8:	f001 f9f2 	bl	80048b0 <HAL_Delay>
						right_turn(90);
 80034cc:	205a      	movs	r0, #90	; 0x5a
 80034ce:	f7ff f9bf 	bl	8002850 <right_turn>
							forward(); // Move forward
 80034d2:	f7fe fdfd 	bl	80020d0 <forward>
							osDelay(100); // Allow some time for movement
 80034d6:	2064      	movs	r0, #100	; 0x64
 80034d8:	f006 fbe2 	bl	8009ca0 <osDelay>
							if (Distance <= 30)
 80034dc:	4b29      	ldr	r3, [pc, #164]	; (8003584 <StartDefaultTask+0x534>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	2b1e      	cmp	r3, #30
 80034e2:	d8f6      	bhi.n	80034d2 <StartDefaultTask+0x482>
								stop(); // Stop if Distance is smaller or equal to specified distance
 80034e4:	f7fe fde2 	bl	80020ac <stop>
								break; // Exit the loop
 80034e8:	bf00      	nop
						tight2RightTurn(180);
 80034ea:	20b4      	movs	r0, #180	; 0xb4
 80034ec:	f7fe ff9c 	bl	8002428 <tight2RightTurn>
					break;
 80034f0:	e023      	b.n	800353a <StartDefaultTask+0x4ea>

				case 'P':
					tightLeftTurn(90);
 80034f2:	205a      	movs	r0, #90	; 0x5a
 80034f4:	f7fe ff2e 	bl	8002354 <tightLeftTurn>
					forward();
 80034f8:	f7fe fdea 	bl	80020d0 <forward>
					HAL_Delay(1000);
 80034fc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003500:	f001 f9d6 	bl	80048b0 <HAL_Delay>
					stop();
 8003504:	f7fe fdd2 	bl	80020ac <stop>
					//			  case 'o':
					//				  osDelay(300);
					//				  putTwenty();
					//				  break;
				default:
					stop();
 8003508:	f7fe fdd0 	bl	80020ac <stop>
					uint8_t debug_msg[1];
					sprintf(debug_msg, "Unkown command: %s\n", token);
 800350c:	4b17      	ldr	r3, [pc, #92]	; (800356c <StartDefaultTask+0x51c>)
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	f107 030c 	add.w	r3, r7, #12
 8003514:	491c      	ldr	r1, [pc, #112]	; (8003588 <StartDefaultTask+0x538>)
 8003516:	4618      	mov	r0, r3
 8003518:	f009 fd8e 	bl	800d038 <siprintf>
					HAL_UART_Transmit(&huart3, (uint8_t*)debug_msg, strlen(debug_msg), 100);
 800351c:	2300      	movs	r3, #0
 800351e:	b29a      	uxth	r2, r3
 8003520:	f107 010c 	add.w	r1, r7, #12
 8003524:	2364      	movs	r3, #100	; 0x64
 8003526:	4816      	ldr	r0, [pc, #88]	; (8003580 <StartDefaultTask+0x530>)
 8003528:	f005 fa7f 	bl	8008a2a <HAL_UART_Transmit>
					break;
 800352c:	e006      	b.n	800353c <StartDefaultTask+0x4ec>
					break;
 800352e:	bf00      	nop
 8003530:	e004      	b.n	800353c <StartDefaultTask+0x4ec>
					break;
 8003532:	bf00      	nop
 8003534:	e002      	b.n	800353c <StartDefaultTask+0x4ec>
					break;
 8003536:	bf00      	nop
 8003538:	e000      	b.n	800353c <StartDefaultTask+0x4ec>
					break;
 800353a:	bf00      	nop
				}
				d = token[0];
 800353c:	4b0b      	ldr	r3, [pc, #44]	; (800356c <StartDefaultTask+0x51c>)
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	781b      	ldrb	r3, [r3, #0]
 8003542:	73fb      	strb	r3, [r7, #15]
				token = strtok(NULL, delim);
 8003544:	4911      	ldr	r1, [pc, #68]	; (800358c <StartDefaultTask+0x53c>)
 8003546:	2000      	movs	r0, #0
 8003548:	f009 fd96 	bl	800d078 <strtok>
 800354c:	4603      	mov	r3, r0
 800354e:	461a      	mov	r2, r3
 8003550:	4b06      	ldr	r3, [pc, #24]	; (800356c <StartDefaultTask+0x51c>)
 8003552:	601a      	str	r2, [r3, #0]
				//final_distance = 0;
				osDelay(10);
 8003554:	200a      	movs	r0, #10
 8003556:	f006 fba3 	bl	8009ca0 <osDelay>
			while(token != NULL)
 800355a:	4b04      	ldr	r3, [pc, #16]	; (800356c <StartDefaultTask+0x51c>)
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	f47f adc8 	bne.w	80030f4 <StartDefaultTask+0xa4>
			}
		}
		osDelay(10);
 8003564:	200a      	movs	r0, #10
 8003566:	f006 fb9b 	bl	8009ca0 <osDelay>
		left_irRead();
 800356a:	e5aa      	b.n	80030c2 <StartDefaultTask+0x72>
 800356c:	200008e0 	.word	0x200008e0
 8003570:	200008d8 	.word	0x200008d8
 8003574:	20000910 	.word	0x20000910
 8003578:	20000908 	.word	0x20000908
 800357c:	08010afc 	.word	0x08010afc
 8003580:	20000860 	.word	0x20000860
 8003584:	20000005 	.word	0x20000005
 8003588:	08010b00 	.word	0x08010b00
 800358c:	0801172c 	.word	0x0801172c

08003590 <Show>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Show */
void Show(void *argument)
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Show */
	const char *message = "Hello, Raspberry Pi!\n";
 8003598:	4b10      	ldr	r3, [pc, #64]	; (80035dc <Show+0x4c>)
 800359a:	60fb      	str	r3, [r7, #12]
	/* Infinite loop */
	for(;;)
	{
		//HAL_UART_Transmit(&huart3, (uint8_t*)message, strlen(message), HAL_MAX_DELAY);
		OLED_ShowString(10,20,dist);
 800359c:	4a10      	ldr	r2, [pc, #64]	; (80035e0 <Show+0x50>)
 800359e:	2114      	movs	r1, #20
 80035a0:	200a      	movs	r0, #10
 80035a2:	f7fd ffcb 	bl	800153c <OLED_ShowString>
		OLED_ShowString(10,10,aRxBuffer);
 80035a6:	4a0f      	ldr	r2, [pc, #60]	; (80035e4 <Show+0x54>)
 80035a8:	210a      	movs	r1, #10
 80035aa:	200a      	movs	r0, #10
 80035ac:	f7fd ffc6 	bl	800153c <OLED_ShowString>
		OLED_ShowString(10,30,GyroBuff);
 80035b0:	4a0d      	ldr	r2, [pc, #52]	; (80035e8 <Show+0x58>)
 80035b2:	211e      	movs	r1, #30
 80035b4:	200a      	movs	r0, #10
 80035b6:	f7fd ffc1 	bl	800153c <OLED_ShowString>
		OLED_ShowString(10,40,irLeft);
 80035ba:	4a0c      	ldr	r2, [pc, #48]	; (80035ec <Show+0x5c>)
 80035bc:	2128      	movs	r1, #40	; 0x28
 80035be:	200a      	movs	r0, #10
 80035c0:	f7fd ffbc 	bl	800153c <OLED_ShowString>
		OLED_ShowString(10,50,irRight);
 80035c4:	4a0a      	ldr	r2, [pc, #40]	; (80035f0 <Show+0x60>)
 80035c6:	2132      	movs	r1, #50	; 0x32
 80035c8:	200a      	movs	r0, #10
 80035ca:	f7fd ffb7 	bl	800153c <OLED_ShowString>
		OLED_Refresh_Gram();
 80035ce:	f7fd fe41 	bl	8001254 <OLED_Refresh_Gram>
		osDelay(10);
 80035d2:	200a      	movs	r0, #10
 80035d4:	f006 fb64 	bl	8009ca0 <osDelay>
		OLED_ShowString(10,20,dist);
 80035d8:	e7e0      	b.n	800359c <Show+0xc>
 80035da:	bf00      	nop
 80035dc:	08010b14 	.word	0x08010b14
 80035e0:	2000096c 	.word	0x2000096c
 80035e4:	200008cc 	.word	0x200008cc
 80035e8:	20000918 	.word	0x20000918
 80035ec:	200009a0 	.word	0x200009a0
 80035f0:	200009b4 	.word	0x200009b4

080035f4 <Motor>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Motor */
void Motor(void *argument)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b0c0      	sub	sp, #256	; 0x100
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Motor */
	//start generating PWN signal for me
	HAL_TIM_PWM_Start(&htim8 , TIM_CHANNEL_1); // MotorA
 80035fc:	2100      	movs	r1, #0
 80035fe:	48b8      	ldr	r0, [pc, #736]	; (80038e0 <Motor+0x2ec>)
 8003600:	f003 fd92 	bl	8007128 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8 , TIM_CHANNEL_2); // MotorB
 8003604:	2104      	movs	r1, #4
 8003606:	48b6      	ldr	r0, [pc, #728]	; (80038e0 <Motor+0x2ec>)
 8003608:	f003 fd8e 	bl	8007128 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4); // Servo Motor
 800360c:	210c      	movs	r1, #12
 800360e:	48b5      	ldr	r0, [pc, #724]	; (80038e4 <Motor+0x2f0>)
 8003610:	f003 fd8a 	bl	8007128 <HAL_TIM_PWM_Start>
	motor_dir = 0; servo_dir = 0;
 8003614:	4bb4      	ldr	r3, [pc, #720]	; (80038e8 <Motor+0x2f4>)
 8003616:	2200      	movs	r2, #0
 8003618:	601a      	str	r2, [r3, #0]
 800361a:	4bb4      	ldr	r3, [pc, #720]	; (80038ec <Motor+0x2f8>)
 800361c:	2200      	movs	r2, #0
 800361e:	601a      	str	r2, [r3, #0]
	forward_motor_prep();
 8003620:	f7fe ff28 	bl	8002474 <forward_motor_prep>
	servomotor_center();
 8003624:	f7fe ff5a 	bl	80024dc <servomotor_center>

	int pwm_L_f, pwm_L_b;
	int pwm_R_f, pwm_R_b;
	float pwm_L_div = 1.0;
 8003628:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800362c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
	int pwm_R_div = 1;
 8003630:	2301      	movs	r3, #1
 8003632:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	//	int offset_L, offset_R;
	pwm_L_f = 3200; //Speed 2500 > 1950, 4000 > 3120, 3200 > 2500
 8003636:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 800363a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
	pwm_L_b = 3200; //Speed 2500 > 2050, 4000 > 3280, 3200 > 2625
 800363e:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8003642:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
	pwm_R_f = 3200; //Speed 2500 > 2050, 4000 > 3280, 3200 > 2625
 8003646:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 800364a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
	pwm_R_b = 3200; //Speed 2500 > 2100, 4000 > 3360, 3200 > 2690
 800364e:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8003652:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
	//		}
	//		//if (TURNING_ANGLE >= TARGET_ANGLE) servomotor_center();
	//	}
	struct PIDController motor_LF_PID, motor_RF_PID, motor_LB_PID, motor_RB_PID;

	MotorPIDController_Init(&motor_LF_PID);
 8003656:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800365a:	4618      	mov	r0, r3
 800365c:	f7fd fcb0 	bl	8000fc0 <MotorPIDController_Init>
	MotorPIDController_Init(&motor_RF_PID);
 8003660:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003664:	4618      	mov	r0, r3
 8003666:	f7fd fcab 	bl	8000fc0 <MotorPIDController_Init>
	MotorPIDController_Init(&motor_LB_PID);
 800366a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800366e:	4618      	mov	r0, r3
 8003670:	f7fd fca6 	bl	8000fc0 <MotorPIDController_Init>
	MotorPIDController_Init(&motor_RB_PID);
 8003674:	f107 030c 	add.w	r3, r7, #12
 8003678:	4618      	mov	r0, r3
 800367a:	f7fd fca1 	bl	8000fc0 <MotorPIDController_Init>
	//Make sure the Servo motor position is in middle position
	//	servomotor_right();
	//	osDelay(500);
	//	servomotor_left();
	//	osDelay(500);
	servomotor_center();
 800367e:	f7fe ff2d 	bl	80024dc <servomotor_center>
	/* Infinite loop */
	uint32_t tick = HAL_GetTick();
 8003682:	f001 f909 	bl	8004898 <HAL_GetTick>
 8003686:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
	uint32_t pid_time_start = 0;
 800368a:	2300      	movs	r3, #0
 800368c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	RX_FLAG = 1;
 8003690:	4b97      	ldr	r3, [pc, #604]	; (80038f0 <Motor+0x2fc>)
 8003692:	2201      	movs	r2, #1
 8003694:	601a      	str	r2, [r3, #0]
	char RX_MOTOR = 'F';
 8003696:	2346      	movs	r3, #70	; 0x46
 8003698:	f887 30d3 	strb.w	r3, [r7, #211]	; 0xd3
	char RX_SERVO = 'C';
 800369c:	2343      	movs	r3, #67	; 0x43
 800369e:	f887 30d2 	strb.w	r3, [r7, #210]	; 0xd2
	int RX_MAG = 30;
 80036a2:	231e      	movs	r3, #30
 80036a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	int ANGLE_OFFSET;
	int PID_DELAY = 1;
 80036a8:	2301      	movs	r3, #1
 80036aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	int PID_ENABLE = 0;
 80036ae:	2300      	movs	r3, #0
 80036b0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
	for(;;)
	{	if (HAL_GetTick() - tick > 100L){
 80036b4:	f001 f8f0 	bl	8004898 <HAL_GetTick>
 80036b8:	4602      	mov	r2, r0
 80036ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b64      	cmp	r3, #100	; 0x64
 80036c2:	f240 81ce 	bls.w	8003a62 <Motor+0x46e>
		//Calculate wheel speed change when turning
		if (servo_dir != 0){
 80036c6:	4b89      	ldr	r3, [pc, #548]	; (80038ec <Motor+0x2f8>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d017      	beq.n	80036fe <Motor+0x10a>
			if (servo_dir == -1) {pwm_L_div = 2; pwm_R_div = 1;}
 80036ce:	4b87      	ldr	r3, [pc, #540]	; (80038ec <Motor+0x2f8>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036d6:	d106      	bne.n	80036e6 <Motor+0xf2>
 80036d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80036dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80036e0:	2301      	movs	r3, #1
 80036e2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
			if (servo_dir == 1) {pwm_L_div = 1; pwm_R_div = 2;}
 80036e6:	4b81      	ldr	r3, [pc, #516]	; (80038ec <Motor+0x2f8>)
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d10e      	bne.n	800370c <Motor+0x118>
 80036ee:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80036f2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80036f6:	2302      	movs	r3, #2
 80036f8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80036fc:	e006      	b.n	800370c <Motor+0x118>
		}
		else {pwm_L_div = 0.5;pwm_R_div = 2;}
 80036fe:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
 8003702:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003706:	2302      	movs	r3, #2
 8003708:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
		//Calculate deviation
		if (motor_dir != 0 && servo_dir == 0){
 800370c:	4b76      	ldr	r3, [pc, #472]	; (80038e8 <Motor+0x2f4>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	2b00      	cmp	r3, #0
 8003712:	d036      	beq.n	8003782 <Motor+0x18e>
 8003714:	4b75      	ldr	r3, [pc, #468]	; (80038ec <Motor+0x2f8>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d132      	bne.n	8003782 <Motor+0x18e>
			ANGLE_OFFSET = 9*((int)3*(TARGET_ANGLE - TOTAL_ANGLE));
 800371c:	4b75      	ldr	r3, [pc, #468]	; (80038f4 <Motor+0x300>)
 800371e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003722:	4b75      	ldr	r3, [pc, #468]	; (80038f8 <Motor+0x304>)
 8003724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003728:	f7fc fdae 	bl	8000288 <__aeabi_dsub>
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	4610      	mov	r0, r2
 8003732:	4619      	mov	r1, r3
 8003734:	f04f 0200 	mov.w	r2, #0
 8003738:	4b70      	ldr	r3, [pc, #448]	; (80038fc <Motor+0x308>)
 800373a:	f7fc ff5d 	bl	80005f8 <__aeabi_dmul>
 800373e:	4602      	mov	r2, r0
 8003740:	460b      	mov	r3, r1
 8003742:	4610      	mov	r0, r2
 8003744:	4619      	mov	r1, r3
 8003746:	f04f 0200 	mov.w	r2, #0
 800374a:	4b6d      	ldr	r3, [pc, #436]	; (8003900 <Motor+0x30c>)
 800374c:	f7fc ff54 	bl	80005f8 <__aeabi_dmul>
 8003750:	4602      	mov	r2, r0
 8003752:	460b      	mov	r3, r1
 8003754:	4610      	mov	r0, r2
 8003756:	4619      	mov	r1, r3
 8003758:	f7fd f9fe 	bl	8000b58 <__aeabi_d2iz>
 800375c:	4603      	mov	r3, r0
 800375e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			if (ANGLE_OFFSET >= 20) ANGLE_OFFSET = 20;
 8003762:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003766:	2b13      	cmp	r3, #19
 8003768:	dd02      	ble.n	8003770 <Motor+0x17c>
 800376a:	2314      	movs	r3, #20
 800376c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			if (ANGLE_OFFSET <= -20) ANGLE_OFFSET = -20;
 8003770:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003774:	f113 0f13 	cmn.w	r3, #19
 8003778:	da03      	bge.n	8003782 <Motor+0x18e>
 800377a:	f06f 0313 	mvn.w	r3, #19
 800377e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
		}
		//Control PID enable
		if (PID_DELAY == 1){
 8003782:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003786:	2b01      	cmp	r3, #1
 8003788:	d106      	bne.n	8003798 <Motor+0x1a4>
			pid_time_start = HAL_GetTick();
 800378a:	f001 f885 	bl	8004898 <HAL_GetTick>
 800378e:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
			PID_DELAY = 0;
 8003792:	2300      	movs	r3, #0
 8003794:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
		}
		if (PID_ENABLE == 0 && (HAL_GetTick() - pid_time_start > 400L)){
 8003798:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10b      	bne.n	80037b8 <Motor+0x1c4>
 80037a0:	f001 f87a 	bl	8004898 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037aa:	1ad3      	subs	r3, r2, r3
 80037ac:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80037b0:	d902      	bls.n	80037b8 <Motor+0x1c4>
			PID_ENABLE = 1;
 80037b2:	2301      	movs	r3, #1
 80037b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
		}
		//Control motor
		if (motor_dir == 1){
 80037b8:	4b4b      	ldr	r3, [pc, #300]	; (80038e8 <Motor+0x2f4>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	f040 80ab 	bne.w	8003918 <Motor+0x324>
			//Start the motor
			__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, (int)(pwm_L_f/pwm_L_div));
 80037c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80037c6:	ee07 3a90 	vmov	s15, r3
 80037ca:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80037ce:	ed97 7a3b 	vldr	s14, [r7, #236]	; 0xec
 80037d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80037d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037da:	4b41      	ldr	r3, [pc, #260]	; (80038e0 <Motor+0x2ec>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	ee17 2a90 	vmov	r2, s15
 80037e2:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwm_R_f/pwm_R_div);
 80037e4:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80037e8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80037ec:	fb92 f2f3 	sdiv	r2, r2, r3
 80037f0:	4b3b      	ldr	r3, [pc, #236]	; (80038e0 <Motor+0x2ec>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	639a      	str	r2, [r3, #56]	; 0x38
			//				if (servo_dir == 0) servomotor_set(SERVO_CENTER-ANGLE_OFFSET);
			//ADD PID CONTROL
			if (PID_ENABLE == 1){
 80037f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80037fa:	2b01      	cmp	r3, #1
 80037fc:	d157      	bne.n	80038ae <Motor+0x2ba>
				pwm_L_f = pwm_L_div*PIDController_Update(&motor_LF_PID, left_speed, 3200/pwm_L_div, (int)(pwm_L_f/pwm_L_div));
 80037fe:	4b41      	ldr	r3, [pc, #260]	; (8003904 <Motor+0x310>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	ee07 3a90 	vmov	s15, r3
 8003806:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800380a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 8003908 <Motor+0x314>
 800380e:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8003812:	eec7 5a27 	vdiv.f32	s11, s14, s15
 8003816:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800381a:	ee07 3a90 	vmov	s15, r3
 800381e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003822:	ed97 7a3b 	vldr	s14, [r7, #236]	; 0xec
 8003826:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800382a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800382e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003832:	ee17 1a90 	vmov	r1, s15
 8003836:	eef0 0a65 	vmov.f32	s1, s11
 800383a:	eeb0 0a46 	vmov.f32	s0, s12
 800383e:	4618      	mov	r0, r3
 8003840:	f7fd fbe0 	bl	8001004 <PIDController_Update>
 8003844:	ee07 0a90 	vmov	s15, r0
 8003848:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800384c:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8003850:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003854:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003858:	ee17 3a90 	vmov	r3, s15
 800385c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
				pwm_R_f = pwm_R_div*PIDController_Update(&motor_RF_PID, right_speed, 3200/pwm_R_div, pwm_R_f/pwm_R_div);
 8003860:	4b2a      	ldr	r3, [pc, #168]	; (800390c <Motor+0x318>)
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	ee07 3a90 	vmov	s15, r3
 8003868:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800386c:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 8003870:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003874:	fb92 f3f3 	sdiv	r3, r2, r3
 8003878:	ee07 3a10 	vmov	s14, r3
 800387c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8003880:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8003884:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003888:	fb92 f2f3 	sdiv	r2, r2, r3
 800388c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8003890:	4611      	mov	r1, r2
 8003892:	eef0 0a47 	vmov.f32	s1, s14
 8003896:	eeb0 0a67 	vmov.f32	s0, s15
 800389a:	4618      	mov	r0, r3
 800389c:	f7fd fbb2 	bl	8001004 <PIDController_Update>
 80038a0:	4602      	mov	r2, r0
 80038a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80038a6:	fb02 f303 	mul.w	r3, r2, r3
 80038aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
			}
			//display to OLED
			PWML = pwm_L_f/pwm_L_div;
 80038ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038b2:	ee07 3a90 	vmov	s15, r3
 80038b6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80038ba:	ed97 7a3b 	vldr	s14, [r7, #236]	; 0xec
 80038be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80038c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80038c6:	ee17 2a90 	vmov	r2, s15
 80038ca:	4b11      	ldr	r3, [pc, #68]	; (8003910 <Motor+0x31c>)
 80038cc:	601a      	str	r2, [r3, #0]
			PWMR = pwm_R_f/pwm_R_div;
 80038ce:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80038d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80038d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80038da:	4a0e      	ldr	r2, [pc, #56]	; (8003914 <Motor+0x320>)
 80038dc:	6013      	str	r3, [r2, #0]
 80038de:	e0bc      	b.n	8003a5a <Motor+0x466>
 80038e0:	20000818 	.word	0x20000818
 80038e4:	200006f8 	.word	0x200006f8
 80038e8:	20000938 	.word	0x20000938
 80038ec:	20000958 	.word	0x20000958
 80038f0:	200008e8 	.word	0x200008e8
 80038f4:	20000910 	.word	0x20000910
 80038f8:	20000900 	.word	0x20000900
 80038fc:	40080000 	.word	0x40080000
 8003900:	40220000 	.word	0x40220000
 8003904:	2000093c 	.word	0x2000093c
 8003908:	45480000 	.word	0x45480000
 800390c:	20000940 	.word	0x20000940
 8003910:	2000092c 	.word	0x2000092c
 8003914:	20000930 	.word	0x20000930
		}
		else if (motor_dir == -1){
 8003918:	4b54      	ldr	r3, [pc, #336]	; (8003a6c <Motor+0x478>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003920:	f040 808f 	bne.w	8003a42 <Motor+0x44e>
			//Start the motor
			__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, pwm_L_b/pwm_L_div);
 8003924:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003928:	ee07 3a90 	vmov	s15, r3
 800392c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003930:	ed97 7a3b 	vldr	s14, [r7, #236]	; 0xec
 8003934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003938:	4b4d      	ldr	r3, [pc, #308]	; (8003a70 <Motor+0x47c>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003940:	ee17 2a90 	vmov	r2, s15
 8003944:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, pwm_R_b/pwm_R_div);
 8003946:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 800394a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800394e:	fb92 f2f3 	sdiv	r2, r2, r3
 8003952:	4b47      	ldr	r3, [pc, #284]	; (8003a70 <Motor+0x47c>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	639a      	str	r2, [r3, #56]	; 0x38
			//				if (servo_dir == 0) servomotor_set(SERVO_CENTER+ANGLE_OFFSET);
			//ADD PID CONTROL
			if (PID_ENABLE == 1){
 8003958:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800395c:	2b01      	cmp	r3, #1
 800395e:	d157      	bne.n	8003a10 <Motor+0x41c>
				pwm_L_b = pwm_L_div*PIDController_Update(&motor_LB_PID, left_speed, 3200/pwm_L_div, pwm_L_b/pwm_L_div);
 8003960:	4b44      	ldr	r3, [pc, #272]	; (8003a74 <Motor+0x480>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	ee07 3a90 	vmov	s15, r3
 8003968:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800396c:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8003a78 <Motor+0x484>
 8003970:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 8003974:	eec7 5a27 	vdiv.f32	s11, s14, s15
 8003978:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800397c:	ee07 3a90 	vmov	s15, r3
 8003980:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003984:	ed97 7a3b 	vldr	s14, [r7, #236]	; 0xec
 8003988:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800398c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003990:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003994:	ee17 1a90 	vmov	r1, s15
 8003998:	eef0 0a65 	vmov.f32	s1, s11
 800399c:	eeb0 0a46 	vmov.f32	s0, s12
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fd fb2f 	bl	8001004 <PIDController_Update>
 80039a6:	ee07 0a90 	vmov	s15, r0
 80039aa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80039ae:	edd7 7a3b 	vldr	s15, [r7, #236]	; 0xec
 80039b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80039b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80039ba:	ee17 3a90 	vmov	r3, s15
 80039be:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
				pwm_R_b = pwm_R_div*PIDController_Update(&motor_RB_PID, right_speed, 3200/pwm_R_div, pwm_R_b/pwm_R_div);
 80039c2:	4b2e      	ldr	r3, [pc, #184]	; (8003a7c <Motor+0x488>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	ee07 3a90 	vmov	s15, r3
 80039ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80039ce:	f44f 6248 	mov.w	r2, #3200	; 0xc80
 80039d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80039d6:	fb92 f3f3 	sdiv	r3, r2, r3
 80039da:	ee07 3a10 	vmov	s14, r3
 80039de:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80039e2:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 80039e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80039ea:	fb92 f2f3 	sdiv	r2, r2, r3
 80039ee:	f107 030c 	add.w	r3, r7, #12
 80039f2:	4611      	mov	r1, r2
 80039f4:	eef0 0a47 	vmov.f32	s1, s14
 80039f8:	eeb0 0a67 	vmov.f32	s0, s15
 80039fc:	4618      	mov	r0, r3
 80039fe:	f7fd fb01 	bl	8001004 <PIDController_Update>
 8003a02:	4602      	mov	r2, r0
 8003a04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003a08:	fb02 f303 	mul.w	r3, r2, r3
 8003a0c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			}
			//Display to OLED
			PWML = pwm_L_b/pwm_L_div;
 8003a10:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a14:	ee07 3a90 	vmov	s15, r3
 8003a18:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8003a1c:	ed97 7a3b 	vldr	s14, [r7, #236]	; 0xec
 8003a20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a28:	ee17 2a90 	vmov	r2, s15
 8003a2c:	4b14      	ldr	r3, [pc, #80]	; (8003a80 <Motor+0x48c>)
 8003a2e:	601a      	str	r2, [r3, #0]
			PWMR = pwm_R_b/pwm_R_div;
 8003a30:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8003a34:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8003a38:	fb92 f3f3 	sdiv	r3, r2, r3
 8003a3c:	4a11      	ldr	r2, [pc, #68]	; (8003a84 <Motor+0x490>)
 8003a3e:	6013      	str	r3, [r2, #0]
 8003a40:	e00b      	b.n	8003a5a <Motor+0x466>
		}
		else {
			PWML = 0;
 8003a42:	4b0f      	ldr	r3, [pc, #60]	; (8003a80 <Motor+0x48c>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	601a      	str	r2, [r3, #0]
			PWMR = 0;
 8003a48:	4b0e      	ldr	r3, [pc, #56]	; (8003a84 <Motor+0x490>)
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	601a      	str	r2, [r3, #0]
			PID_ENABLE = 0;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
			ANGLE_OFFSET = 0;
 8003a54:	2300      	movs	r3, #0
 8003a56:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
			//				turning_prev = TOTAL_ANGLE-TARGET_ANGLE;
			//				deviation_prev = 0;
		}
		tick = HAL_GetTick();
 8003a5a:	f000 ff1d 	bl	8004898 <HAL_GetTick>
 8003a5e:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
	}
	osDelay(10);
 8003a62:	200a      	movs	r0, #10
 8003a64:	f006 f91c 	bl	8009ca0 <osDelay>
	{	if (HAL_GetTick() - tick > 100L){
 8003a68:	e624      	b.n	80036b4 <Motor+0xc0>
 8003a6a:	bf00      	nop
 8003a6c:	20000938 	.word	0x20000938
 8003a70:	20000818 	.word	0x20000818
 8003a74:	2000093c 	.word	0x2000093c
 8003a78:	45480000 	.word	0x45480000
 8003a7c:	20000940 	.word	0x20000940
 8003a80:	2000092c 	.word	0x2000092c
 8003a84:	20000930 	.word	0x20000930

08003a88 <encoder_task>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_encoder_task */
void encoder_task(void *argument)
{
 8003a88:	b5b0      	push	{r4, r5, r7, lr}
 8003a8a:	b08e      	sub	sp, #56	; 0x38
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN encoder_task */
	/* Infinite loop */
	HAL_TIM_Encoder_Start(&htim2,TIM_CHANNEL_ALL); //activate the encoder for Motor A
 8003a90:	213c      	movs	r1, #60	; 0x3c
 8003a92:	487b      	ldr	r0, [pc, #492]	; (8003c80 <encoder_task+0x1f8>)
 8003a94:	f003 fe38 	bl	8007708 <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL); //activate the encoder for Motor B
 8003a98:	213c      	movs	r1, #60	; 0x3c
 8003a9a:	487a      	ldr	r0, [pc, #488]	; (8003c84 <encoder_task+0x1fc>)
 8003a9c:	f003 fe34 	bl	8007708 <HAL_TIM_Encoder_Start>
	int left_prev, left_curr, left_diff, right_prev, right_curr, right_diff;
	int dir_L, dir_R;

	uint32_t tick, cur_tick, T;

	left_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8003aa0:	4b77      	ldr	r3, [pc, #476]	; (8003c80 <encoder_task+0x1f8>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aa6:	637b      	str	r3, [r7, #52]	; 0x34
	right_prev = __HAL_TIM_GET_COUNTER(&htim3);
 8003aa8:	4b76      	ldr	r3, [pc, #472]	; (8003c84 <encoder_task+0x1fc>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aae:	62fb      	str	r3, [r7, #44]	; 0x2c
	tick = HAL_GetTick(); //tick value in milliseconds
 8003ab0:	f000 fef2 	bl	8004898 <HAL_GetTick>
 8003ab4:	6278      	str	r0, [r7, #36]	; 0x24

	for(;;)
	{
		cur_tick = HAL_GetTick();
 8003ab6:	f000 feef 	bl	8004898 <HAL_GetTick>
 8003aba:	6238      	str	r0, [r7, #32]
		if (cur_tick - tick > 50L){ //every 0.05 second
 8003abc:	6a3a      	ldr	r2, [r7, #32]
 8003abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	2b32      	cmp	r3, #50	; 0x32
 8003ac4:	f240 80d7 	bls.w	8003c76 <encoder_task+0x1ee>
			left_curr = __HAL_TIM_GET_COUNTER(&htim2);
 8003ac8:	4b6d      	ldr	r3, [pc, #436]	; (8003c80 <encoder_task+0x1f8>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ace:	61fb      	str	r3, [r7, #28]
			right_curr = __HAL_TIM_GET_COUNTER(&htim3);
 8003ad0:	4b6c      	ldr	r3, [pc, #432]	; (8003c84 <encoder_task+0x1fc>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad6:	61bb      	str	r3, [r7, #24]
			//Left encoder
			if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2)){
 8003ad8:	4b69      	ldr	r3, [pc, #420]	; (8003c80 <encoder_task+0x1f8>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f003 0310 	and.w	r3, r3, #16
 8003ae2:	2b10      	cmp	r3, #16
 8003ae4:	d112      	bne.n	8003b0c <encoder_task+0x84>
				if(left_curr <= left_prev){
 8003ae6:	69fa      	ldr	r2, [r7, #28]
 8003ae8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003aea:	429a      	cmp	r2, r3
 8003aec:	dc04      	bgt.n	8003af8 <encoder_task+0x70>
					left_diff = left_prev - left_curr;
 8003aee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003af0:	69fb      	ldr	r3, [r7, #28]
 8003af2:	1ad3      	subs	r3, r2, r3
 8003af4:	633b      	str	r3, [r7, #48]	; 0x30
 8003af6:	e006      	b.n	8003b06 <encoder_task+0x7e>
				}
				else {
					left_diff = (65535 - left_curr) + left_prev; //handle overflow situation
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003afe:	33ff      	adds	r3, #255	; 0xff
 8003b00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003b02:	4413      	add	r3, r2
 8003b04:	633b      	str	r3, [r7, #48]	; 0x30
				}
				dir_L = 1;
 8003b06:	2301      	movs	r3, #1
 8003b08:	617b      	str	r3, [r7, #20]
 8003b0a:	e012      	b.n	8003b32 <encoder_task+0xaa>
			}
			else {
				if(left_curr >= left_prev){
 8003b0c:	69fa      	ldr	r2, [r7, #28]
 8003b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b10:	429a      	cmp	r2, r3
 8003b12:	db04      	blt.n	8003b1e <encoder_task+0x96>
					left_diff = left_curr - left_prev;
 8003b14:	69fa      	ldr	r2, [r7, #28]
 8003b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b18:	1ad3      	subs	r3, r2, r3
 8003b1a:	633b      	str	r3, [r7, #48]	; 0x30
 8003b1c:	e006      	b.n	8003b2c <encoder_task+0xa4>
				}
				else {
					left_diff = (65535 - left_prev) + left_curr;
 8003b1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b20:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003b24:	33ff      	adds	r3, #255	; 0xff
 8003b26:	69fa      	ldr	r2, [r7, #28]
 8003b28:	4413      	add	r3, r2
 8003b2a:	633b      	str	r3, [r7, #48]	; 0x30
				}
				dir_L = -1;
 8003b2c:	f04f 33ff 	mov.w	r3, #4294967295
 8003b30:	617b      	str	r3, [r7, #20]
			}
			//Right encoder
			if(__HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3)){
 8003b32:	4b54      	ldr	r3, [pc, #336]	; (8003c84 <encoder_task+0x1fc>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0310 	and.w	r3, r3, #16
 8003b3c:	2b10      	cmp	r3, #16
 8003b3e:	d113      	bne.n	8003b68 <encoder_task+0xe0>
				if(right_curr <= right_prev){
 8003b40:	69ba      	ldr	r2, [r7, #24]
 8003b42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b44:	429a      	cmp	r2, r3
 8003b46:	dc04      	bgt.n	8003b52 <encoder_task+0xca>
					right_diff = right_prev - right_curr;
 8003b48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b4a:	69bb      	ldr	r3, [r7, #24]
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b50:	e006      	b.n	8003b60 <encoder_task+0xd8>
				}
				else {
					right_diff = (65535 - right_curr) + right_prev; //handle overflow situation
 8003b52:	69bb      	ldr	r3, [r7, #24]
 8003b54:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003b58:	33ff      	adds	r3, #255	; 0xff
 8003b5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b5c:	4413      	add	r3, r2
 8003b5e:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				dir_R = -1;
 8003b60:	f04f 33ff 	mov.w	r3, #4294967295
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	e011      	b.n	8003b8c <encoder_task+0x104>
			}
			else {
				if(right_curr >= right_prev){
 8003b68:	69ba      	ldr	r2, [r7, #24]
 8003b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6c:	429a      	cmp	r2, r3
 8003b6e:	db04      	blt.n	8003b7a <encoder_task+0xf2>
					right_diff = right_curr - right_prev;
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b78:	e006      	b.n	8003b88 <encoder_task+0x100>
				}
				else {
					right_diff = (65535 - right_prev) + right_curr;
 8003b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b7c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8003b80:	33ff      	adds	r3, #255	; 0xff
 8003b82:	69ba      	ldr	r2, [r7, #24]
 8003b84:	4413      	add	r3, r2
 8003b86:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				dir_R = 1;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	613b      	str	r3, [r7, #16]
			}
			T = cur_tick - tick;
 8003b8c:	6a3a      	ldr	r2, [r7, #32]
 8003b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	60fb      	str	r3, [r7, #12]
			//Show speed in ticks/s
			left_speed = left_diff * (1000/T);
 8003b94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ba0:	fb02 f303 	mul.w	r3, r2, r3
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4b38      	ldr	r3, [pc, #224]	; (8003c88 <encoder_task+0x200>)
 8003ba8:	601a      	str	r2, [r3, #0]
			right_speed = right_diff * (1000/T);
 8003baa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003bb6:	fb02 f303 	mul.w	r3, r2, r3
 8003bba:	461a      	mov	r2, r3
 8003bbc:	4b33      	ldr	r3, [pc, #204]	; (8003c8c <encoder_task+0x204>)
 8003bbe:	601a      	str	r2, [r3, #0]
			//Calculate distance traveled
			//		  distInt_L += left_diff * dir_L;
			//		  distInt_R += right_diff * dir_R;
			//		  sprintf(OLED_Row_1, "DST L: %6d\0", distInt_L);
			//		  sprintf(OLED_Row_2, "DST R: %6d\0", distInt_R);
			LEFTWHEEL_DIST += (double)left_diff * (CIRCUMFERENCE_WHEEL/FULL_ROTATION_TICKS);
 8003bc0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003bc2:	f7fc fcaf 	bl	8000524 <__aeabi_i2d>
 8003bc6:	4604      	mov	r4, r0
 8003bc8:	460d      	mov	r5, r1
 8003bca:	4b31      	ldr	r3, [pc, #196]	; (8003c90 <encoder_task+0x208>)
 8003bcc:	ed93 7a00 	vldr	s14, [r3]
 8003bd0:	4b30      	ldr	r3, [pc, #192]	; (8003c94 <encoder_task+0x20c>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	ee07 3a90 	vmov	s15, r3
 8003bd8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003bdc:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003be0:	ee16 0a90 	vmov	r0, s13
 8003be4:	f7fc fcb0 	bl	8000548 <__aeabi_f2d>
 8003be8:	4602      	mov	r2, r0
 8003bea:	460b      	mov	r3, r1
 8003bec:	4620      	mov	r0, r4
 8003bee:	4629      	mov	r1, r5
 8003bf0:	f7fc fd02 	bl	80005f8 <__aeabi_dmul>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4610      	mov	r0, r2
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4b26      	ldr	r3, [pc, #152]	; (8003c98 <encoder_task+0x210>)
 8003bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c02:	f7fc fb43 	bl	800028c <__adddf3>
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4923      	ldr	r1, [pc, #140]	; (8003c98 <encoder_task+0x210>)
 8003c0c:	e9c1 2300 	strd	r2, r3, [r1]
			RIGHTWHEEL_DIST += (double)right_diff * (CIRCUMFERENCE_WHEEL/FULL_ROTATION_TICKS);
 8003c10:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c12:	f7fc fc87 	bl	8000524 <__aeabi_i2d>
 8003c16:	4604      	mov	r4, r0
 8003c18:	460d      	mov	r5, r1
 8003c1a:	4b1d      	ldr	r3, [pc, #116]	; (8003c90 <encoder_task+0x208>)
 8003c1c:	ed93 7a00 	vldr	s14, [r3]
 8003c20:	4b1c      	ldr	r3, [pc, #112]	; (8003c94 <encoder_task+0x20c>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	ee07 3a90 	vmov	s15, r3
 8003c28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c2c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8003c30:	ee16 0a90 	vmov	r0, s13
 8003c34:	f7fc fc88 	bl	8000548 <__aeabi_f2d>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4620      	mov	r0, r4
 8003c3e:	4629      	mov	r1, r5
 8003c40:	f7fc fcda 	bl	80005f8 <__aeabi_dmul>
 8003c44:	4602      	mov	r2, r0
 8003c46:	460b      	mov	r3, r1
 8003c48:	4610      	mov	r0, r2
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	4b13      	ldr	r3, [pc, #76]	; (8003c9c <encoder_task+0x214>)
 8003c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c52:	f7fc fb1b 	bl	800028c <__adddf3>
 8003c56:	4602      	mov	r2, r0
 8003c58:	460b      	mov	r3, r1
 8003c5a:	4910      	ldr	r1, [pc, #64]	; (8003c9c <encoder_task+0x214>)
 8003c5c:	e9c1 2300 	strd	r2, r3, [r1]

			//Reset counters
			left_prev = __HAL_TIM_GET_COUNTER(&htim2);
 8003c60:	4b07      	ldr	r3, [pc, #28]	; (8003c80 <encoder_task+0x1f8>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	637b      	str	r3, [r7, #52]	; 0x34
			right_prev = __HAL_TIM_GET_COUNTER(&htim3);
 8003c68:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <encoder_task+0x1fc>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
			tick = HAL_GetTick(); //tick value in milliseconds
 8003c70:	f000 fe12 	bl	8004898 <HAL_GetTick>
 8003c74:	6278      	str	r0, [r7, #36]	; 0x24
		}
		osDelay(10);
 8003c76:	200a      	movs	r0, #10
 8003c78:	f006 f812 	bl	8009ca0 <osDelay>
		cur_tick = HAL_GetTick();
 8003c7c:	e71b      	b.n	8003ab6 <encoder_task+0x2e>
 8003c7e:	bf00      	nop
 8003c80:	20000740 	.word	0x20000740
 8003c84:	20000788 	.word	0x20000788
 8003c88:	2000093c 	.word	0x2000093c
 8003c8c:	20000940 	.word	0x20000940
 8003c90:	2000000c 	.word	0x2000000c
 8003c94:	20000008 	.word	0x20000008
 8003c98:	20000948 	.word	0x20000948
 8003c9c:	20000950 	.word	0x20000950

08003ca0 <motorTwo>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_motorTwo */
void motorTwo(void *argument)
{
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
 8003ca6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN motorTwo */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8003ca8:	2001      	movs	r0, #1
 8003caa:	f005 fff9 	bl	8009ca0 <osDelay>
 8003cae:	e7fb      	b.n	8003ca8 <motorTwo+0x8>

08003cb0 <servomotor>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_servomotor */
void servomotor(void *argument)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN servomotor */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8003cb8:	2001      	movs	r0, #1
 8003cba:	f005 fff1 	bl	8009ca0 <osDelay>
 8003cbe:	e7fb      	b.n	8003cb8 <servomotor+0x8>

08003cc0 <encoder_Task2>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_encoder_Task2 */
void encoder_Task2(void *argument)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b082      	sub	sp, #8
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN encoder_Task2 */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8003cc8:	2001      	movs	r0, #1
 8003cca:	f005 ffe9 	bl	8009ca0 <osDelay>
 8003cce:	e7fb      	b.n	8003cc8 <encoder_Task2+0x8>

08003cd0 <Ultrasonicsensor>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Ultrasonicsensor */
void Ultrasonicsensor(void *argument)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b08a      	sub	sp, #40	; 0x28
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Ultrasonicsensor */
	/* Infinite loop */
	HAL_TIM_IC_Start_IT(&htim4, TIM_CHANNEL_1);
 8003cd8:	2100      	movs	r1, #0
 8003cda:	483c      	ldr	r0, [pc, #240]	; (8003dcc <Ultrasonicsensor+0xfc>)
 8003cdc:	f003 fb46 	bl	800736c <HAL_TIM_IC_Start_IT>

	int s1=0;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	627b      	str	r3, [r7, #36]	; 0x24
	int s2=0;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	623b      	str	r3, [r7, #32]
	int s3=0;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61fb      	str	r3, [r7, #28]
	int s1c=0;
 8003cec:	2300      	movs	r3, #0
 8003cee:	61bb      	str	r3, [r7, #24]
	int s2c=0;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	617b      	str	r3, [r7, #20]
	int s3c=0;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	613b      	str	r3, [r7, #16]
	//		uint8_t dist[20];

	for(;;)
	{
		for(int sc=0;sc<30;sc++)
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	e030      	b.n	8003d60 <Ultrasonicsensor+0x90>
		{
			HCSR04_Read();
 8003cfe:	f7ff f82f 	bl	8002d60 <HCSR04_Read>
			s1 = UD;
 8003d02:	4b33      	ldr	r3, [pc, #204]	; (8003dd0 <Ultrasonicsensor+0x100>)
 8003d04:	781b      	ldrb	r3, [r3, #0]
 8003d06:	627b      	str	r3, [r7, #36]	; 0x24
			if(UD==s1)
 8003d08:	4b31      	ldr	r3, [pc, #196]	; (8003dd0 <Ultrasonicsensor+0x100>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d103      	bne.n	8003d1c <Ultrasonicsensor+0x4c>
			{
				s1c++;
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	3301      	adds	r3, #1
 8003d18:	61bb      	str	r3, [r7, #24]
 8003d1a:	e01e      	b.n	8003d5a <Ultrasonicsensor+0x8a>
			}
			else if(UD!=s1)
 8003d1c:	4b2c      	ldr	r3, [pc, #176]	; (8003dd0 <Ultrasonicsensor+0x100>)
 8003d1e:	781b      	ldrb	r3, [r3, #0]
 8003d20:	461a      	mov	r2, r3
 8003d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d006      	beq.n	8003d36 <Ultrasonicsensor+0x66>
			{
				s2 = UD;
 8003d28:	4b29      	ldr	r3, [pc, #164]	; (8003dd0 <Ultrasonicsensor+0x100>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	623b      	str	r3, [r7, #32]
				s2c++;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	3301      	adds	r3, #1
 8003d32:	617b      	str	r3, [r7, #20]
 8003d34:	e011      	b.n	8003d5a <Ultrasonicsensor+0x8a>
			}
			else if(UD!=s1 && UD!=s2)
 8003d36:	4b26      	ldr	r3, [pc, #152]	; (8003dd0 <Ultrasonicsensor+0x100>)
 8003d38:	781b      	ldrb	r3, [r3, #0]
 8003d3a:	461a      	mov	r2, r3
 8003d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d00b      	beq.n	8003d5a <Ultrasonicsensor+0x8a>
 8003d42:	4b23      	ldr	r3, [pc, #140]	; (8003dd0 <Ultrasonicsensor+0x100>)
 8003d44:	781b      	ldrb	r3, [r3, #0]
 8003d46:	461a      	mov	r2, r3
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d005      	beq.n	8003d5a <Ultrasonicsensor+0x8a>
			{
				s3 = UD;
 8003d4e:	4b20      	ldr	r3, [pc, #128]	; (8003dd0 <Ultrasonicsensor+0x100>)
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	61fb      	str	r3, [r7, #28]
				s3c++;
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	3301      	adds	r3, #1
 8003d58:	613b      	str	r3, [r7, #16]
		for(int sc=0;sc<30;sc++)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	3301      	adds	r3, #1
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2b1d      	cmp	r3, #29
 8003d64:	ddcb      	ble.n	8003cfe <Ultrasonicsensor+0x2e>
			}
		}
		if(s1c>s2c && s1c>s3c)
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	dd08      	ble.n	8003d80 <Ultrasonicsensor+0xb0>
 8003d6e:	69ba      	ldr	r2, [r7, #24]
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	dd04      	ble.n	8003d80 <Ultrasonicsensor+0xb0>
		{
			Distance=s1;
 8003d76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d78:	b2da      	uxtb	r2, r3
 8003d7a:	4b16      	ldr	r3, [pc, #88]	; (8003dd4 <Ultrasonicsensor+0x104>)
 8003d7c:	701a      	strb	r2, [r3, #0]
 8003d7e:	e018      	b.n	8003db2 <Ultrasonicsensor+0xe2>
		}
		else if(s2c>s1c && s2c>s3c)
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	69bb      	ldr	r3, [r7, #24]
 8003d84:	429a      	cmp	r2, r3
 8003d86:	dd08      	ble.n	8003d9a <Ultrasonicsensor+0xca>
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	429a      	cmp	r2, r3
 8003d8e:	dd04      	ble.n	8003d9a <Ultrasonicsensor+0xca>
		{
			Distance=s2;
 8003d90:	6a3b      	ldr	r3, [r7, #32]
 8003d92:	b2da      	uxtb	r2, r3
 8003d94:	4b0f      	ldr	r3, [pc, #60]	; (8003dd4 <Ultrasonicsensor+0x104>)
 8003d96:	701a      	strb	r2, [r3, #0]
 8003d98:	e00b      	b.n	8003db2 <Ultrasonicsensor+0xe2>
		}
		else if(s3c>s1c && s3c>s2c)
 8003d9a:	693a      	ldr	r2, [r7, #16]
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	dd07      	ble.n	8003db2 <Ultrasonicsensor+0xe2>
 8003da2:	693a      	ldr	r2, [r7, #16]
 8003da4:	697b      	ldr	r3, [r7, #20]
 8003da6:	429a      	cmp	r2, r3
 8003da8:	dd03      	ble.n	8003db2 <Ultrasonicsensor+0xe2>
		{
			Distance=s3;
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	4b09      	ldr	r3, [pc, #36]	; (8003dd4 <Ultrasonicsensor+0x104>)
 8003db0:	701a      	strb	r2, [r3, #0]
		}
		sprintf(dist, "DIST: %5d CM", Distance+7);
 8003db2:	4b08      	ldr	r3, [pc, #32]	; (8003dd4 <Ultrasonicsensor+0x104>)
 8003db4:	781b      	ldrb	r3, [r3, #0]
 8003db6:	3307      	adds	r3, #7
 8003db8:	461a      	mov	r2, r3
 8003dba:	4907      	ldr	r1, [pc, #28]	; (8003dd8 <Ultrasonicsensor+0x108>)
 8003dbc:	4807      	ldr	r0, [pc, #28]	; (8003ddc <Ultrasonicsensor+0x10c>)
 8003dbe:	f009 f93b 	bl	800d038 <siprintf>
		//OLED_ShowString(10,50,dist);
		//OLED_Refresh_Gram();
		osDelay(50);
 8003dc2:	2032      	movs	r0, #50	; 0x32
 8003dc4:	f005 ff6c 	bl	8009ca0 <osDelay>
		for(int sc=0;sc<30;sc++)
 8003dc8:	e796      	b.n	8003cf8 <Ultrasonicsensor+0x28>
 8003dca:	bf00      	nop
 8003dcc:	200007d0 	.word	0x200007d0
 8003dd0:	20000006 	.word	0x20000006
 8003dd4:	20000005 	.word	0x20000005
 8003dd8:	08010b2c 	.word	0x08010b2c
 8003ddc:	2000096c 	.word	0x2000096c

08003de0 <Gyroscopetask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Gyroscopetask */
void Gyroscopetask(void *argument)
{
 8003de0:	b5b0      	push	{r4, r5, r7, lr}
 8003de2:	b08c      	sub	sp, #48	; 0x30
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Gyroscopetask */
	/* Infinite loop */
	double offset = 7.848882995;//High power offset 7.85 //Low power offset 7.8475
 8003de8:	a36a      	add	r3, pc, #424	; (adr r3, 8003f94 <Gyroscopetask+0x1b4>)
 8003dea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dee:	e9c7 2308 	strd	r2, r3, [r7, #32]
	double angle;
	for(;;)
	{
		uint8_t val[2] = {0, 0};
 8003df2:	2300      	movs	r3, #0
 8003df4:	81bb      	strh	r3, [r7, #12]
		int16_t angular_speed = 0;
 8003df6:	2300      	movs	r3, #0
 8003df8:	83fb      	strh	r3, [r7, #30]

		uint32_t tick = 0;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
		uint32_t tick2 = 0;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	62bb      	str	r3, [r7, #40]	; 0x28
		gyroInit();
 8003e02:	f7fe fe11 	bl	8002a28 <gyroInit>

		tick = HAL_GetTick();
 8003e06:	f000 fd47 	bl	8004898 <HAL_GetTick>
 8003e0a:	62f8      	str	r0, [r7, #44]	; 0x2c
		tick2 = HAL_GetTick();
 8003e0c:	f000 fd44 	bl	8004898 <HAL_GetTick>
 8003e10:	62b8      	str	r0, [r7, #40]	; 0x28
		osDelayUntil(10);
 8003e12:	200a      	movs	r0, #10
 8003e14:	f005 ff5f 	bl	8009cd6 <osDelayUntil>

		for (;;)
		{

			osDelay(10);
 8003e18:	200a      	movs	r0, #10
 8003e1a:	f005 ff41 	bl	8009ca0 <osDelay>
			if (HAL_GetTick() - tick >= 100L)
 8003e1e:	f000 fd3b 	bl	8004898 <HAL_GetTick>
 8003e22:	4602      	mov	r2, r0
 8003e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e26:	1ad3      	subs	r3, r2, r3
 8003e28:	2b63      	cmp	r3, #99	; 0x63
 8003e2a:	f240 8089 	bls.w	8003f40 <Gyroscopetask+0x160>
			{
				readByte(0x37, val);
 8003e2e:	f107 030c 	add.w	r3, r7, #12
 8003e32:	4619      	mov	r1, r3
 8003e34:	2037      	movs	r0, #55	; 0x37
 8003e36:	f7fe feab 	bl	8002b90 <readByte>
				angular_speed = (val[0] << 8) | val[1];
 8003e3a:	7b3b      	ldrb	r3, [r7, #12]
 8003e3c:	021b      	lsls	r3, r3, #8
 8003e3e:	b21a      	sxth	r2, r3
 8003e40:	7b7b      	ldrb	r3, [r7, #13]
 8003e42:	b21b      	sxth	r3, r3
 8003e44:	4313      	orrs	r3, r2
 8003e46:	83fb      	strh	r3, [r7, #30]

				//	      if (motor_dir == 0){
				//	    	  offset = (offset-(double)(angular_speed))/2;
				//	      }

				angle = ((double)(angular_speed)+offset) * ((HAL_GetTick() - tick) / 16400.0);
 8003e48:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fc fb69 	bl	8000524 <__aeabi_i2d>
 8003e52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003e56:	f7fc fa19 	bl	800028c <__adddf3>
 8003e5a:	4602      	mov	r2, r0
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	4614      	mov	r4, r2
 8003e60:	461d      	mov	r5, r3
 8003e62:	f000 fd19 	bl	8004898 <HAL_GetTick>
 8003e66:	4602      	mov	r2, r0
 8003e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6a:	1ad3      	subs	r3, r2, r3
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7fc fb49 	bl	8000504 <__aeabi_ui2d>
 8003e72:	a34a      	add	r3, pc, #296	; (adr r3, 8003f9c <Gyroscopetask+0x1bc>)
 8003e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e78:	f7fc fce8 	bl	800084c <__aeabi_ddiv>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	460b      	mov	r3, r1
 8003e80:	4620      	mov	r0, r4
 8003e82:	4629      	mov	r1, r5
 8003e84:	f7fc fbb8 	bl	80005f8 <__aeabi_dmul>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	460b      	mov	r3, r1
 8003e8c:	e9c7 2304 	strd	r2, r3, [r7, #16]
				//	      if (motor_dir == 0) angle = 0;
				TOTAL_ANGLE += angle;
 8003e90:	4b39      	ldr	r3, [pc, #228]	; (8003f78 <Gyroscopetask+0x198>)
 8003e92:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003e96:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e9a:	f7fc f9f7 	bl	800028c <__adddf3>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	460b      	mov	r3, r1
 8003ea2:	4935      	ldr	r1, [pc, #212]	; (8003f78 <Gyroscopetask+0x198>)
 8003ea4:	e9c1 2300 	strd	r2, r3, [r1]
				TURNING_ANGLE += angle;
 8003ea8:	4b34      	ldr	r3, [pc, #208]	; (8003f7c <Gyroscopetask+0x19c>)
 8003eaa:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003eae:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003eb2:	f7fc f9eb 	bl	800028c <__adddf3>
 8003eb6:	4602      	mov	r2, r0
 8003eb8:	460b      	mov	r3, r1
 8003eba:	4930      	ldr	r1, [pc, #192]	; (8003f7c <Gyroscopetask+0x19c>)
 8003ebc:	e9c1 2300 	strd	r2, r3, [r1]

				// prevSpeed = angular_speed;
				if (TOTAL_ANGLE >= 720)
 8003ec0:	4b2d      	ldr	r3, [pc, #180]	; (8003f78 <Gyroscopetask+0x198>)
 8003ec2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ec6:	f04f 0200 	mov.w	r2, #0
 8003eca:	4b2d      	ldr	r3, [pc, #180]	; (8003f80 <Gyroscopetask+0x1a0>)
 8003ecc:	f7fc fe1a 	bl	8000b04 <__aeabi_dcmpge>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00c      	beq.n	8003ef0 <Gyroscopetask+0x110>
				{
					TOTAL_ANGLE -= 720;
 8003ed6:	4b28      	ldr	r3, [pc, #160]	; (8003f78 <Gyroscopetask+0x198>)
 8003ed8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003edc:	f04f 0200 	mov.w	r2, #0
 8003ee0:	4b27      	ldr	r3, [pc, #156]	; (8003f80 <Gyroscopetask+0x1a0>)
 8003ee2:	f7fc f9d1 	bl	8000288 <__aeabi_dsub>
 8003ee6:	4602      	mov	r2, r0
 8003ee8:	460b      	mov	r3, r1
 8003eea:	4923      	ldr	r1, [pc, #140]	; (8003f78 <Gyroscopetask+0x198>)
 8003eec:	e9c1 2300 	strd	r2, r3, [r1]
				}
				if (TOTAL_ANGLE <= -720)
 8003ef0:	4b21      	ldr	r3, [pc, #132]	; (8003f78 <Gyroscopetask+0x198>)
 8003ef2:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003ef6:	f04f 0200 	mov.w	r2, #0
 8003efa:	4b22      	ldr	r3, [pc, #136]	; (8003f84 <Gyroscopetask+0x1a4>)
 8003efc:	f7fc fdf8 	bl	8000af0 <__aeabi_dcmple>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00c      	beq.n	8003f20 <Gyroscopetask+0x140>
				{
					TOTAL_ANGLE += 720;
 8003f06:	4b1c      	ldr	r3, [pc, #112]	; (8003f78 <Gyroscopetask+0x198>)
 8003f08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f0c:	f04f 0200 	mov.w	r2, #0
 8003f10:	4b1b      	ldr	r3, [pc, #108]	; (8003f80 <Gyroscopetask+0x1a0>)
 8003f12:	f7fc f9bb 	bl	800028c <__adddf3>
 8003f16:	4602      	mov	r2, r0
 8003f18:	460b      	mov	r3, r1
 8003f1a:	4917      	ldr	r1, [pc, #92]	; (8003f78 <Gyroscopetask+0x198>)
 8003f1c:	e9c1 2300 	strd	r2, r3, [r1]
				}
				//	      sprintf(OLED_Row_1, "OFSET: %6d\0", (int)((offset*10000)));
				sprintf(GyroBuff, "ANGLE: %6d\0", (int)(TURNING_ANGLE));
 8003f20:	4b16      	ldr	r3, [pc, #88]	; (8003f7c <Gyroscopetask+0x19c>)
 8003f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f26:	4610      	mov	r0, r2
 8003f28:	4619      	mov	r1, r3
 8003f2a:	f7fc fe15 	bl	8000b58 <__aeabi_d2iz>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	461a      	mov	r2, r3
 8003f32:	4915      	ldr	r1, [pc, #84]	; (8003f88 <Gyroscopetask+0x1a8>)
 8003f34:	4815      	ldr	r0, [pc, #84]	; (8003f8c <Gyroscopetask+0x1ac>)
 8003f36:	f009 f87f 	bl	800d038 <siprintf>
				//sprintf(OLED_Row_5, "A_100: %6d\0", (int)(100*TOTAL_ANGLE));

				tick = HAL_GetTick();
 8003f3a:	f000 fcad 	bl	8004898 <HAL_GetTick>
 8003f3e:	62f8      	str	r0, [r7, #44]	; 0x2c
			}
			if (HAL_GetTick() - tick2 >= 1600L){
 8003f40:	f000 fcaa 	bl	8004898 <HAL_GetTick>
 8003f44:	4602      	mov	r2, r0
 8003f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f48:	1ad3      	subs	r3, r2, r3
 8003f4a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8003f4e:	f4ff af63 	bcc.w	8003e18 <Gyroscopetask+0x38>
				TURNING_ANGLE = TURNING_ANGLE -1;
 8003f52:	4b0a      	ldr	r3, [pc, #40]	; (8003f7c <Gyroscopetask+0x19c>)
 8003f54:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003f58:	f04f 0200 	mov.w	r2, #0
 8003f5c:	4b0c      	ldr	r3, [pc, #48]	; (8003f90 <Gyroscopetask+0x1b0>)
 8003f5e:	f7fc f993 	bl	8000288 <__aeabi_dsub>
 8003f62:	4602      	mov	r2, r0
 8003f64:	460b      	mov	r3, r1
 8003f66:	4905      	ldr	r1, [pc, #20]	; (8003f7c <Gyroscopetask+0x19c>)
 8003f68:	e9c1 2300 	strd	r2, r3, [r1]
				tick2 = HAL_GetTick();
 8003f6c:	f000 fc94 	bl	8004898 <HAL_GetTick>
 8003f70:	62b8      	str	r0, [r7, #40]	; 0x28
			osDelay(10);
 8003f72:	e751      	b.n	8003e18 <Gyroscopetask+0x38>
 8003f74:	f3af 8000 	nop.w
 8003f78:	20000900 	.word	0x20000900
 8003f7c:	20000908 	.word	0x20000908
 8003f80:	40868000 	.word	0x40868000
 8003f84:	c0868000 	.word	0xc0868000
 8003f88:	08010b3c 	.word	0x08010b3c
 8003f8c:	20000918 	.word	0x20000918
 8003f90:	3ff00000 	.word	0x3ff00000
 8003f94:	95769f44 	.word	0x95769f44
 8003f98:	401f6541 	.word	0x401f6541
 8003f9c:	00000000 	.word	0x00000000
 8003fa0:	40d00400 	.word	0x40d00400

08003fa4 <PID>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_PID */
void PID(void *argument)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN PID */
	/* Infinite loop */
	for(;;)
	{
		osDelay(1);
 8003fac:	2001      	movs	r0, #1
 8003fae:	f005 fe77 	bl	8009ca0 <osDelay>
 8003fb2:	e7fb      	b.n	8003fac <PID+0x8>

08003fb4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003fb8:	b672      	cpsid	i
}
 8003fba:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003fbc:	e7fe      	b.n	8003fbc <Error_Handler+0x8>
	...

08003fc0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	607b      	str	r3, [r7, #4]
 8003fca:	4b12      	ldr	r3, [pc, #72]	; (8004014 <HAL_MspInit+0x54>)
 8003fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fce:	4a11      	ldr	r2, [pc, #68]	; (8004014 <HAL_MspInit+0x54>)
 8003fd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fd4:	6453      	str	r3, [r2, #68]	; 0x44
 8003fd6:	4b0f      	ldr	r3, [pc, #60]	; (8004014 <HAL_MspInit+0x54>)
 8003fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fde:	607b      	str	r3, [r7, #4]
 8003fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	603b      	str	r3, [r7, #0]
 8003fe6:	4b0b      	ldr	r3, [pc, #44]	; (8004014 <HAL_MspInit+0x54>)
 8003fe8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fea:	4a0a      	ldr	r2, [pc, #40]	; (8004014 <HAL_MspInit+0x54>)
 8003fec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ff0:	6413      	str	r3, [r2, #64]	; 0x40
 8003ff2:	4b08      	ldr	r3, [pc, #32]	; (8004014 <HAL_MspInit+0x54>)
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ffa:	603b      	str	r3, [r7, #0]
 8003ffc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003ffe:	2200      	movs	r2, #0
 8004000:	210f      	movs	r1, #15
 8004002:	f06f 0001 	mvn.w	r0, #1
 8004006:	f001 f952 	bl	80052ae <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800400a:	bf00      	nop
 800400c:	3708      	adds	r7, #8
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	40023800 	.word	0x40023800

08004018 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004018:	b580      	push	{r7, lr}
 800401a:	b08c      	sub	sp, #48	; 0x30
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004020:	f107 031c 	add.w	r3, r7, #28
 8004024:	2200      	movs	r2, #0
 8004026:	601a      	str	r2, [r3, #0]
 8004028:	605a      	str	r2, [r3, #4]
 800402a:	609a      	str	r2, [r3, #8]
 800402c:	60da      	str	r2, [r3, #12]
 800402e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a2e      	ldr	r2, [pc, #184]	; (80040f0 <HAL_ADC_MspInit+0xd8>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d128      	bne.n	800408c <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800403a:	2300      	movs	r3, #0
 800403c:	61bb      	str	r3, [r7, #24]
 800403e:	4b2d      	ldr	r3, [pc, #180]	; (80040f4 <HAL_ADC_MspInit+0xdc>)
 8004040:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004042:	4a2c      	ldr	r2, [pc, #176]	; (80040f4 <HAL_ADC_MspInit+0xdc>)
 8004044:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004048:	6453      	str	r3, [r2, #68]	; 0x44
 800404a:	4b2a      	ldr	r3, [pc, #168]	; (80040f4 <HAL_ADC_MspInit+0xdc>)
 800404c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800404e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004052:	61bb      	str	r3, [r7, #24]
 8004054:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004056:	2300      	movs	r3, #0
 8004058:	617b      	str	r3, [r7, #20]
 800405a:	4b26      	ldr	r3, [pc, #152]	; (80040f4 <HAL_ADC_MspInit+0xdc>)
 800405c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405e:	4a25      	ldr	r2, [pc, #148]	; (80040f4 <HAL_ADC_MspInit+0xdc>)
 8004060:	f043 0304 	orr.w	r3, r3, #4
 8004064:	6313      	str	r3, [r2, #48]	; 0x30
 8004066:	4b23      	ldr	r3, [pc, #140]	; (80040f4 <HAL_ADC_MspInit+0xdc>)
 8004068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800406a:	f003 0304 	and.w	r3, r3, #4
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC1     ------> ADC1_IN11
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8004072:	2302      	movs	r3, #2
 8004074:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004076:	2303      	movs	r3, #3
 8004078:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800407a:	2300      	movs	r3, #0
 800407c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800407e:	f107 031c 	add.w	r3, r7, #28
 8004082:	4619      	mov	r1, r3
 8004084:	481c      	ldr	r0, [pc, #112]	; (80040f8 <HAL_ADC_MspInit+0xe0>)
 8004086:	f001 f9db 	bl	8005440 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800408a:	e02c      	b.n	80040e6 <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a1a      	ldr	r2, [pc, #104]	; (80040fc <HAL_ADC_MspInit+0xe4>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d127      	bne.n	80040e6 <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8004096:	2300      	movs	r3, #0
 8004098:	613b      	str	r3, [r7, #16]
 800409a:	4b16      	ldr	r3, [pc, #88]	; (80040f4 <HAL_ADC_MspInit+0xdc>)
 800409c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409e:	4a15      	ldr	r2, [pc, #84]	; (80040f4 <HAL_ADC_MspInit+0xdc>)
 80040a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040a4:	6453      	str	r3, [r2, #68]	; 0x44
 80040a6:	4b13      	ldr	r3, [pc, #76]	; (80040f4 <HAL_ADC_MspInit+0xdc>)
 80040a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ae:	613b      	str	r3, [r7, #16]
 80040b0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040b2:	2300      	movs	r3, #0
 80040b4:	60fb      	str	r3, [r7, #12]
 80040b6:	4b0f      	ldr	r3, [pc, #60]	; (80040f4 <HAL_ADC_MspInit+0xdc>)
 80040b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ba:	4a0e      	ldr	r2, [pc, #56]	; (80040f4 <HAL_ADC_MspInit+0xdc>)
 80040bc:	f043 0304 	orr.w	r3, r3, #4
 80040c0:	6313      	str	r3, [r2, #48]	; 0x30
 80040c2:	4b0c      	ldr	r3, [pc, #48]	; (80040f4 <HAL_ADC_MspInit+0xdc>)
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c6:	f003 0304 	and.w	r3, r3, #4
 80040ca:	60fb      	str	r3, [r7, #12]
 80040cc:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80040ce:	2304      	movs	r3, #4
 80040d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040d2:	2303      	movs	r3, #3
 80040d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040d6:	2300      	movs	r3, #0
 80040d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040da:	f107 031c 	add.w	r3, r7, #28
 80040de:	4619      	mov	r1, r3
 80040e0:	4805      	ldr	r0, [pc, #20]	; (80040f8 <HAL_ADC_MspInit+0xe0>)
 80040e2:	f001 f9ad 	bl	8005440 <HAL_GPIO_Init>
}
 80040e6:	bf00      	nop
 80040e8:	3730      	adds	r7, #48	; 0x30
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40012000 	.word	0x40012000
 80040f4:	40023800 	.word	0x40023800
 80040f8:	40020800 	.word	0x40020800
 80040fc:	40012100 	.word	0x40012100

08004100 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004100:	b580      	push	{r7, lr}
 8004102:	b08a      	sub	sp, #40	; 0x28
 8004104:	af00      	add	r7, sp, #0
 8004106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004108:	f107 0314 	add.w	r3, r7, #20
 800410c:	2200      	movs	r2, #0
 800410e:	601a      	str	r2, [r3, #0]
 8004110:	605a      	str	r2, [r3, #4]
 8004112:	609a      	str	r2, [r3, #8]
 8004114:	60da      	str	r2, [r3, #12]
 8004116:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a19      	ldr	r2, [pc, #100]	; (8004184 <HAL_I2C_MspInit+0x84>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d12c      	bne.n	800417c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004122:	2300      	movs	r3, #0
 8004124:	613b      	str	r3, [r7, #16]
 8004126:	4b18      	ldr	r3, [pc, #96]	; (8004188 <HAL_I2C_MspInit+0x88>)
 8004128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412a:	4a17      	ldr	r2, [pc, #92]	; (8004188 <HAL_I2C_MspInit+0x88>)
 800412c:	f043 0302 	orr.w	r3, r3, #2
 8004130:	6313      	str	r3, [r2, #48]	; 0x30
 8004132:	4b15      	ldr	r3, [pc, #84]	; (8004188 <HAL_I2C_MspInit+0x88>)
 8004134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004136:	f003 0302 	and.w	r3, r3, #2
 800413a:	613b      	str	r3, [r7, #16]
 800413c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GYRO_Pin|GYROB9_Pin;
 800413e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004144:	2312      	movs	r3, #18
 8004146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004148:	2300      	movs	r3, #0
 800414a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800414c:	2303      	movs	r3, #3
 800414e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004150:	2304      	movs	r3, #4
 8004152:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004154:	f107 0314 	add.w	r3, r7, #20
 8004158:	4619      	mov	r1, r3
 800415a:	480c      	ldr	r0, [pc, #48]	; (800418c <HAL_I2C_MspInit+0x8c>)
 800415c:	f001 f970 	bl	8005440 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004160:	2300      	movs	r3, #0
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	4b08      	ldr	r3, [pc, #32]	; (8004188 <HAL_I2C_MspInit+0x88>)
 8004166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004168:	4a07      	ldr	r2, [pc, #28]	; (8004188 <HAL_I2C_MspInit+0x88>)
 800416a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800416e:	6413      	str	r3, [r2, #64]	; 0x40
 8004170:	4b05      	ldr	r3, [pc, #20]	; (8004188 <HAL_I2C_MspInit+0x88>)
 8004172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004174:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004178:	60fb      	str	r3, [r7, #12]
 800417a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800417c:	bf00      	nop
 800417e:	3728      	adds	r7, #40	; 0x28
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	40005400 	.word	0x40005400
 8004188:	40023800 	.word	0x40023800
 800418c:	40020400 	.word	0x40020400

08004190 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b08c      	sub	sp, #48	; 0x30
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004198:	f107 031c 	add.w	r3, r7, #28
 800419c:	2200      	movs	r2, #0
 800419e:	601a      	str	r2, [r3, #0]
 80041a0:	605a      	str	r2, [r3, #4]
 80041a2:	609a      	str	r2, [r3, #8]
 80041a4:	60da      	str	r2, [r3, #12]
 80041a6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a44      	ldr	r2, [pc, #272]	; (80042c0 <HAL_TIM_Base_MspInit+0x130>)
 80041ae:	4293      	cmp	r3, r2
 80041b0:	d116      	bne.n	80041e0 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80041b2:	2300      	movs	r3, #0
 80041b4:	61bb      	str	r3, [r7, #24]
 80041b6:	4b43      	ldr	r3, [pc, #268]	; (80042c4 <HAL_TIM_Base_MspInit+0x134>)
 80041b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041ba:	4a42      	ldr	r2, [pc, #264]	; (80042c4 <HAL_TIM_Base_MspInit+0x134>)
 80041bc:	f043 0301 	orr.w	r3, r3, #1
 80041c0:	6453      	str	r3, [r2, #68]	; 0x44
 80041c2:	4b40      	ldr	r3, [pc, #256]	; (80042c4 <HAL_TIM_Base_MspInit+0x134>)
 80041c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041c6:	f003 0301 	and.w	r3, r3, #1
 80041ca:	61bb      	str	r3, [r7, #24]
 80041cc:	69bb      	ldr	r3, [r7, #24]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 80041ce:	2200      	movs	r2, #0
 80041d0:	2105      	movs	r1, #5
 80041d2:	201b      	movs	r0, #27
 80041d4:	f001 f86b 	bl	80052ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80041d8:	201b      	movs	r0, #27
 80041da:	f001 f884 	bl	80052e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80041de:	e06b      	b.n	80042b8 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM4)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a38      	ldr	r2, [pc, #224]	; (80042c8 <HAL_TIM_Base_MspInit+0x138>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d135      	bne.n	8004256 <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80041ea:	2300      	movs	r3, #0
 80041ec:	617b      	str	r3, [r7, #20]
 80041ee:	4b35      	ldr	r3, [pc, #212]	; (80042c4 <HAL_TIM_Base_MspInit+0x134>)
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	4a34      	ldr	r2, [pc, #208]	; (80042c4 <HAL_TIM_Base_MspInit+0x134>)
 80041f4:	f043 0304 	orr.w	r3, r3, #4
 80041f8:	6413      	str	r3, [r2, #64]	; 0x40
 80041fa:	4b32      	ldr	r3, [pc, #200]	; (80042c4 <HAL_TIM_Base_MspInit+0x134>)
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	f003 0304 	and.w	r3, r3, #4
 8004202:	617b      	str	r3, [r7, #20]
 8004204:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004206:	2300      	movs	r3, #0
 8004208:	613b      	str	r3, [r7, #16]
 800420a:	4b2e      	ldr	r3, [pc, #184]	; (80042c4 <HAL_TIM_Base_MspInit+0x134>)
 800420c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420e:	4a2d      	ldr	r2, [pc, #180]	; (80042c4 <HAL_TIM_Base_MspInit+0x134>)
 8004210:	f043 0308 	orr.w	r3, r3, #8
 8004214:	6313      	str	r3, [r2, #48]	; 0x30
 8004216:	4b2b      	ldr	r3, [pc, #172]	; (80042c4 <HAL_TIM_Base_MspInit+0x134>)
 8004218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421a:	f003 0308 	and.w	r3, r3, #8
 800421e:	613b      	str	r3, [r7, #16]
 8004220:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = Echo_Pin;
 8004222:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004226:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004228:	2302      	movs	r3, #2
 800422a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800422c:	2300      	movs	r3, #0
 800422e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004230:	2300      	movs	r3, #0
 8004232:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004234:	2302      	movs	r3, #2
 8004236:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8004238:	f107 031c 	add.w	r3, r7, #28
 800423c:	4619      	mov	r1, r3
 800423e:	4823      	ldr	r0, [pc, #140]	; (80042cc <HAL_TIM_Base_MspInit+0x13c>)
 8004240:	f001 f8fe 	bl	8005440 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8004244:	2200      	movs	r2, #0
 8004246:	2105      	movs	r1, #5
 8004248:	201e      	movs	r0, #30
 800424a:	f001 f830 	bl	80052ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800424e:	201e      	movs	r0, #30
 8004250:	f001 f849 	bl	80052e6 <HAL_NVIC_EnableIRQ>
}
 8004254:	e030      	b.n	80042b8 <HAL_TIM_Base_MspInit+0x128>
  else if(htim_base->Instance==TIM8)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	4a1d      	ldr	r2, [pc, #116]	; (80042d0 <HAL_TIM_Base_MspInit+0x140>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d12b      	bne.n	80042b8 <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004260:	2300      	movs	r3, #0
 8004262:	60fb      	str	r3, [r7, #12]
 8004264:	4b17      	ldr	r3, [pc, #92]	; (80042c4 <HAL_TIM_Base_MspInit+0x134>)
 8004266:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004268:	4a16      	ldr	r2, [pc, #88]	; (80042c4 <HAL_TIM_Base_MspInit+0x134>)
 800426a:	f043 0302 	orr.w	r3, r3, #2
 800426e:	6453      	str	r3, [r2, #68]	; 0x44
 8004270:	4b14      	ldr	r3, [pc, #80]	; (80042c4 <HAL_TIM_Base_MspInit+0x134>)
 8004272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004274:	f003 0302 	and.w	r3, r3, #2
 8004278:	60fb      	str	r3, [r7, #12]
 800427a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800427c:	2300      	movs	r3, #0
 800427e:	60bb      	str	r3, [r7, #8]
 8004280:	4b10      	ldr	r3, [pc, #64]	; (80042c4 <HAL_TIM_Base_MspInit+0x134>)
 8004282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004284:	4a0f      	ldr	r2, [pc, #60]	; (80042c4 <HAL_TIM_Base_MspInit+0x134>)
 8004286:	f043 0304 	orr.w	r3, r3, #4
 800428a:	6313      	str	r3, [r2, #48]	; 0x30
 800428c:	4b0d      	ldr	r3, [pc, #52]	; (80042c4 <HAL_TIM_Base_MspInit+0x134>)
 800428e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004290:	f003 0304 	and.w	r3, r3, #4
 8004294:	60bb      	str	r3, [r7, #8]
 8004296:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 8004298:	23c0      	movs	r3, #192	; 0xc0
 800429a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800429c:	2302      	movs	r3, #2
 800429e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042a0:	2300      	movs	r3, #0
 80042a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042a4:	2300      	movs	r3, #0
 80042a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80042a8:	2303      	movs	r3, #3
 80042aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80042ac:	f107 031c 	add.w	r3, r7, #28
 80042b0:	4619      	mov	r1, r3
 80042b2:	4808      	ldr	r0, [pc, #32]	; (80042d4 <HAL_TIM_Base_MspInit+0x144>)
 80042b4:	f001 f8c4 	bl	8005440 <HAL_GPIO_Init>
}
 80042b8:	bf00      	nop
 80042ba:	3730      	adds	r7, #48	; 0x30
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	40010000 	.word	0x40010000
 80042c4:	40023800 	.word	0x40023800
 80042c8:	40000800 	.word	0x40000800
 80042cc:	40020c00 	.word	0x40020c00
 80042d0:	40010400 	.word	0x40010400
 80042d4:	40020800 	.word	0x40020800

080042d8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b08c      	sub	sp, #48	; 0x30
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042e0:	f107 031c 	add.w	r3, r7, #28
 80042e4:	2200      	movs	r2, #0
 80042e6:	601a      	str	r2, [r3, #0]
 80042e8:	605a      	str	r2, [r3, #4]
 80042ea:	609a      	str	r2, [r3, #8]
 80042ec:	60da      	str	r2, [r3, #12]
 80042ee:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042f8:	d153      	bne.n	80043a2 <HAL_TIM_Encoder_MspInit+0xca>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042fa:	2300      	movs	r3, #0
 80042fc:	61bb      	str	r3, [r7, #24]
 80042fe:	4b43      	ldr	r3, [pc, #268]	; (800440c <HAL_TIM_Encoder_MspInit+0x134>)
 8004300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004302:	4a42      	ldr	r2, [pc, #264]	; (800440c <HAL_TIM_Encoder_MspInit+0x134>)
 8004304:	f043 0301 	orr.w	r3, r3, #1
 8004308:	6413      	str	r3, [r2, #64]	; 0x40
 800430a:	4b40      	ldr	r3, [pc, #256]	; (800440c <HAL_TIM_Encoder_MspInit+0x134>)
 800430c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430e:	f003 0301 	and.w	r3, r3, #1
 8004312:	61bb      	str	r3, [r7, #24]
 8004314:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004316:	2300      	movs	r3, #0
 8004318:	617b      	str	r3, [r7, #20]
 800431a:	4b3c      	ldr	r3, [pc, #240]	; (800440c <HAL_TIM_Encoder_MspInit+0x134>)
 800431c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431e:	4a3b      	ldr	r2, [pc, #236]	; (800440c <HAL_TIM_Encoder_MspInit+0x134>)
 8004320:	f043 0301 	orr.w	r3, r3, #1
 8004324:	6313      	str	r3, [r2, #48]	; 0x30
 8004326:	4b39      	ldr	r3, [pc, #228]	; (800440c <HAL_TIM_Encoder_MspInit+0x134>)
 8004328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800432a:	f003 0301 	and.w	r3, r3, #1
 800432e:	617b      	str	r3, [r7, #20]
 8004330:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004332:	2300      	movs	r3, #0
 8004334:	613b      	str	r3, [r7, #16]
 8004336:	4b35      	ldr	r3, [pc, #212]	; (800440c <HAL_TIM_Encoder_MspInit+0x134>)
 8004338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800433a:	4a34      	ldr	r2, [pc, #208]	; (800440c <HAL_TIM_Encoder_MspInit+0x134>)
 800433c:	f043 0302 	orr.w	r3, r3, #2
 8004340:	6313      	str	r3, [r2, #48]	; 0x30
 8004342:	4b32      	ldr	r3, [pc, #200]	; (800440c <HAL_TIM_Encoder_MspInit+0x134>)
 8004344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004346:	f003 0302 	and.w	r3, r3, #2
 800434a:	613b      	str	r3, [r7, #16]
 800434c:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = Motor_A_Encoder_Pin;
 800434e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004352:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004354:	2302      	movs	r3, #2
 8004356:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004358:	2300      	movs	r3, #0
 800435a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800435c:	2300      	movs	r3, #0
 800435e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004360:	2301      	movs	r3, #1
 8004362:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Motor_A_Encoder_GPIO_Port, &GPIO_InitStruct);
 8004364:	f107 031c 	add.w	r3, r7, #28
 8004368:	4619      	mov	r1, r3
 800436a:	4829      	ldr	r0, [pc, #164]	; (8004410 <HAL_TIM_Encoder_MspInit+0x138>)
 800436c:	f001 f868 	bl	8005440 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Motor_A_EncoderB3_Pin;
 8004370:	2308      	movs	r3, #8
 8004372:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004374:	2302      	movs	r3, #2
 8004376:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004378:	2300      	movs	r3, #0
 800437a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800437c:	2300      	movs	r3, #0
 800437e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004380:	2301      	movs	r3, #1
 8004382:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(Motor_A_EncoderB3_GPIO_Port, &GPIO_InitStruct);
 8004384:	f107 031c 	add.w	r3, r7, #28
 8004388:	4619      	mov	r1, r3
 800438a:	4822      	ldr	r0, [pc, #136]	; (8004414 <HAL_TIM_Encoder_MspInit+0x13c>)
 800438c:	f001 f858 	bl	8005440 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 8004390:	2200      	movs	r2, #0
 8004392:	2105      	movs	r1, #5
 8004394:	201c      	movs	r0, #28
 8004396:	f000 ff8a 	bl	80052ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800439a:	201c      	movs	r0, #28
 800439c:	f000 ffa3 	bl	80052e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80043a0:	e030      	b.n	8004404 <HAL_TIM_Encoder_MspInit+0x12c>
  else if(htim_encoder->Instance==TIM3)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a1c      	ldr	r2, [pc, #112]	; (8004418 <HAL_TIM_Encoder_MspInit+0x140>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d12b      	bne.n	8004404 <HAL_TIM_Encoder_MspInit+0x12c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80043ac:	2300      	movs	r3, #0
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	4b16      	ldr	r3, [pc, #88]	; (800440c <HAL_TIM_Encoder_MspInit+0x134>)
 80043b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b4:	4a15      	ldr	r2, [pc, #84]	; (800440c <HAL_TIM_Encoder_MspInit+0x134>)
 80043b6:	f043 0302 	orr.w	r3, r3, #2
 80043ba:	6413      	str	r3, [r2, #64]	; 0x40
 80043bc:	4b13      	ldr	r3, [pc, #76]	; (800440c <HAL_TIM_Encoder_MspInit+0x134>)
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	f003 0302 	and.w	r3, r3, #2
 80043c4:	60fb      	str	r3, [r7, #12]
 80043c6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80043c8:	2300      	movs	r3, #0
 80043ca:	60bb      	str	r3, [r7, #8]
 80043cc:	4b0f      	ldr	r3, [pc, #60]	; (800440c <HAL_TIM_Encoder_MspInit+0x134>)
 80043ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d0:	4a0e      	ldr	r2, [pc, #56]	; (800440c <HAL_TIM_Encoder_MspInit+0x134>)
 80043d2:	f043 0301 	orr.w	r3, r3, #1
 80043d6:	6313      	str	r3, [r2, #48]	; 0x30
 80043d8:	4b0c      	ldr	r3, [pc, #48]	; (800440c <HAL_TIM_Encoder_MspInit+0x134>)
 80043da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043dc:	f003 0301 	and.w	r3, r3, #1
 80043e0:	60bb      	str	r3, [r7, #8]
 80043e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Motor_B_Encoder_Pin|Motor_B_EncoderA7_Pin;
 80043e4:	23c0      	movs	r3, #192	; 0xc0
 80043e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043e8:	2302      	movs	r3, #2
 80043ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043ec:	2300      	movs	r3, #0
 80043ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043f0:	2300      	movs	r3, #0
 80043f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80043f4:	2302      	movs	r3, #2
 80043f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80043f8:	f107 031c 	add.w	r3, r7, #28
 80043fc:	4619      	mov	r1, r3
 80043fe:	4804      	ldr	r0, [pc, #16]	; (8004410 <HAL_TIM_Encoder_MspInit+0x138>)
 8004400:	f001 f81e 	bl	8005440 <HAL_GPIO_Init>
}
 8004404:	bf00      	nop
 8004406:	3730      	adds	r7, #48	; 0x30
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	40023800 	.word	0x40023800
 8004410:	40020000 	.word	0x40020000
 8004414:	40020400 	.word	0x40020400
 8004418:	40000400 	.word	0x40000400

0800441c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b088      	sub	sp, #32
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004424:	f107 030c 	add.w	r3, r7, #12
 8004428:	2200      	movs	r2, #0
 800442a:	601a      	str	r2, [r3, #0]
 800442c:	605a      	str	r2, [r3, #4]
 800442e:	609a      	str	r2, [r3, #8]
 8004430:	60da      	str	r2, [r3, #12]
 8004432:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4a12      	ldr	r2, [pc, #72]	; (8004484 <HAL_TIM_MspPostInit+0x68>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d11e      	bne.n	800447c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800443e:	2300      	movs	r3, #0
 8004440:	60bb      	str	r3, [r7, #8]
 8004442:	4b11      	ldr	r3, [pc, #68]	; (8004488 <HAL_TIM_MspPostInit+0x6c>)
 8004444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004446:	4a10      	ldr	r2, [pc, #64]	; (8004488 <HAL_TIM_MspPostInit+0x6c>)
 8004448:	f043 0310 	orr.w	r3, r3, #16
 800444c:	6313      	str	r3, [r2, #48]	; 0x30
 800444e:	4b0e      	ldr	r3, [pc, #56]	; (8004488 <HAL_TIM_MspPostInit+0x6c>)
 8004450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004452:	f003 0310 	and.w	r3, r3, #16
 8004456:	60bb      	str	r3, [r7, #8]
 8004458:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = Servo_Pin;
 800445a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800445e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004460:	2302      	movs	r3, #2
 8004462:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004464:	2300      	movs	r3, #0
 8004466:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004468:	2300      	movs	r3, #0
 800446a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800446c:	2301      	movs	r3, #1
 800446e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Servo_GPIO_Port, &GPIO_InitStruct);
 8004470:	f107 030c 	add.w	r3, r7, #12
 8004474:	4619      	mov	r1, r3
 8004476:	4805      	ldr	r0, [pc, #20]	; (800448c <HAL_TIM_MspPostInit+0x70>)
 8004478:	f000 ffe2 	bl	8005440 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800447c:	bf00      	nop
 800447e:	3720      	adds	r7, #32
 8004480:	46bd      	mov	sp, r7
 8004482:	bd80      	pop	{r7, pc}
 8004484:	40010000 	.word	0x40010000
 8004488:	40023800 	.word	0x40023800
 800448c:	40021000 	.word	0x40021000

08004490 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08a      	sub	sp, #40	; 0x28
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004498:	f107 0314 	add.w	r3, r7, #20
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	605a      	str	r2, [r3, #4]
 80044a2:	609a      	str	r2, [r3, #8]
 80044a4:	60da      	str	r2, [r3, #12]
 80044a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a1d      	ldr	r2, [pc, #116]	; (8004524 <HAL_UART_MspInit+0x94>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d134      	bne.n	800451c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80044b2:	2300      	movs	r3, #0
 80044b4:	613b      	str	r3, [r7, #16]
 80044b6:	4b1c      	ldr	r3, [pc, #112]	; (8004528 <HAL_UART_MspInit+0x98>)
 80044b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ba:	4a1b      	ldr	r2, [pc, #108]	; (8004528 <HAL_UART_MspInit+0x98>)
 80044bc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80044c0:	6413      	str	r3, [r2, #64]	; 0x40
 80044c2:	4b19      	ldr	r3, [pc, #100]	; (8004528 <HAL_UART_MspInit+0x98>)
 80044c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044ca:	613b      	str	r3, [r7, #16]
 80044cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80044ce:	2300      	movs	r3, #0
 80044d0:	60fb      	str	r3, [r7, #12]
 80044d2:	4b15      	ldr	r3, [pc, #84]	; (8004528 <HAL_UART_MspInit+0x98>)
 80044d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d6:	4a14      	ldr	r2, [pc, #80]	; (8004528 <HAL_UART_MspInit+0x98>)
 80044d8:	f043 0304 	orr.w	r3, r3, #4
 80044dc:	6313      	str	r3, [r2, #48]	; 0x30
 80044de:	4b12      	ldr	r3, [pc, #72]	; (8004528 <HAL_UART_MspInit+0x98>)
 80044e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044e2:	f003 0304 	and.w	r3, r3, #4
 80044e6:	60fb      	str	r3, [r7, #12]
 80044e8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80044ea:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80044ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044f0:	2302      	movs	r3, #2
 80044f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044f4:	2300      	movs	r3, #0
 80044f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80044f8:	2303      	movs	r3, #3
 80044fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80044fc:	2307      	movs	r3, #7
 80044fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004500:	f107 0314 	add.w	r3, r7, #20
 8004504:	4619      	mov	r1, r3
 8004506:	4809      	ldr	r0, [pc, #36]	; (800452c <HAL_UART_MspInit+0x9c>)
 8004508:	f000 ff9a 	bl	8005440 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 800450c:	2200      	movs	r2, #0
 800450e:	2105      	movs	r1, #5
 8004510:	2027      	movs	r0, #39	; 0x27
 8004512:	f000 fecc 	bl	80052ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8004516:	2027      	movs	r0, #39	; 0x27
 8004518:	f000 fee5 	bl	80052e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800451c:	bf00      	nop
 800451e:	3728      	adds	r7, #40	; 0x28
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}
 8004524:	40004800 	.word	0x40004800
 8004528:	40023800 	.word	0x40023800
 800452c:	40020800 	.word	0x40020800

08004530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004530:	b480      	push	{r7}
 8004532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004534:	e7fe      	b.n	8004534 <NMI_Handler+0x4>

08004536 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004536:	b480      	push	{r7}
 8004538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800453a:	e7fe      	b.n	800453a <HardFault_Handler+0x4>

0800453c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004540:	e7fe      	b.n	8004540 <MemManage_Handler+0x4>

08004542 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004542:	b480      	push	{r7}
 8004544:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004546:	e7fe      	b.n	8004546 <BusFault_Handler+0x4>

08004548 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004548:	b480      	push	{r7}
 800454a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800454c:	e7fe      	b.n	800454c <UsageFault_Handler+0x4>

0800454e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800454e:	b480      	push	{r7}
 8004550:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004552:	bf00      	nop
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr

0800455c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004560:	f000 f986 	bl	8004870 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8004564:	f007 f854 	bl	800b610 <xTaskGetSchedulerState>
 8004568:	4603      	mov	r3, r0
 800456a:	2b01      	cmp	r3, #1
 800456c:	d001      	beq.n	8004572 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 800456e:	f007 fe3b 	bl	800c1e8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004572:	bf00      	nop
 8004574:	bd80      	pop	{r7, pc}
	...

08004578 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800457c:	4802      	ldr	r0, [pc, #8]	; (8004588 <TIM1_CC_IRQHandler+0x10>)
 800457e:	f003 f951 	bl	8007824 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8004582:	bf00      	nop
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	200006f8 	.word	0x200006f8

0800458c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004590:	4802      	ldr	r0, [pc, #8]	; (800459c <TIM2_IRQHandler+0x10>)
 8004592:	f003 f947 	bl	8007824 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004596:	bf00      	nop
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	20000740 	.word	0x20000740

080045a0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80045a4:	4802      	ldr	r0, [pc, #8]	; (80045b0 <TIM4_IRQHandler+0x10>)
 80045a6:	f003 f93d 	bl	8007824 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80045aa:	bf00      	nop
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	200007d0 	.word	0x200007d0

080045b4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80045b8:	4802      	ldr	r0, [pc, #8]	; (80045c4 <USART3_IRQHandler+0x10>)
 80045ba:	f004 faf9 	bl	8008bb0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80045be:	bf00      	nop
 80045c0:	bd80      	pop	{r7, pc}
 80045c2:	bf00      	nop
 80045c4:	20000860 	.word	0x20000860

080045c8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
	return 1;
 80045cc:	2301      	movs	r3, #1
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <_kill>:

int _kill(int pid, int sig)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80045e2:	f008 f87f 	bl	800c6e4 <__errno>
 80045e6:	4603      	mov	r3, r0
 80045e8:	2216      	movs	r2, #22
 80045ea:	601a      	str	r2, [r3, #0]
	return -1;
 80045ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3708      	adds	r7, #8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <_exit>:

void _exit (int status)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b082      	sub	sp, #8
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8004600:	f04f 31ff 	mov.w	r1, #4294967295
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f7ff ffe7 	bl	80045d8 <_kill>
	while (1) {}		/* Make sure we hang here */
 800460a:	e7fe      	b.n	800460a <_exit+0x12>

0800460c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b086      	sub	sp, #24
 8004610:	af00      	add	r7, sp, #0
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004618:	2300      	movs	r3, #0
 800461a:	617b      	str	r3, [r7, #20]
 800461c:	e00a      	b.n	8004634 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800461e:	f3af 8000 	nop.w
 8004622:	4601      	mov	r1, r0
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	1c5a      	adds	r2, r3, #1
 8004628:	60ba      	str	r2, [r7, #8]
 800462a:	b2ca      	uxtb	r2, r1
 800462c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800462e:	697b      	ldr	r3, [r7, #20]
 8004630:	3301      	adds	r3, #1
 8004632:	617b      	str	r3, [r7, #20]
 8004634:	697a      	ldr	r2, [r7, #20]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	429a      	cmp	r2, r3
 800463a:	dbf0      	blt.n	800461e <_read+0x12>
	}

return len;
 800463c:	687b      	ldr	r3, [r7, #4]
}
 800463e:	4618      	mov	r0, r3
 8004640:	3718      	adds	r7, #24
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}

08004646 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b086      	sub	sp, #24
 800464a:	af00      	add	r7, sp, #0
 800464c:	60f8      	str	r0, [r7, #12]
 800464e:	60b9      	str	r1, [r7, #8]
 8004650:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004652:	2300      	movs	r3, #0
 8004654:	617b      	str	r3, [r7, #20]
 8004656:	e009      	b.n	800466c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	1c5a      	adds	r2, r3, #1
 800465c:	60ba      	str	r2, [r7, #8]
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	4618      	mov	r0, r3
 8004662:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	3301      	adds	r3, #1
 800466a:	617b      	str	r3, [r7, #20]
 800466c:	697a      	ldr	r2, [r7, #20]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	429a      	cmp	r2, r3
 8004672:	dbf1      	blt.n	8004658 <_write+0x12>
	}
	return len;
 8004674:	687b      	ldr	r3, [r7, #4]
}
 8004676:	4618      	mov	r0, r3
 8004678:	3718      	adds	r7, #24
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}

0800467e <_close>:

int _close(int file)
{
 800467e:	b480      	push	{r7}
 8004680:	b083      	sub	sp, #12
 8004682:	af00      	add	r7, sp, #0
 8004684:	6078      	str	r0, [r7, #4]
	return -1;
 8004686:	f04f 33ff 	mov.w	r3, #4294967295
}
 800468a:	4618      	mov	r0, r3
 800468c:	370c      	adds	r7, #12
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr

08004696 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004696:	b480      	push	{r7}
 8004698:	b083      	sub	sp, #12
 800469a:	af00      	add	r7, sp, #0
 800469c:	6078      	str	r0, [r7, #4]
 800469e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80046a6:	605a      	str	r2, [r3, #4]
	return 0;
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <_isatty>:

int _isatty(int file)
{
 80046b6:	b480      	push	{r7}
 80046b8:	b083      	sub	sp, #12
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
	return 1;
 80046be:	2301      	movs	r3, #1
}
 80046c0:	4618      	mov	r0, r3
 80046c2:	370c      	adds	r7, #12
 80046c4:	46bd      	mov	sp, r7
 80046c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ca:	4770      	bx	lr

080046cc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b085      	sub	sp, #20
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	60f8      	str	r0, [r7, #12]
 80046d4:	60b9      	str	r1, [r7, #8]
 80046d6:	607a      	str	r2, [r7, #4]
	return 0;
 80046d8:	2300      	movs	r3, #0
}
 80046da:	4618      	mov	r0, r3
 80046dc:	3714      	adds	r7, #20
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
	...

080046e8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80046f0:	4a14      	ldr	r2, [pc, #80]	; (8004744 <_sbrk+0x5c>)
 80046f2:	4b15      	ldr	r3, [pc, #84]	; (8004748 <_sbrk+0x60>)
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80046f8:	697b      	ldr	r3, [r7, #20]
 80046fa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80046fc:	4b13      	ldr	r3, [pc, #76]	; (800474c <_sbrk+0x64>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d102      	bne.n	800470a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004704:	4b11      	ldr	r3, [pc, #68]	; (800474c <_sbrk+0x64>)
 8004706:	4a12      	ldr	r2, [pc, #72]	; (8004750 <_sbrk+0x68>)
 8004708:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800470a:	4b10      	ldr	r3, [pc, #64]	; (800474c <_sbrk+0x64>)
 800470c:	681a      	ldr	r2, [r3, #0]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	4413      	add	r3, r2
 8004712:	693a      	ldr	r2, [r7, #16]
 8004714:	429a      	cmp	r2, r3
 8004716:	d207      	bcs.n	8004728 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004718:	f007 ffe4 	bl	800c6e4 <__errno>
 800471c:	4603      	mov	r3, r0
 800471e:	220c      	movs	r2, #12
 8004720:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004722:	f04f 33ff 	mov.w	r3, #4294967295
 8004726:	e009      	b.n	800473c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004728:	4b08      	ldr	r3, [pc, #32]	; (800474c <_sbrk+0x64>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800472e:	4b07      	ldr	r3, [pc, #28]	; (800474c <_sbrk+0x64>)
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4413      	add	r3, r2
 8004736:	4a05      	ldr	r2, [pc, #20]	; (800474c <_sbrk+0x64>)
 8004738:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800473a:	68fb      	ldr	r3, [r7, #12]
}
 800473c:	4618      	mov	r0, r3
 800473e:	3718      	adds	r7, #24
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}
 8004744:	20020000 	.word	0x20020000
 8004748:	00000400 	.word	0x00000400
 800474c:	200009c8 	.word	0x200009c8
 8004750:	20005330 	.word	0x20005330

08004754 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004758:	4b06      	ldr	r3, [pc, #24]	; (8004774 <SystemInit+0x20>)
 800475a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475e:	4a05      	ldr	r2, [pc, #20]	; (8004774 <SystemInit+0x20>)
 8004760:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004764:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004768:	bf00      	nop
 800476a:	46bd      	mov	sp, r7
 800476c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004770:	4770      	bx	lr
 8004772:	bf00      	nop
 8004774:	e000ed00 	.word	0xe000ed00

08004778 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004778:	f8df d034 	ldr.w	sp, [pc, #52]	; 80047b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800477c:	480d      	ldr	r0, [pc, #52]	; (80047b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800477e:	490e      	ldr	r1, [pc, #56]	; (80047b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004780:	4a0e      	ldr	r2, [pc, #56]	; (80047bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004784:	e002      	b.n	800478c <LoopCopyDataInit>

08004786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800478a:	3304      	adds	r3, #4

0800478c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800478c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800478e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004790:	d3f9      	bcc.n	8004786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004792:	4a0b      	ldr	r2, [pc, #44]	; (80047c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004794:	4c0b      	ldr	r4, [pc, #44]	; (80047c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004798:	e001      	b.n	800479e <LoopFillZerobss>

0800479a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800479a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800479c:	3204      	adds	r2, #4

0800479e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800479e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80047a0:	d3fb      	bcc.n	800479a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80047a2:	f7ff ffd7 	bl	8004754 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80047a6:	f007 ffa3 	bl	800c6f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80047aa:	f7fc ff85 	bl	80016b8 <main>
  bx  lr    
 80047ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80047b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80047b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80047b8:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80047bc:	08011bc8 	.word	0x08011bc8
  ldr r2, =_sbss
 80047c0:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80047c4:	20005330 	.word	0x20005330

080047c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80047c8:	e7fe      	b.n	80047c8 <ADC_IRQHandler>
	...

080047cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80047d0:	4b0e      	ldr	r3, [pc, #56]	; (800480c <HAL_Init+0x40>)
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4a0d      	ldr	r2, [pc, #52]	; (800480c <HAL_Init+0x40>)
 80047d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80047da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80047dc:	4b0b      	ldr	r3, [pc, #44]	; (800480c <HAL_Init+0x40>)
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a0a      	ldr	r2, [pc, #40]	; (800480c <HAL_Init+0x40>)
 80047e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80047e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80047e8:	4b08      	ldr	r3, [pc, #32]	; (800480c <HAL_Init+0x40>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a07      	ldr	r2, [pc, #28]	; (800480c <HAL_Init+0x40>)
 80047ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80047f4:	2003      	movs	r0, #3
 80047f6:	f000 fd4f 	bl	8005298 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80047fa:	200f      	movs	r0, #15
 80047fc:	f000 f808 	bl	8004810 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004800:	f7ff fbde 	bl	8003fc0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	bd80      	pop	{r7, pc}
 800480a:	bf00      	nop
 800480c:	40023c00 	.word	0x40023c00

08004810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b082      	sub	sp, #8
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004818:	4b12      	ldr	r3, [pc, #72]	; (8004864 <HAL_InitTick+0x54>)
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	4b12      	ldr	r3, [pc, #72]	; (8004868 <HAL_InitTick+0x58>)
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	4619      	mov	r1, r3
 8004822:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004826:	fbb3 f3f1 	udiv	r3, r3, r1
 800482a:	fbb2 f3f3 	udiv	r3, r2, r3
 800482e:	4618      	mov	r0, r3
 8004830:	f000 fd67 	bl	8005302 <HAL_SYSTICK_Config>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e00e      	b.n	800485c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2b0f      	cmp	r3, #15
 8004842:	d80a      	bhi.n	800485a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004844:	2200      	movs	r2, #0
 8004846:	6879      	ldr	r1, [r7, #4]
 8004848:	f04f 30ff 	mov.w	r0, #4294967295
 800484c:	f000 fd2f 	bl	80052ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004850:	4a06      	ldr	r2, [pc, #24]	; (800486c <HAL_InitTick+0x5c>)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004856:	2300      	movs	r3, #0
 8004858:	e000      	b.n	800485c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800485a:	2301      	movs	r3, #1
}
 800485c:	4618      	mov	r0, r3
 800485e:	3708      	adds	r7, #8
 8004860:	46bd      	mov	sp, r7
 8004862:	bd80      	pop	{r7, pc}
 8004864:	20000018 	.word	0x20000018
 8004868:	20000020 	.word	0x20000020
 800486c:	2000001c 	.word	0x2000001c

08004870 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004870:	b480      	push	{r7}
 8004872:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004874:	4b06      	ldr	r3, [pc, #24]	; (8004890 <HAL_IncTick+0x20>)
 8004876:	781b      	ldrb	r3, [r3, #0]
 8004878:	461a      	mov	r2, r3
 800487a:	4b06      	ldr	r3, [pc, #24]	; (8004894 <HAL_IncTick+0x24>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4413      	add	r3, r2
 8004880:	4a04      	ldr	r2, [pc, #16]	; (8004894 <HAL_IncTick+0x24>)
 8004882:	6013      	str	r3, [r2, #0]
}
 8004884:	bf00      	nop
 8004886:	46bd      	mov	sp, r7
 8004888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488c:	4770      	bx	lr
 800488e:	bf00      	nop
 8004890:	20000020 	.word	0x20000020
 8004894:	200009cc 	.word	0x200009cc

08004898 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004898:	b480      	push	{r7}
 800489a:	af00      	add	r7, sp, #0
  return uwTick;
 800489c:	4b03      	ldr	r3, [pc, #12]	; (80048ac <HAL_GetTick+0x14>)
 800489e:	681b      	ldr	r3, [r3, #0]
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	200009cc 	.word	0x200009cc

080048b0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b084      	sub	sp, #16
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80048b8:	f7ff ffee 	bl	8004898 <HAL_GetTick>
 80048bc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c8:	d005      	beq.n	80048d6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80048ca:	4b0a      	ldr	r3, [pc, #40]	; (80048f4 <HAL_Delay+0x44>)
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	461a      	mov	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4413      	add	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80048d6:	bf00      	nop
 80048d8:	f7ff ffde 	bl	8004898 <HAL_GetTick>
 80048dc:	4602      	mov	r2, r0
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	1ad3      	subs	r3, r2, r3
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	429a      	cmp	r2, r3
 80048e6:	d8f7      	bhi.n	80048d8 <HAL_Delay+0x28>
  {
  }
}
 80048e8:	bf00      	nop
 80048ea:	bf00      	nop
 80048ec:	3710      	adds	r7, #16
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}
 80048f2:	bf00      	nop
 80048f4:	20000020 	.word	0x20000020

080048f8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b084      	sub	sp, #16
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004900:	2300      	movs	r3, #0
 8004902:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d101      	bne.n	800490e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800490a:	2301      	movs	r3, #1
 800490c:	e033      	b.n	8004976 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004912:	2b00      	cmp	r3, #0
 8004914:	d109      	bne.n	800492a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7ff fb7e 	bl	8004018 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2200      	movs	r2, #0
 8004920:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2200      	movs	r2, #0
 8004926:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	f003 0310 	and.w	r3, r3, #16
 8004932:	2b00      	cmp	r3, #0
 8004934:	d118      	bne.n	8004968 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800493e:	f023 0302 	bic.w	r3, r3, #2
 8004942:	f043 0202 	orr.w	r2, r3, #2
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	f000 fad8 	bl	8004f00 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800495a:	f023 0303 	bic.w	r3, r3, #3
 800495e:	f043 0201 	orr.w	r2, r3, #1
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	641a      	str	r2, [r3, #64]	; 0x40
 8004966:	e001      	b.n	800496c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004968:	2301      	movs	r3, #1
 800496a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004974:	7bfb      	ldrb	r3, [r7, #15]
}
 8004976:	4618      	mov	r0, r3
 8004978:	3710      	adds	r7, #16
 800497a:	46bd      	mov	sp, r7
 800497c:	bd80      	pop	{r7, pc}
	...

08004980 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8004988:	2300      	movs	r3, #0
 800498a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004992:	2b01      	cmp	r3, #1
 8004994:	d101      	bne.n	800499a <HAL_ADC_Start+0x1a>
 8004996:	2302      	movs	r3, #2
 8004998:	e0b2      	b.n	8004b00 <HAL_ADC_Start+0x180>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2201      	movs	r2, #1
 800499e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f003 0301 	and.w	r3, r3, #1
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d018      	beq.n	80049e2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689a      	ldr	r2, [r3, #8]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f042 0201 	orr.w	r2, r2, #1
 80049be:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80049c0:	4b52      	ldr	r3, [pc, #328]	; (8004b0c <HAL_ADC_Start+0x18c>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a52      	ldr	r2, [pc, #328]	; (8004b10 <HAL_ADC_Start+0x190>)
 80049c6:	fba2 2303 	umull	r2, r3, r2, r3
 80049ca:	0c9a      	lsrs	r2, r3, #18
 80049cc:	4613      	mov	r3, r2
 80049ce:	005b      	lsls	r3, r3, #1
 80049d0:	4413      	add	r3, r2
 80049d2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80049d4:	e002      	b.n	80049dc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	3b01      	subs	r3, #1
 80049da:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80049dc:	68bb      	ldr	r3, [r7, #8]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1f9      	bne.n	80049d6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f003 0301 	and.w	r3, r3, #1
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d17a      	bne.n	8004ae6 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80049f8:	f023 0301 	bic.w	r3, r3, #1
 80049fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d007      	beq.n	8004a22 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a16:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004a1a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a26:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a2e:	d106      	bne.n	8004a3e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a34:	f023 0206 	bic.w	r2, r3, #6
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	645a      	str	r2, [r3, #68]	; 0x44
 8004a3c:	e002      	b.n	8004a44 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2200      	movs	r2, #0
 8004a48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004a4c:	4b31      	ldr	r3, [pc, #196]	; (8004b14 <HAL_ADC_Start+0x194>)
 8004a4e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004a58:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f003 031f 	and.w	r3, r3, #31
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d12a      	bne.n	8004abc <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a2b      	ldr	r2, [pc, #172]	; (8004b18 <HAL_ADC_Start+0x198>)
 8004a6c:	4293      	cmp	r3, r2
 8004a6e:	d015      	beq.n	8004a9c <HAL_ADC_Start+0x11c>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a29      	ldr	r2, [pc, #164]	; (8004b1c <HAL_ADC_Start+0x19c>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d105      	bne.n	8004a86 <HAL_ADC_Start+0x106>
 8004a7a:	4b26      	ldr	r3, [pc, #152]	; (8004b14 <HAL_ADC_Start+0x194>)
 8004a7c:	685b      	ldr	r3, [r3, #4]
 8004a7e:	f003 031f 	and.w	r3, r3, #31
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d00a      	beq.n	8004a9c <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a25      	ldr	r2, [pc, #148]	; (8004b20 <HAL_ADC_Start+0x1a0>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d136      	bne.n	8004afe <HAL_ADC_Start+0x17e>
 8004a90:	4b20      	ldr	r3, [pc, #128]	; (8004b14 <HAL_ADC_Start+0x194>)
 8004a92:	685b      	ldr	r3, [r3, #4]
 8004a94:	f003 0310 	and.w	r3, r3, #16
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d130      	bne.n	8004afe <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d129      	bne.n	8004afe <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	689a      	ldr	r2, [r3, #8]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004ab8:	609a      	str	r2, [r3, #8]
 8004aba:	e020      	b.n	8004afe <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a15      	ldr	r2, [pc, #84]	; (8004b18 <HAL_ADC_Start+0x198>)
 8004ac2:	4293      	cmp	r3, r2
 8004ac4:	d11b      	bne.n	8004afe <HAL_ADC_Start+0x17e>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d114      	bne.n	8004afe <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	689a      	ldr	r2, [r3, #8]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004ae2:	609a      	str	r2, [r3, #8]
 8004ae4:	e00b      	b.n	8004afe <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	f043 0210 	orr.w	r2, r3, #16
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004af6:	f043 0201 	orr.w	r2, r3, #1
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8004afe:	2300      	movs	r3, #0
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3714      	adds	r7, #20
 8004b04:	46bd      	mov	sp, r7
 8004b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0a:	4770      	bx	lr
 8004b0c:	20000018 	.word	0x20000018
 8004b10:	431bde83 	.word	0x431bde83
 8004b14:	40012300 	.word	0x40012300
 8004b18:	40012000 	.word	0x40012000
 8004b1c:	40012100 	.word	0x40012100
 8004b20:	40012200 	.word	0x40012200

08004b24 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b32:	2b01      	cmp	r3, #1
 8004b34:	d101      	bne.n	8004b3a <HAL_ADC_Stop+0x16>
 8004b36:	2302      	movs	r3, #2
 8004b38:	e021      	b.n	8004b7e <HAL_ADC_Stop+0x5a>
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	689a      	ldr	r2, [r3, #8]
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f022 0201 	bic.w	r2, r2, #1
 8004b50:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	689b      	ldr	r3, [r3, #8]
 8004b58:	f003 0301 	and.w	r3, r3, #1
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d109      	bne.n	8004b74 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b64:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004b68:	f023 0301 	bic.w	r3, r3, #1
 8004b6c:	f043 0201 	orr.w	r2, r3, #1
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2200      	movs	r2, #0
 8004b78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004b7c:	2300      	movs	r3, #0
}
 8004b7e:	4618      	mov	r0, r3
 8004b80:	370c      	adds	r7, #12
 8004b82:	46bd      	mov	sp, r7
 8004b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b88:	4770      	bx	lr

08004b8a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004b8a:	b580      	push	{r7, lr}
 8004b8c:	b084      	sub	sp, #16
 8004b8e:	af00      	add	r7, sp, #0
 8004b90:	6078      	str	r0, [r7, #4]
 8004b92:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004b94:	2300      	movs	r3, #0
 8004b96:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ba6:	d113      	bne.n	8004bd0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004bb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004bb6:	d10b      	bne.n	8004bd0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbc:	f043 0220 	orr.w	r2, r3, #32
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e063      	b.n	8004c98 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004bd0:	f7ff fe62 	bl	8004898 <HAL_GetTick>
 8004bd4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004bd6:	e021      	b.n	8004c1c <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bde:	d01d      	beq.n	8004c1c <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d007      	beq.n	8004bf6 <HAL_ADC_PollForConversion+0x6c>
 8004be6:	f7ff fe57 	bl	8004898 <HAL_GetTick>
 8004bea:	4602      	mov	r2, r0
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	683a      	ldr	r2, [r7, #0]
 8004bf2:	429a      	cmp	r2, r3
 8004bf4:	d212      	bcs.n	8004c1c <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b02      	cmp	r3, #2
 8004c02:	d00b      	beq.n	8004c1c <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c08:	f043 0204 	orr.w	r2, r3, #4
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e03d      	b.n	8004c98 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d1d6      	bne.n	8004bd8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f06f 0212 	mvn.w	r2, #18
 8004c32:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c38:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	689b      	ldr	r3, [r3, #8]
 8004c46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d123      	bne.n	8004c96 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d11f      	bne.n	8004c96 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d006      	beq.n	8004c72 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d111      	bne.n	8004c96 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d105      	bne.n	8004c96 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8e:	f043 0201 	orr.w	r2, r3, #1
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3710      	adds	r7, #16
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	bd80      	pop	{r7, pc}

08004ca0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004ca0:	b480      	push	{r7}
 8004ca2:	b083      	sub	sp, #12
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004cae:	4618      	mov	r0, r3
 8004cb0:	370c      	adds	r7, #12
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb8:	4770      	bx	lr
	...

08004cbc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004cbc:	b480      	push	{r7}
 8004cbe:	b085      	sub	sp, #20
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d101      	bne.n	8004cd8 <HAL_ADC_ConfigChannel+0x1c>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	e105      	b.n	8004ee4 <HAL_ADC_ConfigChannel+0x228>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2201      	movs	r2, #1
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	2b09      	cmp	r3, #9
 8004ce6:	d925      	bls.n	8004d34 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68d9      	ldr	r1, [r3, #12]
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	b29b      	uxth	r3, r3
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	4613      	mov	r3, r2
 8004cf8:	005b      	lsls	r3, r3, #1
 8004cfa:	4413      	add	r3, r2
 8004cfc:	3b1e      	subs	r3, #30
 8004cfe:	2207      	movs	r2, #7
 8004d00:	fa02 f303 	lsl.w	r3, r2, r3
 8004d04:	43da      	mvns	r2, r3
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	400a      	ands	r2, r1
 8004d0c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	68d9      	ldr	r1, [r3, #12]
 8004d14:	683b      	ldr	r3, [r7, #0]
 8004d16:	689a      	ldr	r2, [r3, #8]
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	b29b      	uxth	r3, r3
 8004d1e:	4618      	mov	r0, r3
 8004d20:	4603      	mov	r3, r0
 8004d22:	005b      	lsls	r3, r3, #1
 8004d24:	4403      	add	r3, r0
 8004d26:	3b1e      	subs	r3, #30
 8004d28:	409a      	lsls	r2, r3
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	430a      	orrs	r2, r1
 8004d30:	60da      	str	r2, [r3, #12]
 8004d32:	e022      	b.n	8004d7a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6919      	ldr	r1, [r3, #16]
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	b29b      	uxth	r3, r3
 8004d40:	461a      	mov	r2, r3
 8004d42:	4613      	mov	r3, r2
 8004d44:	005b      	lsls	r3, r3, #1
 8004d46:	4413      	add	r3, r2
 8004d48:	2207      	movs	r2, #7
 8004d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d4e:	43da      	mvns	r2, r3
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	400a      	ands	r2, r1
 8004d56:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	6919      	ldr	r1, [r3, #16]
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	689a      	ldr	r2, [r3, #8]
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	4618      	mov	r0, r3
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	005b      	lsls	r3, r3, #1
 8004d6e:	4403      	add	r3, r0
 8004d70:	409a      	lsls	r2, r3
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2b06      	cmp	r3, #6
 8004d80:	d824      	bhi.n	8004dcc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685a      	ldr	r2, [r3, #4]
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	009b      	lsls	r3, r3, #2
 8004d90:	4413      	add	r3, r2
 8004d92:	3b05      	subs	r3, #5
 8004d94:	221f      	movs	r2, #31
 8004d96:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9a:	43da      	mvns	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	400a      	ands	r2, r1
 8004da2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	4618      	mov	r0, r3
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	685a      	ldr	r2, [r3, #4]
 8004db6:	4613      	mov	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	3b05      	subs	r3, #5
 8004dbe:	fa00 f203 	lsl.w	r2, r0, r3
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	635a      	str	r2, [r3, #52]	; 0x34
 8004dca:	e04c      	b.n	8004e66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	2b0c      	cmp	r3, #12
 8004dd2:	d824      	bhi.n	8004e1e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685a      	ldr	r2, [r3, #4]
 8004dde:	4613      	mov	r3, r2
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	4413      	add	r3, r2
 8004de4:	3b23      	subs	r3, #35	; 0x23
 8004de6:	221f      	movs	r2, #31
 8004de8:	fa02 f303 	lsl.w	r3, r2, r3
 8004dec:	43da      	mvns	r2, r3
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	400a      	ands	r2, r1
 8004df4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	b29b      	uxth	r3, r3
 8004e02:	4618      	mov	r0, r3
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	685a      	ldr	r2, [r3, #4]
 8004e08:	4613      	mov	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	3b23      	subs	r3, #35	; 0x23
 8004e10:	fa00 f203 	lsl.w	r2, r0, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	430a      	orrs	r2, r1
 8004e1a:	631a      	str	r2, [r3, #48]	; 0x30
 8004e1c:	e023      	b.n	8004e66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	685a      	ldr	r2, [r3, #4]
 8004e28:	4613      	mov	r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4413      	add	r3, r2
 8004e2e:	3b41      	subs	r3, #65	; 0x41
 8004e30:	221f      	movs	r2, #31
 8004e32:	fa02 f303 	lsl.w	r3, r2, r3
 8004e36:	43da      	mvns	r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	400a      	ands	r2, r1
 8004e3e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	b29b      	uxth	r3, r3
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	683b      	ldr	r3, [r7, #0]
 8004e50:	685a      	ldr	r2, [r3, #4]
 8004e52:	4613      	mov	r3, r2
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	4413      	add	r3, r2
 8004e58:	3b41      	subs	r3, #65	; 0x41
 8004e5a:	fa00 f203 	lsl.w	r2, r0, r3
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	430a      	orrs	r2, r1
 8004e64:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004e66:	4b22      	ldr	r3, [pc, #136]	; (8004ef0 <HAL_ADC_ConfigChannel+0x234>)
 8004e68:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	4a21      	ldr	r2, [pc, #132]	; (8004ef4 <HAL_ADC_ConfigChannel+0x238>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d109      	bne.n	8004e88 <HAL_ADC_ConfigChannel+0x1cc>
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b12      	cmp	r3, #18
 8004e7a:	d105      	bne.n	8004e88 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a19      	ldr	r2, [pc, #100]	; (8004ef4 <HAL_ADC_ConfigChannel+0x238>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d123      	bne.n	8004eda <HAL_ADC_ConfigChannel+0x21e>
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	2b10      	cmp	r3, #16
 8004e98:	d003      	beq.n	8004ea2 <HAL_ADC_ConfigChannel+0x1e6>
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	2b11      	cmp	r3, #17
 8004ea0:	d11b      	bne.n	8004eda <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	2b10      	cmp	r3, #16
 8004eb4:	d111      	bne.n	8004eda <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004eb6:	4b10      	ldr	r3, [pc, #64]	; (8004ef8 <HAL_ADC_ConfigChannel+0x23c>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a10      	ldr	r2, [pc, #64]	; (8004efc <HAL_ADC_ConfigChannel+0x240>)
 8004ebc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ec0:	0c9a      	lsrs	r2, r3, #18
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4413      	add	r3, r2
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004ecc:	e002      	b.n	8004ed4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	3b01      	subs	r3, #1
 8004ed2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1f9      	bne.n	8004ece <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2200      	movs	r2, #0
 8004ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3714      	adds	r7, #20
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eee:	4770      	bx	lr
 8004ef0:	40012300 	.word	0x40012300
 8004ef4:	40012000 	.word	0x40012000
 8004ef8:	20000018 	.word	0x20000018
 8004efc:	431bde83 	.word	0x431bde83

08004f00 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b085      	sub	sp, #20
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004f08:	4b79      	ldr	r3, [pc, #484]	; (80050f0 <ADC_Init+0x1f0>)
 8004f0a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	685a      	ldr	r2, [r3, #4]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	431a      	orrs	r2, r3
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	685a      	ldr	r2, [r3, #4]
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	6859      	ldr	r1, [r3, #4]
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	691b      	ldr	r3, [r3, #16]
 8004f40:	021a      	lsls	r2, r3, #8
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	430a      	orrs	r2, r1
 8004f48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004f58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	6859      	ldr	r1, [r3, #4]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	689a      	ldr	r2, [r3, #8]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	430a      	orrs	r2, r1
 8004f6a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	689a      	ldr	r2, [r3, #8]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	6899      	ldr	r1, [r3, #8]
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	430a      	orrs	r2, r1
 8004f8c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f92:	4a58      	ldr	r2, [pc, #352]	; (80050f4 <ADC_Init+0x1f4>)
 8004f94:	4293      	cmp	r3, r2
 8004f96:	d022      	beq.n	8004fde <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	689a      	ldr	r2, [r3, #8]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004fa6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	6899      	ldr	r1, [r3, #8]
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	430a      	orrs	r2, r1
 8004fb8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	689a      	ldr	r2, [r3, #8]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004fc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	6899      	ldr	r1, [r3, #8]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	430a      	orrs	r2, r1
 8004fda:	609a      	str	r2, [r3, #8]
 8004fdc:	e00f      	b.n	8004ffe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689a      	ldr	r2, [r3, #8]
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004fec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	689a      	ldr	r2, [r3, #8]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ffc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	689a      	ldr	r2, [r3, #8]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f022 0202 	bic.w	r2, r2, #2
 800500c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6899      	ldr	r1, [r3, #8]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	7e1b      	ldrb	r3, [r3, #24]
 8005018:	005a      	lsls	r2, r3, #1
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	430a      	orrs	r2, r1
 8005020:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005028:	2b00      	cmp	r3, #0
 800502a:	d01b      	beq.n	8005064 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	685a      	ldr	r2, [r3, #4]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800503a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685a      	ldr	r2, [r3, #4]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800504a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6859      	ldr	r1, [r3, #4]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005056:	3b01      	subs	r3, #1
 8005058:	035a      	lsls	r2, r3, #13
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	430a      	orrs	r2, r1
 8005060:	605a      	str	r2, [r3, #4]
 8005062:	e007      	b.n	8005074 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	685a      	ldr	r2, [r3, #4]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005072:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8005082:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	69db      	ldr	r3, [r3, #28]
 800508e:	3b01      	subs	r3, #1
 8005090:	051a      	lsls	r2, r3, #20
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	689a      	ldr	r2, [r3, #8]
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80050a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6899      	ldr	r1, [r3, #8]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80050b6:	025a      	lsls	r2, r3, #9
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	430a      	orrs	r2, r1
 80050be:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	689a      	ldr	r2, [r3, #8]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	6899      	ldr	r1, [r3, #8]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	695b      	ldr	r3, [r3, #20]
 80050da:	029a      	lsls	r2, r3, #10
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	430a      	orrs	r2, r1
 80050e2:	609a      	str	r2, [r3, #8]
}
 80050e4:	bf00      	nop
 80050e6:	3714      	adds	r7, #20
 80050e8:	46bd      	mov	sp, r7
 80050ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ee:	4770      	bx	lr
 80050f0:	40012300 	.word	0x40012300
 80050f4:	0f000001 	.word	0x0f000001

080050f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005108:	4b0c      	ldr	r3, [pc, #48]	; (800513c <__NVIC_SetPriorityGrouping+0x44>)
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005114:	4013      	ands	r3, r2
 8005116:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005120:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005124:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800512a:	4a04      	ldr	r2, [pc, #16]	; (800513c <__NVIC_SetPriorityGrouping+0x44>)
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	60d3      	str	r3, [r2, #12]
}
 8005130:	bf00      	nop
 8005132:	3714      	adds	r7, #20
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	e000ed00 	.word	0xe000ed00

08005140 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005140:	b480      	push	{r7}
 8005142:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005144:	4b04      	ldr	r3, [pc, #16]	; (8005158 <__NVIC_GetPriorityGrouping+0x18>)
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	0a1b      	lsrs	r3, r3, #8
 800514a:	f003 0307 	and.w	r3, r3, #7
}
 800514e:	4618      	mov	r0, r3
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr
 8005158:	e000ed00 	.word	0xe000ed00

0800515c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800515c:	b480      	push	{r7}
 800515e:	b083      	sub	sp, #12
 8005160:	af00      	add	r7, sp, #0
 8005162:	4603      	mov	r3, r0
 8005164:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800516a:	2b00      	cmp	r3, #0
 800516c:	db0b      	blt.n	8005186 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800516e:	79fb      	ldrb	r3, [r7, #7]
 8005170:	f003 021f 	and.w	r2, r3, #31
 8005174:	4907      	ldr	r1, [pc, #28]	; (8005194 <__NVIC_EnableIRQ+0x38>)
 8005176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800517a:	095b      	lsrs	r3, r3, #5
 800517c:	2001      	movs	r0, #1
 800517e:	fa00 f202 	lsl.w	r2, r0, r2
 8005182:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005186:	bf00      	nop
 8005188:	370c      	adds	r7, #12
 800518a:	46bd      	mov	sp, r7
 800518c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005190:	4770      	bx	lr
 8005192:	bf00      	nop
 8005194:	e000e100 	.word	0xe000e100

08005198 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	4603      	mov	r3, r0
 80051a0:	6039      	str	r1, [r7, #0]
 80051a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	db0a      	blt.n	80051c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	b2da      	uxtb	r2, r3
 80051b0:	490c      	ldr	r1, [pc, #48]	; (80051e4 <__NVIC_SetPriority+0x4c>)
 80051b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051b6:	0112      	lsls	r2, r2, #4
 80051b8:	b2d2      	uxtb	r2, r2
 80051ba:	440b      	add	r3, r1
 80051bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051c0:	e00a      	b.n	80051d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	b2da      	uxtb	r2, r3
 80051c6:	4908      	ldr	r1, [pc, #32]	; (80051e8 <__NVIC_SetPriority+0x50>)
 80051c8:	79fb      	ldrb	r3, [r7, #7]
 80051ca:	f003 030f 	and.w	r3, r3, #15
 80051ce:	3b04      	subs	r3, #4
 80051d0:	0112      	lsls	r2, r2, #4
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	440b      	add	r3, r1
 80051d6:	761a      	strb	r2, [r3, #24]
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr
 80051e4:	e000e100 	.word	0xe000e100
 80051e8:	e000ed00 	.word	0xe000ed00

080051ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b089      	sub	sp, #36	; 0x24
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	60f8      	str	r0, [r7, #12]
 80051f4:	60b9      	str	r1, [r7, #8]
 80051f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	f003 0307 	and.w	r3, r3, #7
 80051fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	f1c3 0307 	rsb	r3, r3, #7
 8005206:	2b04      	cmp	r3, #4
 8005208:	bf28      	it	cs
 800520a:	2304      	movcs	r3, #4
 800520c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800520e:	69fb      	ldr	r3, [r7, #28]
 8005210:	3304      	adds	r3, #4
 8005212:	2b06      	cmp	r3, #6
 8005214:	d902      	bls.n	800521c <NVIC_EncodePriority+0x30>
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	3b03      	subs	r3, #3
 800521a:	e000      	b.n	800521e <NVIC_EncodePriority+0x32>
 800521c:	2300      	movs	r3, #0
 800521e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005220:	f04f 32ff 	mov.w	r2, #4294967295
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	fa02 f303 	lsl.w	r3, r2, r3
 800522a:	43da      	mvns	r2, r3
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	401a      	ands	r2, r3
 8005230:	697b      	ldr	r3, [r7, #20]
 8005232:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005234:	f04f 31ff 	mov.w	r1, #4294967295
 8005238:	697b      	ldr	r3, [r7, #20]
 800523a:	fa01 f303 	lsl.w	r3, r1, r3
 800523e:	43d9      	mvns	r1, r3
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005244:	4313      	orrs	r3, r2
         );
}
 8005246:	4618      	mov	r0, r3
 8005248:	3724      	adds	r7, #36	; 0x24
 800524a:	46bd      	mov	sp, r7
 800524c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005250:	4770      	bx	lr
	...

08005254 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b082      	sub	sp, #8
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	3b01      	subs	r3, #1
 8005260:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005264:	d301      	bcc.n	800526a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005266:	2301      	movs	r3, #1
 8005268:	e00f      	b.n	800528a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800526a:	4a0a      	ldr	r2, [pc, #40]	; (8005294 <SysTick_Config+0x40>)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	3b01      	subs	r3, #1
 8005270:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005272:	210f      	movs	r1, #15
 8005274:	f04f 30ff 	mov.w	r0, #4294967295
 8005278:	f7ff ff8e 	bl	8005198 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800527c:	4b05      	ldr	r3, [pc, #20]	; (8005294 <SysTick_Config+0x40>)
 800527e:	2200      	movs	r2, #0
 8005280:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005282:	4b04      	ldr	r3, [pc, #16]	; (8005294 <SysTick_Config+0x40>)
 8005284:	2207      	movs	r2, #7
 8005286:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3708      	adds	r7, #8
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	e000e010 	.word	0xe000e010

08005298 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b082      	sub	sp, #8
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f7ff ff29 	bl	80050f8 <__NVIC_SetPriorityGrouping>
}
 80052a6:	bf00      	nop
 80052a8:	3708      	adds	r7, #8
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}

080052ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80052ae:	b580      	push	{r7, lr}
 80052b0:	b086      	sub	sp, #24
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	4603      	mov	r3, r0
 80052b6:	60b9      	str	r1, [r7, #8]
 80052b8:	607a      	str	r2, [r7, #4]
 80052ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80052bc:	2300      	movs	r3, #0
 80052be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80052c0:	f7ff ff3e 	bl	8005140 <__NVIC_GetPriorityGrouping>
 80052c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	68b9      	ldr	r1, [r7, #8]
 80052ca:	6978      	ldr	r0, [r7, #20]
 80052cc:	f7ff ff8e 	bl	80051ec <NVIC_EncodePriority>
 80052d0:	4602      	mov	r2, r0
 80052d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052d6:	4611      	mov	r1, r2
 80052d8:	4618      	mov	r0, r3
 80052da:	f7ff ff5d 	bl	8005198 <__NVIC_SetPriority>
}
 80052de:	bf00      	nop
 80052e0:	3718      	adds	r7, #24
 80052e2:	46bd      	mov	sp, r7
 80052e4:	bd80      	pop	{r7, pc}

080052e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052e6:	b580      	push	{r7, lr}
 80052e8:	b082      	sub	sp, #8
 80052ea:	af00      	add	r7, sp, #0
 80052ec:	4603      	mov	r3, r0
 80052ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7ff ff31 	bl	800515c <__NVIC_EnableIRQ>
}
 80052fa:	bf00      	nop
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b082      	sub	sp, #8
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800530a:	6878      	ldr	r0, [r7, #4]
 800530c:	f7ff ffa2 	bl	8005254 <SysTick_Config>
 8005310:	4603      	mov	r3, r0
}
 8005312:	4618      	mov	r0, r3
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}

0800531a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b084      	sub	sp, #16
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005326:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005328:	f7ff fab6 	bl	8004898 <HAL_GetTick>
 800532c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005334:	b2db      	uxtb	r3, r3
 8005336:	2b02      	cmp	r3, #2
 8005338:	d008      	beq.n	800534c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2280      	movs	r2, #128	; 0x80
 800533e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005348:	2301      	movs	r3, #1
 800534a:	e052      	b.n	80053f2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	681a      	ldr	r2, [r3, #0]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f022 0216 	bic.w	r2, r2, #22
 800535a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	695a      	ldr	r2, [r3, #20]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800536a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005370:	2b00      	cmp	r3, #0
 8005372:	d103      	bne.n	800537c <HAL_DMA_Abort+0x62>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005378:	2b00      	cmp	r3, #0
 800537a:	d007      	beq.n	800538c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	681a      	ldr	r2, [r3, #0]
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f022 0208 	bic.w	r2, r2, #8
 800538a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	681a      	ldr	r2, [r3, #0]
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f022 0201 	bic.w	r2, r2, #1
 800539a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800539c:	e013      	b.n	80053c6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800539e:	f7ff fa7b 	bl	8004898 <HAL_GetTick>
 80053a2:	4602      	mov	r2, r0
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	1ad3      	subs	r3, r2, r3
 80053a8:	2b05      	cmp	r3, #5
 80053aa:	d90c      	bls.n	80053c6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2220      	movs	r2, #32
 80053b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	2203      	movs	r2, #3
 80053b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2200      	movs	r2, #0
 80053be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80053c2:	2303      	movs	r3, #3
 80053c4:	e015      	b.n	80053f2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1e4      	bne.n	800539e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053d8:	223f      	movs	r2, #63	; 0x3f
 80053da:	409a      	lsls	r2, r3
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	2200      	movs	r2, #0
 80053ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80053f0:	2300      	movs	r3, #0
}
 80053f2:	4618      	mov	r0, r3
 80053f4:	3710      	adds	r7, #16
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bd80      	pop	{r7, pc}

080053fa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80053fa:	b480      	push	{r7}
 80053fc:	b083      	sub	sp, #12
 80053fe:	af00      	add	r7, sp, #0
 8005400:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005408:	b2db      	uxtb	r3, r3
 800540a:	2b02      	cmp	r3, #2
 800540c:	d004      	beq.n	8005418 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2280      	movs	r2, #128	; 0x80
 8005412:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e00c      	b.n	8005432 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	2205      	movs	r2, #5
 800541c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	681a      	ldr	r2, [r3, #0]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f022 0201 	bic.w	r2, r2, #1
 800542e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005430:	2300      	movs	r3, #0
}
 8005432:	4618      	mov	r0, r3
 8005434:	370c      	adds	r7, #12
 8005436:	46bd      	mov	sp, r7
 8005438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543c:	4770      	bx	lr
	...

08005440 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005440:	b480      	push	{r7}
 8005442:	b089      	sub	sp, #36	; 0x24
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
 8005448:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800544a:	2300      	movs	r3, #0
 800544c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800544e:	2300      	movs	r3, #0
 8005450:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005452:	2300      	movs	r3, #0
 8005454:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005456:	2300      	movs	r3, #0
 8005458:	61fb      	str	r3, [r7, #28]
 800545a:	e16b      	b.n	8005734 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800545c:	2201      	movs	r2, #1
 800545e:	69fb      	ldr	r3, [r7, #28]
 8005460:	fa02 f303 	lsl.w	r3, r2, r3
 8005464:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	697a      	ldr	r2, [r7, #20]
 800546c:	4013      	ands	r3, r2
 800546e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	429a      	cmp	r2, r3
 8005476:	f040 815a 	bne.w	800572e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800547a:	683b      	ldr	r3, [r7, #0]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f003 0303 	and.w	r3, r3, #3
 8005482:	2b01      	cmp	r3, #1
 8005484:	d005      	beq.n	8005492 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005486:	683b      	ldr	r3, [r7, #0]
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800548e:	2b02      	cmp	r3, #2
 8005490:	d130      	bne.n	80054f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005498:	69fb      	ldr	r3, [r7, #28]
 800549a:	005b      	lsls	r3, r3, #1
 800549c:	2203      	movs	r2, #3
 800549e:	fa02 f303 	lsl.w	r3, r2, r3
 80054a2:	43db      	mvns	r3, r3
 80054a4:	69ba      	ldr	r2, [r7, #24]
 80054a6:	4013      	ands	r3, r2
 80054a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	68da      	ldr	r2, [r3, #12]
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	005b      	lsls	r3, r3, #1
 80054b2:	fa02 f303 	lsl.w	r3, r2, r3
 80054b6:	69ba      	ldr	r2, [r7, #24]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	69ba      	ldr	r2, [r7, #24]
 80054c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80054c8:	2201      	movs	r2, #1
 80054ca:	69fb      	ldr	r3, [r7, #28]
 80054cc:	fa02 f303 	lsl.w	r3, r2, r3
 80054d0:	43db      	mvns	r3, r3
 80054d2:	69ba      	ldr	r2, [r7, #24]
 80054d4:	4013      	ands	r3, r2
 80054d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80054d8:	683b      	ldr	r3, [r7, #0]
 80054da:	685b      	ldr	r3, [r3, #4]
 80054dc:	091b      	lsrs	r3, r3, #4
 80054de:	f003 0201 	and.w	r2, r3, #1
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	fa02 f303 	lsl.w	r3, r2, r3
 80054e8:	69ba      	ldr	r2, [r7, #24]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80054f4:	683b      	ldr	r3, [r7, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f003 0303 	and.w	r3, r3, #3
 80054fc:	2b03      	cmp	r3, #3
 80054fe:	d017      	beq.n	8005530 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	68db      	ldr	r3, [r3, #12]
 8005504:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	005b      	lsls	r3, r3, #1
 800550a:	2203      	movs	r2, #3
 800550c:	fa02 f303 	lsl.w	r3, r2, r3
 8005510:	43db      	mvns	r3, r3
 8005512:	69ba      	ldr	r2, [r7, #24]
 8005514:	4013      	ands	r3, r2
 8005516:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	689a      	ldr	r2, [r3, #8]
 800551c:	69fb      	ldr	r3, [r7, #28]
 800551e:	005b      	lsls	r3, r3, #1
 8005520:	fa02 f303 	lsl.w	r3, r2, r3
 8005524:	69ba      	ldr	r2, [r7, #24]
 8005526:	4313      	orrs	r3, r2
 8005528:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	69ba      	ldr	r2, [r7, #24]
 800552e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685b      	ldr	r3, [r3, #4]
 8005534:	f003 0303 	and.w	r3, r3, #3
 8005538:	2b02      	cmp	r3, #2
 800553a:	d123      	bne.n	8005584 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	08da      	lsrs	r2, r3, #3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	3208      	adds	r2, #8
 8005544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005548:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	f003 0307 	and.w	r3, r3, #7
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	220f      	movs	r2, #15
 8005554:	fa02 f303 	lsl.w	r3, r2, r3
 8005558:	43db      	mvns	r3, r3
 800555a:	69ba      	ldr	r2, [r7, #24]
 800555c:	4013      	ands	r3, r2
 800555e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005560:	683b      	ldr	r3, [r7, #0]
 8005562:	691a      	ldr	r2, [r3, #16]
 8005564:	69fb      	ldr	r3, [r7, #28]
 8005566:	f003 0307 	and.w	r3, r3, #7
 800556a:	009b      	lsls	r3, r3, #2
 800556c:	fa02 f303 	lsl.w	r3, r2, r3
 8005570:	69ba      	ldr	r2, [r7, #24]
 8005572:	4313      	orrs	r3, r2
 8005574:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005576:	69fb      	ldr	r3, [r7, #28]
 8005578:	08da      	lsrs	r2, r3, #3
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	3208      	adds	r2, #8
 800557e:	69b9      	ldr	r1, [r7, #24]
 8005580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	005b      	lsls	r3, r3, #1
 800558e:	2203      	movs	r2, #3
 8005590:	fa02 f303 	lsl.w	r3, r2, r3
 8005594:	43db      	mvns	r3, r3
 8005596:	69ba      	ldr	r2, [r7, #24]
 8005598:	4013      	ands	r3, r2
 800559a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	f003 0203 	and.w	r2, r3, #3
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	005b      	lsls	r3, r3, #1
 80055a8:	fa02 f303 	lsl.w	r3, r2, r3
 80055ac:	69ba      	ldr	r2, [r7, #24]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	69ba      	ldr	r2, [r7, #24]
 80055b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80055b8:	683b      	ldr	r3, [r7, #0]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f000 80b4 	beq.w	800572e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80055c6:	2300      	movs	r3, #0
 80055c8:	60fb      	str	r3, [r7, #12]
 80055ca:	4b60      	ldr	r3, [pc, #384]	; (800574c <HAL_GPIO_Init+0x30c>)
 80055cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ce:	4a5f      	ldr	r2, [pc, #380]	; (800574c <HAL_GPIO_Init+0x30c>)
 80055d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055d4:	6453      	str	r3, [r2, #68]	; 0x44
 80055d6:	4b5d      	ldr	r3, [pc, #372]	; (800574c <HAL_GPIO_Init+0x30c>)
 80055d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055de:	60fb      	str	r3, [r7, #12]
 80055e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80055e2:	4a5b      	ldr	r2, [pc, #364]	; (8005750 <HAL_GPIO_Init+0x310>)
 80055e4:	69fb      	ldr	r3, [r7, #28]
 80055e6:	089b      	lsrs	r3, r3, #2
 80055e8:	3302      	adds	r3, #2
 80055ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80055ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80055f0:	69fb      	ldr	r3, [r7, #28]
 80055f2:	f003 0303 	and.w	r3, r3, #3
 80055f6:	009b      	lsls	r3, r3, #2
 80055f8:	220f      	movs	r2, #15
 80055fa:	fa02 f303 	lsl.w	r3, r2, r3
 80055fe:	43db      	mvns	r3, r3
 8005600:	69ba      	ldr	r2, [r7, #24]
 8005602:	4013      	ands	r3, r2
 8005604:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	4a52      	ldr	r2, [pc, #328]	; (8005754 <HAL_GPIO_Init+0x314>)
 800560a:	4293      	cmp	r3, r2
 800560c:	d02b      	beq.n	8005666 <HAL_GPIO_Init+0x226>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	4a51      	ldr	r2, [pc, #324]	; (8005758 <HAL_GPIO_Init+0x318>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d025      	beq.n	8005662 <HAL_GPIO_Init+0x222>
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	4a50      	ldr	r2, [pc, #320]	; (800575c <HAL_GPIO_Init+0x31c>)
 800561a:	4293      	cmp	r3, r2
 800561c:	d01f      	beq.n	800565e <HAL_GPIO_Init+0x21e>
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	4a4f      	ldr	r2, [pc, #316]	; (8005760 <HAL_GPIO_Init+0x320>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d019      	beq.n	800565a <HAL_GPIO_Init+0x21a>
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	4a4e      	ldr	r2, [pc, #312]	; (8005764 <HAL_GPIO_Init+0x324>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d013      	beq.n	8005656 <HAL_GPIO_Init+0x216>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	4a4d      	ldr	r2, [pc, #308]	; (8005768 <HAL_GPIO_Init+0x328>)
 8005632:	4293      	cmp	r3, r2
 8005634:	d00d      	beq.n	8005652 <HAL_GPIO_Init+0x212>
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	4a4c      	ldr	r2, [pc, #304]	; (800576c <HAL_GPIO_Init+0x32c>)
 800563a:	4293      	cmp	r3, r2
 800563c:	d007      	beq.n	800564e <HAL_GPIO_Init+0x20e>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	4a4b      	ldr	r2, [pc, #300]	; (8005770 <HAL_GPIO_Init+0x330>)
 8005642:	4293      	cmp	r3, r2
 8005644:	d101      	bne.n	800564a <HAL_GPIO_Init+0x20a>
 8005646:	2307      	movs	r3, #7
 8005648:	e00e      	b.n	8005668 <HAL_GPIO_Init+0x228>
 800564a:	2308      	movs	r3, #8
 800564c:	e00c      	b.n	8005668 <HAL_GPIO_Init+0x228>
 800564e:	2306      	movs	r3, #6
 8005650:	e00a      	b.n	8005668 <HAL_GPIO_Init+0x228>
 8005652:	2305      	movs	r3, #5
 8005654:	e008      	b.n	8005668 <HAL_GPIO_Init+0x228>
 8005656:	2304      	movs	r3, #4
 8005658:	e006      	b.n	8005668 <HAL_GPIO_Init+0x228>
 800565a:	2303      	movs	r3, #3
 800565c:	e004      	b.n	8005668 <HAL_GPIO_Init+0x228>
 800565e:	2302      	movs	r3, #2
 8005660:	e002      	b.n	8005668 <HAL_GPIO_Init+0x228>
 8005662:	2301      	movs	r3, #1
 8005664:	e000      	b.n	8005668 <HAL_GPIO_Init+0x228>
 8005666:	2300      	movs	r3, #0
 8005668:	69fa      	ldr	r2, [r7, #28]
 800566a:	f002 0203 	and.w	r2, r2, #3
 800566e:	0092      	lsls	r2, r2, #2
 8005670:	4093      	lsls	r3, r2
 8005672:	69ba      	ldr	r2, [r7, #24]
 8005674:	4313      	orrs	r3, r2
 8005676:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005678:	4935      	ldr	r1, [pc, #212]	; (8005750 <HAL_GPIO_Init+0x310>)
 800567a:	69fb      	ldr	r3, [r7, #28]
 800567c:	089b      	lsrs	r3, r3, #2
 800567e:	3302      	adds	r3, #2
 8005680:	69ba      	ldr	r2, [r7, #24]
 8005682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005686:	4b3b      	ldr	r3, [pc, #236]	; (8005774 <HAL_GPIO_Init+0x334>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800568c:	693b      	ldr	r3, [r7, #16]
 800568e:	43db      	mvns	r3, r3
 8005690:	69ba      	ldr	r2, [r7, #24]
 8005692:	4013      	ands	r3, r2
 8005694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d003      	beq.n	80056aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80056a2:	69ba      	ldr	r2, [r7, #24]
 80056a4:	693b      	ldr	r3, [r7, #16]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80056aa:	4a32      	ldr	r2, [pc, #200]	; (8005774 <HAL_GPIO_Init+0x334>)
 80056ac:	69bb      	ldr	r3, [r7, #24]
 80056ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80056b0:	4b30      	ldr	r3, [pc, #192]	; (8005774 <HAL_GPIO_Init+0x334>)
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	43db      	mvns	r3, r3
 80056ba:	69ba      	ldr	r2, [r7, #24]
 80056bc:	4013      	ands	r3, r2
 80056be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d003      	beq.n	80056d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80056cc:	69ba      	ldr	r2, [r7, #24]
 80056ce:	693b      	ldr	r3, [r7, #16]
 80056d0:	4313      	orrs	r3, r2
 80056d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80056d4:	4a27      	ldr	r2, [pc, #156]	; (8005774 <HAL_GPIO_Init+0x334>)
 80056d6:	69bb      	ldr	r3, [r7, #24]
 80056d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80056da:	4b26      	ldr	r3, [pc, #152]	; (8005774 <HAL_GPIO_Init+0x334>)
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80056e0:	693b      	ldr	r3, [r7, #16]
 80056e2:	43db      	mvns	r3, r3
 80056e4:	69ba      	ldr	r2, [r7, #24]
 80056e6:	4013      	ands	r3, r2
 80056e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d003      	beq.n	80056fe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80056f6:	69ba      	ldr	r2, [r7, #24]
 80056f8:	693b      	ldr	r3, [r7, #16]
 80056fa:	4313      	orrs	r3, r2
 80056fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80056fe:	4a1d      	ldr	r2, [pc, #116]	; (8005774 <HAL_GPIO_Init+0x334>)
 8005700:	69bb      	ldr	r3, [r7, #24]
 8005702:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005704:	4b1b      	ldr	r3, [pc, #108]	; (8005774 <HAL_GPIO_Init+0x334>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	43db      	mvns	r3, r3
 800570e:	69ba      	ldr	r2, [r7, #24]
 8005710:	4013      	ands	r3, r2
 8005712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005714:	683b      	ldr	r3, [r7, #0]
 8005716:	685b      	ldr	r3, [r3, #4]
 8005718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800571c:	2b00      	cmp	r3, #0
 800571e:	d003      	beq.n	8005728 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005720:	69ba      	ldr	r2, [r7, #24]
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	4313      	orrs	r3, r2
 8005726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005728:	4a12      	ldr	r2, [pc, #72]	; (8005774 <HAL_GPIO_Init+0x334>)
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800572e:	69fb      	ldr	r3, [r7, #28]
 8005730:	3301      	adds	r3, #1
 8005732:	61fb      	str	r3, [r7, #28]
 8005734:	69fb      	ldr	r3, [r7, #28]
 8005736:	2b0f      	cmp	r3, #15
 8005738:	f67f ae90 	bls.w	800545c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800573c:	bf00      	nop
 800573e:	bf00      	nop
 8005740:	3724      	adds	r7, #36	; 0x24
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr
 800574a:	bf00      	nop
 800574c:	40023800 	.word	0x40023800
 8005750:	40013800 	.word	0x40013800
 8005754:	40020000 	.word	0x40020000
 8005758:	40020400 	.word	0x40020400
 800575c:	40020800 	.word	0x40020800
 8005760:	40020c00 	.word	0x40020c00
 8005764:	40021000 	.word	0x40021000
 8005768:	40021400 	.word	0x40021400
 800576c:	40021800 	.word	0x40021800
 8005770:	40021c00 	.word	0x40021c00
 8005774:	40013c00 	.word	0x40013c00

08005778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	460b      	mov	r3, r1
 8005782:	807b      	strh	r3, [r7, #2]
 8005784:	4613      	mov	r3, r2
 8005786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005788:	787b      	ldrb	r3, [r7, #1]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d003      	beq.n	8005796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800578e:	887a      	ldrh	r2, [r7, #2]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005794:	e003      	b.n	800579e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005796:	887b      	ldrh	r3, [r7, #2]
 8005798:	041a      	lsls	r2, r3, #16
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	619a      	str	r2, [r3, #24]
}
 800579e:	bf00      	nop
 80057a0:	370c      	adds	r7, #12
 80057a2:	46bd      	mov	sp, r7
 80057a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a8:	4770      	bx	lr
	...

080057ac <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d101      	bne.n	80057be <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e12b      	b.n	8005a16 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d106      	bne.n	80057d8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f7fe fc94 	bl	8004100 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2224      	movs	r2, #36	; 0x24
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f022 0201 	bic.w	r2, r2, #1
 80057ee:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	681a      	ldr	r2, [r3, #0]
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057fe:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800580e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005810:	f001 fbba 	bl	8006f88 <HAL_RCC_GetPCLK1Freq>
 8005814:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	4a81      	ldr	r2, [pc, #516]	; (8005a20 <HAL_I2C_Init+0x274>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d807      	bhi.n	8005830 <HAL_I2C_Init+0x84>
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	4a80      	ldr	r2, [pc, #512]	; (8005a24 <HAL_I2C_Init+0x278>)
 8005824:	4293      	cmp	r3, r2
 8005826:	bf94      	ite	ls
 8005828:	2301      	movls	r3, #1
 800582a:	2300      	movhi	r3, #0
 800582c:	b2db      	uxtb	r3, r3
 800582e:	e006      	b.n	800583e <HAL_I2C_Init+0x92>
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	4a7d      	ldr	r2, [pc, #500]	; (8005a28 <HAL_I2C_Init+0x27c>)
 8005834:	4293      	cmp	r3, r2
 8005836:	bf94      	ite	ls
 8005838:	2301      	movls	r3, #1
 800583a:	2300      	movhi	r3, #0
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b00      	cmp	r3, #0
 8005840:	d001      	beq.n	8005846 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005842:	2301      	movs	r3, #1
 8005844:	e0e7      	b.n	8005a16 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	4a78      	ldr	r2, [pc, #480]	; (8005a2c <HAL_I2C_Init+0x280>)
 800584a:	fba2 2303 	umull	r2, r3, r2, r3
 800584e:	0c9b      	lsrs	r3, r3, #18
 8005850:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	430a      	orrs	r2, r1
 8005864:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	6a1b      	ldr	r3, [r3, #32]
 800586c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	4a6a      	ldr	r2, [pc, #424]	; (8005a20 <HAL_I2C_Init+0x274>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d802      	bhi.n	8005880 <HAL_I2C_Init+0xd4>
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	3301      	adds	r3, #1
 800587e:	e009      	b.n	8005894 <HAL_I2C_Init+0xe8>
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8005886:	fb02 f303 	mul.w	r3, r2, r3
 800588a:	4a69      	ldr	r2, [pc, #420]	; (8005a30 <HAL_I2C_Init+0x284>)
 800588c:	fba2 2303 	umull	r2, r3, r2, r3
 8005890:	099b      	lsrs	r3, r3, #6
 8005892:	3301      	adds	r3, #1
 8005894:	687a      	ldr	r2, [r7, #4]
 8005896:	6812      	ldr	r2, [r2, #0]
 8005898:	430b      	orrs	r3, r1
 800589a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	69db      	ldr	r3, [r3, #28]
 80058a2:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80058a6:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	495c      	ldr	r1, [pc, #368]	; (8005a20 <HAL_I2C_Init+0x274>)
 80058b0:	428b      	cmp	r3, r1
 80058b2:	d819      	bhi.n	80058e8 <HAL_I2C_Init+0x13c>
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	1e59      	subs	r1, r3, #1
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	005b      	lsls	r3, r3, #1
 80058be:	fbb1 f3f3 	udiv	r3, r1, r3
 80058c2:	1c59      	adds	r1, r3, #1
 80058c4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80058c8:	400b      	ands	r3, r1
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d00a      	beq.n	80058e4 <HAL_I2C_Init+0x138>
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	1e59      	subs	r1, r3, #1
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	005b      	lsls	r3, r3, #1
 80058d8:	fbb1 f3f3 	udiv	r3, r1, r3
 80058dc:	3301      	adds	r3, #1
 80058de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80058e2:	e051      	b.n	8005988 <HAL_I2C_Init+0x1dc>
 80058e4:	2304      	movs	r3, #4
 80058e6:	e04f      	b.n	8005988 <HAL_I2C_Init+0x1dc>
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d111      	bne.n	8005914 <HAL_I2C_Init+0x168>
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	1e58      	subs	r0, r3, #1
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6859      	ldr	r1, [r3, #4]
 80058f8:	460b      	mov	r3, r1
 80058fa:	005b      	lsls	r3, r3, #1
 80058fc:	440b      	add	r3, r1
 80058fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005902:	3301      	adds	r3, #1
 8005904:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005908:	2b00      	cmp	r3, #0
 800590a:	bf0c      	ite	eq
 800590c:	2301      	moveq	r3, #1
 800590e:	2300      	movne	r3, #0
 8005910:	b2db      	uxtb	r3, r3
 8005912:	e012      	b.n	800593a <HAL_I2C_Init+0x18e>
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	1e58      	subs	r0, r3, #1
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	6859      	ldr	r1, [r3, #4]
 800591c:	460b      	mov	r3, r1
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	440b      	add	r3, r1
 8005922:	0099      	lsls	r1, r3, #2
 8005924:	440b      	add	r3, r1
 8005926:	fbb0 f3f3 	udiv	r3, r0, r3
 800592a:	3301      	adds	r3, #1
 800592c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005930:	2b00      	cmp	r3, #0
 8005932:	bf0c      	ite	eq
 8005934:	2301      	moveq	r3, #1
 8005936:	2300      	movne	r3, #0
 8005938:	b2db      	uxtb	r3, r3
 800593a:	2b00      	cmp	r3, #0
 800593c:	d001      	beq.n	8005942 <HAL_I2C_Init+0x196>
 800593e:	2301      	movs	r3, #1
 8005940:	e022      	b.n	8005988 <HAL_I2C_Init+0x1dc>
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10e      	bne.n	8005968 <HAL_I2C_Init+0x1bc>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	1e58      	subs	r0, r3, #1
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6859      	ldr	r1, [r3, #4]
 8005952:	460b      	mov	r3, r1
 8005954:	005b      	lsls	r3, r3, #1
 8005956:	440b      	add	r3, r1
 8005958:	fbb0 f3f3 	udiv	r3, r0, r3
 800595c:	3301      	adds	r3, #1
 800595e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005962:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005966:	e00f      	b.n	8005988 <HAL_I2C_Init+0x1dc>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	1e58      	subs	r0, r3, #1
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6859      	ldr	r1, [r3, #4]
 8005970:	460b      	mov	r3, r1
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	440b      	add	r3, r1
 8005976:	0099      	lsls	r1, r3, #2
 8005978:	440b      	add	r3, r1
 800597a:	fbb0 f3f3 	udiv	r3, r0, r3
 800597e:	3301      	adds	r3, #1
 8005980:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005984:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005988:	6879      	ldr	r1, [r7, #4]
 800598a:	6809      	ldr	r1, [r1, #0]
 800598c:	4313      	orrs	r3, r2
 800598e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	69da      	ldr	r2, [r3, #28]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	431a      	orrs	r2, r3
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	430a      	orrs	r2, r1
 80059aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	689b      	ldr	r3, [r3, #8]
 80059b2:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80059b6:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80059ba:	687a      	ldr	r2, [r7, #4]
 80059bc:	6911      	ldr	r1, [r2, #16]
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	68d2      	ldr	r2, [r2, #12]
 80059c2:	4311      	orrs	r1, r2
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	6812      	ldr	r2, [r2, #0]
 80059c8:	430b      	orrs	r3, r1
 80059ca:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	68db      	ldr	r3, [r3, #12]
 80059d2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	695a      	ldr	r2, [r3, #20]
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	431a      	orrs	r2, r3
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	430a      	orrs	r2, r1
 80059e6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f042 0201 	orr.w	r2, r2, #1
 80059f6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2220      	movs	r2, #32
 8005a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2200      	movs	r2, #0
 8005a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	000186a0 	.word	0x000186a0
 8005a24:	001e847f 	.word	0x001e847f
 8005a28:	003d08ff 	.word	0x003d08ff
 8005a2c:	431bde83 	.word	0x431bde83
 8005a30:	10624dd3 	.word	0x10624dd3

08005a34 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	b088      	sub	sp, #32
 8005a38:	af02      	add	r7, sp, #8
 8005a3a:	60f8      	str	r0, [r7, #12]
 8005a3c:	607a      	str	r2, [r7, #4]
 8005a3e:	461a      	mov	r2, r3
 8005a40:	460b      	mov	r3, r1
 8005a42:	817b      	strh	r3, [r7, #10]
 8005a44:	4613      	mov	r3, r2
 8005a46:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005a48:	f7fe ff26 	bl	8004898 <HAL_GetTick>
 8005a4c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a54:	b2db      	uxtb	r3, r3
 8005a56:	2b20      	cmp	r3, #32
 8005a58:	f040 80e0 	bne.w	8005c1c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	9300      	str	r3, [sp, #0]
 8005a60:	2319      	movs	r3, #25
 8005a62:	2201      	movs	r2, #1
 8005a64:	4970      	ldr	r1, [pc, #448]	; (8005c28 <HAL_I2C_Master_Transmit+0x1f4>)
 8005a66:	68f8      	ldr	r0, [r7, #12]
 8005a68:	f000 fc58 	bl	800631c <I2C_WaitOnFlagUntilTimeout>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d001      	beq.n	8005a76 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005a72:	2302      	movs	r3, #2
 8005a74:	e0d3      	b.n	8005c1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	d101      	bne.n	8005a84 <HAL_I2C_Master_Transmit+0x50>
 8005a80:	2302      	movs	r3, #2
 8005a82:	e0cc      	b.n	8005c1e <HAL_I2C_Master_Transmit+0x1ea>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	2201      	movs	r2, #1
 8005a88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f003 0301 	and.w	r3, r3, #1
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d007      	beq.n	8005aaa <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f042 0201 	orr.w	r2, r2, #1
 8005aa8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	681a      	ldr	r2, [r3, #0]
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ab8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	2221      	movs	r2, #33	; 0x21
 8005abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2210      	movs	r2, #16
 8005ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	687a      	ldr	r2, [r7, #4]
 8005ad4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	893a      	ldrh	r2, [r7, #8]
 8005ada:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ae0:	b29a      	uxth	r2, r3
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	4a50      	ldr	r2, [pc, #320]	; (8005c2c <HAL_I2C_Master_Transmit+0x1f8>)
 8005aea:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005aec:	8979      	ldrh	r1, [r7, #10]
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	6a3a      	ldr	r2, [r7, #32]
 8005af2:	68f8      	ldr	r0, [r7, #12]
 8005af4:	f000 fac2 	bl	800607c <I2C_MasterRequestWrite>
 8005af8:	4603      	mov	r3, r0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005afe:	2301      	movs	r3, #1
 8005b00:	e08d      	b.n	8005c1e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b02:	2300      	movs	r3, #0
 8005b04:	613b      	str	r3, [r7, #16]
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	695b      	ldr	r3, [r3, #20]
 8005b0c:	613b      	str	r3, [r7, #16]
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	613b      	str	r3, [r7, #16]
 8005b16:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8005b18:	e066      	b.n	8005be8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	6a39      	ldr	r1, [r7, #32]
 8005b1e:	68f8      	ldr	r0, [r7, #12]
 8005b20:	f000 fcd2 	bl	80064c8 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b24:	4603      	mov	r3, r0
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d00d      	beq.n	8005b46 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b2e:	2b04      	cmp	r3, #4
 8005b30:	d107      	bne.n	8005b42 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	681a      	ldr	r2, [r3, #0]
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b40:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005b42:	2301      	movs	r3, #1
 8005b44:	e06b      	b.n	8005c1e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b4a:	781a      	ldrb	r2, [r3, #0]
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b56:	1c5a      	adds	r2, r3, #1
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b60:	b29b      	uxth	r3, r3
 8005b62:	3b01      	subs	r3, #1
 8005b64:	b29a      	uxth	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b6e:	3b01      	subs	r3, #1
 8005b70:	b29a      	uxth	r2, r3
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	695b      	ldr	r3, [r3, #20]
 8005b7c:	f003 0304 	and.w	r3, r3, #4
 8005b80:	2b04      	cmp	r3, #4
 8005b82:	d11b      	bne.n	8005bbc <HAL_I2C_Master_Transmit+0x188>
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d017      	beq.n	8005bbc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b90:	781a      	ldrb	r2, [r3, #0]
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b9c:	1c5a      	adds	r2, r3, #1
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ba6:	b29b      	uxth	r3, r3
 8005ba8:	3b01      	subs	r3, #1
 8005baa:	b29a      	uxth	r2, r3
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bb4:	3b01      	subs	r3, #1
 8005bb6:	b29a      	uxth	r2, r3
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005bbc:	697a      	ldr	r2, [r7, #20]
 8005bbe:	6a39      	ldr	r1, [r7, #32]
 8005bc0:	68f8      	ldr	r0, [r7, #12]
 8005bc2:	f000 fcc2 	bl	800654a <I2C_WaitOnBTFFlagUntilTimeout>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d00d      	beq.n	8005be8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bd0:	2b04      	cmp	r3, #4
 8005bd2:	d107      	bne.n	8005be4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	681a      	ldr	r2, [r3, #0]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005be2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005be4:	2301      	movs	r3, #1
 8005be6:	e01a      	b.n	8005c1e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d194      	bne.n	8005b1a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	681a      	ldr	r2, [r3, #0]
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bfe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2220      	movs	r2, #32
 8005c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2200      	movs	r2, #0
 8005c0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	2200      	movs	r2, #0
 8005c14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005c18:	2300      	movs	r3, #0
 8005c1a:	e000      	b.n	8005c1e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8005c1c:	2302      	movs	r3, #2
  }
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3718      	adds	r7, #24
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	00100002 	.word	0x00100002
 8005c2c:	ffff0000 	.word	0xffff0000

08005c30 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b08c      	sub	sp, #48	; 0x30
 8005c34:	af02      	add	r7, sp, #8
 8005c36:	60f8      	str	r0, [r7, #12]
 8005c38:	607a      	str	r2, [r7, #4]
 8005c3a:	461a      	mov	r2, r3
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	817b      	strh	r3, [r7, #10]
 8005c40:	4613      	mov	r3, r2
 8005c42:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005c44:	f7fe fe28 	bl	8004898 <HAL_GetTick>
 8005c48:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b20      	cmp	r3, #32
 8005c54:	f040 820b 	bne.w	800606e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c5a:	9300      	str	r3, [sp, #0]
 8005c5c:	2319      	movs	r3, #25
 8005c5e:	2201      	movs	r2, #1
 8005c60:	497c      	ldr	r1, [pc, #496]	; (8005e54 <HAL_I2C_Master_Receive+0x224>)
 8005c62:	68f8      	ldr	r0, [r7, #12]
 8005c64:	f000 fb5a 	bl	800631c <I2C_WaitOnFlagUntilTimeout>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d001      	beq.n	8005c72 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8005c6e:	2302      	movs	r3, #2
 8005c70:	e1fe      	b.n	8006070 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d101      	bne.n	8005c80 <HAL_I2C_Master_Receive+0x50>
 8005c7c:	2302      	movs	r3, #2
 8005c7e:	e1f7      	b.n	8006070 <HAL_I2C_Master_Receive+0x440>
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0301 	and.w	r3, r3, #1
 8005c92:	2b01      	cmp	r3, #1
 8005c94:	d007      	beq.n	8005ca6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	681a      	ldr	r2, [r3, #0]
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f042 0201 	orr.w	r2, r2, #1
 8005ca4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	681a      	ldr	r2, [r3, #0]
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005cb4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2222      	movs	r2, #34	; 0x22
 8005cba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2210      	movs	r2, #16
 8005cc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	687a      	ldr	r2, [r7, #4]
 8005cd0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	893a      	ldrh	r2, [r7, #8]
 8005cd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cdc:	b29a      	uxth	r2, r3
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	4a5c      	ldr	r2, [pc, #368]	; (8005e58 <HAL_I2C_Master_Receive+0x228>)
 8005ce6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005ce8:	8979      	ldrh	r1, [r7, #10]
 8005cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cee:	68f8      	ldr	r0, [r7, #12]
 8005cf0:	f000 fa46 	bl	8006180 <I2C_MasterRequestRead>
 8005cf4:	4603      	mov	r3, r0
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d001      	beq.n	8005cfe <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e1b8      	b.n	8006070 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d113      	bne.n	8005d2e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d06:	2300      	movs	r3, #0
 8005d08:	623b      	str	r3, [r7, #32]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	695b      	ldr	r3, [r3, #20]
 8005d10:	623b      	str	r3, [r7, #32]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	623b      	str	r3, [r7, #32]
 8005d1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d2a:	601a      	str	r2, [r3, #0]
 8005d2c:	e18c      	b.n	8006048 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d32:	2b01      	cmp	r3, #1
 8005d34:	d11b      	bne.n	8005d6e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d46:	2300      	movs	r3, #0
 8005d48:	61fb      	str	r3, [r7, #28]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	695b      	ldr	r3, [r3, #20]
 8005d50:	61fb      	str	r3, [r7, #28]
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	699b      	ldr	r3, [r3, #24]
 8005d58:	61fb      	str	r3, [r7, #28]
 8005d5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	e16c      	b.n	8006048 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d72:	2b02      	cmp	r3, #2
 8005d74:	d11b      	bne.n	8005dae <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d96:	2300      	movs	r3, #0
 8005d98:	61bb      	str	r3, [r7, #24]
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	695b      	ldr	r3, [r3, #20]
 8005da0:	61bb      	str	r3, [r7, #24]
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	61bb      	str	r3, [r7, #24]
 8005daa:	69bb      	ldr	r3, [r7, #24]
 8005dac:	e14c      	b.n	8006048 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005dbc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	617b      	str	r3, [r7, #20]
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	695b      	ldr	r3, [r3, #20]
 8005dc8:	617b      	str	r3, [r7, #20]
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	617b      	str	r3, [r7, #20]
 8005dd2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005dd4:	e138      	b.n	8006048 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005dda:	2b03      	cmp	r3, #3
 8005ddc:	f200 80f1 	bhi.w	8005fc2 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005de4:	2b01      	cmp	r3, #1
 8005de6:	d123      	bne.n	8005e30 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dea:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f000 fbed 	bl	80065cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005df2:	4603      	mov	r3, r0
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d001      	beq.n	8005dfc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e139      	b.n	8006070 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	691a      	ldr	r2, [r3, #16]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e06:	b2d2      	uxtb	r2, r2
 8005e08:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0e:	1c5a      	adds	r2, r3, #1
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e18:	3b01      	subs	r3, #1
 8005e1a:	b29a      	uxth	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	3b01      	subs	r3, #1
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005e2e:	e10b      	b.n	8006048 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e34:	2b02      	cmp	r3, #2
 8005e36:	d14e      	bne.n	8005ed6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3a:	9300      	str	r3, [sp, #0]
 8005e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3e:	2200      	movs	r2, #0
 8005e40:	4906      	ldr	r1, [pc, #24]	; (8005e5c <HAL_I2C_Master_Receive+0x22c>)
 8005e42:	68f8      	ldr	r0, [r7, #12]
 8005e44:	f000 fa6a 	bl	800631c <I2C_WaitOnFlagUntilTimeout>
 8005e48:	4603      	mov	r3, r0
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d008      	beq.n	8005e60 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8005e4e:	2301      	movs	r3, #1
 8005e50:	e10e      	b.n	8006070 <HAL_I2C_Master_Receive+0x440>
 8005e52:	bf00      	nop
 8005e54:	00100002 	.word	0x00100002
 8005e58:	ffff0000 	.word	0xffff0000
 8005e5c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005e6e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	691a      	ldr	r2, [r3, #16]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7a:	b2d2      	uxtb	r2, r2
 8005e7c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e82:	1c5a      	adds	r2, r3, #1
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005e8c:	3b01      	subs	r3, #1
 8005e8e:	b29a      	uxth	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	3b01      	subs	r3, #1
 8005e9c:	b29a      	uxth	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	691a      	ldr	r2, [r3, #16]
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eac:	b2d2      	uxtb	r2, r2
 8005eae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eb4:	1c5a      	adds	r2, r3, #1
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	b29a      	uxth	r2, r3
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	b29a      	uxth	r2, r3
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005ed4:	e0b8      	b.n	8006048 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ed8:	9300      	str	r3, [sp, #0]
 8005eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005edc:	2200      	movs	r2, #0
 8005ede:	4966      	ldr	r1, [pc, #408]	; (8006078 <HAL_I2C_Master_Receive+0x448>)
 8005ee0:	68f8      	ldr	r0, [r7, #12]
 8005ee2:	f000 fa1b 	bl	800631c <I2C_WaitOnFlagUntilTimeout>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d001      	beq.n	8005ef0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e0bf      	b.n	8006070 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	681a      	ldr	r2, [r3, #0]
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005efe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	691a      	ldr	r2, [r3, #16]
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0a:	b2d2      	uxtb	r2, r2
 8005f0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f0e:	68fb      	ldr	r3, [r7, #12]
 8005f10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f12:	1c5a      	adds	r2, r3, #1
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f1c:	3b01      	subs	r3, #1
 8005f1e:	b29a      	uxth	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f28:	b29b      	uxth	r3, r3
 8005f2a:	3b01      	subs	r3, #1
 8005f2c:	b29a      	uxth	r2, r3
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f34:	9300      	str	r3, [sp, #0]
 8005f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f38:	2200      	movs	r2, #0
 8005f3a:	494f      	ldr	r1, [pc, #316]	; (8006078 <HAL_I2C_Master_Receive+0x448>)
 8005f3c:	68f8      	ldr	r0, [r7, #12]
 8005f3e:	f000 f9ed 	bl	800631c <I2C_WaitOnFlagUntilTimeout>
 8005f42:	4603      	mov	r3, r0
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d001      	beq.n	8005f4c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8005f48:	2301      	movs	r3, #1
 8005f4a:	e091      	b.n	8006070 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005f5a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	691a      	ldr	r2, [r3, #16]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f66:	b2d2      	uxtb	r2, r2
 8005f68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f6e:	1c5a      	adds	r2, r3, #1
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005f78:	3b01      	subs	r3, #1
 8005f7a:	b29a      	uxth	r2, r3
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f84:	b29b      	uxth	r3, r3
 8005f86:	3b01      	subs	r3, #1
 8005f88:	b29a      	uxth	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	691a      	ldr	r2, [r3, #16]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f98:	b2d2      	uxtb	r2, r2
 8005f9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fa0:	1c5a      	adds	r2, r3, #1
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005faa:	3b01      	subs	r3, #1
 8005fac:	b29a      	uxth	r2, r3
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	3b01      	subs	r3, #1
 8005fba:	b29a      	uxth	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005fc0:	e042      	b.n	8006048 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005fc4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005fc6:	68f8      	ldr	r0, [r7, #12]
 8005fc8:	f000 fb00 	bl	80065cc <I2C_WaitOnRXNEFlagUntilTimeout>
 8005fcc:	4603      	mov	r3, r0
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d001      	beq.n	8005fd6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e04c      	b.n	8006070 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	691a      	ldr	r2, [r3, #16]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe0:	b2d2      	uxtb	r2, r2
 8005fe2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe8:	1c5a      	adds	r2, r3, #1
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ffe:	b29b      	uxth	r3, r3
 8006000:	3b01      	subs	r3, #1
 8006002:	b29a      	uxth	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	695b      	ldr	r3, [r3, #20]
 800600e:	f003 0304 	and.w	r3, r3, #4
 8006012:	2b04      	cmp	r3, #4
 8006014:	d118      	bne.n	8006048 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	691a      	ldr	r2, [r3, #16]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006020:	b2d2      	uxtb	r2, r2
 8006022:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006028:	1c5a      	adds	r2, r3, #1
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006032:	3b01      	subs	r3, #1
 8006034:	b29a      	uxth	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800603e:	b29b      	uxth	r3, r3
 8006040:	3b01      	subs	r3, #1
 8006042:	b29a      	uxth	r2, r3
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800604c:	2b00      	cmp	r3, #0
 800604e:	f47f aec2 	bne.w	8005dd6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2220      	movs	r2, #32
 8006056:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800606a:	2300      	movs	r3, #0
 800606c:	e000      	b.n	8006070 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 800606e:	2302      	movs	r3, #2
  }
}
 8006070:	4618      	mov	r0, r3
 8006072:	3728      	adds	r7, #40	; 0x28
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	00010004 	.word	0x00010004

0800607c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b088      	sub	sp, #32
 8006080:	af02      	add	r7, sp, #8
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	607a      	str	r2, [r7, #4]
 8006086:	603b      	str	r3, [r7, #0]
 8006088:	460b      	mov	r3, r1
 800608a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006090:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	2b08      	cmp	r3, #8
 8006096:	d006      	beq.n	80060a6 <I2C_MasterRequestWrite+0x2a>
 8006098:	697b      	ldr	r3, [r7, #20]
 800609a:	2b01      	cmp	r3, #1
 800609c:	d003      	beq.n	80060a6 <I2C_MasterRequestWrite+0x2a>
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80060a4:	d108      	bne.n	80060b8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	681a      	ldr	r2, [r3, #0]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060b4:	601a      	str	r2, [r3, #0]
 80060b6:	e00b      	b.n	80060d0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060bc:	2b12      	cmp	r3, #18
 80060be:	d107      	bne.n	80060d0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80060ce:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	9300      	str	r3, [sp, #0]
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2200      	movs	r2, #0
 80060d8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80060dc:	68f8      	ldr	r0, [r7, #12]
 80060de:	f000 f91d 	bl	800631c <I2C_WaitOnFlagUntilTimeout>
 80060e2:	4603      	mov	r3, r0
 80060e4:	2b00      	cmp	r3, #0
 80060e6:	d00d      	beq.n	8006104 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060f2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80060f6:	d103      	bne.n	8006100 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060fe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006100:	2303      	movs	r3, #3
 8006102:	e035      	b.n	8006170 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800610c:	d108      	bne.n	8006120 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800610e:	897b      	ldrh	r3, [r7, #10]
 8006110:	b2db      	uxtb	r3, r3
 8006112:	461a      	mov	r2, r3
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800611c:	611a      	str	r2, [r3, #16]
 800611e:	e01b      	b.n	8006158 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006120:	897b      	ldrh	r3, [r7, #10]
 8006122:	11db      	asrs	r3, r3, #7
 8006124:	b2db      	uxtb	r3, r3
 8006126:	f003 0306 	and.w	r3, r3, #6
 800612a:	b2db      	uxtb	r3, r3
 800612c:	f063 030f 	orn	r3, r3, #15
 8006130:	b2da      	uxtb	r2, r3
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006138:	683b      	ldr	r3, [r7, #0]
 800613a:	687a      	ldr	r2, [r7, #4]
 800613c:	490e      	ldr	r1, [pc, #56]	; (8006178 <I2C_MasterRequestWrite+0xfc>)
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f000 f943 	bl	80063ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006144:	4603      	mov	r3, r0
 8006146:	2b00      	cmp	r3, #0
 8006148:	d001      	beq.n	800614e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800614a:	2301      	movs	r3, #1
 800614c:	e010      	b.n	8006170 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800614e:	897b      	ldrh	r3, [r7, #10]
 8006150:	b2da      	uxtb	r2, r3
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	4907      	ldr	r1, [pc, #28]	; (800617c <I2C_MasterRequestWrite+0x100>)
 800615e:	68f8      	ldr	r0, [r7, #12]
 8006160:	f000 f933 	bl	80063ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006164:	4603      	mov	r3, r0
 8006166:	2b00      	cmp	r3, #0
 8006168:	d001      	beq.n	800616e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e000      	b.n	8006170 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800616e:	2300      	movs	r3, #0
}
 8006170:	4618      	mov	r0, r3
 8006172:	3718      	adds	r7, #24
 8006174:	46bd      	mov	sp, r7
 8006176:	bd80      	pop	{r7, pc}
 8006178:	00010008 	.word	0x00010008
 800617c:	00010002 	.word	0x00010002

08006180 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b088      	sub	sp, #32
 8006184:	af02      	add	r7, sp, #8
 8006186:	60f8      	str	r0, [r7, #12]
 8006188:	607a      	str	r2, [r7, #4]
 800618a:	603b      	str	r3, [r7, #0]
 800618c:	460b      	mov	r3, r1
 800618e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006194:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80061a4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	2b08      	cmp	r3, #8
 80061aa:	d006      	beq.n	80061ba <I2C_MasterRequestRead+0x3a>
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d003      	beq.n	80061ba <I2C_MasterRequestRead+0x3a>
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80061b8:	d108      	bne.n	80061cc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061c8:	601a      	str	r2, [r3, #0]
 80061ca:	e00b      	b.n	80061e4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d0:	2b11      	cmp	r3, #17
 80061d2:	d107      	bne.n	80061e4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80061e2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	9300      	str	r3, [sp, #0]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2200      	movs	r2, #0
 80061ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80061f0:	68f8      	ldr	r0, [r7, #12]
 80061f2:	f000 f893 	bl	800631c <I2C_WaitOnFlagUntilTimeout>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d00d      	beq.n	8006218 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006206:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800620a:	d103      	bne.n	8006214 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006212:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	e079      	b.n	800630c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	691b      	ldr	r3, [r3, #16]
 800621c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006220:	d108      	bne.n	8006234 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006222:	897b      	ldrh	r3, [r7, #10]
 8006224:	b2db      	uxtb	r3, r3
 8006226:	f043 0301 	orr.w	r3, r3, #1
 800622a:	b2da      	uxtb	r2, r3
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	611a      	str	r2, [r3, #16]
 8006232:	e05f      	b.n	80062f4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006234:	897b      	ldrh	r3, [r7, #10]
 8006236:	11db      	asrs	r3, r3, #7
 8006238:	b2db      	uxtb	r3, r3
 800623a:	f003 0306 	and.w	r3, r3, #6
 800623e:	b2db      	uxtb	r3, r3
 8006240:	f063 030f 	orn	r3, r3, #15
 8006244:	b2da      	uxtb	r2, r3
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	687a      	ldr	r2, [r7, #4]
 8006250:	4930      	ldr	r1, [pc, #192]	; (8006314 <I2C_MasterRequestRead+0x194>)
 8006252:	68f8      	ldr	r0, [r7, #12]
 8006254:	f000 f8b9 	bl	80063ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006258:	4603      	mov	r3, r0
 800625a:	2b00      	cmp	r3, #0
 800625c:	d001      	beq.n	8006262 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800625e:	2301      	movs	r3, #1
 8006260:	e054      	b.n	800630c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006262:	897b      	ldrh	r3, [r7, #10]
 8006264:	b2da      	uxtb	r2, r3
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	687a      	ldr	r2, [r7, #4]
 8006270:	4929      	ldr	r1, [pc, #164]	; (8006318 <I2C_MasterRequestRead+0x198>)
 8006272:	68f8      	ldr	r0, [r7, #12]
 8006274:	f000 f8a9 	bl	80063ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006278:	4603      	mov	r3, r0
 800627a:	2b00      	cmp	r3, #0
 800627c:	d001      	beq.n	8006282 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e044      	b.n	800630c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006282:	2300      	movs	r3, #0
 8006284:	613b      	str	r3, [r7, #16]
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	695b      	ldr	r3, [r3, #20]
 800628c:	613b      	str	r3, [r7, #16]
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	699b      	ldr	r3, [r3, #24]
 8006294:	613b      	str	r3, [r7, #16]
 8006296:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062a6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80062a8:	683b      	ldr	r3, [r7, #0]
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80062b4:	68f8      	ldr	r0, [r7, #12]
 80062b6:	f000 f831 	bl	800631c <I2C_WaitOnFlagUntilTimeout>
 80062ba:	4603      	mov	r3, r0
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00d      	beq.n	80062dc <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062ce:	d103      	bne.n	80062d8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062d6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80062d8:	2303      	movs	r3, #3
 80062da:	e017      	b.n	800630c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80062dc:	897b      	ldrh	r3, [r7, #10]
 80062de:	11db      	asrs	r3, r3, #7
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	f003 0306 	and.w	r3, r3, #6
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	f063 030e 	orn	r3, r3, #14
 80062ec:	b2da      	uxtb	r2, r3
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	687a      	ldr	r2, [r7, #4]
 80062f8:	4907      	ldr	r1, [pc, #28]	; (8006318 <I2C_MasterRequestRead+0x198>)
 80062fa:	68f8      	ldr	r0, [r7, #12]
 80062fc:	f000 f865 	bl	80063ca <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	d001      	beq.n	800630a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8006306:	2301      	movs	r3, #1
 8006308:	e000      	b.n	800630c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800630a:	2300      	movs	r3, #0
}
 800630c:	4618      	mov	r0, r3
 800630e:	3718      	adds	r7, #24
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}
 8006314:	00010008 	.word	0x00010008
 8006318:	00010002 	.word	0x00010002

0800631c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	60f8      	str	r0, [r7, #12]
 8006324:	60b9      	str	r1, [r7, #8]
 8006326:	603b      	str	r3, [r7, #0]
 8006328:	4613      	mov	r3, r2
 800632a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800632c:	e025      	b.n	800637a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006334:	d021      	beq.n	800637a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006336:	f7fe faaf 	bl	8004898 <HAL_GetTick>
 800633a:	4602      	mov	r2, r0
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	683a      	ldr	r2, [r7, #0]
 8006342:	429a      	cmp	r2, r3
 8006344:	d302      	bcc.n	800634c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	2b00      	cmp	r3, #0
 800634a:	d116      	bne.n	800637a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	2200      	movs	r2, #0
 8006350:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2220      	movs	r2, #32
 8006356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006366:	f043 0220 	orr.w	r2, r3, #32
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006376:	2301      	movs	r3, #1
 8006378:	e023      	b.n	80063c2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	0c1b      	lsrs	r3, r3, #16
 800637e:	b2db      	uxtb	r3, r3
 8006380:	2b01      	cmp	r3, #1
 8006382:	d10d      	bne.n	80063a0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	695b      	ldr	r3, [r3, #20]
 800638a:	43da      	mvns	r2, r3
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	4013      	ands	r3, r2
 8006390:	b29b      	uxth	r3, r3
 8006392:	2b00      	cmp	r3, #0
 8006394:	bf0c      	ite	eq
 8006396:	2301      	moveq	r3, #1
 8006398:	2300      	movne	r3, #0
 800639a:	b2db      	uxtb	r3, r3
 800639c:	461a      	mov	r2, r3
 800639e:	e00c      	b.n	80063ba <I2C_WaitOnFlagUntilTimeout+0x9e>
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	699b      	ldr	r3, [r3, #24]
 80063a6:	43da      	mvns	r2, r3
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	4013      	ands	r3, r2
 80063ac:	b29b      	uxth	r3, r3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	bf0c      	ite	eq
 80063b2:	2301      	moveq	r3, #1
 80063b4:	2300      	movne	r3, #0
 80063b6:	b2db      	uxtb	r3, r3
 80063b8:	461a      	mov	r2, r3
 80063ba:	79fb      	ldrb	r3, [r7, #7]
 80063bc:	429a      	cmp	r2, r3
 80063be:	d0b6      	beq.n	800632e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80063c0:	2300      	movs	r3, #0
}
 80063c2:	4618      	mov	r0, r3
 80063c4:	3710      	adds	r7, #16
 80063c6:	46bd      	mov	sp, r7
 80063c8:	bd80      	pop	{r7, pc}

080063ca <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80063ca:	b580      	push	{r7, lr}
 80063cc:	b084      	sub	sp, #16
 80063ce:	af00      	add	r7, sp, #0
 80063d0:	60f8      	str	r0, [r7, #12]
 80063d2:	60b9      	str	r1, [r7, #8]
 80063d4:	607a      	str	r2, [r7, #4]
 80063d6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80063d8:	e051      	b.n	800647e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	695b      	ldr	r3, [r3, #20]
 80063e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80063e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063e8:	d123      	bne.n	8006432 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80063f8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006402:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2220      	movs	r2, #32
 800640e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641e:	f043 0204 	orr.w	r2, r3, #4
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	2200      	movs	r2, #0
 800642a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e046      	b.n	80064c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006438:	d021      	beq.n	800647e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800643a:	f7fe fa2d 	bl	8004898 <HAL_GetTick>
 800643e:	4602      	mov	r2, r0
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	429a      	cmp	r2, r3
 8006448:	d302      	bcc.n	8006450 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d116      	bne.n	800647e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2200      	movs	r2, #0
 8006454:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2220      	movs	r2, #32
 800645a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	2200      	movs	r2, #0
 8006462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646a:	f043 0220 	orr.w	r2, r3, #32
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e020      	b.n	80064c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800647e:	68bb      	ldr	r3, [r7, #8]
 8006480:	0c1b      	lsrs	r3, r3, #16
 8006482:	b2db      	uxtb	r3, r3
 8006484:	2b01      	cmp	r3, #1
 8006486:	d10c      	bne.n	80064a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	43da      	mvns	r2, r3
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	4013      	ands	r3, r2
 8006494:	b29b      	uxth	r3, r3
 8006496:	2b00      	cmp	r3, #0
 8006498:	bf14      	ite	ne
 800649a:	2301      	movne	r3, #1
 800649c:	2300      	moveq	r3, #0
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	e00b      	b.n	80064ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	699b      	ldr	r3, [r3, #24]
 80064a8:	43da      	mvns	r2, r3
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	4013      	ands	r3, r2
 80064ae:	b29b      	uxth	r3, r3
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	bf14      	ite	ne
 80064b4:	2301      	movne	r3, #1
 80064b6:	2300      	moveq	r3, #0
 80064b8:	b2db      	uxtb	r3, r3
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d18d      	bne.n	80063da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80064be:	2300      	movs	r3, #0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3710      	adds	r7, #16
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064d4:	e02d      	b.n	8006532 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80064d6:	68f8      	ldr	r0, [r7, #12]
 80064d8:	f000 f8ce 	bl	8006678 <I2C_IsAcknowledgeFailed>
 80064dc:	4603      	mov	r3, r0
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d001      	beq.n	80064e6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e02d      	b.n	8006542 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ec:	d021      	beq.n	8006532 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064ee:	f7fe f9d3 	bl	8004898 <HAL_GetTick>
 80064f2:	4602      	mov	r2, r0
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	1ad3      	subs	r3, r2, r3
 80064f8:	68ba      	ldr	r2, [r7, #8]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d302      	bcc.n	8006504 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d116      	bne.n	8006532 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2200      	movs	r2, #0
 8006508:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	2220      	movs	r2, #32
 800650e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	2200      	movs	r2, #0
 8006516:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651e:	f043 0220 	orr.w	r2, r3, #32
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800652e:	2301      	movs	r3, #1
 8006530:	e007      	b.n	8006542 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800653c:	2b80      	cmp	r3, #128	; 0x80
 800653e:	d1ca      	bne.n	80064d6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006540:	2300      	movs	r3, #0
}
 8006542:	4618      	mov	r0, r3
 8006544:	3710      	adds	r7, #16
 8006546:	46bd      	mov	sp, r7
 8006548:	bd80      	pop	{r7, pc}

0800654a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800654a:	b580      	push	{r7, lr}
 800654c:	b084      	sub	sp, #16
 800654e:	af00      	add	r7, sp, #0
 8006550:	60f8      	str	r0, [r7, #12]
 8006552:	60b9      	str	r1, [r7, #8]
 8006554:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006556:	e02d      	b.n	80065b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006558:	68f8      	ldr	r0, [r7, #12]
 800655a:	f000 f88d 	bl	8006678 <I2C_IsAcknowledgeFailed>
 800655e:	4603      	mov	r3, r0
 8006560:	2b00      	cmp	r3, #0
 8006562:	d001      	beq.n	8006568 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006564:	2301      	movs	r3, #1
 8006566:	e02d      	b.n	80065c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006568:	68bb      	ldr	r3, [r7, #8]
 800656a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800656e:	d021      	beq.n	80065b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006570:	f7fe f992 	bl	8004898 <HAL_GetTick>
 8006574:	4602      	mov	r2, r0
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	1ad3      	subs	r3, r2, r3
 800657a:	68ba      	ldr	r2, [r7, #8]
 800657c:	429a      	cmp	r2, r3
 800657e:	d302      	bcc.n	8006586 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d116      	bne.n	80065b4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	2200      	movs	r2, #0
 800658a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	2220      	movs	r2, #32
 8006590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2200      	movs	r2, #0
 8006598:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a0:	f043 0220 	orr.w	r2, r3, #32
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80065b0:	2301      	movs	r3, #1
 80065b2:	e007      	b.n	80065c4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	695b      	ldr	r3, [r3, #20]
 80065ba:	f003 0304 	and.w	r3, r3, #4
 80065be:	2b04      	cmp	r3, #4
 80065c0:	d1ca      	bne.n	8006558 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80065c2:	2300      	movs	r3, #0
}
 80065c4:	4618      	mov	r0, r3
 80065c6:	3710      	adds	r7, #16
 80065c8:	46bd      	mov	sp, r7
 80065ca:	bd80      	pop	{r7, pc}

080065cc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065cc:	b580      	push	{r7, lr}
 80065ce:	b084      	sub	sp, #16
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	60b9      	str	r1, [r7, #8]
 80065d6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80065d8:	e042      	b.n	8006660 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	695b      	ldr	r3, [r3, #20]
 80065e0:	f003 0310 	and.w	r3, r3, #16
 80065e4:	2b10      	cmp	r3, #16
 80065e6:	d119      	bne.n	800661c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f06f 0210 	mvn.w	r2, #16
 80065f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2220      	movs	r2, #32
 80065fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e029      	b.n	8006670 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800661c:	f7fe f93c 	bl	8004898 <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	429a      	cmp	r2, r3
 800662a:	d302      	bcc.n	8006632 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	2b00      	cmp	r3, #0
 8006630:	d116      	bne.n	8006660 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	2220      	movs	r2, #32
 800663c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	2200      	movs	r2, #0
 8006644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664c:	f043 0220 	orr.w	r2, r3, #32
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	2200      	movs	r2, #0
 8006658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800665c:	2301      	movs	r3, #1
 800665e:	e007      	b.n	8006670 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	695b      	ldr	r3, [r3, #20]
 8006666:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666a:	2b40      	cmp	r3, #64	; 0x40
 800666c:	d1b5      	bne.n	80065da <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3710      	adds	r7, #16
 8006674:	46bd      	mov	sp, r7
 8006676:	bd80      	pop	{r7, pc}

08006678 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800668a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800668e:	d11b      	bne.n	80066c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006698:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	2200      	movs	r2, #0
 800669e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2220      	movs	r2, #32
 80066a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066b4:	f043 0204 	orr.w	r2, r3, #4
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	e000      	b.n	80066ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	370c      	adds	r7, #12
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
	...

080066d8 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80066d8:	b480      	push	{r7}
 80066da:	b083      	sub	sp, #12
 80066dc:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 80066de:	4b06      	ldr	r3, [pc, #24]	; (80066f8 <HAL_PWR_EnableBkUpAccess+0x20>)
 80066e0:	2201      	movs	r2, #1
 80066e2:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 80066e4:	4b05      	ldr	r3, [pc, #20]	; (80066fc <HAL_PWR_EnableBkUpAccess+0x24>)
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 80066ea:	687b      	ldr	r3, [r7, #4]
}
 80066ec:	bf00      	nop
 80066ee:	370c      	adds	r7, #12
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr
 80066f8:	420e0020 	.word	0x420e0020
 80066fc:	40007000 	.word	0x40007000

08006700 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8006700:	b480      	push	{r7}
 8006702:	b083      	sub	sp, #12
 8006704:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8006706:	4b06      	ldr	r3, [pc, #24]	; (8006720 <HAL_PWR_DisableBkUpAccess+0x20>)
 8006708:	2200      	movs	r2, #0
 800670a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 800670c:	4b05      	ldr	r3, [pc, #20]	; (8006724 <HAL_PWR_DisableBkUpAccess+0x24>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8006712:	687b      	ldr	r3, [r7, #4]
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr
 8006720:	420e0020 	.word	0x420e0020
 8006724:	40007000 	.word	0x40007000

08006728 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	b086      	sub	sp, #24
 800672c:	af00      	add	r7, sp, #0
 800672e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2b00      	cmp	r3, #0
 8006734:	d101      	bne.n	800673a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	e267      	b.n	8006c0a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	2b00      	cmp	r3, #0
 8006744:	d075      	beq.n	8006832 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006746:	4b88      	ldr	r3, [pc, #544]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 8006748:	689b      	ldr	r3, [r3, #8]
 800674a:	f003 030c 	and.w	r3, r3, #12
 800674e:	2b04      	cmp	r3, #4
 8006750:	d00c      	beq.n	800676c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006752:	4b85      	ldr	r3, [pc, #532]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 8006754:	689b      	ldr	r3, [r3, #8]
 8006756:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800675a:	2b08      	cmp	r3, #8
 800675c:	d112      	bne.n	8006784 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800675e:	4b82      	ldr	r3, [pc, #520]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 8006760:	685b      	ldr	r3, [r3, #4]
 8006762:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006766:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800676a:	d10b      	bne.n	8006784 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800676c:	4b7e      	ldr	r3, [pc, #504]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006774:	2b00      	cmp	r3, #0
 8006776:	d05b      	beq.n	8006830 <HAL_RCC_OscConfig+0x108>
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	685b      	ldr	r3, [r3, #4]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d157      	bne.n	8006830 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006780:	2301      	movs	r3, #1
 8006782:	e242      	b.n	8006c0a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800678c:	d106      	bne.n	800679c <HAL_RCC_OscConfig+0x74>
 800678e:	4b76      	ldr	r3, [pc, #472]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	4a75      	ldr	r2, [pc, #468]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 8006794:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006798:	6013      	str	r3, [r2, #0]
 800679a:	e01d      	b.n	80067d8 <HAL_RCC_OscConfig+0xb0>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	685b      	ldr	r3, [r3, #4]
 80067a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80067a4:	d10c      	bne.n	80067c0 <HAL_RCC_OscConfig+0x98>
 80067a6:	4b70      	ldr	r3, [pc, #448]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a6f      	ldr	r2, [pc, #444]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 80067ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80067b0:	6013      	str	r3, [r2, #0]
 80067b2:	4b6d      	ldr	r3, [pc, #436]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a6c      	ldr	r2, [pc, #432]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 80067b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067bc:	6013      	str	r3, [r2, #0]
 80067be:	e00b      	b.n	80067d8 <HAL_RCC_OscConfig+0xb0>
 80067c0:	4b69      	ldr	r3, [pc, #420]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	4a68      	ldr	r2, [pc, #416]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 80067c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80067ca:	6013      	str	r3, [r2, #0]
 80067cc:	4b66      	ldr	r3, [pc, #408]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a65      	ldr	r2, [pc, #404]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 80067d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80067d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	685b      	ldr	r3, [r3, #4]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d013      	beq.n	8006808 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80067e0:	f7fe f85a 	bl	8004898 <HAL_GetTick>
 80067e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067e6:	e008      	b.n	80067fa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067e8:	f7fe f856 	bl	8004898 <HAL_GetTick>
 80067ec:	4602      	mov	r2, r0
 80067ee:	693b      	ldr	r3, [r7, #16]
 80067f0:	1ad3      	subs	r3, r2, r3
 80067f2:	2b64      	cmp	r3, #100	; 0x64
 80067f4:	d901      	bls.n	80067fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80067f6:	2303      	movs	r3, #3
 80067f8:	e207      	b.n	8006c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80067fa:	4b5b      	ldr	r3, [pc, #364]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006802:	2b00      	cmp	r3, #0
 8006804:	d0f0      	beq.n	80067e8 <HAL_RCC_OscConfig+0xc0>
 8006806:	e014      	b.n	8006832 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006808:	f7fe f846 	bl	8004898 <HAL_GetTick>
 800680c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800680e:	e008      	b.n	8006822 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006810:	f7fe f842 	bl	8004898 <HAL_GetTick>
 8006814:	4602      	mov	r2, r0
 8006816:	693b      	ldr	r3, [r7, #16]
 8006818:	1ad3      	subs	r3, r2, r3
 800681a:	2b64      	cmp	r3, #100	; 0x64
 800681c:	d901      	bls.n	8006822 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800681e:	2303      	movs	r3, #3
 8006820:	e1f3      	b.n	8006c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006822:	4b51      	ldr	r3, [pc, #324]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800682a:	2b00      	cmp	r3, #0
 800682c:	d1f0      	bne.n	8006810 <HAL_RCC_OscConfig+0xe8>
 800682e:	e000      	b.n	8006832 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	f003 0302 	and.w	r3, r3, #2
 800683a:	2b00      	cmp	r3, #0
 800683c:	d063      	beq.n	8006906 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800683e:	4b4a      	ldr	r3, [pc, #296]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	f003 030c 	and.w	r3, r3, #12
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00b      	beq.n	8006862 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800684a:	4b47      	ldr	r3, [pc, #284]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 800684c:	689b      	ldr	r3, [r3, #8]
 800684e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006852:	2b08      	cmp	r3, #8
 8006854:	d11c      	bne.n	8006890 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006856:	4b44      	ldr	r3, [pc, #272]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 8006858:	685b      	ldr	r3, [r3, #4]
 800685a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800685e:	2b00      	cmp	r3, #0
 8006860:	d116      	bne.n	8006890 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006862:	4b41      	ldr	r3, [pc, #260]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0302 	and.w	r3, r3, #2
 800686a:	2b00      	cmp	r3, #0
 800686c:	d005      	beq.n	800687a <HAL_RCC_OscConfig+0x152>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	68db      	ldr	r3, [r3, #12]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d001      	beq.n	800687a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e1c7      	b.n	8006c0a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800687a:	4b3b      	ldr	r3, [pc, #236]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	691b      	ldr	r3, [r3, #16]
 8006886:	00db      	lsls	r3, r3, #3
 8006888:	4937      	ldr	r1, [pc, #220]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 800688a:	4313      	orrs	r3, r2
 800688c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800688e:	e03a      	b.n	8006906 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d020      	beq.n	80068da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006898:	4b34      	ldr	r3, [pc, #208]	; (800696c <HAL_RCC_OscConfig+0x244>)
 800689a:	2201      	movs	r2, #1
 800689c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800689e:	f7fd fffb 	bl	8004898 <HAL_GetTick>
 80068a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068a4:	e008      	b.n	80068b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068a6:	f7fd fff7 	bl	8004898 <HAL_GetTick>
 80068aa:	4602      	mov	r2, r0
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	1ad3      	subs	r3, r2, r3
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d901      	bls.n	80068b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80068b4:	2303      	movs	r3, #3
 80068b6:	e1a8      	b.n	8006c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068b8:	4b2b      	ldr	r3, [pc, #172]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f003 0302 	and.w	r3, r3, #2
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d0f0      	beq.n	80068a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068c4:	4b28      	ldr	r3, [pc, #160]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	00db      	lsls	r3, r3, #3
 80068d2:	4925      	ldr	r1, [pc, #148]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 80068d4:	4313      	orrs	r3, r2
 80068d6:	600b      	str	r3, [r1, #0]
 80068d8:	e015      	b.n	8006906 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80068da:	4b24      	ldr	r3, [pc, #144]	; (800696c <HAL_RCC_OscConfig+0x244>)
 80068dc:	2200      	movs	r2, #0
 80068de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068e0:	f7fd ffda 	bl	8004898 <HAL_GetTick>
 80068e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068e6:	e008      	b.n	80068fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80068e8:	f7fd ffd6 	bl	8004898 <HAL_GetTick>
 80068ec:	4602      	mov	r2, r0
 80068ee:	693b      	ldr	r3, [r7, #16]
 80068f0:	1ad3      	subs	r3, r2, r3
 80068f2:	2b02      	cmp	r3, #2
 80068f4:	d901      	bls.n	80068fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80068f6:	2303      	movs	r3, #3
 80068f8:	e187      	b.n	8006c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80068fa:	4b1b      	ldr	r3, [pc, #108]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d1f0      	bne.n	80068e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f003 0308 	and.w	r3, r3, #8
 800690e:	2b00      	cmp	r3, #0
 8006910:	d036      	beq.n	8006980 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	695b      	ldr	r3, [r3, #20]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d016      	beq.n	8006948 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800691a:	4b15      	ldr	r3, [pc, #84]	; (8006970 <HAL_RCC_OscConfig+0x248>)
 800691c:	2201      	movs	r2, #1
 800691e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006920:	f7fd ffba 	bl	8004898 <HAL_GetTick>
 8006924:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006926:	e008      	b.n	800693a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006928:	f7fd ffb6 	bl	8004898 <HAL_GetTick>
 800692c:	4602      	mov	r2, r0
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	1ad3      	subs	r3, r2, r3
 8006932:	2b02      	cmp	r3, #2
 8006934:	d901      	bls.n	800693a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006936:	2303      	movs	r3, #3
 8006938:	e167      	b.n	8006c0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800693a:	4b0b      	ldr	r3, [pc, #44]	; (8006968 <HAL_RCC_OscConfig+0x240>)
 800693c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800693e:	f003 0302 	and.w	r3, r3, #2
 8006942:	2b00      	cmp	r3, #0
 8006944:	d0f0      	beq.n	8006928 <HAL_RCC_OscConfig+0x200>
 8006946:	e01b      	b.n	8006980 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006948:	4b09      	ldr	r3, [pc, #36]	; (8006970 <HAL_RCC_OscConfig+0x248>)
 800694a:	2200      	movs	r2, #0
 800694c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800694e:	f7fd ffa3 	bl	8004898 <HAL_GetTick>
 8006952:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006954:	e00e      	b.n	8006974 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006956:	f7fd ff9f 	bl	8004898 <HAL_GetTick>
 800695a:	4602      	mov	r2, r0
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	2b02      	cmp	r3, #2
 8006962:	d907      	bls.n	8006974 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e150      	b.n	8006c0a <HAL_RCC_OscConfig+0x4e2>
 8006968:	40023800 	.word	0x40023800
 800696c:	42470000 	.word	0x42470000
 8006970:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006974:	4b88      	ldr	r3, [pc, #544]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006976:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006978:	f003 0302 	and.w	r3, r3, #2
 800697c:	2b00      	cmp	r3, #0
 800697e:	d1ea      	bne.n	8006956 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f003 0304 	and.w	r3, r3, #4
 8006988:	2b00      	cmp	r3, #0
 800698a:	f000 8097 	beq.w	8006abc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800698e:	2300      	movs	r3, #0
 8006990:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006992:	4b81      	ldr	r3, [pc, #516]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10f      	bne.n	80069be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800699e:	2300      	movs	r3, #0
 80069a0:	60bb      	str	r3, [r7, #8]
 80069a2:	4b7d      	ldr	r3, [pc, #500]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 80069a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a6:	4a7c      	ldr	r2, [pc, #496]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 80069a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80069ac:	6413      	str	r3, [r2, #64]	; 0x40
 80069ae:	4b7a      	ldr	r3, [pc, #488]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 80069b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069b6:	60bb      	str	r3, [r7, #8]
 80069b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80069ba:	2301      	movs	r3, #1
 80069bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069be:	4b77      	ldr	r3, [pc, #476]	; (8006b9c <HAL_RCC_OscConfig+0x474>)
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d118      	bne.n	80069fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80069ca:	4b74      	ldr	r3, [pc, #464]	; (8006b9c <HAL_RCC_OscConfig+0x474>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a73      	ldr	r2, [pc, #460]	; (8006b9c <HAL_RCC_OscConfig+0x474>)
 80069d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80069d6:	f7fd ff5f 	bl	8004898 <HAL_GetTick>
 80069da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069dc:	e008      	b.n	80069f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80069de:	f7fd ff5b 	bl	8004898 <HAL_GetTick>
 80069e2:	4602      	mov	r2, r0
 80069e4:	693b      	ldr	r3, [r7, #16]
 80069e6:	1ad3      	subs	r3, r2, r3
 80069e8:	2b02      	cmp	r3, #2
 80069ea:	d901      	bls.n	80069f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80069ec:	2303      	movs	r3, #3
 80069ee:	e10c      	b.n	8006c0a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80069f0:	4b6a      	ldr	r3, [pc, #424]	; (8006b9c <HAL_RCC_OscConfig+0x474>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d0f0      	beq.n	80069de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d106      	bne.n	8006a12 <HAL_RCC_OscConfig+0x2ea>
 8006a04:	4b64      	ldr	r3, [pc, #400]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006a06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a08:	4a63      	ldr	r2, [pc, #396]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006a0a:	f043 0301 	orr.w	r3, r3, #1
 8006a0e:	6713      	str	r3, [r2, #112]	; 0x70
 8006a10:	e01c      	b.n	8006a4c <HAL_RCC_OscConfig+0x324>
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	689b      	ldr	r3, [r3, #8]
 8006a16:	2b05      	cmp	r3, #5
 8006a18:	d10c      	bne.n	8006a34 <HAL_RCC_OscConfig+0x30c>
 8006a1a:	4b5f      	ldr	r3, [pc, #380]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006a1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a1e:	4a5e      	ldr	r2, [pc, #376]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006a20:	f043 0304 	orr.w	r3, r3, #4
 8006a24:	6713      	str	r3, [r2, #112]	; 0x70
 8006a26:	4b5c      	ldr	r3, [pc, #368]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a2a:	4a5b      	ldr	r2, [pc, #364]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006a2c:	f043 0301 	orr.w	r3, r3, #1
 8006a30:	6713      	str	r3, [r2, #112]	; 0x70
 8006a32:	e00b      	b.n	8006a4c <HAL_RCC_OscConfig+0x324>
 8006a34:	4b58      	ldr	r3, [pc, #352]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a38:	4a57      	ldr	r2, [pc, #348]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006a3a:	f023 0301 	bic.w	r3, r3, #1
 8006a3e:	6713      	str	r3, [r2, #112]	; 0x70
 8006a40:	4b55      	ldr	r3, [pc, #340]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006a42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a44:	4a54      	ldr	r2, [pc, #336]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006a46:	f023 0304 	bic.w	r3, r3, #4
 8006a4a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	689b      	ldr	r3, [r3, #8]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d015      	beq.n	8006a80 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a54:	f7fd ff20 	bl	8004898 <HAL_GetTick>
 8006a58:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a5a:	e00a      	b.n	8006a72 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a5c:	f7fd ff1c 	bl	8004898 <HAL_GetTick>
 8006a60:	4602      	mov	r2, r0
 8006a62:	693b      	ldr	r3, [r7, #16]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d901      	bls.n	8006a72 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006a6e:	2303      	movs	r3, #3
 8006a70:	e0cb      	b.n	8006c0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a72:	4b49      	ldr	r3, [pc, #292]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a76:	f003 0302 	and.w	r3, r3, #2
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d0ee      	beq.n	8006a5c <HAL_RCC_OscConfig+0x334>
 8006a7e:	e014      	b.n	8006aaa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a80:	f7fd ff0a 	bl	8004898 <HAL_GetTick>
 8006a84:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a86:	e00a      	b.n	8006a9e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a88:	f7fd ff06 	bl	8004898 <HAL_GetTick>
 8006a8c:	4602      	mov	r2, r0
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d901      	bls.n	8006a9e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006a9a:	2303      	movs	r3, #3
 8006a9c:	e0b5      	b.n	8006c0a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a9e:	4b3e      	ldr	r3, [pc, #248]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa2:	f003 0302 	and.w	r3, r3, #2
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1ee      	bne.n	8006a88 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006aaa:	7dfb      	ldrb	r3, [r7, #23]
 8006aac:	2b01      	cmp	r3, #1
 8006aae:	d105      	bne.n	8006abc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ab0:	4b39      	ldr	r3, [pc, #228]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ab4:	4a38      	ldr	r2, [pc, #224]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006ab6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006aba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	699b      	ldr	r3, [r3, #24]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	f000 80a1 	beq.w	8006c08 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006ac6:	4b34      	ldr	r3, [pc, #208]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006ac8:	689b      	ldr	r3, [r3, #8]
 8006aca:	f003 030c 	and.w	r3, r3, #12
 8006ace:	2b08      	cmp	r3, #8
 8006ad0:	d05c      	beq.n	8006b8c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	2b02      	cmp	r3, #2
 8006ad8:	d141      	bne.n	8006b5e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ada:	4b31      	ldr	r3, [pc, #196]	; (8006ba0 <HAL_RCC_OscConfig+0x478>)
 8006adc:	2200      	movs	r2, #0
 8006ade:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ae0:	f7fd feda 	bl	8004898 <HAL_GetTick>
 8006ae4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006ae6:	e008      	b.n	8006afa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ae8:	f7fd fed6 	bl	8004898 <HAL_GetTick>
 8006aec:	4602      	mov	r2, r0
 8006aee:	693b      	ldr	r3, [r7, #16]
 8006af0:	1ad3      	subs	r3, r2, r3
 8006af2:	2b02      	cmp	r3, #2
 8006af4:	d901      	bls.n	8006afa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	e087      	b.n	8006c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006afa:	4b27      	ldr	r3, [pc, #156]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d1f0      	bne.n	8006ae8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	69da      	ldr	r2, [r3, #28]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6a1b      	ldr	r3, [r3, #32]
 8006b0e:	431a      	orrs	r2, r3
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b14:	019b      	lsls	r3, r3, #6
 8006b16:	431a      	orrs	r2, r3
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b1c:	085b      	lsrs	r3, r3, #1
 8006b1e:	3b01      	subs	r3, #1
 8006b20:	041b      	lsls	r3, r3, #16
 8006b22:	431a      	orrs	r2, r3
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b28:	061b      	lsls	r3, r3, #24
 8006b2a:	491b      	ldr	r1, [pc, #108]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b30:	4b1b      	ldr	r3, [pc, #108]	; (8006ba0 <HAL_RCC_OscConfig+0x478>)
 8006b32:	2201      	movs	r2, #1
 8006b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b36:	f7fd feaf 	bl	8004898 <HAL_GetTick>
 8006b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b3c:	e008      	b.n	8006b50 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b3e:	f7fd feab 	bl	8004898 <HAL_GetTick>
 8006b42:	4602      	mov	r2, r0
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	1ad3      	subs	r3, r2, r3
 8006b48:	2b02      	cmp	r3, #2
 8006b4a:	d901      	bls.n	8006b50 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	e05c      	b.n	8006c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b50:	4b11      	ldr	r3, [pc, #68]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	d0f0      	beq.n	8006b3e <HAL_RCC_OscConfig+0x416>
 8006b5c:	e054      	b.n	8006c08 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b5e:	4b10      	ldr	r3, [pc, #64]	; (8006ba0 <HAL_RCC_OscConfig+0x478>)
 8006b60:	2200      	movs	r2, #0
 8006b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b64:	f7fd fe98 	bl	8004898 <HAL_GetTick>
 8006b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b6a:	e008      	b.n	8006b7e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b6c:	f7fd fe94 	bl	8004898 <HAL_GetTick>
 8006b70:	4602      	mov	r2, r0
 8006b72:	693b      	ldr	r3, [r7, #16]
 8006b74:	1ad3      	subs	r3, r2, r3
 8006b76:	2b02      	cmp	r3, #2
 8006b78:	d901      	bls.n	8006b7e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006b7a:	2303      	movs	r3, #3
 8006b7c:	e045      	b.n	8006c0a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b7e:	4b06      	ldr	r3, [pc, #24]	; (8006b98 <HAL_RCC_OscConfig+0x470>)
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d1f0      	bne.n	8006b6c <HAL_RCC_OscConfig+0x444>
 8006b8a:	e03d      	b.n	8006c08 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	2b01      	cmp	r3, #1
 8006b92:	d107      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006b94:	2301      	movs	r3, #1
 8006b96:	e038      	b.n	8006c0a <HAL_RCC_OscConfig+0x4e2>
 8006b98:	40023800 	.word	0x40023800
 8006b9c:	40007000 	.word	0x40007000
 8006ba0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006ba4:	4b1b      	ldr	r3, [pc, #108]	; (8006c14 <HAL_RCC_OscConfig+0x4ec>)
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	699b      	ldr	r3, [r3, #24]
 8006bae:	2b01      	cmp	r3, #1
 8006bb0:	d028      	beq.n	8006c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006bbc:	429a      	cmp	r2, r3
 8006bbe:	d121      	bne.n	8006c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d11a      	bne.n	8006c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bce:	68fa      	ldr	r2, [r7, #12]
 8006bd0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006bd4:	4013      	ands	r3, r2
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006bda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d111      	bne.n	8006c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bea:	085b      	lsrs	r3, r3, #1
 8006bec:	3b01      	subs	r3, #1
 8006bee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d107      	bne.n	8006c04 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d001      	beq.n	8006c08 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e000      	b.n	8006c0a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3718      	adds	r7, #24
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
 8006c12:	bf00      	nop
 8006c14:	40023800 	.word	0x40023800

08006c18 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d101      	bne.n	8006c2c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c28:	2301      	movs	r3, #1
 8006c2a:	e0cc      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c2c:	4b68      	ldr	r3, [pc, #416]	; (8006dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f003 0307 	and.w	r3, r3, #7
 8006c34:	683a      	ldr	r2, [r7, #0]
 8006c36:	429a      	cmp	r2, r3
 8006c38:	d90c      	bls.n	8006c54 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c3a:	4b65      	ldr	r3, [pc, #404]	; (8006dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006c3c:	683a      	ldr	r2, [r7, #0]
 8006c3e:	b2d2      	uxtb	r2, r2
 8006c40:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c42:	4b63      	ldr	r3, [pc, #396]	; (8006dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f003 0307 	and.w	r3, r3, #7
 8006c4a:	683a      	ldr	r2, [r7, #0]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	d001      	beq.n	8006c54 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006c50:	2301      	movs	r3, #1
 8006c52:	e0b8      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	f003 0302 	and.w	r3, r3, #2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d020      	beq.n	8006ca2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f003 0304 	and.w	r3, r3, #4
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d005      	beq.n	8006c78 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c6c:	4b59      	ldr	r3, [pc, #356]	; (8006dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c6e:	689b      	ldr	r3, [r3, #8]
 8006c70:	4a58      	ldr	r2, [pc, #352]	; (8006dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c72:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c76:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f003 0308 	and.w	r3, r3, #8
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d005      	beq.n	8006c90 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c84:	4b53      	ldr	r3, [pc, #332]	; (8006dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c86:	689b      	ldr	r3, [r3, #8]
 8006c88:	4a52      	ldr	r2, [pc, #328]	; (8006dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c8a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c8e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c90:	4b50      	ldr	r3, [pc, #320]	; (8006dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	689b      	ldr	r3, [r3, #8]
 8006c9c:	494d      	ldr	r1, [pc, #308]	; (8006dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f003 0301 	and.w	r3, r3, #1
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d044      	beq.n	8006d38 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	685b      	ldr	r3, [r3, #4]
 8006cb2:	2b01      	cmp	r3, #1
 8006cb4:	d107      	bne.n	8006cc6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006cb6:	4b47      	ldr	r3, [pc, #284]	; (8006dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d119      	bne.n	8006cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cc2:	2301      	movs	r3, #1
 8006cc4:	e07f      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	2b02      	cmp	r3, #2
 8006ccc:	d003      	beq.n	8006cd6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006cd2:	2b03      	cmp	r3, #3
 8006cd4:	d107      	bne.n	8006ce6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cd6:	4b3f      	ldr	r3, [pc, #252]	; (8006dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d109      	bne.n	8006cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	e06f      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ce6:	4b3b      	ldr	r3, [pc, #236]	; (8006dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f003 0302 	and.w	r3, r3, #2
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d101      	bne.n	8006cf6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006cf2:	2301      	movs	r3, #1
 8006cf4:	e067      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006cf6:	4b37      	ldr	r3, [pc, #220]	; (8006dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006cf8:	689b      	ldr	r3, [r3, #8]
 8006cfa:	f023 0203 	bic.w	r2, r3, #3
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	4934      	ldr	r1, [pc, #208]	; (8006dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d04:	4313      	orrs	r3, r2
 8006d06:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d08:	f7fd fdc6 	bl	8004898 <HAL_GetTick>
 8006d0c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d0e:	e00a      	b.n	8006d26 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d10:	f7fd fdc2 	bl	8004898 <HAL_GetTick>
 8006d14:	4602      	mov	r2, r0
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d901      	bls.n	8006d26 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d22:	2303      	movs	r3, #3
 8006d24:	e04f      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d26:	4b2b      	ldr	r3, [pc, #172]	; (8006dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	f003 020c 	and.w	r2, r3, #12
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	685b      	ldr	r3, [r3, #4]
 8006d32:	009b      	lsls	r3, r3, #2
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d1eb      	bne.n	8006d10 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d38:	4b25      	ldr	r3, [pc, #148]	; (8006dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0307 	and.w	r3, r3, #7
 8006d40:	683a      	ldr	r2, [r7, #0]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d20c      	bcs.n	8006d60 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d46:	4b22      	ldr	r3, [pc, #136]	; (8006dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006d48:	683a      	ldr	r2, [r7, #0]
 8006d4a:	b2d2      	uxtb	r2, r2
 8006d4c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d4e:	4b20      	ldr	r3, [pc, #128]	; (8006dd0 <HAL_RCC_ClockConfig+0x1b8>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f003 0307 	and.w	r3, r3, #7
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	429a      	cmp	r2, r3
 8006d5a:	d001      	beq.n	8006d60 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006d5c:	2301      	movs	r3, #1
 8006d5e:	e032      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0304 	and.w	r3, r3, #4
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d008      	beq.n	8006d7e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d6c:	4b19      	ldr	r3, [pc, #100]	; (8006dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	4916      	ldr	r1, [pc, #88]	; (8006dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d7a:	4313      	orrs	r3, r2
 8006d7c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0308 	and.w	r3, r3, #8
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d009      	beq.n	8006d9e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d8a:	4b12      	ldr	r3, [pc, #72]	; (8006dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	691b      	ldr	r3, [r3, #16]
 8006d96:	00db      	lsls	r3, r3, #3
 8006d98:	490e      	ldr	r1, [pc, #56]	; (8006dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d9e:	f000 f821 	bl	8006de4 <HAL_RCC_GetSysClockFreq>
 8006da2:	4602      	mov	r2, r0
 8006da4:	4b0b      	ldr	r3, [pc, #44]	; (8006dd4 <HAL_RCC_ClockConfig+0x1bc>)
 8006da6:	689b      	ldr	r3, [r3, #8]
 8006da8:	091b      	lsrs	r3, r3, #4
 8006daa:	f003 030f 	and.w	r3, r3, #15
 8006dae:	490a      	ldr	r1, [pc, #40]	; (8006dd8 <HAL_RCC_ClockConfig+0x1c0>)
 8006db0:	5ccb      	ldrb	r3, [r1, r3]
 8006db2:	fa22 f303 	lsr.w	r3, r2, r3
 8006db6:	4a09      	ldr	r2, [pc, #36]	; (8006ddc <HAL_RCC_ClockConfig+0x1c4>)
 8006db8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006dba:	4b09      	ldr	r3, [pc, #36]	; (8006de0 <HAL_RCC_ClockConfig+0x1c8>)
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7fd fd26 	bl	8004810 <HAL_InitTick>

  return HAL_OK;
 8006dc4:	2300      	movs	r3, #0
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3710      	adds	r7, #16
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	bd80      	pop	{r7, pc}
 8006dce:	bf00      	nop
 8006dd0:	40023c00 	.word	0x40023c00
 8006dd4:	40023800 	.word	0x40023800
 8006dd8:	08011730 	.word	0x08011730
 8006ddc:	20000018 	.word	0x20000018
 8006de0:	2000001c 	.word	0x2000001c

08006de4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006de4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006de8:	b090      	sub	sp, #64	; 0x40
 8006dea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006dec:	2300      	movs	r3, #0
 8006dee:	637b      	str	r3, [r7, #52]	; 0x34
 8006df0:	2300      	movs	r3, #0
 8006df2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006df4:	2300      	movs	r3, #0
 8006df6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006dfc:	4b59      	ldr	r3, [pc, #356]	; (8006f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8006dfe:	689b      	ldr	r3, [r3, #8]
 8006e00:	f003 030c 	and.w	r3, r3, #12
 8006e04:	2b08      	cmp	r3, #8
 8006e06:	d00d      	beq.n	8006e24 <HAL_RCC_GetSysClockFreq+0x40>
 8006e08:	2b08      	cmp	r3, #8
 8006e0a:	f200 80a1 	bhi.w	8006f50 <HAL_RCC_GetSysClockFreq+0x16c>
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d002      	beq.n	8006e18 <HAL_RCC_GetSysClockFreq+0x34>
 8006e12:	2b04      	cmp	r3, #4
 8006e14:	d003      	beq.n	8006e1e <HAL_RCC_GetSysClockFreq+0x3a>
 8006e16:	e09b      	b.n	8006f50 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e18:	4b53      	ldr	r3, [pc, #332]	; (8006f68 <HAL_RCC_GetSysClockFreq+0x184>)
 8006e1a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006e1c:	e09b      	b.n	8006f56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e1e:	4b53      	ldr	r3, [pc, #332]	; (8006f6c <HAL_RCC_GetSysClockFreq+0x188>)
 8006e20:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006e22:	e098      	b.n	8006f56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e24:	4b4f      	ldr	r3, [pc, #316]	; (8006f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e2c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e2e:	4b4d      	ldr	r3, [pc, #308]	; (8006f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e30:	685b      	ldr	r3, [r3, #4]
 8006e32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d028      	beq.n	8006e8c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e3a:	4b4a      	ldr	r3, [pc, #296]	; (8006f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	099b      	lsrs	r3, r3, #6
 8006e40:	2200      	movs	r2, #0
 8006e42:	623b      	str	r3, [r7, #32]
 8006e44:	627a      	str	r2, [r7, #36]	; 0x24
 8006e46:	6a3b      	ldr	r3, [r7, #32]
 8006e48:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	4b47      	ldr	r3, [pc, #284]	; (8006f6c <HAL_RCC_GetSysClockFreq+0x188>)
 8006e50:	fb03 f201 	mul.w	r2, r3, r1
 8006e54:	2300      	movs	r3, #0
 8006e56:	fb00 f303 	mul.w	r3, r0, r3
 8006e5a:	4413      	add	r3, r2
 8006e5c:	4a43      	ldr	r2, [pc, #268]	; (8006f6c <HAL_RCC_GetSysClockFreq+0x188>)
 8006e5e:	fba0 1202 	umull	r1, r2, r0, r2
 8006e62:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e64:	460a      	mov	r2, r1
 8006e66:	62ba      	str	r2, [r7, #40]	; 0x28
 8006e68:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e6a:	4413      	add	r3, r2
 8006e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006e6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e70:	2200      	movs	r2, #0
 8006e72:	61bb      	str	r3, [r7, #24]
 8006e74:	61fa      	str	r2, [r7, #28]
 8006e76:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e7a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8006e7e:	f7f9 ff03 	bl	8000c88 <__aeabi_uldivmod>
 8006e82:	4602      	mov	r2, r0
 8006e84:	460b      	mov	r3, r1
 8006e86:	4613      	mov	r3, r2
 8006e88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e8a:	e053      	b.n	8006f34 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e8c:	4b35      	ldr	r3, [pc, #212]	; (8006f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	099b      	lsrs	r3, r3, #6
 8006e92:	2200      	movs	r2, #0
 8006e94:	613b      	str	r3, [r7, #16]
 8006e96:	617a      	str	r2, [r7, #20]
 8006e98:	693b      	ldr	r3, [r7, #16]
 8006e9a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006e9e:	f04f 0b00 	mov.w	fp, #0
 8006ea2:	4652      	mov	r2, sl
 8006ea4:	465b      	mov	r3, fp
 8006ea6:	f04f 0000 	mov.w	r0, #0
 8006eaa:	f04f 0100 	mov.w	r1, #0
 8006eae:	0159      	lsls	r1, r3, #5
 8006eb0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006eb4:	0150      	lsls	r0, r2, #5
 8006eb6:	4602      	mov	r2, r0
 8006eb8:	460b      	mov	r3, r1
 8006eba:	ebb2 080a 	subs.w	r8, r2, sl
 8006ebe:	eb63 090b 	sbc.w	r9, r3, fp
 8006ec2:	f04f 0200 	mov.w	r2, #0
 8006ec6:	f04f 0300 	mov.w	r3, #0
 8006eca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006ece:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006ed2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006ed6:	ebb2 0408 	subs.w	r4, r2, r8
 8006eda:	eb63 0509 	sbc.w	r5, r3, r9
 8006ede:	f04f 0200 	mov.w	r2, #0
 8006ee2:	f04f 0300 	mov.w	r3, #0
 8006ee6:	00eb      	lsls	r3, r5, #3
 8006ee8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006eec:	00e2      	lsls	r2, r4, #3
 8006eee:	4614      	mov	r4, r2
 8006ef0:	461d      	mov	r5, r3
 8006ef2:	eb14 030a 	adds.w	r3, r4, sl
 8006ef6:	603b      	str	r3, [r7, #0]
 8006ef8:	eb45 030b 	adc.w	r3, r5, fp
 8006efc:	607b      	str	r3, [r7, #4]
 8006efe:	f04f 0200 	mov.w	r2, #0
 8006f02:	f04f 0300 	mov.w	r3, #0
 8006f06:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006f0a:	4629      	mov	r1, r5
 8006f0c:	028b      	lsls	r3, r1, #10
 8006f0e:	4621      	mov	r1, r4
 8006f10:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006f14:	4621      	mov	r1, r4
 8006f16:	028a      	lsls	r2, r1, #10
 8006f18:	4610      	mov	r0, r2
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f1e:	2200      	movs	r2, #0
 8006f20:	60bb      	str	r3, [r7, #8]
 8006f22:	60fa      	str	r2, [r7, #12]
 8006f24:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f28:	f7f9 feae 	bl	8000c88 <__aeabi_uldivmod>
 8006f2c:	4602      	mov	r2, r0
 8006f2e:	460b      	mov	r3, r1
 8006f30:	4613      	mov	r3, r2
 8006f32:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f34:	4b0b      	ldr	r3, [pc, #44]	; (8006f64 <HAL_RCC_GetSysClockFreq+0x180>)
 8006f36:	685b      	ldr	r3, [r3, #4]
 8006f38:	0c1b      	lsrs	r3, r3, #16
 8006f3a:	f003 0303 	and.w	r3, r3, #3
 8006f3e:	3301      	adds	r3, #1
 8006f40:	005b      	lsls	r3, r3, #1
 8006f42:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006f44:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f48:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f4c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006f4e:	e002      	b.n	8006f56 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f50:	4b05      	ldr	r3, [pc, #20]	; (8006f68 <HAL_RCC_GetSysClockFreq+0x184>)
 8006f52:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006f54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3740      	adds	r7, #64	; 0x40
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006f62:	bf00      	nop
 8006f64:	40023800 	.word	0x40023800
 8006f68:	00f42400 	.word	0x00f42400
 8006f6c:	017d7840 	.word	0x017d7840

08006f70 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f70:	b480      	push	{r7}
 8006f72:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f74:	4b03      	ldr	r3, [pc, #12]	; (8006f84 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f76:	681b      	ldr	r3, [r3, #0]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	46bd      	mov	sp, r7
 8006f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	20000018 	.word	0x20000018

08006f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f88:	b580      	push	{r7, lr}
 8006f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006f8c:	f7ff fff0 	bl	8006f70 <HAL_RCC_GetHCLKFreq>
 8006f90:	4602      	mov	r2, r0
 8006f92:	4b05      	ldr	r3, [pc, #20]	; (8006fa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f94:	689b      	ldr	r3, [r3, #8]
 8006f96:	0a9b      	lsrs	r3, r3, #10
 8006f98:	f003 0307 	and.w	r3, r3, #7
 8006f9c:	4903      	ldr	r1, [pc, #12]	; (8006fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f9e:	5ccb      	ldrb	r3, [r1, r3]
 8006fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	bd80      	pop	{r7, pc}
 8006fa8:	40023800 	.word	0x40023800
 8006fac:	08011740 	.word	0x08011740

08006fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006fb4:	f7ff ffdc 	bl	8006f70 <HAL_RCC_GetHCLKFreq>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	4b05      	ldr	r3, [pc, #20]	; (8006fd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006fbc:	689b      	ldr	r3, [r3, #8]
 8006fbe:	0b5b      	lsrs	r3, r3, #13
 8006fc0:	f003 0307 	and.w	r3, r3, #7
 8006fc4:	4903      	ldr	r1, [pc, #12]	; (8006fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006fc6:	5ccb      	ldrb	r3, [r1, r3]
 8006fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006fcc:	4618      	mov	r0, r3
 8006fce:	bd80      	pop	{r7, pc}
 8006fd0:	40023800 	.word	0x40023800
 8006fd4:	08011740 	.word	0x08011740

08006fd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d101      	bne.n	8006fea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fe6:	2301      	movs	r3, #1
 8006fe8:	e041      	b.n	800706e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ff0:	b2db      	uxtb	r3, r3
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d106      	bne.n	8007004 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7fd f8c6 	bl	8004190 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	2202      	movs	r2, #2
 8007008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681a      	ldr	r2, [r3, #0]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	3304      	adds	r3, #4
 8007014:	4619      	mov	r1, r3
 8007016:	4610      	mov	r0, r2
 8007018:	f000 ff9e 	bl	8007f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2201      	movs	r2, #1
 8007028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2201      	movs	r2, #1
 8007038:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	2201      	movs	r2, #1
 8007040:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	2201      	movs	r2, #1
 8007048:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2201      	movs	r2, #1
 8007058:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2201      	movs	r2, #1
 8007060:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2201      	movs	r2, #1
 8007068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800706c:	2300      	movs	r3, #0
}
 800706e:	4618      	mov	r0, r3
 8007070:	3708      	adds	r7, #8
 8007072:	46bd      	mov	sp, r7
 8007074:	bd80      	pop	{r7, pc}

08007076 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007076:	b580      	push	{r7, lr}
 8007078:	b082      	sub	sp, #8
 800707a:	af00      	add	r7, sp, #0
 800707c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2b00      	cmp	r3, #0
 8007082:	d101      	bne.n	8007088 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007084:	2301      	movs	r3, #1
 8007086:	e041      	b.n	800710c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800708e:	b2db      	uxtb	r3, r3
 8007090:	2b00      	cmp	r3, #0
 8007092:	d106      	bne.n	80070a2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	2200      	movs	r2, #0
 8007098:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 f839 	bl	8007114 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2202      	movs	r2, #2
 80070a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681a      	ldr	r2, [r3, #0]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	3304      	adds	r3, #4
 80070b2:	4619      	mov	r1, r3
 80070b4:	4610      	mov	r0, r2
 80070b6:	f000 ff4f 	bl	8007f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2201      	movs	r2, #1
 80070ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2201      	movs	r2, #1
 80070d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2201      	movs	r2, #1
 80070de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2201      	movs	r2, #1
 80070e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2201      	movs	r2, #1
 80070ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	2201      	movs	r2, #1
 80070f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2201      	movs	r2, #1
 80070fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	2201      	movs	r2, #1
 8007106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800710a:	2300      	movs	r3, #0
}
 800710c:	4618      	mov	r0, r3
 800710e:	3708      	adds	r7, #8
 8007110:	46bd      	mov	sp, r7
 8007112:	bd80      	pop	{r7, pc}

08007114 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800711c:	bf00      	nop
 800711e:	370c      	adds	r7, #12
 8007120:	46bd      	mov	sp, r7
 8007122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007126:	4770      	bx	lr

08007128 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
 8007130:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d109      	bne.n	800714c <HAL_TIM_PWM_Start+0x24>
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800713e:	b2db      	uxtb	r3, r3
 8007140:	2b01      	cmp	r3, #1
 8007142:	bf14      	ite	ne
 8007144:	2301      	movne	r3, #1
 8007146:	2300      	moveq	r3, #0
 8007148:	b2db      	uxtb	r3, r3
 800714a:	e022      	b.n	8007192 <HAL_TIM_PWM_Start+0x6a>
 800714c:	683b      	ldr	r3, [r7, #0]
 800714e:	2b04      	cmp	r3, #4
 8007150:	d109      	bne.n	8007166 <HAL_TIM_PWM_Start+0x3e>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007158:	b2db      	uxtb	r3, r3
 800715a:	2b01      	cmp	r3, #1
 800715c:	bf14      	ite	ne
 800715e:	2301      	movne	r3, #1
 8007160:	2300      	moveq	r3, #0
 8007162:	b2db      	uxtb	r3, r3
 8007164:	e015      	b.n	8007192 <HAL_TIM_PWM_Start+0x6a>
 8007166:	683b      	ldr	r3, [r7, #0]
 8007168:	2b08      	cmp	r3, #8
 800716a:	d109      	bne.n	8007180 <HAL_TIM_PWM_Start+0x58>
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007172:	b2db      	uxtb	r3, r3
 8007174:	2b01      	cmp	r3, #1
 8007176:	bf14      	ite	ne
 8007178:	2301      	movne	r3, #1
 800717a:	2300      	moveq	r3, #0
 800717c:	b2db      	uxtb	r3, r3
 800717e:	e008      	b.n	8007192 <HAL_TIM_PWM_Start+0x6a>
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007186:	b2db      	uxtb	r3, r3
 8007188:	2b01      	cmp	r3, #1
 800718a:	bf14      	ite	ne
 800718c:	2301      	movne	r3, #1
 800718e:	2300      	moveq	r3, #0
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	d001      	beq.n	800719a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007196:	2301      	movs	r3, #1
 8007198:	e07c      	b.n	8007294 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800719a:	683b      	ldr	r3, [r7, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d104      	bne.n	80071aa <HAL_TIM_PWM_Start+0x82>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2202      	movs	r2, #2
 80071a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071a8:	e013      	b.n	80071d2 <HAL_TIM_PWM_Start+0xaa>
 80071aa:	683b      	ldr	r3, [r7, #0]
 80071ac:	2b04      	cmp	r3, #4
 80071ae:	d104      	bne.n	80071ba <HAL_TIM_PWM_Start+0x92>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2202      	movs	r2, #2
 80071b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80071b8:	e00b      	b.n	80071d2 <HAL_TIM_PWM_Start+0xaa>
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	2b08      	cmp	r3, #8
 80071be:	d104      	bne.n	80071ca <HAL_TIM_PWM_Start+0xa2>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2202      	movs	r2, #2
 80071c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80071c8:	e003      	b.n	80071d2 <HAL_TIM_PWM_Start+0xaa>
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2202      	movs	r2, #2
 80071ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	2201      	movs	r2, #1
 80071d8:	6839      	ldr	r1, [r7, #0]
 80071da:	4618      	mov	r0, r3
 80071dc:	f001 fad0 	bl	8008780 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	4a2d      	ldr	r2, [pc, #180]	; (800729c <HAL_TIM_PWM_Start+0x174>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d004      	beq.n	80071f4 <HAL_TIM_PWM_Start+0xcc>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	4a2c      	ldr	r2, [pc, #176]	; (80072a0 <HAL_TIM_PWM_Start+0x178>)
 80071f0:	4293      	cmp	r3, r2
 80071f2:	d101      	bne.n	80071f8 <HAL_TIM_PWM_Start+0xd0>
 80071f4:	2301      	movs	r3, #1
 80071f6:	e000      	b.n	80071fa <HAL_TIM_PWM_Start+0xd2>
 80071f8:	2300      	movs	r3, #0
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d007      	beq.n	800720e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800720c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	4a22      	ldr	r2, [pc, #136]	; (800729c <HAL_TIM_PWM_Start+0x174>)
 8007214:	4293      	cmp	r3, r2
 8007216:	d022      	beq.n	800725e <HAL_TIM_PWM_Start+0x136>
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007220:	d01d      	beq.n	800725e <HAL_TIM_PWM_Start+0x136>
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	4a1f      	ldr	r2, [pc, #124]	; (80072a4 <HAL_TIM_PWM_Start+0x17c>)
 8007228:	4293      	cmp	r3, r2
 800722a:	d018      	beq.n	800725e <HAL_TIM_PWM_Start+0x136>
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a1d      	ldr	r2, [pc, #116]	; (80072a8 <HAL_TIM_PWM_Start+0x180>)
 8007232:	4293      	cmp	r3, r2
 8007234:	d013      	beq.n	800725e <HAL_TIM_PWM_Start+0x136>
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a1c      	ldr	r2, [pc, #112]	; (80072ac <HAL_TIM_PWM_Start+0x184>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d00e      	beq.n	800725e <HAL_TIM_PWM_Start+0x136>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	4a16      	ldr	r2, [pc, #88]	; (80072a0 <HAL_TIM_PWM_Start+0x178>)
 8007246:	4293      	cmp	r3, r2
 8007248:	d009      	beq.n	800725e <HAL_TIM_PWM_Start+0x136>
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a18      	ldr	r2, [pc, #96]	; (80072b0 <HAL_TIM_PWM_Start+0x188>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d004      	beq.n	800725e <HAL_TIM_PWM_Start+0x136>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	4a16      	ldr	r2, [pc, #88]	; (80072b4 <HAL_TIM_PWM_Start+0x18c>)
 800725a:	4293      	cmp	r3, r2
 800725c:	d111      	bne.n	8007282 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	689b      	ldr	r3, [r3, #8]
 8007264:	f003 0307 	and.w	r3, r3, #7
 8007268:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	2b06      	cmp	r3, #6
 800726e:	d010      	beq.n	8007292 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f042 0201 	orr.w	r2, r2, #1
 800727e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007280:	e007      	b.n	8007292 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f042 0201 	orr.w	r2, r2, #1
 8007290:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007292:	2300      	movs	r3, #0
}
 8007294:	4618      	mov	r0, r3
 8007296:	3710      	adds	r7, #16
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}
 800729c:	40010000 	.word	0x40010000
 80072a0:	40010400 	.word	0x40010400
 80072a4:	40000400 	.word	0x40000400
 80072a8:	40000800 	.word	0x40000800
 80072ac:	40000c00 	.word	0x40000c00
 80072b0:	40014000 	.word	0x40014000
 80072b4:	40001800 	.word	0x40001800

080072b8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b082      	sub	sp, #8
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d101      	bne.n	80072ca <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e041      	b.n	800734e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072d0:	b2db      	uxtb	r3, r3
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d106      	bne.n	80072e4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f839 	bl	8007356 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2202      	movs	r2, #2
 80072e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	3304      	adds	r3, #4
 80072f4:	4619      	mov	r1, r3
 80072f6:	4610      	mov	r0, r2
 80072f8:	f000 fe2e 	bl	8007f58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072fc:	687b      	ldr	r3, [r7, #4]
 80072fe:	2201      	movs	r2, #1
 8007300:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2201      	movs	r2, #1
 8007308:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	2201      	movs	r2, #1
 8007320:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	2201      	movs	r2, #1
 8007338:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3708      	adds	r7, #8
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007356:	b480      	push	{r7}
 8007358:	b083      	sub	sp, #12
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800735e:	bf00      	nop
 8007360:	370c      	adds	r7, #12
 8007362:	46bd      	mov	sp, r7
 8007364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007368:	4770      	bx	lr
	...

0800736c <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007376:	2300      	movs	r3, #0
 8007378:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800737a:	683b      	ldr	r3, [r7, #0]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d104      	bne.n	800738a <HAL_TIM_IC_Start_IT+0x1e>
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007386:	b2db      	uxtb	r3, r3
 8007388:	e013      	b.n	80073b2 <HAL_TIM_IC_Start_IT+0x46>
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	2b04      	cmp	r3, #4
 800738e:	d104      	bne.n	800739a <HAL_TIM_IC_Start_IT+0x2e>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007396:	b2db      	uxtb	r3, r3
 8007398:	e00b      	b.n	80073b2 <HAL_TIM_IC_Start_IT+0x46>
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	2b08      	cmp	r3, #8
 800739e:	d104      	bne.n	80073aa <HAL_TIM_IC_Start_IT+0x3e>
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80073a6:	b2db      	uxtb	r3, r3
 80073a8:	e003      	b.n	80073b2 <HAL_TIM_IC_Start_IT+0x46>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073b0:	b2db      	uxtb	r3, r3
 80073b2:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d104      	bne.n	80073c4 <HAL_TIM_IC_Start_IT+0x58>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80073c0:	b2db      	uxtb	r3, r3
 80073c2:	e013      	b.n	80073ec <HAL_TIM_IC_Start_IT+0x80>
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	2b04      	cmp	r3, #4
 80073c8:	d104      	bne.n	80073d4 <HAL_TIM_IC_Start_IT+0x68>
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	e00b      	b.n	80073ec <HAL_TIM_IC_Start_IT+0x80>
 80073d4:	683b      	ldr	r3, [r7, #0]
 80073d6:	2b08      	cmp	r3, #8
 80073d8:	d104      	bne.n	80073e4 <HAL_TIM_IC_Start_IT+0x78>
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	e003      	b.n	80073ec <HAL_TIM_IC_Start_IT+0x80>
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80073ee:	7bbb      	ldrb	r3, [r7, #14]
 80073f0:	2b01      	cmp	r3, #1
 80073f2:	d102      	bne.n	80073fa <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80073f4:	7b7b      	ldrb	r3, [r7, #13]
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d001      	beq.n	80073fe <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	e0cc      	b.n	8007598 <HAL_TIM_IC_Start_IT+0x22c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d104      	bne.n	800740e <HAL_TIM_IC_Start_IT+0xa2>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2202      	movs	r2, #2
 8007408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800740c:	e013      	b.n	8007436 <HAL_TIM_IC_Start_IT+0xca>
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	2b04      	cmp	r3, #4
 8007412:	d104      	bne.n	800741e <HAL_TIM_IC_Start_IT+0xb2>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2202      	movs	r2, #2
 8007418:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800741c:	e00b      	b.n	8007436 <HAL_TIM_IC_Start_IT+0xca>
 800741e:	683b      	ldr	r3, [r7, #0]
 8007420:	2b08      	cmp	r3, #8
 8007422:	d104      	bne.n	800742e <HAL_TIM_IC_Start_IT+0xc2>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2202      	movs	r2, #2
 8007428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800742c:	e003      	b.n	8007436 <HAL_TIM_IC_Start_IT+0xca>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2202      	movs	r2, #2
 8007432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d104      	bne.n	8007446 <HAL_TIM_IC_Start_IT+0xda>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2202      	movs	r2, #2
 8007440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007444:	e013      	b.n	800746e <HAL_TIM_IC_Start_IT+0x102>
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	2b04      	cmp	r3, #4
 800744a:	d104      	bne.n	8007456 <HAL_TIM_IC_Start_IT+0xea>
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2202      	movs	r2, #2
 8007450:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007454:	e00b      	b.n	800746e <HAL_TIM_IC_Start_IT+0x102>
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	2b08      	cmp	r3, #8
 800745a:	d104      	bne.n	8007466 <HAL_TIM_IC_Start_IT+0xfa>
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2202      	movs	r2, #2
 8007460:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007464:	e003      	b.n	800746e <HAL_TIM_IC_Start_IT+0x102>
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2202      	movs	r2, #2
 800746a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800746e:	683b      	ldr	r3, [r7, #0]
 8007470:	2b0c      	cmp	r3, #12
 8007472:	d841      	bhi.n	80074f8 <HAL_TIM_IC_Start_IT+0x18c>
 8007474:	a201      	add	r2, pc, #4	; (adr r2, 800747c <HAL_TIM_IC_Start_IT+0x110>)
 8007476:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800747a:	bf00      	nop
 800747c:	080074b1 	.word	0x080074b1
 8007480:	080074f9 	.word	0x080074f9
 8007484:	080074f9 	.word	0x080074f9
 8007488:	080074f9 	.word	0x080074f9
 800748c:	080074c3 	.word	0x080074c3
 8007490:	080074f9 	.word	0x080074f9
 8007494:	080074f9 	.word	0x080074f9
 8007498:	080074f9 	.word	0x080074f9
 800749c:	080074d5 	.word	0x080074d5
 80074a0:	080074f9 	.word	0x080074f9
 80074a4:	080074f9 	.word	0x080074f9
 80074a8:	080074f9 	.word	0x080074f9
 80074ac:	080074e7 	.word	0x080074e7
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	68da      	ldr	r2, [r3, #12]
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f042 0202 	orr.w	r2, r2, #2
 80074be:	60da      	str	r2, [r3, #12]
      break;
 80074c0:	e01d      	b.n	80074fe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	68da      	ldr	r2, [r3, #12]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	f042 0204 	orr.w	r2, r2, #4
 80074d0:	60da      	str	r2, [r3, #12]
      break;
 80074d2:	e014      	b.n	80074fe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	68da      	ldr	r2, [r3, #12]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f042 0208 	orr.w	r2, r2, #8
 80074e2:	60da      	str	r2, [r3, #12]
      break;
 80074e4:	e00b      	b.n	80074fe <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68da      	ldr	r2, [r3, #12]
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f042 0210 	orr.w	r2, r2, #16
 80074f4:	60da      	str	r2, [r3, #12]
      break;
 80074f6:	e002      	b.n	80074fe <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	73fb      	strb	r3, [r7, #15]
      break;
 80074fc:	bf00      	nop
  }

  if (status == HAL_OK)
 80074fe:	7bfb      	ldrb	r3, [r7, #15]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d148      	bne.n	8007596 <HAL_TIM_IC_Start_IT+0x22a>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	2201      	movs	r2, #1
 800750a:	6839      	ldr	r1, [r7, #0]
 800750c:	4618      	mov	r0, r3
 800750e:	f001 f937 	bl	8008780 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a22      	ldr	r2, [pc, #136]	; (80075a0 <HAL_TIM_IC_Start_IT+0x234>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d022      	beq.n	8007562 <HAL_TIM_IC_Start_IT+0x1f6>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007524:	d01d      	beq.n	8007562 <HAL_TIM_IC_Start_IT+0x1f6>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	4a1e      	ldr	r2, [pc, #120]	; (80075a4 <HAL_TIM_IC_Start_IT+0x238>)
 800752c:	4293      	cmp	r3, r2
 800752e:	d018      	beq.n	8007562 <HAL_TIM_IC_Start_IT+0x1f6>
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	4a1c      	ldr	r2, [pc, #112]	; (80075a8 <HAL_TIM_IC_Start_IT+0x23c>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d013      	beq.n	8007562 <HAL_TIM_IC_Start_IT+0x1f6>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	681b      	ldr	r3, [r3, #0]
 800753e:	4a1b      	ldr	r2, [pc, #108]	; (80075ac <HAL_TIM_IC_Start_IT+0x240>)
 8007540:	4293      	cmp	r3, r2
 8007542:	d00e      	beq.n	8007562 <HAL_TIM_IC_Start_IT+0x1f6>
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	4a19      	ldr	r2, [pc, #100]	; (80075b0 <HAL_TIM_IC_Start_IT+0x244>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d009      	beq.n	8007562 <HAL_TIM_IC_Start_IT+0x1f6>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	4a18      	ldr	r2, [pc, #96]	; (80075b4 <HAL_TIM_IC_Start_IT+0x248>)
 8007554:	4293      	cmp	r3, r2
 8007556:	d004      	beq.n	8007562 <HAL_TIM_IC_Start_IT+0x1f6>
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	4a16      	ldr	r2, [pc, #88]	; (80075b8 <HAL_TIM_IC_Start_IT+0x24c>)
 800755e:	4293      	cmp	r3, r2
 8007560:	d111      	bne.n	8007586 <HAL_TIM_IC_Start_IT+0x21a>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	f003 0307 	and.w	r3, r3, #7
 800756c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	2b06      	cmp	r3, #6
 8007572:	d010      	beq.n	8007596 <HAL_TIM_IC_Start_IT+0x22a>
      {
        __HAL_TIM_ENABLE(htim);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	681a      	ldr	r2, [r3, #0]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	f042 0201 	orr.w	r2, r2, #1
 8007582:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007584:	e007      	b.n	8007596 <HAL_TIM_IC_Start_IT+0x22a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	681a      	ldr	r2, [r3, #0]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	f042 0201 	orr.w	r2, r2, #1
 8007594:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8007596:	7bfb      	ldrb	r3, [r7, #15]
}
 8007598:	4618      	mov	r0, r3
 800759a:	3710      	adds	r7, #16
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}
 80075a0:	40010000 	.word	0x40010000
 80075a4:	40000400 	.word	0x40000400
 80075a8:	40000800 	.word	0x40000800
 80075ac:	40000c00 	.word	0x40000c00
 80075b0:	40010400 	.word	0x40010400
 80075b4:	40014000 	.word	0x40014000
 80075b8:	40001800 	.word	0x40001800

080075bc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b086      	sub	sp, #24
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d101      	bne.n	80075d0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e097      	b.n	8007700 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075d6:	b2db      	uxtb	r3, r3
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d106      	bne.n	80075ea <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2200      	movs	r2, #0
 80075e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f7fc fe77 	bl	80042d8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2202      	movs	r2, #2
 80075ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	687a      	ldr	r2, [r7, #4]
 80075fa:	6812      	ldr	r2, [r2, #0]
 80075fc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007600:	f023 0307 	bic.w	r3, r3, #7
 8007604:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	3304      	adds	r3, #4
 800760e:	4619      	mov	r1, r3
 8007610:	4610      	mov	r0, r2
 8007612:	f000 fca1 	bl	8007f58 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	699b      	ldr	r3, [r3, #24]
 8007624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	6a1b      	ldr	r3, [r3, #32]
 800762c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	697a      	ldr	r2, [r7, #20]
 8007634:	4313      	orrs	r3, r2
 8007636:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007638:	693b      	ldr	r3, [r7, #16]
 800763a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800763e:	f023 0303 	bic.w	r3, r3, #3
 8007642:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	689a      	ldr	r2, [r3, #8]
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	699b      	ldr	r3, [r3, #24]
 800764c:	021b      	lsls	r3, r3, #8
 800764e:	4313      	orrs	r3, r2
 8007650:	693a      	ldr	r2, [r7, #16]
 8007652:	4313      	orrs	r3, r2
 8007654:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800765c:	f023 030c 	bic.w	r3, r3, #12
 8007660:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007662:	693b      	ldr	r3, [r7, #16]
 8007664:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007668:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800766c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	68da      	ldr	r2, [r3, #12]
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	69db      	ldr	r3, [r3, #28]
 8007676:	021b      	lsls	r3, r3, #8
 8007678:	4313      	orrs	r3, r2
 800767a:	693a      	ldr	r2, [r7, #16]
 800767c:	4313      	orrs	r3, r2
 800767e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	691b      	ldr	r3, [r3, #16]
 8007684:	011a      	lsls	r2, r3, #4
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	6a1b      	ldr	r3, [r3, #32]
 800768a:	031b      	lsls	r3, r3, #12
 800768c:	4313      	orrs	r3, r2
 800768e:	693a      	ldr	r2, [r7, #16]
 8007690:	4313      	orrs	r3, r2
 8007692:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800769a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80076a2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80076a4:	683b      	ldr	r3, [r7, #0]
 80076a6:	685a      	ldr	r2, [r3, #4]
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	695b      	ldr	r3, [r3, #20]
 80076ac:	011b      	lsls	r3, r3, #4
 80076ae:	4313      	orrs	r3, r2
 80076b0:	68fa      	ldr	r2, [r7, #12]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	697a      	ldr	r2, [r7, #20]
 80076bc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	693a      	ldr	r2, [r7, #16]
 80076c4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	68fa      	ldr	r2, [r7, #12]
 80076cc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2201      	movs	r2, #1
 80076da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2201      	movs	r2, #1
 80076e2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2201      	movs	r2, #1
 80076f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3718      	adds	r7, #24
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007718:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007720:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007728:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007730:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007732:	683b      	ldr	r3, [r7, #0]
 8007734:	2b00      	cmp	r3, #0
 8007736:	d110      	bne.n	800775a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007738:	7bfb      	ldrb	r3, [r7, #15]
 800773a:	2b01      	cmp	r3, #1
 800773c:	d102      	bne.n	8007744 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800773e:	7b7b      	ldrb	r3, [r7, #13]
 8007740:	2b01      	cmp	r3, #1
 8007742:	d001      	beq.n	8007748 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007744:	2301      	movs	r3, #1
 8007746:	e069      	b.n	800781c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2202      	movs	r2, #2
 800774c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2202      	movs	r2, #2
 8007754:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007758:	e031      	b.n	80077be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800775a:	683b      	ldr	r3, [r7, #0]
 800775c:	2b04      	cmp	r3, #4
 800775e:	d110      	bne.n	8007782 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007760:	7bbb      	ldrb	r3, [r7, #14]
 8007762:	2b01      	cmp	r3, #1
 8007764:	d102      	bne.n	800776c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007766:	7b3b      	ldrb	r3, [r7, #12]
 8007768:	2b01      	cmp	r3, #1
 800776a:	d001      	beq.n	8007770 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800776c:	2301      	movs	r3, #1
 800776e:	e055      	b.n	800781c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	2202      	movs	r2, #2
 8007774:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	2202      	movs	r2, #2
 800777c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007780:	e01d      	b.n	80077be <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007782:	7bfb      	ldrb	r3, [r7, #15]
 8007784:	2b01      	cmp	r3, #1
 8007786:	d108      	bne.n	800779a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007788:	7bbb      	ldrb	r3, [r7, #14]
 800778a:	2b01      	cmp	r3, #1
 800778c:	d105      	bne.n	800779a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800778e:	7b7b      	ldrb	r3, [r7, #13]
 8007790:	2b01      	cmp	r3, #1
 8007792:	d102      	bne.n	800779a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007794:	7b3b      	ldrb	r3, [r7, #12]
 8007796:	2b01      	cmp	r3, #1
 8007798:	d001      	beq.n	800779e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e03e      	b.n	800781c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	2202      	movs	r2, #2
 80077a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2202      	movs	r2, #2
 80077aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80077ae:	687b      	ldr	r3, [r7, #4]
 80077b0:	2202      	movs	r2, #2
 80077b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2202      	movs	r2, #2
 80077ba:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d003      	beq.n	80077cc <HAL_TIM_Encoder_Start+0xc4>
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	2b04      	cmp	r3, #4
 80077c8:	d008      	beq.n	80077dc <HAL_TIM_Encoder_Start+0xd4>
 80077ca:	e00f      	b.n	80077ec <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	2201      	movs	r2, #1
 80077d2:	2100      	movs	r1, #0
 80077d4:	4618      	mov	r0, r3
 80077d6:	f000 ffd3 	bl	8008780 <TIM_CCxChannelCmd>
      break;
 80077da:	e016      	b.n	800780a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	2201      	movs	r2, #1
 80077e2:	2104      	movs	r1, #4
 80077e4:	4618      	mov	r0, r3
 80077e6:	f000 ffcb 	bl	8008780 <TIM_CCxChannelCmd>
      break;
 80077ea:	e00e      	b.n	800780a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2201      	movs	r2, #1
 80077f2:	2100      	movs	r1, #0
 80077f4:	4618      	mov	r0, r3
 80077f6:	f000 ffc3 	bl	8008780 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	2201      	movs	r2, #1
 8007800:	2104      	movs	r1, #4
 8007802:	4618      	mov	r0, r3
 8007804:	f000 ffbc 	bl	8008780 <TIM_CCxChannelCmd>
      break;
 8007808:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	681a      	ldr	r2, [r3, #0]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f042 0201 	orr.w	r2, r2, #1
 8007818:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800781a:	2300      	movs	r3, #0
}
 800781c:	4618      	mov	r0, r3
 800781e:	3710      	adds	r7, #16
 8007820:	46bd      	mov	sp, r7
 8007822:	bd80      	pop	{r7, pc}

08007824 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b082      	sub	sp, #8
 8007828:	af00      	add	r7, sp, #0
 800782a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	691b      	ldr	r3, [r3, #16]
 8007832:	f003 0302 	and.w	r3, r3, #2
 8007836:	2b02      	cmp	r3, #2
 8007838:	d122      	bne.n	8007880 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	f003 0302 	and.w	r3, r3, #2
 8007844:	2b02      	cmp	r3, #2
 8007846:	d11b      	bne.n	8007880 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f06f 0202 	mvn.w	r2, #2
 8007850:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2201      	movs	r2, #1
 8007856:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	699b      	ldr	r3, [r3, #24]
 800785e:	f003 0303 	and.w	r3, r3, #3
 8007862:	2b00      	cmp	r3, #0
 8007864:	d003      	beq.n	800786e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f7fb f9da 	bl	8002c20 <HAL_TIM_IC_CaptureCallback>
 800786c:	e005      	b.n	800787a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	f000 fb54 	bl	8007f1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	f000 fb5b 	bl	8007f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	f003 0304 	and.w	r3, r3, #4
 800788a:	2b04      	cmp	r3, #4
 800788c:	d122      	bne.n	80078d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68db      	ldr	r3, [r3, #12]
 8007894:	f003 0304 	and.w	r3, r3, #4
 8007898:	2b04      	cmp	r3, #4
 800789a:	d11b      	bne.n	80078d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f06f 0204 	mvn.w	r2, #4
 80078a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2202      	movs	r2, #2
 80078aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	699b      	ldr	r3, [r3, #24]
 80078b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d003      	beq.n	80078c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f7fb f9b0 	bl	8002c20 <HAL_TIM_IC_CaptureCallback>
 80078c0:	e005      	b.n	80078ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f000 fb2a 	bl	8007f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078c8:	6878      	ldr	r0, [r7, #4]
 80078ca:	f000 fb31 	bl	8007f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	691b      	ldr	r3, [r3, #16]
 80078da:	f003 0308 	and.w	r3, r3, #8
 80078de:	2b08      	cmp	r3, #8
 80078e0:	d122      	bne.n	8007928 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	f003 0308 	and.w	r3, r3, #8
 80078ec:	2b08      	cmp	r3, #8
 80078ee:	d11b      	bne.n	8007928 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f06f 0208 	mvn.w	r2, #8
 80078f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2204      	movs	r2, #4
 80078fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	69db      	ldr	r3, [r3, #28]
 8007906:	f003 0303 	and.w	r3, r3, #3
 800790a:	2b00      	cmp	r3, #0
 800790c:	d003      	beq.n	8007916 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800790e:	6878      	ldr	r0, [r7, #4]
 8007910:	f7fb f986 	bl	8002c20 <HAL_TIM_IC_CaptureCallback>
 8007914:	e005      	b.n	8007922 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007916:	6878      	ldr	r0, [r7, #4]
 8007918:	f000 fb00 	bl	8007f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fb07 	bl	8007f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	f003 0310 	and.w	r3, r3, #16
 8007932:	2b10      	cmp	r3, #16
 8007934:	d122      	bne.n	800797c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	f003 0310 	and.w	r3, r3, #16
 8007940:	2b10      	cmp	r3, #16
 8007942:	d11b      	bne.n	800797c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f06f 0210 	mvn.w	r2, #16
 800794c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2208      	movs	r2, #8
 8007952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	69db      	ldr	r3, [r3, #28]
 800795a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800795e:	2b00      	cmp	r3, #0
 8007960:	d003      	beq.n	800796a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f7fb f95c 	bl	8002c20 <HAL_TIM_IC_CaptureCallback>
 8007968:	e005      	b.n	8007976 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800796a:	6878      	ldr	r0, [r7, #4]
 800796c:	f000 fad6 	bl	8007f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 fadd 	bl	8007f30 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	f003 0301 	and.w	r3, r3, #1
 8007986:	2b01      	cmp	r3, #1
 8007988:	d10e      	bne.n	80079a8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	f003 0301 	and.w	r3, r3, #1
 8007994:	2b01      	cmp	r3, #1
 8007996:	d107      	bne.n	80079a8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	f06f 0201 	mvn.w	r2, #1
 80079a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079a2:	6878      	ldr	r0, [r7, #4]
 80079a4:	f000 fab0 	bl	8007f08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079b2:	2b80      	cmp	r3, #128	; 0x80
 80079b4:	d10e      	bne.n	80079d4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079c0:	2b80      	cmp	r3, #128	; 0x80
 80079c2:	d107      	bne.n	80079d4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80079cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 ffd4 	bl	800897c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	691b      	ldr	r3, [r3, #16]
 80079da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079de:	2b40      	cmp	r3, #64	; 0x40
 80079e0:	d10e      	bne.n	8007a00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	68db      	ldr	r3, [r3, #12]
 80079e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079ec:	2b40      	cmp	r3, #64	; 0x40
 80079ee:	d107      	bne.n	8007a00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80079f8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80079fa:	6878      	ldr	r0, [r7, #4]
 80079fc:	f000 faa2 	bl	8007f44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	691b      	ldr	r3, [r3, #16]
 8007a06:	f003 0320 	and.w	r3, r3, #32
 8007a0a:	2b20      	cmp	r3, #32
 8007a0c:	d10e      	bne.n	8007a2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	68db      	ldr	r3, [r3, #12]
 8007a14:	f003 0320 	and.w	r3, r3, #32
 8007a18:	2b20      	cmp	r3, #32
 8007a1a:	d107      	bne.n	8007a2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	f06f 0220 	mvn.w	r2, #32
 8007a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a26:	6878      	ldr	r0, [r7, #4]
 8007a28:	f000 ff9e 	bl	8008968 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a2c:	bf00      	nop
 8007a2e:	3708      	adds	r7, #8
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007a34:	b580      	push	{r7, lr}
 8007a36:	b086      	sub	sp, #24
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	60f8      	str	r0, [r7, #12]
 8007a3c:	60b9      	str	r1, [r7, #8]
 8007a3e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007a40:	2300      	movs	r3, #0
 8007a42:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a4a:	2b01      	cmp	r3, #1
 8007a4c:	d101      	bne.n	8007a52 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007a4e:	2302      	movs	r3, #2
 8007a50:	e088      	b.n	8007b64 <HAL_TIM_IC_ConfigChannel+0x130>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2201      	movs	r2, #1
 8007a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d11b      	bne.n	8007a98 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	6818      	ldr	r0, [r3, #0]
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	6819      	ldr	r1, [r3, #0]
 8007a68:	68bb      	ldr	r3, [r7, #8]
 8007a6a:	685a      	ldr	r2, [r3, #4]
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	68db      	ldr	r3, [r3, #12]
 8007a70:	f000 fcc2 	bl	80083f8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	699a      	ldr	r2, [r3, #24]
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f022 020c 	bic.w	r2, r2, #12
 8007a82:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	6999      	ldr	r1, [r3, #24]
 8007a8a:	68bb      	ldr	r3, [r7, #8]
 8007a8c:	689a      	ldr	r2, [r3, #8]
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	430a      	orrs	r2, r1
 8007a94:	619a      	str	r2, [r3, #24]
 8007a96:	e060      	b.n	8007b5a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	2b04      	cmp	r3, #4
 8007a9c:	d11c      	bne.n	8007ad8 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	6818      	ldr	r0, [r3, #0]
 8007aa2:	68bb      	ldr	r3, [r7, #8]
 8007aa4:	6819      	ldr	r1, [r3, #0]
 8007aa6:	68bb      	ldr	r3, [r7, #8]
 8007aa8:	685a      	ldr	r2, [r3, #4]
 8007aaa:	68bb      	ldr	r3, [r7, #8]
 8007aac:	68db      	ldr	r3, [r3, #12]
 8007aae:	f000 fd46 	bl	800853e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	699a      	ldr	r2, [r3, #24]
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	681b      	ldr	r3, [r3, #0]
 8007abc:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007ac0:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	6999      	ldr	r1, [r3, #24]
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	689b      	ldr	r3, [r3, #8]
 8007acc:	021a      	lsls	r2, r3, #8
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	430a      	orrs	r2, r1
 8007ad4:	619a      	str	r2, [r3, #24]
 8007ad6:	e040      	b.n	8007b5a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2b08      	cmp	r3, #8
 8007adc:	d11b      	bne.n	8007b16 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	6818      	ldr	r0, [r3, #0]
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	6819      	ldr	r1, [r3, #0]
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	685a      	ldr	r2, [r3, #4]
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	f000 fd93 	bl	8008618 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	69da      	ldr	r2, [r3, #28]
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f022 020c 	bic.w	r2, r2, #12
 8007b00:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	69d9      	ldr	r1, [r3, #28]
 8007b08:	68bb      	ldr	r3, [r7, #8]
 8007b0a:	689a      	ldr	r2, [r3, #8]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	430a      	orrs	r2, r1
 8007b12:	61da      	str	r2, [r3, #28]
 8007b14:	e021      	b.n	8007b5a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2b0c      	cmp	r3, #12
 8007b1a:	d11c      	bne.n	8007b56 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	6818      	ldr	r0, [r3, #0]
 8007b20:	68bb      	ldr	r3, [r7, #8]
 8007b22:	6819      	ldr	r1, [r3, #0]
 8007b24:	68bb      	ldr	r3, [r7, #8]
 8007b26:	685a      	ldr	r2, [r3, #4]
 8007b28:	68bb      	ldr	r3, [r7, #8]
 8007b2a:	68db      	ldr	r3, [r3, #12]
 8007b2c:	f000 fdb0 	bl	8008690 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	69da      	ldr	r2, [r3, #28]
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007b3e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	69d9      	ldr	r1, [r3, #28]
 8007b46:	68bb      	ldr	r3, [r7, #8]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	021a      	lsls	r2, r3, #8
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	430a      	orrs	r2, r1
 8007b52:	61da      	str	r2, [r3, #28]
 8007b54:	e001      	b.n	8007b5a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007b56:	2301      	movs	r3, #1
 8007b58:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b62:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b64:	4618      	mov	r0, r3
 8007b66:	3718      	adds	r7, #24
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	bd80      	pop	{r7, pc}

08007b6c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b086      	sub	sp, #24
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	60f8      	str	r0, [r7, #12]
 8007b74:	60b9      	str	r1, [r7, #8]
 8007b76:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007b78:	2300      	movs	r3, #0
 8007b7a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d101      	bne.n	8007b8a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007b86:	2302      	movs	r3, #2
 8007b88:	e0ae      	b.n	8007ce8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2b0c      	cmp	r3, #12
 8007b96:	f200 809f 	bhi.w	8007cd8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007b9a:	a201      	add	r2, pc, #4	; (adr r2, 8007ba0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007b9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ba0:	08007bd5 	.word	0x08007bd5
 8007ba4:	08007cd9 	.word	0x08007cd9
 8007ba8:	08007cd9 	.word	0x08007cd9
 8007bac:	08007cd9 	.word	0x08007cd9
 8007bb0:	08007c15 	.word	0x08007c15
 8007bb4:	08007cd9 	.word	0x08007cd9
 8007bb8:	08007cd9 	.word	0x08007cd9
 8007bbc:	08007cd9 	.word	0x08007cd9
 8007bc0:	08007c57 	.word	0x08007c57
 8007bc4:	08007cd9 	.word	0x08007cd9
 8007bc8:	08007cd9 	.word	0x08007cd9
 8007bcc:	08007cd9 	.word	0x08007cd9
 8007bd0:	08007c97 	.word	0x08007c97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	68b9      	ldr	r1, [r7, #8]
 8007bda:	4618      	mov	r0, r3
 8007bdc:	f000 fa5c 	bl	8008098 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	699a      	ldr	r2, [r3, #24]
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	f042 0208 	orr.w	r2, r2, #8
 8007bee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	699a      	ldr	r2, [r3, #24]
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f022 0204 	bic.w	r2, r2, #4
 8007bfe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	6999      	ldr	r1, [r3, #24]
 8007c06:	68bb      	ldr	r3, [r7, #8]
 8007c08:	691a      	ldr	r2, [r3, #16]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	430a      	orrs	r2, r1
 8007c10:	619a      	str	r2, [r3, #24]
      break;
 8007c12:	e064      	b.n	8007cde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	68b9      	ldr	r1, [r7, #8]
 8007c1a:	4618      	mov	r0, r3
 8007c1c:	f000 faac 	bl	8008178 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	699a      	ldr	r2, [r3, #24]
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	699a      	ldr	r2, [r3, #24]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	6999      	ldr	r1, [r3, #24]
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	021a      	lsls	r2, r3, #8
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	430a      	orrs	r2, r1
 8007c52:	619a      	str	r2, [r3, #24]
      break;
 8007c54:	e043      	b.n	8007cde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	68b9      	ldr	r1, [r7, #8]
 8007c5c:	4618      	mov	r0, r3
 8007c5e:	f000 fb01 	bl	8008264 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	69da      	ldr	r2, [r3, #28]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	f042 0208 	orr.w	r2, r2, #8
 8007c70:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	69da      	ldr	r2, [r3, #28]
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f022 0204 	bic.w	r2, r2, #4
 8007c80:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	69d9      	ldr	r1, [r3, #28]
 8007c88:	68bb      	ldr	r3, [r7, #8]
 8007c8a:	691a      	ldr	r2, [r3, #16]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	681b      	ldr	r3, [r3, #0]
 8007c90:	430a      	orrs	r2, r1
 8007c92:	61da      	str	r2, [r3, #28]
      break;
 8007c94:	e023      	b.n	8007cde <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68b9      	ldr	r1, [r7, #8]
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f000 fb55 	bl	800834c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	681b      	ldr	r3, [r3, #0]
 8007ca6:	69da      	ldr	r2, [r3, #28]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	681b      	ldr	r3, [r3, #0]
 8007cac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007cb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	69da      	ldr	r2, [r3, #28]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007cc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	69d9      	ldr	r1, [r3, #28]
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	691b      	ldr	r3, [r3, #16]
 8007ccc:	021a      	lsls	r2, r3, #8
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	430a      	orrs	r2, r1
 8007cd4:	61da      	str	r2, [r3, #28]
      break;
 8007cd6:	e002      	b.n	8007cde <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	75fb      	strb	r3, [r7, #23]
      break;
 8007cdc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2200      	movs	r2, #0
 8007ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ce6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3718      	adds	r7, #24
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}

08007cf0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b084      	sub	sp, #16
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
 8007cf8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d101      	bne.n	8007d0c <HAL_TIM_ConfigClockSource+0x1c>
 8007d08:	2302      	movs	r3, #2
 8007d0a:	e0b4      	b.n	8007e76 <HAL_TIM_ConfigClockSource+0x186>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2202      	movs	r2, #2
 8007d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	689b      	ldr	r3, [r3, #8]
 8007d22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007d2a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007d32:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	68ba      	ldr	r2, [r7, #8]
 8007d3a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007d3c:	683b      	ldr	r3, [r7, #0]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d44:	d03e      	beq.n	8007dc4 <HAL_TIM_ConfigClockSource+0xd4>
 8007d46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007d4a:	f200 8087 	bhi.w	8007e5c <HAL_TIM_ConfigClockSource+0x16c>
 8007d4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d52:	f000 8086 	beq.w	8007e62 <HAL_TIM_ConfigClockSource+0x172>
 8007d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007d5a:	d87f      	bhi.n	8007e5c <HAL_TIM_ConfigClockSource+0x16c>
 8007d5c:	2b70      	cmp	r3, #112	; 0x70
 8007d5e:	d01a      	beq.n	8007d96 <HAL_TIM_ConfigClockSource+0xa6>
 8007d60:	2b70      	cmp	r3, #112	; 0x70
 8007d62:	d87b      	bhi.n	8007e5c <HAL_TIM_ConfigClockSource+0x16c>
 8007d64:	2b60      	cmp	r3, #96	; 0x60
 8007d66:	d050      	beq.n	8007e0a <HAL_TIM_ConfigClockSource+0x11a>
 8007d68:	2b60      	cmp	r3, #96	; 0x60
 8007d6a:	d877      	bhi.n	8007e5c <HAL_TIM_ConfigClockSource+0x16c>
 8007d6c:	2b50      	cmp	r3, #80	; 0x50
 8007d6e:	d03c      	beq.n	8007dea <HAL_TIM_ConfigClockSource+0xfa>
 8007d70:	2b50      	cmp	r3, #80	; 0x50
 8007d72:	d873      	bhi.n	8007e5c <HAL_TIM_ConfigClockSource+0x16c>
 8007d74:	2b40      	cmp	r3, #64	; 0x40
 8007d76:	d058      	beq.n	8007e2a <HAL_TIM_ConfigClockSource+0x13a>
 8007d78:	2b40      	cmp	r3, #64	; 0x40
 8007d7a:	d86f      	bhi.n	8007e5c <HAL_TIM_ConfigClockSource+0x16c>
 8007d7c:	2b30      	cmp	r3, #48	; 0x30
 8007d7e:	d064      	beq.n	8007e4a <HAL_TIM_ConfigClockSource+0x15a>
 8007d80:	2b30      	cmp	r3, #48	; 0x30
 8007d82:	d86b      	bhi.n	8007e5c <HAL_TIM_ConfigClockSource+0x16c>
 8007d84:	2b20      	cmp	r3, #32
 8007d86:	d060      	beq.n	8007e4a <HAL_TIM_ConfigClockSource+0x15a>
 8007d88:	2b20      	cmp	r3, #32
 8007d8a:	d867      	bhi.n	8007e5c <HAL_TIM_ConfigClockSource+0x16c>
 8007d8c:	2b00      	cmp	r3, #0
 8007d8e:	d05c      	beq.n	8007e4a <HAL_TIM_ConfigClockSource+0x15a>
 8007d90:	2b10      	cmp	r3, #16
 8007d92:	d05a      	beq.n	8007e4a <HAL_TIM_ConfigClockSource+0x15a>
 8007d94:	e062      	b.n	8007e5c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6818      	ldr	r0, [r3, #0]
 8007d9a:	683b      	ldr	r3, [r7, #0]
 8007d9c:	6899      	ldr	r1, [r3, #8]
 8007d9e:	683b      	ldr	r3, [r7, #0]
 8007da0:	685a      	ldr	r2, [r3, #4]
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	f000 fccb 	bl	8008740 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	689b      	ldr	r3, [r3, #8]
 8007db0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007db8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	68ba      	ldr	r2, [r7, #8]
 8007dc0:	609a      	str	r2, [r3, #8]
      break;
 8007dc2:	e04f      	b.n	8007e64 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6818      	ldr	r0, [r3, #0]
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	6899      	ldr	r1, [r3, #8]
 8007dcc:	683b      	ldr	r3, [r7, #0]
 8007dce:	685a      	ldr	r2, [r3, #4]
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	f000 fcb4 	bl	8008740 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	689a      	ldr	r2, [r3, #8]
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007de6:	609a      	str	r2, [r3, #8]
      break;
 8007de8:	e03c      	b.n	8007e64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6818      	ldr	r0, [r3, #0]
 8007dee:	683b      	ldr	r3, [r7, #0]
 8007df0:	6859      	ldr	r1, [r3, #4]
 8007df2:	683b      	ldr	r3, [r7, #0]
 8007df4:	68db      	ldr	r3, [r3, #12]
 8007df6:	461a      	mov	r2, r3
 8007df8:	f000 fb72 	bl	80084e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	2150      	movs	r1, #80	; 0x50
 8007e02:	4618      	mov	r0, r3
 8007e04:	f000 fc81 	bl	800870a <TIM_ITRx_SetConfig>
      break;
 8007e08:	e02c      	b.n	8007e64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6818      	ldr	r0, [r3, #0]
 8007e0e:	683b      	ldr	r3, [r7, #0]
 8007e10:	6859      	ldr	r1, [r3, #4]
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	68db      	ldr	r3, [r3, #12]
 8007e16:	461a      	mov	r2, r3
 8007e18:	f000 fbce 	bl	80085b8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	2160      	movs	r1, #96	; 0x60
 8007e22:	4618      	mov	r0, r3
 8007e24:	f000 fc71 	bl	800870a <TIM_ITRx_SetConfig>
      break;
 8007e28:	e01c      	b.n	8007e64 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	6818      	ldr	r0, [r3, #0]
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	6859      	ldr	r1, [r3, #4]
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	461a      	mov	r2, r3
 8007e38:	f000 fb52 	bl	80084e0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	2140      	movs	r1, #64	; 0x40
 8007e42:	4618      	mov	r0, r3
 8007e44:	f000 fc61 	bl	800870a <TIM_ITRx_SetConfig>
      break;
 8007e48:	e00c      	b.n	8007e64 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681a      	ldr	r2, [r3, #0]
 8007e4e:	683b      	ldr	r3, [r7, #0]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	4619      	mov	r1, r3
 8007e54:	4610      	mov	r0, r2
 8007e56:	f000 fc58 	bl	800870a <TIM_ITRx_SetConfig>
      break;
 8007e5a:	e003      	b.n	8007e64 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	73fb      	strb	r3, [r7, #15]
      break;
 8007e60:	e000      	b.n	8007e64 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007e62:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2201      	movs	r2, #1
 8007e68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2200      	movs	r2, #0
 8007e70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}
	...

08007e80 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b085      	sub	sp, #20
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007e8e:	683b      	ldr	r3, [r7, #0]
 8007e90:	2b0c      	cmp	r3, #12
 8007e92:	d831      	bhi.n	8007ef8 <HAL_TIM_ReadCapturedValue+0x78>
 8007e94:	a201      	add	r2, pc, #4	; (adr r2, 8007e9c <HAL_TIM_ReadCapturedValue+0x1c>)
 8007e96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e9a:	bf00      	nop
 8007e9c:	08007ed1 	.word	0x08007ed1
 8007ea0:	08007ef9 	.word	0x08007ef9
 8007ea4:	08007ef9 	.word	0x08007ef9
 8007ea8:	08007ef9 	.word	0x08007ef9
 8007eac:	08007edb 	.word	0x08007edb
 8007eb0:	08007ef9 	.word	0x08007ef9
 8007eb4:	08007ef9 	.word	0x08007ef9
 8007eb8:	08007ef9 	.word	0x08007ef9
 8007ebc:	08007ee5 	.word	0x08007ee5
 8007ec0:	08007ef9 	.word	0x08007ef9
 8007ec4:	08007ef9 	.word	0x08007ef9
 8007ec8:	08007ef9 	.word	0x08007ef9
 8007ecc:	08007eef 	.word	0x08007eef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ed6:	60fb      	str	r3, [r7, #12]

      break;
 8007ed8:	e00f      	b.n	8007efa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee0:	60fb      	str	r3, [r7, #12]

      break;
 8007ee2:	e00a      	b.n	8007efa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eea:	60fb      	str	r3, [r7, #12]

      break;
 8007eec:	e005      	b.n	8007efa <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ef4:	60fb      	str	r3, [r7, #12]

      break;
 8007ef6:	e000      	b.n	8007efa <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8007ef8:	bf00      	nop
  }

  return tmpreg;
 8007efa:	68fb      	ldr	r3, [r7, #12]
}
 8007efc:	4618      	mov	r0, r3
 8007efe:	3714      	adds	r7, #20
 8007f00:	46bd      	mov	sp, r7
 8007f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f06:	4770      	bx	lr

08007f08 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f08:	b480      	push	{r7}
 8007f0a:	b083      	sub	sp, #12
 8007f0c:	af00      	add	r7, sp, #0
 8007f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007f10:	bf00      	nop
 8007f12:	370c      	adds	r7, #12
 8007f14:	46bd      	mov	sp, r7
 8007f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1a:	4770      	bx	lr

08007f1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f1c:	b480      	push	{r7}
 8007f1e:	b083      	sub	sp, #12
 8007f20:	af00      	add	r7, sp, #0
 8007f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f24:	bf00      	nop
 8007f26:	370c      	adds	r7, #12
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b083      	sub	sp, #12
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f38:	bf00      	nop
 8007f3a:	370c      	adds	r7, #12
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f42:	4770      	bx	lr

08007f44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b083      	sub	sp, #12
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f4c:	bf00      	nop
 8007f4e:	370c      	adds	r7, #12
 8007f50:	46bd      	mov	sp, r7
 8007f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f56:	4770      	bx	lr

08007f58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	681b      	ldr	r3, [r3, #0]
 8007f66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	4a40      	ldr	r2, [pc, #256]	; (800806c <TIM_Base_SetConfig+0x114>)
 8007f6c:	4293      	cmp	r3, r2
 8007f6e:	d013      	beq.n	8007f98 <TIM_Base_SetConfig+0x40>
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f76:	d00f      	beq.n	8007f98 <TIM_Base_SetConfig+0x40>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	4a3d      	ldr	r2, [pc, #244]	; (8008070 <TIM_Base_SetConfig+0x118>)
 8007f7c:	4293      	cmp	r3, r2
 8007f7e:	d00b      	beq.n	8007f98 <TIM_Base_SetConfig+0x40>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a3c      	ldr	r2, [pc, #240]	; (8008074 <TIM_Base_SetConfig+0x11c>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d007      	beq.n	8007f98 <TIM_Base_SetConfig+0x40>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	4a3b      	ldr	r2, [pc, #236]	; (8008078 <TIM_Base_SetConfig+0x120>)
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	d003      	beq.n	8007f98 <TIM_Base_SetConfig+0x40>
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	4a3a      	ldr	r2, [pc, #232]	; (800807c <TIM_Base_SetConfig+0x124>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d108      	bne.n	8007faa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	685b      	ldr	r3, [r3, #4]
 8007fa4:	68fa      	ldr	r2, [r7, #12]
 8007fa6:	4313      	orrs	r3, r2
 8007fa8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a2f      	ldr	r2, [pc, #188]	; (800806c <TIM_Base_SetConfig+0x114>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d02b      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fb8:	d027      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a2c      	ldr	r2, [pc, #176]	; (8008070 <TIM_Base_SetConfig+0x118>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d023      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a2b      	ldr	r2, [pc, #172]	; (8008074 <TIM_Base_SetConfig+0x11c>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d01f      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a2a      	ldr	r2, [pc, #168]	; (8008078 <TIM_Base_SetConfig+0x120>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d01b      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a29      	ldr	r2, [pc, #164]	; (800807c <TIM_Base_SetConfig+0x124>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d017      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a28      	ldr	r2, [pc, #160]	; (8008080 <TIM_Base_SetConfig+0x128>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d013      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a27      	ldr	r2, [pc, #156]	; (8008084 <TIM_Base_SetConfig+0x12c>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d00f      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a26      	ldr	r2, [pc, #152]	; (8008088 <TIM_Base_SetConfig+0x130>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d00b      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	4a25      	ldr	r2, [pc, #148]	; (800808c <TIM_Base_SetConfig+0x134>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d007      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	4a24      	ldr	r2, [pc, #144]	; (8008090 <TIM_Base_SetConfig+0x138>)
 8007ffe:	4293      	cmp	r3, r2
 8008000:	d003      	beq.n	800800a <TIM_Base_SetConfig+0xb2>
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	4a23      	ldr	r2, [pc, #140]	; (8008094 <TIM_Base_SetConfig+0x13c>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d108      	bne.n	800801c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008010:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008012:	683b      	ldr	r3, [r7, #0]
 8008014:	68db      	ldr	r3, [r3, #12]
 8008016:	68fa      	ldr	r2, [r7, #12]
 8008018:	4313      	orrs	r3, r2
 800801a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	695b      	ldr	r3, [r3, #20]
 8008026:	4313      	orrs	r3, r2
 8008028:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	68fa      	ldr	r2, [r7, #12]
 800802e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	689a      	ldr	r2, [r3, #8]
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	681a      	ldr	r2, [r3, #0]
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a0a      	ldr	r2, [pc, #40]	; (800806c <TIM_Base_SetConfig+0x114>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d003      	beq.n	8008050 <TIM_Base_SetConfig+0xf8>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a0c      	ldr	r2, [pc, #48]	; (800807c <TIM_Base_SetConfig+0x124>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d103      	bne.n	8008058 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008050:	683b      	ldr	r3, [r7, #0]
 8008052:	691a      	ldr	r2, [r3, #16]
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2201      	movs	r2, #1
 800805c:	615a      	str	r2, [r3, #20]
}
 800805e:	bf00      	nop
 8008060:	3714      	adds	r7, #20
 8008062:	46bd      	mov	sp, r7
 8008064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008068:	4770      	bx	lr
 800806a:	bf00      	nop
 800806c:	40010000 	.word	0x40010000
 8008070:	40000400 	.word	0x40000400
 8008074:	40000800 	.word	0x40000800
 8008078:	40000c00 	.word	0x40000c00
 800807c:	40010400 	.word	0x40010400
 8008080:	40014000 	.word	0x40014000
 8008084:	40014400 	.word	0x40014400
 8008088:	40014800 	.word	0x40014800
 800808c:	40001800 	.word	0x40001800
 8008090:	40001c00 	.word	0x40001c00
 8008094:	40002000 	.word	0x40002000

08008098 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008098:	b480      	push	{r7}
 800809a:	b087      	sub	sp, #28
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	6a1b      	ldr	r3, [r3, #32]
 80080a6:	f023 0201 	bic.w	r2, r3, #1
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	6a1b      	ldr	r3, [r3, #32]
 80080b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	699b      	ldr	r3, [r3, #24]
 80080be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	f023 0303 	bic.w	r3, r3, #3
 80080ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	68fa      	ldr	r2, [r7, #12]
 80080d6:	4313      	orrs	r3, r2
 80080d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80080da:	697b      	ldr	r3, [r7, #20]
 80080dc:	f023 0302 	bic.w	r3, r3, #2
 80080e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	689b      	ldr	r3, [r3, #8]
 80080e6:	697a      	ldr	r2, [r7, #20]
 80080e8:	4313      	orrs	r3, r2
 80080ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	4a20      	ldr	r2, [pc, #128]	; (8008170 <TIM_OC1_SetConfig+0xd8>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d003      	beq.n	80080fc <TIM_OC1_SetConfig+0x64>
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	4a1f      	ldr	r2, [pc, #124]	; (8008174 <TIM_OC1_SetConfig+0xdc>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d10c      	bne.n	8008116 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80080fc:	697b      	ldr	r3, [r7, #20]
 80080fe:	f023 0308 	bic.w	r3, r3, #8
 8008102:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008104:	683b      	ldr	r3, [r7, #0]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	697a      	ldr	r2, [r7, #20]
 800810a:	4313      	orrs	r3, r2
 800810c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800810e:	697b      	ldr	r3, [r7, #20]
 8008110:	f023 0304 	bic.w	r3, r3, #4
 8008114:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a15      	ldr	r2, [pc, #84]	; (8008170 <TIM_OC1_SetConfig+0xd8>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d003      	beq.n	8008126 <TIM_OC1_SetConfig+0x8e>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	4a14      	ldr	r2, [pc, #80]	; (8008174 <TIM_OC1_SetConfig+0xdc>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d111      	bne.n	800814a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008126:	693b      	ldr	r3, [r7, #16]
 8008128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800812c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800812e:	693b      	ldr	r3, [r7, #16]
 8008130:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008134:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	695b      	ldr	r3, [r3, #20]
 800813a:	693a      	ldr	r2, [r7, #16]
 800813c:	4313      	orrs	r3, r2
 800813e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	699b      	ldr	r3, [r3, #24]
 8008144:	693a      	ldr	r2, [r7, #16]
 8008146:	4313      	orrs	r3, r2
 8008148:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	693a      	ldr	r2, [r7, #16]
 800814e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	68fa      	ldr	r2, [r7, #12]
 8008154:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	685a      	ldr	r2, [r3, #4]
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	697a      	ldr	r2, [r7, #20]
 8008162:	621a      	str	r2, [r3, #32]
}
 8008164:	bf00      	nop
 8008166:	371c      	adds	r7, #28
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr
 8008170:	40010000 	.word	0x40010000
 8008174:	40010400 	.word	0x40010400

08008178 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008178:	b480      	push	{r7}
 800817a:	b087      	sub	sp, #28
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
 8008180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	6a1b      	ldr	r3, [r3, #32]
 8008186:	f023 0210 	bic.w	r2, r3, #16
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a1b      	ldr	r3, [r3, #32]
 8008192:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	685b      	ldr	r3, [r3, #4]
 8008198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	699b      	ldr	r3, [r3, #24]
 800819e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081ae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	021b      	lsls	r3, r3, #8
 80081b6:	68fa      	ldr	r2, [r7, #12]
 80081b8:	4313      	orrs	r3, r2
 80081ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	f023 0320 	bic.w	r3, r3, #32
 80081c2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80081c4:	683b      	ldr	r3, [r7, #0]
 80081c6:	689b      	ldr	r3, [r3, #8]
 80081c8:	011b      	lsls	r3, r3, #4
 80081ca:	697a      	ldr	r2, [r7, #20]
 80081cc:	4313      	orrs	r3, r2
 80081ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4a22      	ldr	r2, [pc, #136]	; (800825c <TIM_OC2_SetConfig+0xe4>)
 80081d4:	4293      	cmp	r3, r2
 80081d6:	d003      	beq.n	80081e0 <TIM_OC2_SetConfig+0x68>
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	4a21      	ldr	r2, [pc, #132]	; (8008260 <TIM_OC2_SetConfig+0xe8>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d10d      	bne.n	80081fc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80081e0:	697b      	ldr	r3, [r7, #20]
 80081e2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	011b      	lsls	r3, r3, #4
 80081ee:	697a      	ldr	r2, [r7, #20]
 80081f0:	4313      	orrs	r3, r2
 80081f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80081f4:	697b      	ldr	r3, [r7, #20]
 80081f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081fa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	4a17      	ldr	r2, [pc, #92]	; (800825c <TIM_OC2_SetConfig+0xe4>)
 8008200:	4293      	cmp	r3, r2
 8008202:	d003      	beq.n	800820c <TIM_OC2_SetConfig+0x94>
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	4a16      	ldr	r2, [pc, #88]	; (8008260 <TIM_OC2_SetConfig+0xe8>)
 8008208:	4293      	cmp	r3, r2
 800820a:	d113      	bne.n	8008234 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008212:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800821a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	695b      	ldr	r3, [r3, #20]
 8008220:	009b      	lsls	r3, r3, #2
 8008222:	693a      	ldr	r2, [r7, #16]
 8008224:	4313      	orrs	r3, r2
 8008226:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008228:	683b      	ldr	r3, [r7, #0]
 800822a:	699b      	ldr	r3, [r3, #24]
 800822c:	009b      	lsls	r3, r3, #2
 800822e:	693a      	ldr	r2, [r7, #16]
 8008230:	4313      	orrs	r3, r2
 8008232:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	693a      	ldr	r2, [r7, #16]
 8008238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	68fa      	ldr	r2, [r7, #12]
 800823e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	685a      	ldr	r2, [r3, #4]
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	697a      	ldr	r2, [r7, #20]
 800824c:	621a      	str	r2, [r3, #32]
}
 800824e:	bf00      	nop
 8008250:	371c      	adds	r7, #28
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	40010000 	.word	0x40010000
 8008260:	40010400 	.word	0x40010400

08008264 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008264:	b480      	push	{r7}
 8008266:	b087      	sub	sp, #28
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6a1b      	ldr	r3, [r3, #32]
 8008272:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6a1b      	ldr	r3, [r3, #32]
 800827e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	69db      	ldr	r3, [r3, #28]
 800828a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f023 0303 	bic.w	r3, r3, #3
 800829a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	68fa      	ldr	r2, [r7, #12]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80082ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80082ae:	683b      	ldr	r3, [r7, #0]
 80082b0:	689b      	ldr	r3, [r3, #8]
 80082b2:	021b      	lsls	r3, r3, #8
 80082b4:	697a      	ldr	r2, [r7, #20]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4a21      	ldr	r2, [pc, #132]	; (8008344 <TIM_OC3_SetConfig+0xe0>)
 80082be:	4293      	cmp	r3, r2
 80082c0:	d003      	beq.n	80082ca <TIM_OC3_SetConfig+0x66>
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	4a20      	ldr	r2, [pc, #128]	; (8008348 <TIM_OC3_SetConfig+0xe4>)
 80082c6:	4293      	cmp	r3, r2
 80082c8:	d10d      	bne.n	80082e6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80082d0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80082d2:	683b      	ldr	r3, [r7, #0]
 80082d4:	68db      	ldr	r3, [r3, #12]
 80082d6:	021b      	lsls	r3, r3, #8
 80082d8:	697a      	ldr	r2, [r7, #20]
 80082da:	4313      	orrs	r3, r2
 80082dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	4a16      	ldr	r2, [pc, #88]	; (8008344 <TIM_OC3_SetConfig+0xe0>)
 80082ea:	4293      	cmp	r3, r2
 80082ec:	d003      	beq.n	80082f6 <TIM_OC3_SetConfig+0x92>
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	4a15      	ldr	r2, [pc, #84]	; (8008348 <TIM_OC3_SetConfig+0xe4>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d113      	bne.n	800831e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008304:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008306:	683b      	ldr	r3, [r7, #0]
 8008308:	695b      	ldr	r3, [r3, #20]
 800830a:	011b      	lsls	r3, r3, #4
 800830c:	693a      	ldr	r2, [r7, #16]
 800830e:	4313      	orrs	r3, r2
 8008310:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	011b      	lsls	r3, r3, #4
 8008318:	693a      	ldr	r2, [r7, #16]
 800831a:	4313      	orrs	r3, r2
 800831c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	693a      	ldr	r2, [r7, #16]
 8008322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	68fa      	ldr	r2, [r7, #12]
 8008328:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800832a:	683b      	ldr	r3, [r7, #0]
 800832c:	685a      	ldr	r2, [r3, #4]
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	697a      	ldr	r2, [r7, #20]
 8008336:	621a      	str	r2, [r3, #32]
}
 8008338:	bf00      	nop
 800833a:	371c      	adds	r7, #28
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr
 8008344:	40010000 	.word	0x40010000
 8008348:	40010400 	.word	0x40010400

0800834c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800834c:	b480      	push	{r7}
 800834e:	b087      	sub	sp, #28
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
 8008354:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	6a1b      	ldr	r3, [r3, #32]
 800835a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	6a1b      	ldr	r3, [r3, #32]
 8008366:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	685b      	ldr	r3, [r3, #4]
 800836c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	69db      	ldr	r3, [r3, #28]
 8008372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800837a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008382:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	021b      	lsls	r3, r3, #8
 800838a:	68fa      	ldr	r2, [r7, #12]
 800838c:	4313      	orrs	r3, r2
 800838e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008390:	693b      	ldr	r3, [r7, #16]
 8008392:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008396:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	689b      	ldr	r3, [r3, #8]
 800839c:	031b      	lsls	r3, r3, #12
 800839e:	693a      	ldr	r2, [r7, #16]
 80083a0:	4313      	orrs	r3, r2
 80083a2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	4a12      	ldr	r2, [pc, #72]	; (80083f0 <TIM_OC4_SetConfig+0xa4>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d003      	beq.n	80083b4 <TIM_OC4_SetConfig+0x68>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	4a11      	ldr	r2, [pc, #68]	; (80083f4 <TIM_OC4_SetConfig+0xa8>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d109      	bne.n	80083c8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80083ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	695b      	ldr	r3, [r3, #20]
 80083c0:	019b      	lsls	r3, r3, #6
 80083c2:	697a      	ldr	r2, [r7, #20]
 80083c4:	4313      	orrs	r3, r2
 80083c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	697a      	ldr	r2, [r7, #20]
 80083cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	68fa      	ldr	r2, [r7, #12]
 80083d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	685a      	ldr	r2, [r3, #4]
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	693a      	ldr	r2, [r7, #16]
 80083e0:	621a      	str	r2, [r3, #32]
}
 80083e2:	bf00      	nop
 80083e4:	371c      	adds	r7, #28
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr
 80083ee:	bf00      	nop
 80083f0:	40010000 	.word	0x40010000
 80083f4:	40010400 	.word	0x40010400

080083f8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80083f8:	b480      	push	{r7}
 80083fa:	b087      	sub	sp, #28
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	60f8      	str	r0, [r7, #12]
 8008400:	60b9      	str	r1, [r7, #8]
 8008402:	607a      	str	r2, [r7, #4]
 8008404:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	6a1b      	ldr	r3, [r3, #32]
 800840a:	f023 0201 	bic.w	r2, r3, #1
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	699b      	ldr	r3, [r3, #24]
 8008416:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	6a1b      	ldr	r3, [r3, #32]
 800841c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	4a28      	ldr	r2, [pc, #160]	; (80084c4 <TIM_TI1_SetConfig+0xcc>)
 8008422:	4293      	cmp	r3, r2
 8008424:	d01b      	beq.n	800845e <TIM_TI1_SetConfig+0x66>
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800842c:	d017      	beq.n	800845e <TIM_TI1_SetConfig+0x66>
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	4a25      	ldr	r2, [pc, #148]	; (80084c8 <TIM_TI1_SetConfig+0xd0>)
 8008432:	4293      	cmp	r3, r2
 8008434:	d013      	beq.n	800845e <TIM_TI1_SetConfig+0x66>
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	4a24      	ldr	r2, [pc, #144]	; (80084cc <TIM_TI1_SetConfig+0xd4>)
 800843a:	4293      	cmp	r3, r2
 800843c:	d00f      	beq.n	800845e <TIM_TI1_SetConfig+0x66>
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	4a23      	ldr	r2, [pc, #140]	; (80084d0 <TIM_TI1_SetConfig+0xd8>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d00b      	beq.n	800845e <TIM_TI1_SetConfig+0x66>
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	4a22      	ldr	r2, [pc, #136]	; (80084d4 <TIM_TI1_SetConfig+0xdc>)
 800844a:	4293      	cmp	r3, r2
 800844c:	d007      	beq.n	800845e <TIM_TI1_SetConfig+0x66>
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	4a21      	ldr	r2, [pc, #132]	; (80084d8 <TIM_TI1_SetConfig+0xe0>)
 8008452:	4293      	cmp	r3, r2
 8008454:	d003      	beq.n	800845e <TIM_TI1_SetConfig+0x66>
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	4a20      	ldr	r2, [pc, #128]	; (80084dc <TIM_TI1_SetConfig+0xe4>)
 800845a:	4293      	cmp	r3, r2
 800845c:	d101      	bne.n	8008462 <TIM_TI1_SetConfig+0x6a>
 800845e:	2301      	movs	r3, #1
 8008460:	e000      	b.n	8008464 <TIM_TI1_SetConfig+0x6c>
 8008462:	2300      	movs	r3, #0
 8008464:	2b00      	cmp	r3, #0
 8008466:	d008      	beq.n	800847a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	f023 0303 	bic.w	r3, r3, #3
 800846e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008470:	697a      	ldr	r2, [r7, #20]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	4313      	orrs	r3, r2
 8008476:	617b      	str	r3, [r7, #20]
 8008478:	e003      	b.n	8008482 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	f043 0301 	orr.w	r3, r3, #1
 8008480:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008488:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	011b      	lsls	r3, r3, #4
 800848e:	b2db      	uxtb	r3, r3
 8008490:	697a      	ldr	r2, [r7, #20]
 8008492:	4313      	orrs	r3, r2
 8008494:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	f023 030a 	bic.w	r3, r3, #10
 800849c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	f003 030a 	and.w	r3, r3, #10
 80084a4:	693a      	ldr	r2, [r7, #16]
 80084a6:	4313      	orrs	r3, r2
 80084a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	697a      	ldr	r2, [r7, #20]
 80084ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	693a      	ldr	r2, [r7, #16]
 80084b4:	621a      	str	r2, [r3, #32]
}
 80084b6:	bf00      	nop
 80084b8:	371c      	adds	r7, #28
 80084ba:	46bd      	mov	sp, r7
 80084bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop
 80084c4:	40010000 	.word	0x40010000
 80084c8:	40000400 	.word	0x40000400
 80084cc:	40000800 	.word	0x40000800
 80084d0:	40000c00 	.word	0x40000c00
 80084d4:	40010400 	.word	0x40010400
 80084d8:	40014000 	.word	0x40014000
 80084dc:	40001800 	.word	0x40001800

080084e0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b087      	sub	sp, #28
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	60f8      	str	r0, [r7, #12]
 80084e8:	60b9      	str	r1, [r7, #8]
 80084ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6a1b      	ldr	r3, [r3, #32]
 80084f0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	6a1b      	ldr	r3, [r3, #32]
 80084f6:	f023 0201 	bic.w	r2, r3, #1
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	699b      	ldr	r3, [r3, #24]
 8008502:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008504:	693b      	ldr	r3, [r7, #16]
 8008506:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800850a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	011b      	lsls	r3, r3, #4
 8008510:	693a      	ldr	r2, [r7, #16]
 8008512:	4313      	orrs	r3, r2
 8008514:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008516:	697b      	ldr	r3, [r7, #20]
 8008518:	f023 030a 	bic.w	r3, r3, #10
 800851c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800851e:	697a      	ldr	r2, [r7, #20]
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	4313      	orrs	r3, r2
 8008524:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	693a      	ldr	r2, [r7, #16]
 800852a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	697a      	ldr	r2, [r7, #20]
 8008530:	621a      	str	r2, [r3, #32]
}
 8008532:	bf00      	nop
 8008534:	371c      	adds	r7, #28
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800853e:	b480      	push	{r7}
 8008540:	b087      	sub	sp, #28
 8008542:	af00      	add	r7, sp, #0
 8008544:	60f8      	str	r0, [r7, #12]
 8008546:	60b9      	str	r1, [r7, #8]
 8008548:	607a      	str	r2, [r7, #4]
 800854a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6a1b      	ldr	r3, [r3, #32]
 8008550:	f023 0210 	bic.w	r2, r3, #16
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	699b      	ldr	r3, [r3, #24]
 800855c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6a1b      	ldr	r3, [r3, #32]
 8008562:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008564:	697b      	ldr	r3, [r7, #20]
 8008566:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800856a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	021b      	lsls	r3, r3, #8
 8008570:	697a      	ldr	r2, [r7, #20]
 8008572:	4313      	orrs	r3, r2
 8008574:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008576:	697b      	ldr	r3, [r7, #20]
 8008578:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800857c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	031b      	lsls	r3, r3, #12
 8008582:	b29b      	uxth	r3, r3
 8008584:	697a      	ldr	r2, [r7, #20]
 8008586:	4313      	orrs	r3, r2
 8008588:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008590:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	011b      	lsls	r3, r3, #4
 8008596:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800859a:	693a      	ldr	r2, [r7, #16]
 800859c:	4313      	orrs	r3, r2
 800859e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	697a      	ldr	r2, [r7, #20]
 80085a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	693a      	ldr	r2, [r7, #16]
 80085aa:	621a      	str	r2, [r3, #32]
}
 80085ac:	bf00      	nop
 80085ae:	371c      	adds	r7, #28
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr

080085b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085b8:	b480      	push	{r7}
 80085ba:	b087      	sub	sp, #28
 80085bc:	af00      	add	r7, sp, #0
 80085be:	60f8      	str	r0, [r7, #12]
 80085c0:	60b9      	str	r1, [r7, #8]
 80085c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	6a1b      	ldr	r3, [r3, #32]
 80085c8:	f023 0210 	bic.w	r2, r3, #16
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	699b      	ldr	r3, [r3, #24]
 80085d4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6a1b      	ldr	r3, [r3, #32]
 80085da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80085dc:	697b      	ldr	r3, [r7, #20]
 80085de:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80085e2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	031b      	lsls	r3, r3, #12
 80085e8:	697a      	ldr	r2, [r7, #20]
 80085ea:	4313      	orrs	r3, r2
 80085ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80085ee:	693b      	ldr	r3, [r7, #16]
 80085f0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80085f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80085f6:	68bb      	ldr	r3, [r7, #8]
 80085f8:	011b      	lsls	r3, r3, #4
 80085fa:	693a      	ldr	r2, [r7, #16]
 80085fc:	4313      	orrs	r3, r2
 80085fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	697a      	ldr	r2, [r7, #20]
 8008604:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	693a      	ldr	r2, [r7, #16]
 800860a:	621a      	str	r2, [r3, #32]
}
 800860c:	bf00      	nop
 800860e:	371c      	adds	r7, #28
 8008610:	46bd      	mov	sp, r7
 8008612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008616:	4770      	bx	lr

08008618 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008618:	b480      	push	{r7}
 800861a:	b087      	sub	sp, #28
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
 8008624:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6a1b      	ldr	r3, [r3, #32]
 800862a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	69db      	ldr	r3, [r3, #28]
 8008636:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6a1b      	ldr	r3, [r3, #32]
 800863c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800863e:	697b      	ldr	r3, [r7, #20]
 8008640:	f023 0303 	bic.w	r3, r3, #3
 8008644:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008646:	697a      	ldr	r2, [r7, #20]
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4313      	orrs	r3, r2
 800864c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800864e:	697b      	ldr	r3, [r7, #20]
 8008650:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008654:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008656:	683b      	ldr	r3, [r7, #0]
 8008658:	011b      	lsls	r3, r3, #4
 800865a:	b2db      	uxtb	r3, r3
 800865c:	697a      	ldr	r2, [r7, #20]
 800865e:	4313      	orrs	r3, r2
 8008660:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008662:	693b      	ldr	r3, [r7, #16]
 8008664:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008668:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800866a:	68bb      	ldr	r3, [r7, #8]
 800866c:	021b      	lsls	r3, r3, #8
 800866e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008672:	693a      	ldr	r2, [r7, #16]
 8008674:	4313      	orrs	r3, r2
 8008676:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	697a      	ldr	r2, [r7, #20]
 800867c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800867e:	68fb      	ldr	r3, [r7, #12]
 8008680:	693a      	ldr	r2, [r7, #16]
 8008682:	621a      	str	r2, [r3, #32]
}
 8008684:	bf00      	nop
 8008686:	371c      	adds	r7, #28
 8008688:	46bd      	mov	sp, r7
 800868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868e:	4770      	bx	lr

08008690 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008690:	b480      	push	{r7}
 8008692:	b087      	sub	sp, #28
 8008694:	af00      	add	r7, sp, #0
 8008696:	60f8      	str	r0, [r7, #12]
 8008698:	60b9      	str	r1, [r7, #8]
 800869a:	607a      	str	r2, [r7, #4]
 800869c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800869e:	68fb      	ldr	r3, [r7, #12]
 80086a0:	6a1b      	ldr	r3, [r3, #32]
 80086a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	69db      	ldr	r3, [r3, #28]
 80086ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	6a1b      	ldr	r3, [r3, #32]
 80086b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	021b      	lsls	r3, r3, #8
 80086c2:	697a      	ldr	r2, [r7, #20]
 80086c4:	4313      	orrs	r3, r2
 80086c6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086ce:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	031b      	lsls	r3, r3, #12
 80086d4:	b29b      	uxth	r3, r3
 80086d6:	697a      	ldr	r2, [r7, #20]
 80086d8:	4313      	orrs	r3, r2
 80086da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80086dc:	693b      	ldr	r3, [r7, #16]
 80086de:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80086e2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	031b      	lsls	r3, r3, #12
 80086e8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80086ec:	693a      	ldr	r2, [r7, #16]
 80086ee:	4313      	orrs	r3, r2
 80086f0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	697a      	ldr	r2, [r7, #20]
 80086f6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	693a      	ldr	r2, [r7, #16]
 80086fc:	621a      	str	r2, [r3, #32]
}
 80086fe:	bf00      	nop
 8008700:	371c      	adds	r7, #28
 8008702:	46bd      	mov	sp, r7
 8008704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008708:	4770      	bx	lr

0800870a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800870a:	b480      	push	{r7}
 800870c:	b085      	sub	sp, #20
 800870e:	af00      	add	r7, sp, #0
 8008710:	6078      	str	r0, [r7, #4]
 8008712:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008720:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008722:	683a      	ldr	r2, [r7, #0]
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	4313      	orrs	r3, r2
 8008728:	f043 0307 	orr.w	r3, r3, #7
 800872c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	68fa      	ldr	r2, [r7, #12]
 8008732:	609a      	str	r2, [r3, #8]
}
 8008734:	bf00      	nop
 8008736:	3714      	adds	r7, #20
 8008738:	46bd      	mov	sp, r7
 800873a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873e:	4770      	bx	lr

08008740 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008740:	b480      	push	{r7}
 8008742:	b087      	sub	sp, #28
 8008744:	af00      	add	r7, sp, #0
 8008746:	60f8      	str	r0, [r7, #12]
 8008748:	60b9      	str	r1, [r7, #8]
 800874a:	607a      	str	r2, [r7, #4]
 800874c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	689b      	ldr	r3, [r3, #8]
 8008752:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800875a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	021a      	lsls	r2, r3, #8
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	431a      	orrs	r2, r3
 8008764:	68bb      	ldr	r3, [r7, #8]
 8008766:	4313      	orrs	r3, r2
 8008768:	697a      	ldr	r2, [r7, #20]
 800876a:	4313      	orrs	r3, r2
 800876c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	697a      	ldr	r2, [r7, #20]
 8008772:	609a      	str	r2, [r3, #8]
}
 8008774:	bf00      	nop
 8008776:	371c      	adds	r7, #28
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008780:	b480      	push	{r7}
 8008782:	b087      	sub	sp, #28
 8008784:	af00      	add	r7, sp, #0
 8008786:	60f8      	str	r0, [r7, #12]
 8008788:	60b9      	str	r1, [r7, #8]
 800878a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	f003 031f 	and.w	r3, r3, #31
 8008792:	2201      	movs	r2, #1
 8008794:	fa02 f303 	lsl.w	r3, r2, r3
 8008798:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	6a1a      	ldr	r2, [r3, #32]
 800879e:	697b      	ldr	r3, [r7, #20]
 80087a0:	43db      	mvns	r3, r3
 80087a2:	401a      	ands	r2, r3
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	6a1a      	ldr	r2, [r3, #32]
 80087ac:	68bb      	ldr	r3, [r7, #8]
 80087ae:	f003 031f 	and.w	r3, r3, #31
 80087b2:	6879      	ldr	r1, [r7, #4]
 80087b4:	fa01 f303 	lsl.w	r3, r1, r3
 80087b8:	431a      	orrs	r2, r3
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	621a      	str	r2, [r3, #32]
}
 80087be:	bf00      	nop
 80087c0:	371c      	adds	r7, #28
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr
	...

080087cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b085      	sub	sp, #20
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d101      	bne.n	80087e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80087e0:	2302      	movs	r3, #2
 80087e2:	e05a      	b.n	800889a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2201      	movs	r2, #1
 80087e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2202      	movs	r2, #2
 80087f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	685b      	ldr	r3, [r3, #4]
 80087fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	689b      	ldr	r3, [r3, #8]
 8008802:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800880a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	68fa      	ldr	r2, [r7, #12]
 8008812:	4313      	orrs	r3, r2
 8008814:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	68fa      	ldr	r2, [r7, #12]
 800881c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	4a21      	ldr	r2, [pc, #132]	; (80088a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008824:	4293      	cmp	r3, r2
 8008826:	d022      	beq.n	800886e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008830:	d01d      	beq.n	800886e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	4a1d      	ldr	r2, [pc, #116]	; (80088ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008838:	4293      	cmp	r3, r2
 800883a:	d018      	beq.n	800886e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	4a1b      	ldr	r2, [pc, #108]	; (80088b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008842:	4293      	cmp	r3, r2
 8008844:	d013      	beq.n	800886e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a1a      	ldr	r2, [pc, #104]	; (80088b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d00e      	beq.n	800886e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	4a18      	ldr	r2, [pc, #96]	; (80088b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d009      	beq.n	800886e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a17      	ldr	r2, [pc, #92]	; (80088bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d004      	beq.n	800886e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a15      	ldr	r2, [pc, #84]	; (80088c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d10c      	bne.n	8008888 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800886e:	68bb      	ldr	r3, [r7, #8]
 8008870:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008874:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	685b      	ldr	r3, [r3, #4]
 800887a:	68ba      	ldr	r2, [r7, #8]
 800887c:	4313      	orrs	r3, r2
 800887e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68ba      	ldr	r2, [r7, #8]
 8008886:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	2201      	movs	r2, #1
 800888c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	2200      	movs	r2, #0
 8008894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008898:	2300      	movs	r3, #0
}
 800889a:	4618      	mov	r0, r3
 800889c:	3714      	adds	r7, #20
 800889e:	46bd      	mov	sp, r7
 80088a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a4:	4770      	bx	lr
 80088a6:	bf00      	nop
 80088a8:	40010000 	.word	0x40010000
 80088ac:	40000400 	.word	0x40000400
 80088b0:	40000800 	.word	0x40000800
 80088b4:	40000c00 	.word	0x40000c00
 80088b8:	40010400 	.word	0x40010400
 80088bc:	40014000 	.word	0x40014000
 80088c0:	40001800 	.word	0x40001800

080088c4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80088c4:	b480      	push	{r7}
 80088c6:	b085      	sub	sp, #20
 80088c8:	af00      	add	r7, sp, #0
 80088ca:	6078      	str	r0, [r7, #4]
 80088cc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80088ce:	2300      	movs	r3, #0
 80088d0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088d8:	2b01      	cmp	r3, #1
 80088da:	d101      	bne.n	80088e0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80088dc:	2302      	movs	r3, #2
 80088de:	e03d      	b.n	800895c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	2201      	movs	r2, #1
 80088e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80088ee:	683b      	ldr	r3, [r7, #0]
 80088f0:	68db      	ldr	r3, [r3, #12]
 80088f2:	4313      	orrs	r3, r2
 80088f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	4313      	orrs	r3, r2
 8008902:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800890a:	683b      	ldr	r3, [r7, #0]
 800890c:	685b      	ldr	r3, [r3, #4]
 800890e:	4313      	orrs	r3, r2
 8008910:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	4313      	orrs	r3, r2
 800891e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008926:	683b      	ldr	r3, [r7, #0]
 8008928:	691b      	ldr	r3, [r3, #16]
 800892a:	4313      	orrs	r3, r2
 800892c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008934:	683b      	ldr	r3, [r7, #0]
 8008936:	695b      	ldr	r3, [r3, #20]
 8008938:	4313      	orrs	r3, r2
 800893a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	69db      	ldr	r3, [r3, #28]
 8008946:	4313      	orrs	r3, r2
 8008948:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	68fa      	ldr	r2, [r7, #12]
 8008950:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800895a:	2300      	movs	r3, #0
}
 800895c:	4618      	mov	r0, r3
 800895e:	3714      	adds	r7, #20
 8008960:	46bd      	mov	sp, r7
 8008962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008966:	4770      	bx	lr

08008968 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008970:	bf00      	nop
 8008972:	370c      	adds	r7, #12
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008984:	bf00      	nop
 8008986:	370c      	adds	r7, #12
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d101      	bne.n	80089a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	e03f      	b.n	8008a22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80089a8:	b2db      	uxtb	r3, r3
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d106      	bne.n	80089bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2200      	movs	r2, #0
 80089b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80089b6:	6878      	ldr	r0, [r7, #4]
 80089b8:	f7fb fd6a 	bl	8004490 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2224      	movs	r2, #36	; 0x24
 80089c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	68da      	ldr	r2, [r3, #12]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80089d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 fddf 	bl	8009598 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	691a      	ldr	r2, [r3, #16]
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	681b      	ldr	r3, [r3, #0]
 80089e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80089e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	695a      	ldr	r2, [r3, #20]
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80089f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	68da      	ldr	r2, [r3, #12]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2220      	movs	r2, #32
 8008a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2220      	movs	r2, #32
 8008a1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3708      	adds	r7, #8
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}

08008a2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008a2a:	b580      	push	{r7, lr}
 8008a2c:	b08a      	sub	sp, #40	; 0x28
 8008a2e:	af02      	add	r7, sp, #8
 8008a30:	60f8      	str	r0, [r7, #12]
 8008a32:	60b9      	str	r1, [r7, #8]
 8008a34:	603b      	str	r3, [r7, #0]
 8008a36:	4613      	mov	r3, r2
 8008a38:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	2b20      	cmp	r3, #32
 8008a48:	d17c      	bne.n	8008b44 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a4a:	68bb      	ldr	r3, [r7, #8]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d002      	beq.n	8008a56 <HAL_UART_Transmit+0x2c>
 8008a50:	88fb      	ldrh	r3, [r7, #6]
 8008a52:	2b00      	cmp	r3, #0
 8008a54:	d101      	bne.n	8008a5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008a56:	2301      	movs	r3, #1
 8008a58:	e075      	b.n	8008b46 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	d101      	bne.n	8008a68 <HAL_UART_Transmit+0x3e>
 8008a64:	2302      	movs	r3, #2
 8008a66:	e06e      	b.n	8008b46 <HAL_UART_Transmit+0x11c>
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	2201      	movs	r2, #1
 8008a6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2200      	movs	r2, #0
 8008a74:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2221      	movs	r2, #33	; 0x21
 8008a7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008a7e:	f7fb ff0b 	bl	8004898 <HAL_GetTick>
 8008a82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	88fa      	ldrh	r2, [r7, #6]
 8008a88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	88fa      	ldrh	r2, [r7, #6]
 8008a8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	689b      	ldr	r3, [r3, #8]
 8008a94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a98:	d108      	bne.n	8008aac <HAL_UART_Transmit+0x82>
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	691b      	ldr	r3, [r3, #16]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d104      	bne.n	8008aac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008aa2:	2300      	movs	r3, #0
 8008aa4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	61bb      	str	r3, [r7, #24]
 8008aaa:	e003      	b.n	8008ab4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008ab0:	2300      	movs	r3, #0
 8008ab2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	2200      	movs	r2, #0
 8008ab8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008abc:	e02a      	b.n	8008b14 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008abe:	683b      	ldr	r3, [r7, #0]
 8008ac0:	9300      	str	r3, [sp, #0]
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	2180      	movs	r1, #128	; 0x80
 8008ac8:	68f8      	ldr	r0, [r7, #12]
 8008aca:	f000 fb1f 	bl	800910c <UART_WaitOnFlagUntilTimeout>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d001      	beq.n	8008ad8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008ad4:	2303      	movs	r3, #3
 8008ad6:	e036      	b.n	8008b46 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008ad8:	69fb      	ldr	r3, [r7, #28]
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d10b      	bne.n	8008af6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ade:	69bb      	ldr	r3, [r7, #24]
 8008ae0:	881b      	ldrh	r3, [r3, #0]
 8008ae2:	461a      	mov	r2, r3
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	681b      	ldr	r3, [r3, #0]
 8008ae8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008aec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008aee:	69bb      	ldr	r3, [r7, #24]
 8008af0:	3302      	adds	r3, #2
 8008af2:	61bb      	str	r3, [r7, #24]
 8008af4:	e007      	b.n	8008b06 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008af6:	69fb      	ldr	r3, [r7, #28]
 8008af8:	781a      	ldrb	r2, [r3, #0]
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	3301      	adds	r3, #1
 8008b04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	3b01      	subs	r3, #1
 8008b0e:	b29a      	uxth	r2, r3
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008b14:	68fb      	ldr	r3, [r7, #12]
 8008b16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b18:	b29b      	uxth	r3, r3
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d1cf      	bne.n	8008abe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008b1e:	683b      	ldr	r3, [r7, #0]
 8008b20:	9300      	str	r3, [sp, #0]
 8008b22:	697b      	ldr	r3, [r7, #20]
 8008b24:	2200      	movs	r2, #0
 8008b26:	2140      	movs	r1, #64	; 0x40
 8008b28:	68f8      	ldr	r0, [r7, #12]
 8008b2a:	f000 faef 	bl	800910c <UART_WaitOnFlagUntilTimeout>
 8008b2e:	4603      	mov	r3, r0
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d001      	beq.n	8008b38 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008b34:	2303      	movs	r3, #3
 8008b36:	e006      	b.n	8008b46 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	2220      	movs	r2, #32
 8008b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008b40:	2300      	movs	r3, #0
 8008b42:	e000      	b.n	8008b46 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008b44:	2302      	movs	r3, #2
  }
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3720      	adds	r7, #32
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b084      	sub	sp, #16
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	60f8      	str	r0, [r7, #12]
 8008b56:	60b9      	str	r1, [r7, #8]
 8008b58:	4613      	mov	r3, r2
 8008b5a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008b5c:	68fb      	ldr	r3, [r7, #12]
 8008b5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b62:	b2db      	uxtb	r3, r3
 8008b64:	2b20      	cmp	r3, #32
 8008b66:	d11d      	bne.n	8008ba4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008b68:	68bb      	ldr	r3, [r7, #8]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d002      	beq.n	8008b74 <HAL_UART_Receive_IT+0x26>
 8008b6e:	88fb      	ldrh	r3, [r7, #6]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d101      	bne.n	8008b78 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	e016      	b.n	8008ba6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008b7e:	2b01      	cmp	r3, #1
 8008b80:	d101      	bne.n	8008b86 <HAL_UART_Receive_IT+0x38>
 8008b82:	2302      	movs	r3, #2
 8008b84:	e00f      	b.n	8008ba6 <HAL_UART_Receive_IT+0x58>
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2201      	movs	r2, #1
 8008b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b8e:	68fb      	ldr	r3, [r7, #12]
 8008b90:	2200      	movs	r2, #0
 8008b92:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008b94:	88fb      	ldrh	r3, [r7, #6]
 8008b96:	461a      	mov	r2, r3
 8008b98:	68b9      	ldr	r1, [r7, #8]
 8008b9a:	68f8      	ldr	r0, [r7, #12]
 8008b9c:	f000 fb24 	bl	80091e8 <UART_Start_Receive_IT>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	e000      	b.n	8008ba6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008ba4:	2302      	movs	r3, #2
  }
}
 8008ba6:	4618      	mov	r0, r3
 8008ba8:	3710      	adds	r7, #16
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}
	...

08008bb0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008bb0:	b580      	push	{r7, lr}
 8008bb2:	b0ba      	sub	sp, #232	; 0xe8
 8008bb4:	af00      	add	r7, sp, #0
 8008bb6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	68db      	ldr	r3, [r3, #12]
 8008bc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	695b      	ldr	r3, [r3, #20]
 8008bd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008be6:	f003 030f 	and.w	r3, r3, #15
 8008bea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008bee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d10f      	bne.n	8008c16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008bf6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008bfa:	f003 0320 	and.w	r3, r3, #32
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d009      	beq.n	8008c16 <HAL_UART_IRQHandler+0x66>
 8008c02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c06:	f003 0320 	and.w	r3, r3, #32
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d003      	beq.n	8008c16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 fc07 	bl	8009422 <UART_Receive_IT>
      return;
 8008c14:	e256      	b.n	80090c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008c16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	f000 80de 	beq.w	8008ddc <HAL_UART_IRQHandler+0x22c>
 8008c20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c24:	f003 0301 	and.w	r3, r3, #1
 8008c28:	2b00      	cmp	r3, #0
 8008c2a:	d106      	bne.n	8008c3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c30:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f000 80d1 	beq.w	8008ddc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c3e:	f003 0301 	and.w	r3, r3, #1
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	d00b      	beq.n	8008c5e <HAL_UART_IRQHandler+0xae>
 8008c46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d005      	beq.n	8008c5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c56:	f043 0201 	orr.w	r2, r3, #1
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c62:	f003 0304 	and.w	r3, r3, #4
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d00b      	beq.n	8008c82 <HAL_UART_IRQHandler+0xd2>
 8008c6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c6e:	f003 0301 	and.w	r3, r3, #1
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d005      	beq.n	8008c82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c7a:	f043 0202 	orr.w	r2, r3, #2
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008c86:	f003 0302 	and.w	r3, r3, #2
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d00b      	beq.n	8008ca6 <HAL_UART_IRQHandler+0xf6>
 8008c8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008c92:	f003 0301 	and.w	r3, r3, #1
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d005      	beq.n	8008ca6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c9e:	f043 0204 	orr.w	r2, r3, #4
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008caa:	f003 0308 	and.w	r3, r3, #8
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d011      	beq.n	8008cd6 <HAL_UART_IRQHandler+0x126>
 8008cb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cb6:	f003 0320 	and.w	r3, r3, #32
 8008cba:	2b00      	cmp	r3, #0
 8008cbc:	d105      	bne.n	8008cca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008cbe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008cc2:	f003 0301 	and.w	r3, r3, #1
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d005      	beq.n	8008cd6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cce:	f043 0208 	orr.w	r2, r3, #8
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	f000 81ed 	beq.w	80090ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008ce0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008ce4:	f003 0320 	and.w	r3, r3, #32
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d008      	beq.n	8008cfe <HAL_UART_IRQHandler+0x14e>
 8008cec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008cf0:	f003 0320 	and.w	r3, r3, #32
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	d002      	beq.n	8008cfe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008cf8:	6878      	ldr	r0, [r7, #4]
 8008cfa:	f000 fb92 	bl	8009422 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	695b      	ldr	r3, [r3, #20]
 8008d04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d08:	2b40      	cmp	r3, #64	; 0x40
 8008d0a:	bf0c      	ite	eq
 8008d0c:	2301      	moveq	r3, #1
 8008d0e:	2300      	movne	r3, #0
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d1a:	f003 0308 	and.w	r3, r3, #8
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d103      	bne.n	8008d2a <HAL_UART_IRQHandler+0x17a>
 8008d22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d04f      	beq.n	8008dca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 fa9a 	bl	8009264 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	695b      	ldr	r3, [r3, #20]
 8008d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d3a:	2b40      	cmp	r3, #64	; 0x40
 8008d3c:	d141      	bne.n	8008dc2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	3314      	adds	r3, #20
 8008d44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008d4c:	e853 3f00 	ldrex	r3, [r3]
 8008d50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008d54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008d58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008d5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	3314      	adds	r3, #20
 8008d66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008d6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008d6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008d76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008d7a:	e841 2300 	strex	r3, r2, [r1]
 8008d7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008d82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d1d9      	bne.n	8008d3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d013      	beq.n	8008dba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d96:	4a7d      	ldr	r2, [pc, #500]	; (8008f8c <HAL_UART_IRQHandler+0x3dc>)
 8008d98:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d9e:	4618      	mov	r0, r3
 8008da0:	f7fc fb2b 	bl	80053fa <HAL_DMA_Abort_IT>
 8008da4:	4603      	mov	r3, r0
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d016      	beq.n	8008dd8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008db0:	687a      	ldr	r2, [r7, #4]
 8008db2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008db4:	4610      	mov	r0, r2
 8008db6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008db8:	e00e      	b.n	8008dd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008dba:	6878      	ldr	r0, [r7, #4]
 8008dbc:	f000 f990 	bl	80090e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dc0:	e00a      	b.n	8008dd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 f98c 	bl	80090e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dc8:	e006      	b.n	8008dd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 f988 	bl	80090e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2200      	movs	r2, #0
 8008dd4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008dd6:	e170      	b.n	80090ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008dd8:	bf00      	nop
    return;
 8008dda:	e16e      	b.n	80090ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	f040 814a 	bne.w	800907a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008de6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008dea:	f003 0310 	and.w	r3, r3, #16
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	f000 8143 	beq.w	800907a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008df4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008df8:	f003 0310 	and.w	r3, r3, #16
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	f000 813c 	beq.w	800907a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008e02:	2300      	movs	r3, #0
 8008e04:	60bb      	str	r3, [r7, #8]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	60bb      	str	r3, [r7, #8]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	60bb      	str	r3, [r7, #8]
 8008e16:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	695b      	ldr	r3, [r3, #20]
 8008e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e22:	2b40      	cmp	r3, #64	; 0x40
 8008e24:	f040 80b4 	bne.w	8008f90 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	685b      	ldr	r3, [r3, #4]
 8008e30:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008e34:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	f000 8140 	beq.w	80090be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008e42:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e46:	429a      	cmp	r2, r3
 8008e48:	f080 8139 	bcs.w	80090be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008e52:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e58:	69db      	ldr	r3, [r3, #28]
 8008e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008e5e:	f000 8088 	beq.w	8008f72 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	330c      	adds	r3, #12
 8008e68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008e70:	e853 3f00 	ldrex	r3, [r3]
 8008e74:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008e78:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008e7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	330c      	adds	r3, #12
 8008e8a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008e8e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008e92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e96:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008e9a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008e9e:	e841 2300 	strex	r3, r2, [r1]
 8008ea2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008ea6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d1d9      	bne.n	8008e62 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	3314      	adds	r3, #20
 8008eb4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008eb8:	e853 3f00 	ldrex	r3, [r3]
 8008ebc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008ebe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008ec0:	f023 0301 	bic.w	r3, r3, #1
 8008ec4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008ec8:	687b      	ldr	r3, [r7, #4]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	3314      	adds	r3, #20
 8008ece:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008ed2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008ed6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008eda:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008ede:	e841 2300 	strex	r3, r2, [r1]
 8008ee2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008ee4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d1e1      	bne.n	8008eae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	3314      	adds	r3, #20
 8008ef0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ef2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008ef4:	e853 3f00 	ldrex	r3, [r3]
 8008ef8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008efa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008efc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008f00:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	3314      	adds	r3, #20
 8008f0a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008f0e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008f10:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f12:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008f14:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008f16:	e841 2300 	strex	r3, r2, [r1]
 8008f1a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008f1c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d1e3      	bne.n	8008eea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2220      	movs	r2, #32
 8008f26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	330c      	adds	r3, #12
 8008f36:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f3a:	e853 3f00 	ldrex	r3, [r3]
 8008f3e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008f40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008f42:	f023 0310 	bic.w	r3, r3, #16
 8008f46:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	330c      	adds	r3, #12
 8008f50:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008f54:	65ba      	str	r2, [r7, #88]	; 0x58
 8008f56:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f58:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008f5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008f5c:	e841 2300 	strex	r3, r2, [r1]
 8008f60:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008f62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d1e3      	bne.n	8008f30 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008f6c:	4618      	mov	r0, r3
 8008f6e:	f7fc f9d4 	bl	800531a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f7a:	b29b      	uxth	r3, r3
 8008f7c:	1ad3      	subs	r3, r2, r3
 8008f7e:	b29b      	uxth	r3, r3
 8008f80:	4619      	mov	r1, r3
 8008f82:	6878      	ldr	r0, [r7, #4]
 8008f84:	f000 f8b6 	bl	80090f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008f88:	e099      	b.n	80090be <HAL_UART_IRQHandler+0x50e>
 8008f8a:	bf00      	nop
 8008f8c:	0800932b 	.word	0x0800932b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008f98:	b29b      	uxth	r3, r3
 8008f9a:	1ad3      	subs	r3, r2, r3
 8008f9c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008fa4:	b29b      	uxth	r3, r3
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	f000 808b 	beq.w	80090c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008fac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	f000 8086 	beq.w	80090c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	330c      	adds	r3, #12
 8008fbc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fc0:	e853 3f00 	ldrex	r3, [r3]
 8008fc4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008fc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fc8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008fcc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	330c      	adds	r3, #12
 8008fd6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008fda:	647a      	str	r2, [r7, #68]	; 0x44
 8008fdc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fde:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008fe0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008fe2:	e841 2300 	strex	r3, r2, [r1]
 8008fe6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008fe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d1e3      	bne.n	8008fb6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	3314      	adds	r3, #20
 8008ff4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ff8:	e853 3f00 	ldrex	r3, [r3]
 8008ffc:	623b      	str	r3, [r7, #32]
   return(result);
 8008ffe:	6a3b      	ldr	r3, [r7, #32]
 8009000:	f023 0301 	bic.w	r3, r3, #1
 8009004:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	3314      	adds	r3, #20
 800900e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8009012:	633a      	str	r2, [r7, #48]	; 0x30
 8009014:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009016:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009018:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800901a:	e841 2300 	strex	r3, r2, [r1]
 800901e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009022:	2b00      	cmp	r3, #0
 8009024:	d1e3      	bne.n	8008fee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	2220      	movs	r2, #32
 800902a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2200      	movs	r2, #0
 8009032:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	330c      	adds	r3, #12
 800903a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	e853 3f00 	ldrex	r3, [r3]
 8009042:	60fb      	str	r3, [r7, #12]
   return(result);
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	f023 0310 	bic.w	r3, r3, #16
 800904a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	330c      	adds	r3, #12
 8009054:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009058:	61fa      	str	r2, [r7, #28]
 800905a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800905c:	69b9      	ldr	r1, [r7, #24]
 800905e:	69fa      	ldr	r2, [r7, #28]
 8009060:	e841 2300 	strex	r3, r2, [r1]
 8009064:	617b      	str	r3, [r7, #20]
   return(result);
 8009066:	697b      	ldr	r3, [r7, #20]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d1e3      	bne.n	8009034 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800906c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009070:	4619      	mov	r1, r3
 8009072:	6878      	ldr	r0, [r7, #4]
 8009074:	f000 f83e 	bl	80090f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009078:	e023      	b.n	80090c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800907a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800907e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009082:	2b00      	cmp	r3, #0
 8009084:	d009      	beq.n	800909a <HAL_UART_IRQHandler+0x4ea>
 8009086:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800908a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800908e:	2b00      	cmp	r3, #0
 8009090:	d003      	beq.n	800909a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009092:	6878      	ldr	r0, [r7, #4]
 8009094:	f000 f95d 	bl	8009352 <UART_Transmit_IT>
    return;
 8009098:	e014      	b.n	80090c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800909a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800909e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00e      	beq.n	80090c4 <HAL_UART_IRQHandler+0x514>
 80090a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d008      	beq.n	80090c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 f99d 	bl	80093f2 <UART_EndTransmit_IT>
    return;
 80090b8:	e004      	b.n	80090c4 <HAL_UART_IRQHandler+0x514>
    return;
 80090ba:	bf00      	nop
 80090bc:	e002      	b.n	80090c4 <HAL_UART_IRQHandler+0x514>
      return;
 80090be:	bf00      	nop
 80090c0:	e000      	b.n	80090c4 <HAL_UART_IRQHandler+0x514>
      return;
 80090c2:	bf00      	nop
  }
}
 80090c4:	37e8      	adds	r7, #232	; 0xe8
 80090c6:	46bd      	mov	sp, r7
 80090c8:	bd80      	pop	{r7, pc}
 80090ca:	bf00      	nop

080090cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80090cc:	b480      	push	{r7}
 80090ce:	b083      	sub	sp, #12
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80090d4:	bf00      	nop
 80090d6:	370c      	adds	r7, #12
 80090d8:	46bd      	mov	sp, r7
 80090da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090de:	4770      	bx	lr

080090e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80090e0:	b480      	push	{r7}
 80090e2:	b083      	sub	sp, #12
 80090e4:	af00      	add	r7, sp, #0
 80090e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80090e8:	bf00      	nop
 80090ea:	370c      	adds	r7, #12
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr

080090f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80090f4:	b480      	push	{r7}
 80090f6:	b083      	sub	sp, #12
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	460b      	mov	r3, r1
 80090fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009100:	bf00      	nop
 8009102:	370c      	adds	r7, #12
 8009104:	46bd      	mov	sp, r7
 8009106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800910a:	4770      	bx	lr

0800910c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b090      	sub	sp, #64	; 0x40
 8009110:	af00      	add	r7, sp, #0
 8009112:	60f8      	str	r0, [r7, #12]
 8009114:	60b9      	str	r1, [r7, #8]
 8009116:	603b      	str	r3, [r7, #0]
 8009118:	4613      	mov	r3, r2
 800911a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800911c:	e050      	b.n	80091c0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800911e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009120:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009124:	d04c      	beq.n	80091c0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009126:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009128:	2b00      	cmp	r3, #0
 800912a:	d007      	beq.n	800913c <UART_WaitOnFlagUntilTimeout+0x30>
 800912c:	f7fb fbb4 	bl	8004898 <HAL_GetTick>
 8009130:	4602      	mov	r2, r0
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	1ad3      	subs	r3, r2, r3
 8009136:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009138:	429a      	cmp	r2, r3
 800913a:	d241      	bcs.n	80091c0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	330c      	adds	r3, #12
 8009142:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009146:	e853 3f00 	ldrex	r3, [r3]
 800914a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800914c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800914e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009152:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	330c      	adds	r3, #12
 800915a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800915c:	637a      	str	r2, [r7, #52]	; 0x34
 800915e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009160:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009162:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009164:	e841 2300 	strex	r3, r2, [r1]
 8009168:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800916a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800916c:	2b00      	cmp	r3, #0
 800916e:	d1e5      	bne.n	800913c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	3314      	adds	r3, #20
 8009176:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	e853 3f00 	ldrex	r3, [r3]
 800917e:	613b      	str	r3, [r7, #16]
   return(result);
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	f023 0301 	bic.w	r3, r3, #1
 8009186:	63bb      	str	r3, [r7, #56]	; 0x38
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	3314      	adds	r3, #20
 800918e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009190:	623a      	str	r2, [r7, #32]
 8009192:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009194:	69f9      	ldr	r1, [r7, #28]
 8009196:	6a3a      	ldr	r2, [r7, #32]
 8009198:	e841 2300 	strex	r3, r2, [r1]
 800919c:	61bb      	str	r3, [r7, #24]
   return(result);
 800919e:	69bb      	ldr	r3, [r7, #24]
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d1e5      	bne.n	8009170 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2220      	movs	r2, #32
 80091a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	2220      	movs	r2, #32
 80091b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	2200      	movs	r2, #0
 80091b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80091bc:	2303      	movs	r3, #3
 80091be:	e00f      	b.n	80091e0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	681a      	ldr	r2, [r3, #0]
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	4013      	ands	r3, r2
 80091ca:	68ba      	ldr	r2, [r7, #8]
 80091cc:	429a      	cmp	r2, r3
 80091ce:	bf0c      	ite	eq
 80091d0:	2301      	moveq	r3, #1
 80091d2:	2300      	movne	r3, #0
 80091d4:	b2db      	uxtb	r3, r3
 80091d6:	461a      	mov	r2, r3
 80091d8:	79fb      	ldrb	r3, [r7, #7]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d09f      	beq.n	800911e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80091de:	2300      	movs	r3, #0
}
 80091e0:	4618      	mov	r0, r3
 80091e2:	3740      	adds	r7, #64	; 0x40
 80091e4:	46bd      	mov	sp, r7
 80091e6:	bd80      	pop	{r7, pc}

080091e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80091e8:	b480      	push	{r7}
 80091ea:	b085      	sub	sp, #20
 80091ec:	af00      	add	r7, sp, #0
 80091ee:	60f8      	str	r0, [r7, #12]
 80091f0:	60b9      	str	r1, [r7, #8]
 80091f2:	4613      	mov	r3, r2
 80091f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	68ba      	ldr	r2, [r7, #8]
 80091fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	88fa      	ldrh	r2, [r7, #6]
 8009200:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	88fa      	ldrh	r2, [r7, #6]
 8009206:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	2200      	movs	r2, #0
 800920c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2222      	movs	r2, #34	; 0x22
 8009212:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2200      	movs	r2, #0
 800921a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	691b      	ldr	r3, [r3, #16]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d007      	beq.n	8009236 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	68da      	ldr	r2, [r3, #12]
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	681b      	ldr	r3, [r3, #0]
 8009230:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009234:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	695a      	ldr	r2, [r3, #20]
 800923c:	68fb      	ldr	r3, [r7, #12]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f042 0201 	orr.w	r2, r2, #1
 8009244:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	68da      	ldr	r2, [r3, #12]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f042 0220 	orr.w	r2, r2, #32
 8009254:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009256:	2300      	movs	r3, #0
}
 8009258:	4618      	mov	r0, r3
 800925a:	3714      	adds	r7, #20
 800925c:	46bd      	mov	sp, r7
 800925e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009262:	4770      	bx	lr

08009264 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009264:	b480      	push	{r7}
 8009266:	b095      	sub	sp, #84	; 0x54
 8009268:	af00      	add	r7, sp, #0
 800926a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	330c      	adds	r3, #12
 8009272:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009276:	e853 3f00 	ldrex	r3, [r3]
 800927a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800927c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009282:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	330c      	adds	r3, #12
 800928a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800928c:	643a      	str	r2, [r7, #64]	; 0x40
 800928e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009290:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009292:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009294:	e841 2300 	strex	r3, r2, [r1]
 8009298:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800929a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800929c:	2b00      	cmp	r3, #0
 800929e:	d1e5      	bne.n	800926c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	3314      	adds	r3, #20
 80092a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a8:	6a3b      	ldr	r3, [r7, #32]
 80092aa:	e853 3f00 	ldrex	r3, [r3]
 80092ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80092b0:	69fb      	ldr	r3, [r7, #28]
 80092b2:	f023 0301 	bic.w	r3, r3, #1
 80092b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	3314      	adds	r3, #20
 80092be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80092c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80092c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80092c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80092c8:	e841 2300 	strex	r3, r2, [r1]
 80092cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80092ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d1e5      	bne.n	80092a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092d8:	2b01      	cmp	r3, #1
 80092da:	d119      	bne.n	8009310 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	330c      	adds	r3, #12
 80092e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	e853 3f00 	ldrex	r3, [r3]
 80092ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	f023 0310 	bic.w	r3, r3, #16
 80092f2:	647b      	str	r3, [r7, #68]	; 0x44
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	330c      	adds	r3, #12
 80092fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80092fc:	61ba      	str	r2, [r7, #24]
 80092fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009300:	6979      	ldr	r1, [r7, #20]
 8009302:	69ba      	ldr	r2, [r7, #24]
 8009304:	e841 2300 	strex	r3, r2, [r1]
 8009308:	613b      	str	r3, [r7, #16]
   return(result);
 800930a:	693b      	ldr	r3, [r7, #16]
 800930c:	2b00      	cmp	r3, #0
 800930e:	d1e5      	bne.n	80092dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2220      	movs	r2, #32
 8009314:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	2200      	movs	r2, #0
 800931c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800931e:	bf00      	nop
 8009320:	3754      	adds	r7, #84	; 0x54
 8009322:	46bd      	mov	sp, r7
 8009324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009328:	4770      	bx	lr

0800932a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800932a:	b580      	push	{r7, lr}
 800932c:	b084      	sub	sp, #16
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009336:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	2200      	movs	r2, #0
 800933c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	2200      	movs	r2, #0
 8009342:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009344:	68f8      	ldr	r0, [r7, #12]
 8009346:	f7ff fecb 	bl	80090e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800934a:	bf00      	nop
 800934c:	3710      	adds	r7, #16
 800934e:	46bd      	mov	sp, r7
 8009350:	bd80      	pop	{r7, pc}

08009352 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009352:	b480      	push	{r7}
 8009354:	b085      	sub	sp, #20
 8009356:	af00      	add	r7, sp, #0
 8009358:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009360:	b2db      	uxtb	r3, r3
 8009362:	2b21      	cmp	r3, #33	; 0x21
 8009364:	d13e      	bne.n	80093e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	689b      	ldr	r3, [r3, #8]
 800936a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800936e:	d114      	bne.n	800939a <UART_Transmit_IT+0x48>
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	691b      	ldr	r3, [r3, #16]
 8009374:	2b00      	cmp	r3, #0
 8009376:	d110      	bne.n	800939a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6a1b      	ldr	r3, [r3, #32]
 800937c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	881b      	ldrh	r3, [r3, #0]
 8009382:	461a      	mov	r2, r3
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800938c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	6a1b      	ldr	r3, [r3, #32]
 8009392:	1c9a      	adds	r2, r3, #2
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	621a      	str	r2, [r3, #32]
 8009398:	e008      	b.n	80093ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800939a:	687b      	ldr	r3, [r7, #4]
 800939c:	6a1b      	ldr	r3, [r3, #32]
 800939e:	1c59      	adds	r1, r3, #1
 80093a0:	687a      	ldr	r2, [r7, #4]
 80093a2:	6211      	str	r1, [r2, #32]
 80093a4:	781a      	ldrb	r2, [r3, #0]
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80093b0:	b29b      	uxth	r3, r3
 80093b2:	3b01      	subs	r3, #1
 80093b4:	b29b      	uxth	r3, r3
 80093b6:	687a      	ldr	r2, [r7, #4]
 80093b8:	4619      	mov	r1, r3
 80093ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d10f      	bne.n	80093e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	68da      	ldr	r2, [r3, #12]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80093ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	68da      	ldr	r2, [r3, #12]
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80093e0:	2300      	movs	r3, #0
 80093e2:	e000      	b.n	80093e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80093e4:	2302      	movs	r3, #2
  }
}
 80093e6:	4618      	mov	r0, r3
 80093e8:	3714      	adds	r7, #20
 80093ea:	46bd      	mov	sp, r7
 80093ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f0:	4770      	bx	lr

080093f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80093f2:	b580      	push	{r7, lr}
 80093f4:	b082      	sub	sp, #8
 80093f6:	af00      	add	r7, sp, #0
 80093f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	68da      	ldr	r2, [r3, #12]
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009408:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2220      	movs	r2, #32
 800940e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f7ff fe5a 	bl	80090cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009418:	2300      	movs	r3, #0
}
 800941a:	4618      	mov	r0, r3
 800941c:	3708      	adds	r7, #8
 800941e:	46bd      	mov	sp, r7
 8009420:	bd80      	pop	{r7, pc}

08009422 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009422:	b580      	push	{r7, lr}
 8009424:	b08c      	sub	sp, #48	; 0x30
 8009426:	af00      	add	r7, sp, #0
 8009428:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009430:	b2db      	uxtb	r3, r3
 8009432:	2b22      	cmp	r3, #34	; 0x22
 8009434:	f040 80ab 	bne.w	800958e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	689b      	ldr	r3, [r3, #8]
 800943c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009440:	d117      	bne.n	8009472 <UART_Receive_IT+0x50>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	691b      	ldr	r3, [r3, #16]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d113      	bne.n	8009472 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800944a:	2300      	movs	r3, #0
 800944c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009452:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009454:	687b      	ldr	r3, [r7, #4]
 8009456:	681b      	ldr	r3, [r3, #0]
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	b29b      	uxth	r3, r3
 800945c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009460:	b29a      	uxth	r2, r3
 8009462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009464:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800946a:	1c9a      	adds	r2, r3, #2
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	629a      	str	r2, [r3, #40]	; 0x28
 8009470:	e026      	b.n	80094c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009476:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009478:	2300      	movs	r3, #0
 800947a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	689b      	ldr	r3, [r3, #8]
 8009480:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009484:	d007      	beq.n	8009496 <UART_Receive_IT+0x74>
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	689b      	ldr	r3, [r3, #8]
 800948a:	2b00      	cmp	r3, #0
 800948c:	d10a      	bne.n	80094a4 <UART_Receive_IT+0x82>
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d106      	bne.n	80094a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	681b      	ldr	r3, [r3, #0]
 800949a:	685b      	ldr	r3, [r3, #4]
 800949c:	b2da      	uxtb	r2, r3
 800949e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a0:	701a      	strb	r2, [r3, #0]
 80094a2:	e008      	b.n	80094b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	b2db      	uxtb	r3, r3
 80094ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80094b0:	b2da      	uxtb	r2, r3
 80094b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094ba:	1c5a      	adds	r2, r3, #1
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	3b01      	subs	r3, #1
 80094c8:	b29b      	uxth	r3, r3
 80094ca:	687a      	ldr	r2, [r7, #4]
 80094cc:	4619      	mov	r1, r3
 80094ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d15a      	bne.n	800958a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	68da      	ldr	r2, [r3, #12]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	f022 0220 	bic.w	r2, r2, #32
 80094e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68da      	ldr	r2, [r3, #12]
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80094f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	695a      	ldr	r2, [r3, #20]
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	f022 0201 	bic.w	r2, r2, #1
 8009502:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2220      	movs	r2, #32
 8009508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009510:	2b01      	cmp	r3, #1
 8009512:	d135      	bne.n	8009580 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2200      	movs	r2, #0
 8009518:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	330c      	adds	r3, #12
 8009520:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009522:	697b      	ldr	r3, [r7, #20]
 8009524:	e853 3f00 	ldrex	r3, [r3]
 8009528:	613b      	str	r3, [r7, #16]
   return(result);
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	f023 0310 	bic.w	r3, r3, #16
 8009530:	627b      	str	r3, [r7, #36]	; 0x24
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	330c      	adds	r3, #12
 8009538:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800953a:	623a      	str	r2, [r7, #32]
 800953c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800953e:	69f9      	ldr	r1, [r7, #28]
 8009540:	6a3a      	ldr	r2, [r7, #32]
 8009542:	e841 2300 	strex	r3, r2, [r1]
 8009546:	61bb      	str	r3, [r7, #24]
   return(result);
 8009548:	69bb      	ldr	r3, [r7, #24]
 800954a:	2b00      	cmp	r3, #0
 800954c:	d1e5      	bne.n	800951a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	681b      	ldr	r3, [r3, #0]
 8009554:	f003 0310 	and.w	r3, r3, #16
 8009558:	2b10      	cmp	r3, #16
 800955a:	d10a      	bne.n	8009572 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800955c:	2300      	movs	r3, #0
 800955e:	60fb      	str	r3, [r7, #12]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	60fb      	str	r3, [r7, #12]
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	685b      	ldr	r3, [r3, #4]
 800956e:	60fb      	str	r3, [r7, #12]
 8009570:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009576:	4619      	mov	r1, r3
 8009578:	6878      	ldr	r0, [r7, #4]
 800957a:	f7ff fdbb 	bl	80090f4 <HAL_UARTEx_RxEventCallback>
 800957e:	e002      	b.n	8009586 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009580:	6878      	ldr	r0, [r7, #4]
 8009582:	f7f9 faa3 	bl	8002acc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009586:	2300      	movs	r3, #0
 8009588:	e002      	b.n	8009590 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800958a:	2300      	movs	r3, #0
 800958c:	e000      	b.n	8009590 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800958e:	2302      	movs	r3, #2
  }
}
 8009590:	4618      	mov	r0, r3
 8009592:	3730      	adds	r7, #48	; 0x30
 8009594:	46bd      	mov	sp, r7
 8009596:	bd80      	pop	{r7, pc}

08009598 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009598:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800959c:	b0c0      	sub	sp, #256	; 0x100
 800959e:	af00      	add	r7, sp, #0
 80095a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80095a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	691b      	ldr	r3, [r3, #16]
 80095ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80095b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095b4:	68d9      	ldr	r1, [r3, #12]
 80095b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	ea40 0301 	orr.w	r3, r0, r1
 80095c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80095c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095c6:	689a      	ldr	r2, [r3, #8]
 80095c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095cc:	691b      	ldr	r3, [r3, #16]
 80095ce:	431a      	orrs	r2, r3
 80095d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095d4:	695b      	ldr	r3, [r3, #20]
 80095d6:	431a      	orrs	r2, r3
 80095d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095dc:	69db      	ldr	r3, [r3, #28]
 80095de:	4313      	orrs	r3, r2
 80095e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80095e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	68db      	ldr	r3, [r3, #12]
 80095ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80095f0:	f021 010c 	bic.w	r1, r1, #12
 80095f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80095fe:	430b      	orrs	r3, r1
 8009600:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009602:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	695b      	ldr	r3, [r3, #20]
 800960a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800960e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009612:	6999      	ldr	r1, [r3, #24]
 8009614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009618:	681a      	ldr	r2, [r3, #0]
 800961a:	ea40 0301 	orr.w	r3, r0, r1
 800961e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009624:	681a      	ldr	r2, [r3, #0]
 8009626:	4b8f      	ldr	r3, [pc, #572]	; (8009864 <UART_SetConfig+0x2cc>)
 8009628:	429a      	cmp	r2, r3
 800962a:	d005      	beq.n	8009638 <UART_SetConfig+0xa0>
 800962c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009630:	681a      	ldr	r2, [r3, #0]
 8009632:	4b8d      	ldr	r3, [pc, #564]	; (8009868 <UART_SetConfig+0x2d0>)
 8009634:	429a      	cmp	r2, r3
 8009636:	d104      	bne.n	8009642 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009638:	f7fd fcba 	bl	8006fb0 <HAL_RCC_GetPCLK2Freq>
 800963c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009640:	e003      	b.n	800964a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009642:	f7fd fca1 	bl	8006f88 <HAL_RCC_GetPCLK1Freq>
 8009646:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800964a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800964e:	69db      	ldr	r3, [r3, #28]
 8009650:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009654:	f040 810c 	bne.w	8009870 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009658:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800965c:	2200      	movs	r2, #0
 800965e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009662:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009666:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800966a:	4622      	mov	r2, r4
 800966c:	462b      	mov	r3, r5
 800966e:	1891      	adds	r1, r2, r2
 8009670:	65b9      	str	r1, [r7, #88]	; 0x58
 8009672:	415b      	adcs	r3, r3
 8009674:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009676:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800967a:	4621      	mov	r1, r4
 800967c:	eb12 0801 	adds.w	r8, r2, r1
 8009680:	4629      	mov	r1, r5
 8009682:	eb43 0901 	adc.w	r9, r3, r1
 8009686:	f04f 0200 	mov.w	r2, #0
 800968a:	f04f 0300 	mov.w	r3, #0
 800968e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009692:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009696:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800969a:	4690      	mov	r8, r2
 800969c:	4699      	mov	r9, r3
 800969e:	4623      	mov	r3, r4
 80096a0:	eb18 0303 	adds.w	r3, r8, r3
 80096a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80096a8:	462b      	mov	r3, r5
 80096aa:	eb49 0303 	adc.w	r3, r9, r3
 80096ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80096b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80096be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80096c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80096c6:	460b      	mov	r3, r1
 80096c8:	18db      	adds	r3, r3, r3
 80096ca:	653b      	str	r3, [r7, #80]	; 0x50
 80096cc:	4613      	mov	r3, r2
 80096ce:	eb42 0303 	adc.w	r3, r2, r3
 80096d2:	657b      	str	r3, [r7, #84]	; 0x54
 80096d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80096d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80096dc:	f7f7 fad4 	bl	8000c88 <__aeabi_uldivmod>
 80096e0:	4602      	mov	r2, r0
 80096e2:	460b      	mov	r3, r1
 80096e4:	4b61      	ldr	r3, [pc, #388]	; (800986c <UART_SetConfig+0x2d4>)
 80096e6:	fba3 2302 	umull	r2, r3, r3, r2
 80096ea:	095b      	lsrs	r3, r3, #5
 80096ec:	011c      	lsls	r4, r3, #4
 80096ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80096f2:	2200      	movs	r2, #0
 80096f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80096f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80096fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009700:	4642      	mov	r2, r8
 8009702:	464b      	mov	r3, r9
 8009704:	1891      	adds	r1, r2, r2
 8009706:	64b9      	str	r1, [r7, #72]	; 0x48
 8009708:	415b      	adcs	r3, r3
 800970a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800970c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009710:	4641      	mov	r1, r8
 8009712:	eb12 0a01 	adds.w	sl, r2, r1
 8009716:	4649      	mov	r1, r9
 8009718:	eb43 0b01 	adc.w	fp, r3, r1
 800971c:	f04f 0200 	mov.w	r2, #0
 8009720:	f04f 0300 	mov.w	r3, #0
 8009724:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009728:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800972c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009730:	4692      	mov	sl, r2
 8009732:	469b      	mov	fp, r3
 8009734:	4643      	mov	r3, r8
 8009736:	eb1a 0303 	adds.w	r3, sl, r3
 800973a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800973e:	464b      	mov	r3, r9
 8009740:	eb4b 0303 	adc.w	r3, fp, r3
 8009744:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800974c:	685b      	ldr	r3, [r3, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009754:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009758:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800975c:	460b      	mov	r3, r1
 800975e:	18db      	adds	r3, r3, r3
 8009760:	643b      	str	r3, [r7, #64]	; 0x40
 8009762:	4613      	mov	r3, r2
 8009764:	eb42 0303 	adc.w	r3, r2, r3
 8009768:	647b      	str	r3, [r7, #68]	; 0x44
 800976a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800976e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009772:	f7f7 fa89 	bl	8000c88 <__aeabi_uldivmod>
 8009776:	4602      	mov	r2, r0
 8009778:	460b      	mov	r3, r1
 800977a:	4611      	mov	r1, r2
 800977c:	4b3b      	ldr	r3, [pc, #236]	; (800986c <UART_SetConfig+0x2d4>)
 800977e:	fba3 2301 	umull	r2, r3, r3, r1
 8009782:	095b      	lsrs	r3, r3, #5
 8009784:	2264      	movs	r2, #100	; 0x64
 8009786:	fb02 f303 	mul.w	r3, r2, r3
 800978a:	1acb      	subs	r3, r1, r3
 800978c:	00db      	lsls	r3, r3, #3
 800978e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009792:	4b36      	ldr	r3, [pc, #216]	; (800986c <UART_SetConfig+0x2d4>)
 8009794:	fba3 2302 	umull	r2, r3, r3, r2
 8009798:	095b      	lsrs	r3, r3, #5
 800979a:	005b      	lsls	r3, r3, #1
 800979c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80097a0:	441c      	add	r4, r3
 80097a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80097a6:	2200      	movs	r2, #0
 80097a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80097ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80097b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80097b4:	4642      	mov	r2, r8
 80097b6:	464b      	mov	r3, r9
 80097b8:	1891      	adds	r1, r2, r2
 80097ba:	63b9      	str	r1, [r7, #56]	; 0x38
 80097bc:	415b      	adcs	r3, r3
 80097be:	63fb      	str	r3, [r7, #60]	; 0x3c
 80097c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80097c4:	4641      	mov	r1, r8
 80097c6:	1851      	adds	r1, r2, r1
 80097c8:	6339      	str	r1, [r7, #48]	; 0x30
 80097ca:	4649      	mov	r1, r9
 80097cc:	414b      	adcs	r3, r1
 80097ce:	637b      	str	r3, [r7, #52]	; 0x34
 80097d0:	f04f 0200 	mov.w	r2, #0
 80097d4:	f04f 0300 	mov.w	r3, #0
 80097d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80097dc:	4659      	mov	r1, fp
 80097de:	00cb      	lsls	r3, r1, #3
 80097e0:	4651      	mov	r1, sl
 80097e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80097e6:	4651      	mov	r1, sl
 80097e8:	00ca      	lsls	r2, r1, #3
 80097ea:	4610      	mov	r0, r2
 80097ec:	4619      	mov	r1, r3
 80097ee:	4603      	mov	r3, r0
 80097f0:	4642      	mov	r2, r8
 80097f2:	189b      	adds	r3, r3, r2
 80097f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80097f8:	464b      	mov	r3, r9
 80097fa:	460a      	mov	r2, r1
 80097fc:	eb42 0303 	adc.w	r3, r2, r3
 8009800:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	2200      	movs	r2, #0
 800980c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009810:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009814:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009818:	460b      	mov	r3, r1
 800981a:	18db      	adds	r3, r3, r3
 800981c:	62bb      	str	r3, [r7, #40]	; 0x28
 800981e:	4613      	mov	r3, r2
 8009820:	eb42 0303 	adc.w	r3, r2, r3
 8009824:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009826:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800982a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800982e:	f7f7 fa2b 	bl	8000c88 <__aeabi_uldivmod>
 8009832:	4602      	mov	r2, r0
 8009834:	460b      	mov	r3, r1
 8009836:	4b0d      	ldr	r3, [pc, #52]	; (800986c <UART_SetConfig+0x2d4>)
 8009838:	fba3 1302 	umull	r1, r3, r3, r2
 800983c:	095b      	lsrs	r3, r3, #5
 800983e:	2164      	movs	r1, #100	; 0x64
 8009840:	fb01 f303 	mul.w	r3, r1, r3
 8009844:	1ad3      	subs	r3, r2, r3
 8009846:	00db      	lsls	r3, r3, #3
 8009848:	3332      	adds	r3, #50	; 0x32
 800984a:	4a08      	ldr	r2, [pc, #32]	; (800986c <UART_SetConfig+0x2d4>)
 800984c:	fba2 2303 	umull	r2, r3, r2, r3
 8009850:	095b      	lsrs	r3, r3, #5
 8009852:	f003 0207 	and.w	r2, r3, #7
 8009856:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	4422      	add	r2, r4
 800985e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009860:	e105      	b.n	8009a6e <UART_SetConfig+0x4d6>
 8009862:	bf00      	nop
 8009864:	40011000 	.word	0x40011000
 8009868:	40011400 	.word	0x40011400
 800986c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009870:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009874:	2200      	movs	r2, #0
 8009876:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800987a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800987e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009882:	4642      	mov	r2, r8
 8009884:	464b      	mov	r3, r9
 8009886:	1891      	adds	r1, r2, r2
 8009888:	6239      	str	r1, [r7, #32]
 800988a:	415b      	adcs	r3, r3
 800988c:	627b      	str	r3, [r7, #36]	; 0x24
 800988e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009892:	4641      	mov	r1, r8
 8009894:	1854      	adds	r4, r2, r1
 8009896:	4649      	mov	r1, r9
 8009898:	eb43 0501 	adc.w	r5, r3, r1
 800989c:	f04f 0200 	mov.w	r2, #0
 80098a0:	f04f 0300 	mov.w	r3, #0
 80098a4:	00eb      	lsls	r3, r5, #3
 80098a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80098aa:	00e2      	lsls	r2, r4, #3
 80098ac:	4614      	mov	r4, r2
 80098ae:	461d      	mov	r5, r3
 80098b0:	4643      	mov	r3, r8
 80098b2:	18e3      	adds	r3, r4, r3
 80098b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80098b8:	464b      	mov	r3, r9
 80098ba:	eb45 0303 	adc.w	r3, r5, r3
 80098be:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80098c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80098c6:	685b      	ldr	r3, [r3, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80098ce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80098d2:	f04f 0200 	mov.w	r2, #0
 80098d6:	f04f 0300 	mov.w	r3, #0
 80098da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80098de:	4629      	mov	r1, r5
 80098e0:	008b      	lsls	r3, r1, #2
 80098e2:	4621      	mov	r1, r4
 80098e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80098e8:	4621      	mov	r1, r4
 80098ea:	008a      	lsls	r2, r1, #2
 80098ec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80098f0:	f7f7 f9ca 	bl	8000c88 <__aeabi_uldivmod>
 80098f4:	4602      	mov	r2, r0
 80098f6:	460b      	mov	r3, r1
 80098f8:	4b60      	ldr	r3, [pc, #384]	; (8009a7c <UART_SetConfig+0x4e4>)
 80098fa:	fba3 2302 	umull	r2, r3, r3, r2
 80098fe:	095b      	lsrs	r3, r3, #5
 8009900:	011c      	lsls	r4, r3, #4
 8009902:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009906:	2200      	movs	r2, #0
 8009908:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800990c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009910:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009914:	4642      	mov	r2, r8
 8009916:	464b      	mov	r3, r9
 8009918:	1891      	adds	r1, r2, r2
 800991a:	61b9      	str	r1, [r7, #24]
 800991c:	415b      	adcs	r3, r3
 800991e:	61fb      	str	r3, [r7, #28]
 8009920:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009924:	4641      	mov	r1, r8
 8009926:	1851      	adds	r1, r2, r1
 8009928:	6139      	str	r1, [r7, #16]
 800992a:	4649      	mov	r1, r9
 800992c:	414b      	adcs	r3, r1
 800992e:	617b      	str	r3, [r7, #20]
 8009930:	f04f 0200 	mov.w	r2, #0
 8009934:	f04f 0300 	mov.w	r3, #0
 8009938:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800993c:	4659      	mov	r1, fp
 800993e:	00cb      	lsls	r3, r1, #3
 8009940:	4651      	mov	r1, sl
 8009942:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009946:	4651      	mov	r1, sl
 8009948:	00ca      	lsls	r2, r1, #3
 800994a:	4610      	mov	r0, r2
 800994c:	4619      	mov	r1, r3
 800994e:	4603      	mov	r3, r0
 8009950:	4642      	mov	r2, r8
 8009952:	189b      	adds	r3, r3, r2
 8009954:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009958:	464b      	mov	r3, r9
 800995a:	460a      	mov	r2, r1
 800995c:	eb42 0303 	adc.w	r3, r2, r3
 8009960:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009964:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009968:	685b      	ldr	r3, [r3, #4]
 800996a:	2200      	movs	r2, #0
 800996c:	67bb      	str	r3, [r7, #120]	; 0x78
 800996e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009970:	f04f 0200 	mov.w	r2, #0
 8009974:	f04f 0300 	mov.w	r3, #0
 8009978:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800997c:	4649      	mov	r1, r9
 800997e:	008b      	lsls	r3, r1, #2
 8009980:	4641      	mov	r1, r8
 8009982:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009986:	4641      	mov	r1, r8
 8009988:	008a      	lsls	r2, r1, #2
 800998a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800998e:	f7f7 f97b 	bl	8000c88 <__aeabi_uldivmod>
 8009992:	4602      	mov	r2, r0
 8009994:	460b      	mov	r3, r1
 8009996:	4b39      	ldr	r3, [pc, #228]	; (8009a7c <UART_SetConfig+0x4e4>)
 8009998:	fba3 1302 	umull	r1, r3, r3, r2
 800999c:	095b      	lsrs	r3, r3, #5
 800999e:	2164      	movs	r1, #100	; 0x64
 80099a0:	fb01 f303 	mul.w	r3, r1, r3
 80099a4:	1ad3      	subs	r3, r2, r3
 80099a6:	011b      	lsls	r3, r3, #4
 80099a8:	3332      	adds	r3, #50	; 0x32
 80099aa:	4a34      	ldr	r2, [pc, #208]	; (8009a7c <UART_SetConfig+0x4e4>)
 80099ac:	fba2 2303 	umull	r2, r3, r2, r3
 80099b0:	095b      	lsrs	r3, r3, #5
 80099b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099b6:	441c      	add	r4, r3
 80099b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80099bc:	2200      	movs	r2, #0
 80099be:	673b      	str	r3, [r7, #112]	; 0x70
 80099c0:	677a      	str	r2, [r7, #116]	; 0x74
 80099c2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80099c6:	4642      	mov	r2, r8
 80099c8:	464b      	mov	r3, r9
 80099ca:	1891      	adds	r1, r2, r2
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	415b      	adcs	r3, r3
 80099d0:	60fb      	str	r3, [r7, #12]
 80099d2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80099d6:	4641      	mov	r1, r8
 80099d8:	1851      	adds	r1, r2, r1
 80099da:	6039      	str	r1, [r7, #0]
 80099dc:	4649      	mov	r1, r9
 80099de:	414b      	adcs	r3, r1
 80099e0:	607b      	str	r3, [r7, #4]
 80099e2:	f04f 0200 	mov.w	r2, #0
 80099e6:	f04f 0300 	mov.w	r3, #0
 80099ea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80099ee:	4659      	mov	r1, fp
 80099f0:	00cb      	lsls	r3, r1, #3
 80099f2:	4651      	mov	r1, sl
 80099f4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80099f8:	4651      	mov	r1, sl
 80099fa:	00ca      	lsls	r2, r1, #3
 80099fc:	4610      	mov	r0, r2
 80099fe:	4619      	mov	r1, r3
 8009a00:	4603      	mov	r3, r0
 8009a02:	4642      	mov	r2, r8
 8009a04:	189b      	adds	r3, r3, r2
 8009a06:	66bb      	str	r3, [r7, #104]	; 0x68
 8009a08:	464b      	mov	r3, r9
 8009a0a:	460a      	mov	r2, r1
 8009a0c:	eb42 0303 	adc.w	r3, r2, r3
 8009a10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a16:	685b      	ldr	r3, [r3, #4]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	663b      	str	r3, [r7, #96]	; 0x60
 8009a1c:	667a      	str	r2, [r7, #100]	; 0x64
 8009a1e:	f04f 0200 	mov.w	r2, #0
 8009a22:	f04f 0300 	mov.w	r3, #0
 8009a26:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009a2a:	4649      	mov	r1, r9
 8009a2c:	008b      	lsls	r3, r1, #2
 8009a2e:	4641      	mov	r1, r8
 8009a30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009a34:	4641      	mov	r1, r8
 8009a36:	008a      	lsls	r2, r1, #2
 8009a38:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009a3c:	f7f7 f924 	bl	8000c88 <__aeabi_uldivmod>
 8009a40:	4602      	mov	r2, r0
 8009a42:	460b      	mov	r3, r1
 8009a44:	4b0d      	ldr	r3, [pc, #52]	; (8009a7c <UART_SetConfig+0x4e4>)
 8009a46:	fba3 1302 	umull	r1, r3, r3, r2
 8009a4a:	095b      	lsrs	r3, r3, #5
 8009a4c:	2164      	movs	r1, #100	; 0x64
 8009a4e:	fb01 f303 	mul.w	r3, r1, r3
 8009a52:	1ad3      	subs	r3, r2, r3
 8009a54:	011b      	lsls	r3, r3, #4
 8009a56:	3332      	adds	r3, #50	; 0x32
 8009a58:	4a08      	ldr	r2, [pc, #32]	; (8009a7c <UART_SetConfig+0x4e4>)
 8009a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8009a5e:	095b      	lsrs	r3, r3, #5
 8009a60:	f003 020f 	and.w	r2, r3, #15
 8009a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4422      	add	r2, r4
 8009a6c:	609a      	str	r2, [r3, #8]
}
 8009a6e:	bf00      	nop
 8009a70:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009a74:	46bd      	mov	sp, r7
 8009a76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a7a:	bf00      	nop
 8009a7c:	51eb851f 	.word	0x51eb851f

08009a80 <__NVIC_SetPriority>:
{
 8009a80:	b480      	push	{r7}
 8009a82:	b083      	sub	sp, #12
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	4603      	mov	r3, r0
 8009a88:	6039      	str	r1, [r7, #0]
 8009a8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009a8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	db0a      	blt.n	8009aaa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a94:	683b      	ldr	r3, [r7, #0]
 8009a96:	b2da      	uxtb	r2, r3
 8009a98:	490c      	ldr	r1, [pc, #48]	; (8009acc <__NVIC_SetPriority+0x4c>)
 8009a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a9e:	0112      	lsls	r2, r2, #4
 8009aa0:	b2d2      	uxtb	r2, r2
 8009aa2:	440b      	add	r3, r1
 8009aa4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009aa8:	e00a      	b.n	8009ac0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009aaa:	683b      	ldr	r3, [r7, #0]
 8009aac:	b2da      	uxtb	r2, r3
 8009aae:	4908      	ldr	r1, [pc, #32]	; (8009ad0 <__NVIC_SetPriority+0x50>)
 8009ab0:	79fb      	ldrb	r3, [r7, #7]
 8009ab2:	f003 030f 	and.w	r3, r3, #15
 8009ab6:	3b04      	subs	r3, #4
 8009ab8:	0112      	lsls	r2, r2, #4
 8009aba:	b2d2      	uxtb	r2, r2
 8009abc:	440b      	add	r3, r1
 8009abe:	761a      	strb	r2, [r3, #24]
}
 8009ac0:	bf00      	nop
 8009ac2:	370c      	adds	r7, #12
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aca:	4770      	bx	lr
 8009acc:	e000e100 	.word	0xe000e100
 8009ad0:	e000ed00 	.word	0xe000ed00

08009ad4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009ad8:	2100      	movs	r1, #0
 8009ada:	f06f 0004 	mvn.w	r0, #4
 8009ade:	f7ff ffcf 	bl	8009a80 <__NVIC_SetPriority>
#endif
}
 8009ae2:	bf00      	nop
 8009ae4:	bd80      	pop	{r7, pc}
	...

08009ae8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009ae8:	b480      	push	{r7}
 8009aea:	b083      	sub	sp, #12
 8009aec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009aee:	f3ef 8305 	mrs	r3, IPSR
 8009af2:	603b      	str	r3, [r7, #0]
  return(result);
 8009af4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d003      	beq.n	8009b02 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009afa:	f06f 0305 	mvn.w	r3, #5
 8009afe:	607b      	str	r3, [r7, #4]
 8009b00:	e00c      	b.n	8009b1c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009b02:	4b0a      	ldr	r3, [pc, #40]	; (8009b2c <osKernelInitialize+0x44>)
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d105      	bne.n	8009b16 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009b0a:	4b08      	ldr	r3, [pc, #32]	; (8009b2c <osKernelInitialize+0x44>)
 8009b0c:	2201      	movs	r2, #1
 8009b0e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009b10:	2300      	movs	r3, #0
 8009b12:	607b      	str	r3, [r7, #4]
 8009b14:	e002      	b.n	8009b1c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009b16:	f04f 33ff 	mov.w	r3, #4294967295
 8009b1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009b1c:	687b      	ldr	r3, [r7, #4]
}
 8009b1e:	4618      	mov	r0, r3
 8009b20:	370c      	adds	r7, #12
 8009b22:	46bd      	mov	sp, r7
 8009b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b28:	4770      	bx	lr
 8009b2a:	bf00      	nop
 8009b2c:	200009d0 	.word	0x200009d0

08009b30 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009b30:	b580      	push	{r7, lr}
 8009b32:	b082      	sub	sp, #8
 8009b34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b36:	f3ef 8305 	mrs	r3, IPSR
 8009b3a:	603b      	str	r3, [r7, #0]
  return(result);
 8009b3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d003      	beq.n	8009b4a <osKernelStart+0x1a>
    stat = osErrorISR;
 8009b42:	f06f 0305 	mvn.w	r3, #5
 8009b46:	607b      	str	r3, [r7, #4]
 8009b48:	e010      	b.n	8009b6c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009b4a:	4b0b      	ldr	r3, [pc, #44]	; (8009b78 <osKernelStart+0x48>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	2b01      	cmp	r3, #1
 8009b50:	d109      	bne.n	8009b66 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009b52:	f7ff ffbf 	bl	8009ad4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009b56:	4b08      	ldr	r3, [pc, #32]	; (8009b78 <osKernelStart+0x48>)
 8009b58:	2202      	movs	r2, #2
 8009b5a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009b5c:	f001 f910 	bl	800ad80 <vTaskStartScheduler>
      stat = osOK;
 8009b60:	2300      	movs	r3, #0
 8009b62:	607b      	str	r3, [r7, #4]
 8009b64:	e002      	b.n	8009b6c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009b66:	f04f 33ff 	mov.w	r3, #4294967295
 8009b6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009b6c:	687b      	ldr	r3, [r7, #4]
}
 8009b6e:	4618      	mov	r0, r3
 8009b70:	3708      	adds	r7, #8
 8009b72:	46bd      	mov	sp, r7
 8009b74:	bd80      	pop	{r7, pc}
 8009b76:	bf00      	nop
 8009b78:	200009d0 	.word	0x200009d0

08009b7c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009b7c:	b580      	push	{r7, lr}
 8009b7e:	b08e      	sub	sp, #56	; 0x38
 8009b80:	af04      	add	r7, sp, #16
 8009b82:	60f8      	str	r0, [r7, #12]
 8009b84:	60b9      	str	r1, [r7, #8]
 8009b86:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009b88:	2300      	movs	r3, #0
 8009b8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b8c:	f3ef 8305 	mrs	r3, IPSR
 8009b90:	617b      	str	r3, [r7, #20]
  return(result);
 8009b92:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d17e      	bne.n	8009c96 <osThreadNew+0x11a>
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d07b      	beq.n	8009c96 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009b9e:	2380      	movs	r3, #128	; 0x80
 8009ba0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009ba2:	2318      	movs	r3, #24
 8009ba4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009ba6:	2300      	movs	r3, #0
 8009ba8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009baa:	f04f 33ff 	mov.w	r3, #4294967295
 8009bae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d045      	beq.n	8009c42 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d002      	beq.n	8009bc4 <osThreadNew+0x48>
        name = attr->name;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	699b      	ldr	r3, [r3, #24]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	d002      	beq.n	8009bd2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	699b      	ldr	r3, [r3, #24]
 8009bd0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009bd2:	69fb      	ldr	r3, [r7, #28]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d008      	beq.n	8009bea <osThreadNew+0x6e>
 8009bd8:	69fb      	ldr	r3, [r7, #28]
 8009bda:	2b38      	cmp	r3, #56	; 0x38
 8009bdc:	d805      	bhi.n	8009bea <osThreadNew+0x6e>
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	685b      	ldr	r3, [r3, #4]
 8009be2:	f003 0301 	and.w	r3, r3, #1
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d001      	beq.n	8009bee <osThreadNew+0x72>
        return (NULL);
 8009bea:	2300      	movs	r3, #0
 8009bec:	e054      	b.n	8009c98 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	695b      	ldr	r3, [r3, #20]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d003      	beq.n	8009bfe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	695b      	ldr	r3, [r3, #20]
 8009bfa:	089b      	lsrs	r3, r3, #2
 8009bfc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d00e      	beq.n	8009c24 <osThreadNew+0xa8>
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	68db      	ldr	r3, [r3, #12]
 8009c0a:	2b5b      	cmp	r3, #91	; 0x5b
 8009c0c:	d90a      	bls.n	8009c24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009c12:	2b00      	cmp	r3, #0
 8009c14:	d006      	beq.n	8009c24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	695b      	ldr	r3, [r3, #20]
 8009c1a:	2b00      	cmp	r3, #0
 8009c1c:	d002      	beq.n	8009c24 <osThreadNew+0xa8>
        mem = 1;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	61bb      	str	r3, [r7, #24]
 8009c22:	e010      	b.n	8009c46 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	689b      	ldr	r3, [r3, #8]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	d10c      	bne.n	8009c46 <osThreadNew+0xca>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	68db      	ldr	r3, [r3, #12]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d108      	bne.n	8009c46 <osThreadNew+0xca>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	691b      	ldr	r3, [r3, #16]
 8009c38:	2b00      	cmp	r3, #0
 8009c3a:	d104      	bne.n	8009c46 <osThreadNew+0xca>
          mem = 0;
 8009c3c:	2300      	movs	r3, #0
 8009c3e:	61bb      	str	r3, [r7, #24]
 8009c40:	e001      	b.n	8009c46 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009c42:	2300      	movs	r3, #0
 8009c44:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009c46:	69bb      	ldr	r3, [r7, #24]
 8009c48:	2b01      	cmp	r3, #1
 8009c4a:	d110      	bne.n	8009c6e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009c50:	687a      	ldr	r2, [r7, #4]
 8009c52:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009c54:	9202      	str	r2, [sp, #8]
 8009c56:	9301      	str	r3, [sp, #4]
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	9300      	str	r3, [sp, #0]
 8009c5c:	68bb      	ldr	r3, [r7, #8]
 8009c5e:	6a3a      	ldr	r2, [r7, #32]
 8009c60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c62:	68f8      	ldr	r0, [r7, #12]
 8009c64:	f000 fe38 	bl	800a8d8 <xTaskCreateStatic>
 8009c68:	4603      	mov	r3, r0
 8009c6a:	613b      	str	r3, [r7, #16]
 8009c6c:	e013      	b.n	8009c96 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009c6e:	69bb      	ldr	r3, [r7, #24]
 8009c70:	2b00      	cmp	r3, #0
 8009c72:	d110      	bne.n	8009c96 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009c74:	6a3b      	ldr	r3, [r7, #32]
 8009c76:	b29a      	uxth	r2, r3
 8009c78:	f107 0310 	add.w	r3, r7, #16
 8009c7c:	9301      	str	r3, [sp, #4]
 8009c7e:	69fb      	ldr	r3, [r7, #28]
 8009c80:	9300      	str	r3, [sp, #0]
 8009c82:	68bb      	ldr	r3, [r7, #8]
 8009c84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009c86:	68f8      	ldr	r0, [r7, #12]
 8009c88:	f000 fe83 	bl	800a992 <xTaskCreate>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	d001      	beq.n	8009c96 <osThreadNew+0x11a>
            hTask = NULL;
 8009c92:	2300      	movs	r3, #0
 8009c94:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009c96:	693b      	ldr	r3, [r7, #16]
}
 8009c98:	4618      	mov	r0, r3
 8009c9a:	3728      	adds	r7, #40	; 0x28
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}

08009ca0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b084      	sub	sp, #16
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ca8:	f3ef 8305 	mrs	r3, IPSR
 8009cac:	60bb      	str	r3, [r7, #8]
  return(result);
 8009cae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d003      	beq.n	8009cbc <osDelay+0x1c>
    stat = osErrorISR;
 8009cb4:	f06f 0305 	mvn.w	r3, #5
 8009cb8:	60fb      	str	r3, [r7, #12]
 8009cba:	e007      	b.n	8009ccc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	2b00      	cmp	r3, #0
 8009cc4:	d002      	beq.n	8009ccc <osDelay+0x2c>
      vTaskDelay(ticks);
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f001 f826 	bl	800ad18 <vTaskDelay>
    }
  }

  return (stat);
 8009ccc:	68fb      	ldr	r3, [r7, #12]
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3710      	adds	r7, #16
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}

08009cd6 <osDelayUntil>:

osStatus_t osDelayUntil (uint32_t ticks) {
 8009cd6:	b580      	push	{r7, lr}
 8009cd8:	b086      	sub	sp, #24
 8009cda:	af00      	add	r7, sp, #0
 8009cdc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009cde:	f3ef 8305 	mrs	r3, IPSR
 8009ce2:	60fb      	str	r3, [r7, #12]
  return(result);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
  TickType_t tcnt, delay;
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d003      	beq.n	8009cf2 <osDelayUntil+0x1c>
    stat = osErrorISR;
 8009cea:	f06f 0305 	mvn.w	r3, #5
 8009cee:	617b      	str	r3, [r7, #20]
 8009cf0:	e019      	b.n	8009d26 <osDelayUntil+0x50>
  }
  else {
    stat = osOK;
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	617b      	str	r3, [r7, #20]
    tcnt = xTaskGetTickCount();
 8009cf6:	f001 f955 	bl	800afa4 <xTaskGetTickCount>
 8009cfa:	4603      	mov	r3, r0
 8009cfc:	60bb      	str	r3, [r7, #8]

    /* Determine remaining number of ticks to delay */
    delay = (TickType_t)ticks - tcnt;
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	687a      	ldr	r2, [r7, #4]
 8009d02:	1ad3      	subs	r3, r2, r3
 8009d04:	613b      	str	r3, [r7, #16]

    /* Check if target tick has not expired */
    if((delay != 0U) && (0 == (delay >> (8 * sizeof(TickType_t) - 1)))) {
 8009d06:	693b      	ldr	r3, [r7, #16]
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d009      	beq.n	8009d20 <osDelayUntil+0x4a>
 8009d0c:	693b      	ldr	r3, [r7, #16]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	db06      	blt.n	8009d20 <osDelayUntil+0x4a>
      vTaskDelayUntil (&tcnt, delay);
 8009d12:	f107 0308 	add.w	r3, r7, #8
 8009d16:	6939      	ldr	r1, [r7, #16]
 8009d18:	4618      	mov	r0, r3
 8009d1a:	f000 ff7f 	bl	800ac1c <vTaskDelayUntil>
 8009d1e:	e002      	b.n	8009d26 <osDelayUntil+0x50>
    }
    else
    {
      /* No delay or already expired */
      stat = osErrorParameter;
 8009d20:	f06f 0303 	mvn.w	r3, #3
 8009d24:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8009d26:	697b      	ldr	r3, [r7, #20]
}
 8009d28:	4618      	mov	r0, r3
 8009d2a:	3718      	adds	r7, #24
 8009d2c:	46bd      	mov	sp, r7
 8009d2e:	bd80      	pop	{r7, pc}

08009d30 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009d30:	b480      	push	{r7}
 8009d32:	b085      	sub	sp, #20
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	4a07      	ldr	r2, [pc, #28]	; (8009d5c <vApplicationGetIdleTaskMemory+0x2c>)
 8009d40:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009d42:	68bb      	ldr	r3, [r7, #8]
 8009d44:	4a06      	ldr	r2, [pc, #24]	; (8009d60 <vApplicationGetIdleTaskMemory+0x30>)
 8009d46:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	2280      	movs	r2, #128	; 0x80
 8009d4c:	601a      	str	r2, [r3, #0]
}
 8009d4e:	bf00      	nop
 8009d50:	3714      	adds	r7, #20
 8009d52:	46bd      	mov	sp, r7
 8009d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d58:	4770      	bx	lr
 8009d5a:	bf00      	nop
 8009d5c:	200009d4 	.word	0x200009d4
 8009d60:	20000a30 	.word	0x20000a30

08009d64 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009d64:	b480      	push	{r7}
 8009d66:	b085      	sub	sp, #20
 8009d68:	af00      	add	r7, sp, #0
 8009d6a:	60f8      	str	r0, [r7, #12]
 8009d6c:	60b9      	str	r1, [r7, #8]
 8009d6e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	4a07      	ldr	r2, [pc, #28]	; (8009d90 <vApplicationGetTimerTaskMemory+0x2c>)
 8009d74:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	4a06      	ldr	r2, [pc, #24]	; (8009d94 <vApplicationGetTimerTaskMemory+0x30>)
 8009d7a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009d82:	601a      	str	r2, [r3, #0]
}
 8009d84:	bf00      	nop
 8009d86:	3714      	adds	r7, #20
 8009d88:	46bd      	mov	sp, r7
 8009d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8e:	4770      	bx	lr
 8009d90:	20000c30 	.word	0x20000c30
 8009d94:	20000c8c 	.word	0x20000c8c

08009d98 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009d98:	b480      	push	{r7}
 8009d9a:	b083      	sub	sp, #12
 8009d9c:	af00      	add	r7, sp, #0
 8009d9e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f103 0208 	add.w	r2, r3, #8
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	f04f 32ff 	mov.w	r2, #4294967295
 8009db0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	f103 0208 	add.w	r2, r3, #8
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f103 0208 	add.w	r2, r3, #8
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2200      	movs	r2, #0
 8009dca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009dcc:	bf00      	nop
 8009dce:	370c      	adds	r7, #12
 8009dd0:	46bd      	mov	sp, r7
 8009dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd6:	4770      	bx	lr

08009dd8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	2200      	movs	r2, #0
 8009de4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009de6:	bf00      	nop
 8009de8:	370c      	adds	r7, #12
 8009dea:	46bd      	mov	sp, r7
 8009dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df0:	4770      	bx	lr

08009df2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009df2:	b480      	push	{r7}
 8009df4:	b085      	sub	sp, #20
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	6078      	str	r0, [r7, #4]
 8009dfa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	685b      	ldr	r3, [r3, #4]
 8009e00:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009e02:	683b      	ldr	r3, [r7, #0]
 8009e04:	68fa      	ldr	r2, [r7, #12]
 8009e06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e08:	68fb      	ldr	r3, [r7, #12]
 8009e0a:	689a      	ldr	r2, [r3, #8]
 8009e0c:	683b      	ldr	r3, [r7, #0]
 8009e0e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	683a      	ldr	r2, [r7, #0]
 8009e16:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	683a      	ldr	r2, [r7, #0]
 8009e1c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009e1e:	683b      	ldr	r3, [r7, #0]
 8009e20:	687a      	ldr	r2, [r7, #4]
 8009e22:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	1c5a      	adds	r2, r3, #1
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	601a      	str	r2, [r3, #0]
}
 8009e2e:	bf00      	nop
 8009e30:	3714      	adds	r7, #20
 8009e32:	46bd      	mov	sp, r7
 8009e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e38:	4770      	bx	lr

08009e3a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e3a:	b480      	push	{r7}
 8009e3c:	b085      	sub	sp, #20
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
 8009e42:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009e44:	683b      	ldr	r3, [r7, #0]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009e4a:	68bb      	ldr	r3, [r7, #8]
 8009e4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e50:	d103      	bne.n	8009e5a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	691b      	ldr	r3, [r3, #16]
 8009e56:	60fb      	str	r3, [r7, #12]
 8009e58:	e00c      	b.n	8009e74 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	3308      	adds	r3, #8
 8009e5e:	60fb      	str	r3, [r7, #12]
 8009e60:	e002      	b.n	8009e68 <vListInsert+0x2e>
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	685b      	ldr	r3, [r3, #4]
 8009e66:	60fb      	str	r3, [r7, #12]
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	685b      	ldr	r3, [r3, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	68ba      	ldr	r2, [r7, #8]
 8009e70:	429a      	cmp	r2, r3
 8009e72:	d2f6      	bcs.n	8009e62 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	685a      	ldr	r2, [r3, #4]
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009e7c:	683b      	ldr	r3, [r7, #0]
 8009e7e:	685b      	ldr	r3, [r3, #4]
 8009e80:	683a      	ldr	r2, [r7, #0]
 8009e82:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	68fa      	ldr	r2, [r7, #12]
 8009e88:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	683a      	ldr	r2, [r7, #0]
 8009e8e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	687a      	ldr	r2, [r7, #4]
 8009e94:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	681b      	ldr	r3, [r3, #0]
 8009e9a:	1c5a      	adds	r2, r3, #1
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	601a      	str	r2, [r3, #0]
}
 8009ea0:	bf00      	nop
 8009ea2:	3714      	adds	r7, #20
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eaa:	4770      	bx	lr

08009eac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009eac:	b480      	push	{r7}
 8009eae:	b085      	sub	sp, #20
 8009eb0:	af00      	add	r7, sp, #0
 8009eb2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	691b      	ldr	r3, [r3, #16]
 8009eb8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	685b      	ldr	r3, [r3, #4]
 8009ebe:	687a      	ldr	r2, [r7, #4]
 8009ec0:	6892      	ldr	r2, [r2, #8]
 8009ec2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	689b      	ldr	r3, [r3, #8]
 8009ec8:	687a      	ldr	r2, [r7, #4]
 8009eca:	6852      	ldr	r2, [r2, #4]
 8009ecc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	685b      	ldr	r3, [r3, #4]
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	429a      	cmp	r2, r3
 8009ed6:	d103      	bne.n	8009ee0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	689a      	ldr	r2, [r3, #8]
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	1e5a      	subs	r2, r3, #1
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	681b      	ldr	r3, [r3, #0]
}
 8009ef4:	4618      	mov	r0, r3
 8009ef6:	3714      	adds	r7, #20
 8009ef8:	46bd      	mov	sp, r7
 8009efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efe:	4770      	bx	lr

08009f00 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d10a      	bne.n	8009f2a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f18:	f383 8811 	msr	BASEPRI, r3
 8009f1c:	f3bf 8f6f 	isb	sy
 8009f20:	f3bf 8f4f 	dsb	sy
 8009f24:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009f26:	bf00      	nop
 8009f28:	e7fe      	b.n	8009f28 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009f2a:	f002 f8cb 	bl	800c0c4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f36:	68f9      	ldr	r1, [r7, #12]
 8009f38:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f3a:	fb01 f303 	mul.w	r3, r1, r3
 8009f3e:	441a      	add	r2, r3
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	2200      	movs	r2, #0
 8009f48:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f4a:	68fb      	ldr	r3, [r7, #12]
 8009f4c:	681a      	ldr	r2, [r3, #0]
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f52:	68fb      	ldr	r3, [r7, #12]
 8009f54:	681a      	ldr	r2, [r3, #0]
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f5a:	3b01      	subs	r3, #1
 8009f5c:	68f9      	ldr	r1, [r7, #12]
 8009f5e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009f60:	fb01 f303 	mul.w	r3, r1, r3
 8009f64:	441a      	add	r2, r3
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	22ff      	movs	r2, #255	; 0xff
 8009f6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	22ff      	movs	r2, #255	; 0xff
 8009f76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009f7a:	683b      	ldr	r3, [r7, #0]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d114      	bne.n	8009faa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	691b      	ldr	r3, [r3, #16]
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d01a      	beq.n	8009fbe <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	3310      	adds	r3, #16
 8009f8c:	4618      	mov	r0, r3
 8009f8e:	f001 f981 	bl	800b294 <xTaskRemoveFromEventList>
 8009f92:	4603      	mov	r3, r0
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d012      	beq.n	8009fbe <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009f98:	4b0c      	ldr	r3, [pc, #48]	; (8009fcc <xQueueGenericReset+0xcc>)
 8009f9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009f9e:	601a      	str	r2, [r3, #0]
 8009fa0:	f3bf 8f4f 	dsb	sy
 8009fa4:	f3bf 8f6f 	isb	sy
 8009fa8:	e009      	b.n	8009fbe <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	3310      	adds	r3, #16
 8009fae:	4618      	mov	r0, r3
 8009fb0:	f7ff fef2 	bl	8009d98 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	3324      	adds	r3, #36	; 0x24
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f7ff feed 	bl	8009d98 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009fbe:	f002 f8b1 	bl	800c124 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009fc2:	2301      	movs	r3, #1
}
 8009fc4:	4618      	mov	r0, r3
 8009fc6:	3710      	adds	r7, #16
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}
 8009fcc:	e000ed04 	.word	0xe000ed04

08009fd0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009fd0:	b580      	push	{r7, lr}
 8009fd2:	b08e      	sub	sp, #56	; 0x38
 8009fd4:	af02      	add	r7, sp, #8
 8009fd6:	60f8      	str	r0, [r7, #12]
 8009fd8:	60b9      	str	r1, [r7, #8]
 8009fda:	607a      	str	r2, [r7, #4]
 8009fdc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d10a      	bne.n	8009ffa <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009fe8:	f383 8811 	msr	BASEPRI, r3
 8009fec:	f3bf 8f6f 	isb	sy
 8009ff0:	f3bf 8f4f 	dsb	sy
 8009ff4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009ff6:	bf00      	nop
 8009ff8:	e7fe      	b.n	8009ff8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009ffa:	683b      	ldr	r3, [r7, #0]
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	d10a      	bne.n	800a016 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a000:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a004:	f383 8811 	msr	BASEPRI, r3
 800a008:	f3bf 8f6f 	isb	sy
 800a00c:	f3bf 8f4f 	dsb	sy
 800a010:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a012:	bf00      	nop
 800a014:	e7fe      	b.n	800a014 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d002      	beq.n	800a022 <xQueueGenericCreateStatic+0x52>
 800a01c:	68bb      	ldr	r3, [r7, #8]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d001      	beq.n	800a026 <xQueueGenericCreateStatic+0x56>
 800a022:	2301      	movs	r3, #1
 800a024:	e000      	b.n	800a028 <xQueueGenericCreateStatic+0x58>
 800a026:	2300      	movs	r3, #0
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d10a      	bne.n	800a042 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a030:	f383 8811 	msr	BASEPRI, r3
 800a034:	f3bf 8f6f 	isb	sy
 800a038:	f3bf 8f4f 	dsb	sy
 800a03c:	623b      	str	r3, [r7, #32]
}
 800a03e:	bf00      	nop
 800a040:	e7fe      	b.n	800a040 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a042:	687b      	ldr	r3, [r7, #4]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d102      	bne.n	800a04e <xQueueGenericCreateStatic+0x7e>
 800a048:	68bb      	ldr	r3, [r7, #8]
 800a04a:	2b00      	cmp	r3, #0
 800a04c:	d101      	bne.n	800a052 <xQueueGenericCreateStatic+0x82>
 800a04e:	2301      	movs	r3, #1
 800a050:	e000      	b.n	800a054 <xQueueGenericCreateStatic+0x84>
 800a052:	2300      	movs	r3, #0
 800a054:	2b00      	cmp	r3, #0
 800a056:	d10a      	bne.n	800a06e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a05c:	f383 8811 	msr	BASEPRI, r3
 800a060:	f3bf 8f6f 	isb	sy
 800a064:	f3bf 8f4f 	dsb	sy
 800a068:	61fb      	str	r3, [r7, #28]
}
 800a06a:	bf00      	nop
 800a06c:	e7fe      	b.n	800a06c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a06e:	2350      	movs	r3, #80	; 0x50
 800a070:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a072:	697b      	ldr	r3, [r7, #20]
 800a074:	2b50      	cmp	r3, #80	; 0x50
 800a076:	d00a      	beq.n	800a08e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a07c:	f383 8811 	msr	BASEPRI, r3
 800a080:	f3bf 8f6f 	isb	sy
 800a084:	f3bf 8f4f 	dsb	sy
 800a088:	61bb      	str	r3, [r7, #24]
}
 800a08a:	bf00      	nop
 800a08c:	e7fe      	b.n	800a08c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a08e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a090:	683b      	ldr	r3, [r7, #0]
 800a092:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a096:	2b00      	cmp	r3, #0
 800a098:	d00d      	beq.n	800a0b6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a09c:	2201      	movs	r2, #1
 800a09e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a0a2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a0a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a0a8:	9300      	str	r3, [sp, #0]
 800a0aa:	4613      	mov	r3, r2
 800a0ac:	687a      	ldr	r2, [r7, #4]
 800a0ae:	68b9      	ldr	r1, [r7, #8]
 800a0b0:	68f8      	ldr	r0, [r7, #12]
 800a0b2:	f000 f805 	bl	800a0c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a0b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3730      	adds	r7, #48	; 0x30
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	60f8      	str	r0, [r7, #12]
 800a0c8:	60b9      	str	r1, [r7, #8]
 800a0ca:	607a      	str	r2, [r7, #4]
 800a0cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a0ce:	68bb      	ldr	r3, [r7, #8]
 800a0d0:	2b00      	cmp	r3, #0
 800a0d2:	d103      	bne.n	800a0dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a0d4:	69bb      	ldr	r3, [r7, #24]
 800a0d6:	69ba      	ldr	r2, [r7, #24]
 800a0d8:	601a      	str	r2, [r3, #0]
 800a0da:	e002      	b.n	800a0e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a0dc:	69bb      	ldr	r3, [r7, #24]
 800a0de:	687a      	ldr	r2, [r7, #4]
 800a0e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a0e2:	69bb      	ldr	r3, [r7, #24]
 800a0e4:	68fa      	ldr	r2, [r7, #12]
 800a0e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a0e8:	69bb      	ldr	r3, [r7, #24]
 800a0ea:	68ba      	ldr	r2, [r7, #8]
 800a0ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a0ee:	2101      	movs	r1, #1
 800a0f0:	69b8      	ldr	r0, [r7, #24]
 800a0f2:	f7ff ff05 	bl	8009f00 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a0f6:	69bb      	ldr	r3, [r7, #24]
 800a0f8:	78fa      	ldrb	r2, [r7, #3]
 800a0fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a0fe:	bf00      	nop
 800a100:	3710      	adds	r7, #16
 800a102:	46bd      	mov	sp, r7
 800a104:	bd80      	pop	{r7, pc}
	...

0800a108 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b08e      	sub	sp, #56	; 0x38
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	60f8      	str	r0, [r7, #12]
 800a110:	60b9      	str	r1, [r7, #8]
 800a112:	607a      	str	r2, [r7, #4]
 800a114:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a116:	2300      	movs	r3, #0
 800a118:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a120:	2b00      	cmp	r3, #0
 800a122:	d10a      	bne.n	800a13a <xQueueGenericSend+0x32>
	__asm volatile
 800a124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a128:	f383 8811 	msr	BASEPRI, r3
 800a12c:	f3bf 8f6f 	isb	sy
 800a130:	f3bf 8f4f 	dsb	sy
 800a134:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a136:	bf00      	nop
 800a138:	e7fe      	b.n	800a138 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a13a:	68bb      	ldr	r3, [r7, #8]
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d103      	bne.n	800a148 <xQueueGenericSend+0x40>
 800a140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a144:	2b00      	cmp	r3, #0
 800a146:	d101      	bne.n	800a14c <xQueueGenericSend+0x44>
 800a148:	2301      	movs	r3, #1
 800a14a:	e000      	b.n	800a14e <xQueueGenericSend+0x46>
 800a14c:	2300      	movs	r3, #0
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d10a      	bne.n	800a168 <xQueueGenericSend+0x60>
	__asm volatile
 800a152:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a156:	f383 8811 	msr	BASEPRI, r3
 800a15a:	f3bf 8f6f 	isb	sy
 800a15e:	f3bf 8f4f 	dsb	sy
 800a162:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a164:	bf00      	nop
 800a166:	e7fe      	b.n	800a166 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a168:	683b      	ldr	r3, [r7, #0]
 800a16a:	2b02      	cmp	r3, #2
 800a16c:	d103      	bne.n	800a176 <xQueueGenericSend+0x6e>
 800a16e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a170:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a172:	2b01      	cmp	r3, #1
 800a174:	d101      	bne.n	800a17a <xQueueGenericSend+0x72>
 800a176:	2301      	movs	r3, #1
 800a178:	e000      	b.n	800a17c <xQueueGenericSend+0x74>
 800a17a:	2300      	movs	r3, #0
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d10a      	bne.n	800a196 <xQueueGenericSend+0x8e>
	__asm volatile
 800a180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a184:	f383 8811 	msr	BASEPRI, r3
 800a188:	f3bf 8f6f 	isb	sy
 800a18c:	f3bf 8f4f 	dsb	sy
 800a190:	623b      	str	r3, [r7, #32]
}
 800a192:	bf00      	nop
 800a194:	e7fe      	b.n	800a194 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a196:	f001 fa3b 	bl	800b610 <xTaskGetSchedulerState>
 800a19a:	4603      	mov	r3, r0
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d102      	bne.n	800a1a6 <xQueueGenericSend+0x9e>
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d101      	bne.n	800a1aa <xQueueGenericSend+0xa2>
 800a1a6:	2301      	movs	r3, #1
 800a1a8:	e000      	b.n	800a1ac <xQueueGenericSend+0xa4>
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	2b00      	cmp	r3, #0
 800a1ae:	d10a      	bne.n	800a1c6 <xQueueGenericSend+0xbe>
	__asm volatile
 800a1b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b4:	f383 8811 	msr	BASEPRI, r3
 800a1b8:	f3bf 8f6f 	isb	sy
 800a1bc:	f3bf 8f4f 	dsb	sy
 800a1c0:	61fb      	str	r3, [r7, #28]
}
 800a1c2:	bf00      	nop
 800a1c4:	e7fe      	b.n	800a1c4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a1c6:	f001 ff7d 	bl	800c0c4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a1ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1d2:	429a      	cmp	r2, r3
 800a1d4:	d302      	bcc.n	800a1dc <xQueueGenericSend+0xd4>
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	2b02      	cmp	r3, #2
 800a1da:	d129      	bne.n	800a230 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a1dc:	683a      	ldr	r2, [r7, #0]
 800a1de:	68b9      	ldr	r1, [r7, #8]
 800a1e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a1e2:	f000 fa0b 	bl	800a5fc <prvCopyDataToQueue>
 800a1e6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a1e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a1ec:	2b00      	cmp	r3, #0
 800a1ee:	d010      	beq.n	800a212 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a1f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a1f2:	3324      	adds	r3, #36	; 0x24
 800a1f4:	4618      	mov	r0, r3
 800a1f6:	f001 f84d 	bl	800b294 <xTaskRemoveFromEventList>
 800a1fa:	4603      	mov	r3, r0
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d013      	beq.n	800a228 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a200:	4b3f      	ldr	r3, [pc, #252]	; (800a300 <xQueueGenericSend+0x1f8>)
 800a202:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a206:	601a      	str	r2, [r3, #0]
 800a208:	f3bf 8f4f 	dsb	sy
 800a20c:	f3bf 8f6f 	isb	sy
 800a210:	e00a      	b.n	800a228 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a214:	2b00      	cmp	r3, #0
 800a216:	d007      	beq.n	800a228 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a218:	4b39      	ldr	r3, [pc, #228]	; (800a300 <xQueueGenericSend+0x1f8>)
 800a21a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a21e:	601a      	str	r2, [r3, #0]
 800a220:	f3bf 8f4f 	dsb	sy
 800a224:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a228:	f001 ff7c 	bl	800c124 <vPortExitCritical>
				return pdPASS;
 800a22c:	2301      	movs	r3, #1
 800a22e:	e063      	b.n	800a2f8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2b00      	cmp	r3, #0
 800a234:	d103      	bne.n	800a23e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a236:	f001 ff75 	bl	800c124 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a23a:	2300      	movs	r3, #0
 800a23c:	e05c      	b.n	800a2f8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a23e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a240:	2b00      	cmp	r3, #0
 800a242:	d106      	bne.n	800a252 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a244:	f107 0314 	add.w	r3, r7, #20
 800a248:	4618      	mov	r0, r3
 800a24a:	f001 f887 	bl	800b35c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a24e:	2301      	movs	r3, #1
 800a250:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a252:	f001 ff67 	bl	800c124 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a256:	f000 fdf9 	bl	800ae4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a25a:	f001 ff33 	bl	800c0c4 <vPortEnterCritical>
 800a25e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a260:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a264:	b25b      	sxtb	r3, r3
 800a266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a26a:	d103      	bne.n	800a274 <xQueueGenericSend+0x16c>
 800a26c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a26e:	2200      	movs	r2, #0
 800a270:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a276:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a27a:	b25b      	sxtb	r3, r3
 800a27c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a280:	d103      	bne.n	800a28a <xQueueGenericSend+0x182>
 800a282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a284:	2200      	movs	r2, #0
 800a286:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a28a:	f001 ff4b 	bl	800c124 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a28e:	1d3a      	adds	r2, r7, #4
 800a290:	f107 0314 	add.w	r3, r7, #20
 800a294:	4611      	mov	r1, r2
 800a296:	4618      	mov	r0, r3
 800a298:	f001 f876 	bl	800b388 <xTaskCheckForTimeOut>
 800a29c:	4603      	mov	r3, r0
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d124      	bne.n	800a2ec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a2a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2a4:	f000 faa2 	bl	800a7ec <prvIsQueueFull>
 800a2a8:	4603      	mov	r3, r0
 800a2aa:	2b00      	cmp	r3, #0
 800a2ac:	d018      	beq.n	800a2e0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a2ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b0:	3310      	adds	r3, #16
 800a2b2:	687a      	ldr	r2, [r7, #4]
 800a2b4:	4611      	mov	r1, r2
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f000 ff9c 	bl	800b1f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a2bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2be:	f000 fa2d 	bl	800a71c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a2c2:	f000 fdd1 	bl	800ae68 <xTaskResumeAll>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	f47f af7c 	bne.w	800a1c6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800a2ce:	4b0c      	ldr	r3, [pc, #48]	; (800a300 <xQueueGenericSend+0x1f8>)
 800a2d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2d4:	601a      	str	r2, [r3, #0]
 800a2d6:	f3bf 8f4f 	dsb	sy
 800a2da:	f3bf 8f6f 	isb	sy
 800a2de:	e772      	b.n	800a1c6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a2e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2e2:	f000 fa1b 	bl	800a71c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a2e6:	f000 fdbf 	bl	800ae68 <xTaskResumeAll>
 800a2ea:	e76c      	b.n	800a1c6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a2ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a2ee:	f000 fa15 	bl	800a71c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a2f2:	f000 fdb9 	bl	800ae68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a2f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3738      	adds	r7, #56	; 0x38
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	bd80      	pop	{r7, pc}
 800a300:	e000ed04 	.word	0xe000ed04

0800a304 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a304:	b580      	push	{r7, lr}
 800a306:	b090      	sub	sp, #64	; 0x40
 800a308:	af00      	add	r7, sp, #0
 800a30a:	60f8      	str	r0, [r7, #12]
 800a30c:	60b9      	str	r1, [r7, #8]
 800a30e:	607a      	str	r2, [r7, #4]
 800a310:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a312:	68fb      	ldr	r3, [r7, #12]
 800a314:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800a316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a318:	2b00      	cmp	r3, #0
 800a31a:	d10a      	bne.n	800a332 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800a31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a320:	f383 8811 	msr	BASEPRI, r3
 800a324:	f3bf 8f6f 	isb	sy
 800a328:	f3bf 8f4f 	dsb	sy
 800a32c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a32e:	bf00      	nop
 800a330:	e7fe      	b.n	800a330 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d103      	bne.n	800a340 <xQueueGenericSendFromISR+0x3c>
 800a338:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a33a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d101      	bne.n	800a344 <xQueueGenericSendFromISR+0x40>
 800a340:	2301      	movs	r3, #1
 800a342:	e000      	b.n	800a346 <xQueueGenericSendFromISR+0x42>
 800a344:	2300      	movs	r3, #0
 800a346:	2b00      	cmp	r3, #0
 800a348:	d10a      	bne.n	800a360 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800a34a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a34e:	f383 8811 	msr	BASEPRI, r3
 800a352:	f3bf 8f6f 	isb	sy
 800a356:	f3bf 8f4f 	dsb	sy
 800a35a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a35c:	bf00      	nop
 800a35e:	e7fe      	b.n	800a35e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a360:	683b      	ldr	r3, [r7, #0]
 800a362:	2b02      	cmp	r3, #2
 800a364:	d103      	bne.n	800a36e <xQueueGenericSendFromISR+0x6a>
 800a366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a36a:	2b01      	cmp	r3, #1
 800a36c:	d101      	bne.n	800a372 <xQueueGenericSendFromISR+0x6e>
 800a36e:	2301      	movs	r3, #1
 800a370:	e000      	b.n	800a374 <xQueueGenericSendFromISR+0x70>
 800a372:	2300      	movs	r3, #0
 800a374:	2b00      	cmp	r3, #0
 800a376:	d10a      	bne.n	800a38e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800a378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a37c:	f383 8811 	msr	BASEPRI, r3
 800a380:	f3bf 8f6f 	isb	sy
 800a384:	f3bf 8f4f 	dsb	sy
 800a388:	623b      	str	r3, [r7, #32]
}
 800a38a:	bf00      	nop
 800a38c:	e7fe      	b.n	800a38c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a38e:	f001 ff7b 	bl	800c288 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a392:	f3ef 8211 	mrs	r2, BASEPRI
 800a396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a39a:	f383 8811 	msr	BASEPRI, r3
 800a39e:	f3bf 8f6f 	isb	sy
 800a3a2:	f3bf 8f4f 	dsb	sy
 800a3a6:	61fa      	str	r2, [r7, #28]
 800a3a8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a3aa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a3ac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a3b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3b6:	429a      	cmp	r2, r3
 800a3b8:	d302      	bcc.n	800a3c0 <xQueueGenericSendFromISR+0xbc>
 800a3ba:	683b      	ldr	r3, [r7, #0]
 800a3bc:	2b02      	cmp	r3, #2
 800a3be:	d12f      	bne.n	800a420 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a3c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a3c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ce:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a3d0:	683a      	ldr	r2, [r7, #0]
 800a3d2:	68b9      	ldr	r1, [r7, #8]
 800a3d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800a3d6:	f000 f911 	bl	800a5fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a3da:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800a3de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a3e2:	d112      	bne.n	800a40a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d016      	beq.n	800a41a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a3ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a3ee:	3324      	adds	r3, #36	; 0x24
 800a3f0:	4618      	mov	r0, r3
 800a3f2:	f000 ff4f 	bl	800b294 <xTaskRemoveFromEventList>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d00e      	beq.n	800a41a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d00b      	beq.n	800a41a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	2201      	movs	r2, #1
 800a406:	601a      	str	r2, [r3, #0]
 800a408:	e007      	b.n	800a41a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a40a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a40e:	3301      	adds	r3, #1
 800a410:	b2db      	uxtb	r3, r3
 800a412:	b25a      	sxtb	r2, r3
 800a414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a416:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a41a:	2301      	movs	r3, #1
 800a41c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a41e:	e001      	b.n	800a424 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a420:	2300      	movs	r3, #0
 800a422:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a426:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a428:	697b      	ldr	r3, [r7, #20]
 800a42a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a42e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a430:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a432:	4618      	mov	r0, r3
 800a434:	3740      	adds	r7, #64	; 0x40
 800a436:	46bd      	mov	sp, r7
 800a438:	bd80      	pop	{r7, pc}
	...

0800a43c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b08c      	sub	sp, #48	; 0x30
 800a440:	af00      	add	r7, sp, #0
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	60b9      	str	r1, [r7, #8]
 800a446:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a448:	2300      	movs	r3, #0
 800a44a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a452:	2b00      	cmp	r3, #0
 800a454:	d10a      	bne.n	800a46c <xQueueReceive+0x30>
	__asm volatile
 800a456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a45a:	f383 8811 	msr	BASEPRI, r3
 800a45e:	f3bf 8f6f 	isb	sy
 800a462:	f3bf 8f4f 	dsb	sy
 800a466:	623b      	str	r3, [r7, #32]
}
 800a468:	bf00      	nop
 800a46a:	e7fe      	b.n	800a46a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a46c:	68bb      	ldr	r3, [r7, #8]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	d103      	bne.n	800a47a <xQueueReceive+0x3e>
 800a472:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a476:	2b00      	cmp	r3, #0
 800a478:	d101      	bne.n	800a47e <xQueueReceive+0x42>
 800a47a:	2301      	movs	r3, #1
 800a47c:	e000      	b.n	800a480 <xQueueReceive+0x44>
 800a47e:	2300      	movs	r3, #0
 800a480:	2b00      	cmp	r3, #0
 800a482:	d10a      	bne.n	800a49a <xQueueReceive+0x5e>
	__asm volatile
 800a484:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a488:	f383 8811 	msr	BASEPRI, r3
 800a48c:	f3bf 8f6f 	isb	sy
 800a490:	f3bf 8f4f 	dsb	sy
 800a494:	61fb      	str	r3, [r7, #28]
}
 800a496:	bf00      	nop
 800a498:	e7fe      	b.n	800a498 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a49a:	f001 f8b9 	bl	800b610 <xTaskGetSchedulerState>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d102      	bne.n	800a4aa <xQueueReceive+0x6e>
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d101      	bne.n	800a4ae <xQueueReceive+0x72>
 800a4aa:	2301      	movs	r3, #1
 800a4ac:	e000      	b.n	800a4b0 <xQueueReceive+0x74>
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d10a      	bne.n	800a4ca <xQueueReceive+0x8e>
	__asm volatile
 800a4b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4b8:	f383 8811 	msr	BASEPRI, r3
 800a4bc:	f3bf 8f6f 	isb	sy
 800a4c0:	f3bf 8f4f 	dsb	sy
 800a4c4:	61bb      	str	r3, [r7, #24]
}
 800a4c6:	bf00      	nop
 800a4c8:	e7fe      	b.n	800a4c8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a4ca:	f001 fdfb 	bl	800c0c4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a4d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d6:	2b00      	cmp	r3, #0
 800a4d8:	d01f      	beq.n	800a51a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a4da:	68b9      	ldr	r1, [r7, #8]
 800a4dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a4de:	f000 f8f7 	bl	800a6d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a4e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4e4:	1e5a      	subs	r2, r3, #1
 800a4e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4ec:	691b      	ldr	r3, [r3, #16]
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d00f      	beq.n	800a512 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a4f4:	3310      	adds	r3, #16
 800a4f6:	4618      	mov	r0, r3
 800a4f8:	f000 fecc 	bl	800b294 <xTaskRemoveFromEventList>
 800a4fc:	4603      	mov	r3, r0
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d007      	beq.n	800a512 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a502:	4b3d      	ldr	r3, [pc, #244]	; (800a5f8 <xQueueReceive+0x1bc>)
 800a504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a508:	601a      	str	r2, [r3, #0]
 800a50a:	f3bf 8f4f 	dsb	sy
 800a50e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a512:	f001 fe07 	bl	800c124 <vPortExitCritical>
				return pdPASS;
 800a516:	2301      	movs	r3, #1
 800a518:	e069      	b.n	800a5ee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d103      	bne.n	800a528 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a520:	f001 fe00 	bl	800c124 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a524:	2300      	movs	r3, #0
 800a526:	e062      	b.n	800a5ee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d106      	bne.n	800a53c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a52e:	f107 0310 	add.w	r3, r7, #16
 800a532:	4618      	mov	r0, r3
 800a534:	f000 ff12 	bl	800b35c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a538:	2301      	movs	r3, #1
 800a53a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a53c:	f001 fdf2 	bl	800c124 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a540:	f000 fc84 	bl	800ae4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a544:	f001 fdbe 	bl	800c0c4 <vPortEnterCritical>
 800a548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a54a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a54e:	b25b      	sxtb	r3, r3
 800a550:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a554:	d103      	bne.n	800a55e <xQueueReceive+0x122>
 800a556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a558:	2200      	movs	r2, #0
 800a55a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a560:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a564:	b25b      	sxtb	r3, r3
 800a566:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a56a:	d103      	bne.n	800a574 <xQueueReceive+0x138>
 800a56c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a56e:	2200      	movs	r2, #0
 800a570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a574:	f001 fdd6 	bl	800c124 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a578:	1d3a      	adds	r2, r7, #4
 800a57a:	f107 0310 	add.w	r3, r7, #16
 800a57e:	4611      	mov	r1, r2
 800a580:	4618      	mov	r0, r3
 800a582:	f000 ff01 	bl	800b388 <xTaskCheckForTimeOut>
 800a586:	4603      	mov	r3, r0
 800a588:	2b00      	cmp	r3, #0
 800a58a:	d123      	bne.n	800a5d4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a58c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a58e:	f000 f917 	bl	800a7c0 <prvIsQueueEmpty>
 800a592:	4603      	mov	r3, r0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d017      	beq.n	800a5c8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a59a:	3324      	adds	r3, #36	; 0x24
 800a59c:	687a      	ldr	r2, [r7, #4]
 800a59e:	4611      	mov	r1, r2
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f000 fe27 	bl	800b1f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a5a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5a8:	f000 f8b8 	bl	800a71c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a5ac:	f000 fc5c 	bl	800ae68 <xTaskResumeAll>
 800a5b0:	4603      	mov	r3, r0
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	d189      	bne.n	800a4ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a5b6:	4b10      	ldr	r3, [pc, #64]	; (800a5f8 <xQueueReceive+0x1bc>)
 800a5b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a5bc:	601a      	str	r2, [r3, #0]
 800a5be:	f3bf 8f4f 	dsb	sy
 800a5c2:	f3bf 8f6f 	isb	sy
 800a5c6:	e780      	b.n	800a4ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a5c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5ca:	f000 f8a7 	bl	800a71c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a5ce:	f000 fc4b 	bl	800ae68 <xTaskResumeAll>
 800a5d2:	e77a      	b.n	800a4ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a5d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5d6:	f000 f8a1 	bl	800a71c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a5da:	f000 fc45 	bl	800ae68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a5de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a5e0:	f000 f8ee 	bl	800a7c0 <prvIsQueueEmpty>
 800a5e4:	4603      	mov	r3, r0
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	f43f af6f 	beq.w	800a4ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a5ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a5ee:	4618      	mov	r0, r3
 800a5f0:	3730      	adds	r7, #48	; 0x30
 800a5f2:	46bd      	mov	sp, r7
 800a5f4:	bd80      	pop	{r7, pc}
 800a5f6:	bf00      	nop
 800a5f8:	e000ed04 	.word	0xe000ed04

0800a5fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b086      	sub	sp, #24
 800a600:	af00      	add	r7, sp, #0
 800a602:	60f8      	str	r0, [r7, #12]
 800a604:	60b9      	str	r1, [r7, #8]
 800a606:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a608:	2300      	movs	r3, #0
 800a60a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a60c:	68fb      	ldr	r3, [r7, #12]
 800a60e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a610:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a616:	2b00      	cmp	r3, #0
 800a618:	d10d      	bne.n	800a636 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d14d      	bne.n	800a6be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	689b      	ldr	r3, [r3, #8]
 800a626:	4618      	mov	r0, r3
 800a628:	f001 f810 	bl	800b64c <xTaskPriorityDisinherit>
 800a62c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	2200      	movs	r2, #0
 800a632:	609a      	str	r2, [r3, #8]
 800a634:	e043      	b.n	800a6be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d119      	bne.n	800a670 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	6858      	ldr	r0, [r3, #4]
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a644:	461a      	mov	r2, r3
 800a646:	68b9      	ldr	r1, [r7, #8]
 800a648:	f002 f876 	bl	800c738 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	685a      	ldr	r2, [r3, #4]
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a654:	441a      	add	r2, r3
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	685a      	ldr	r2, [r3, #4]
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	689b      	ldr	r3, [r3, #8]
 800a662:	429a      	cmp	r2, r3
 800a664:	d32b      	bcc.n	800a6be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	681a      	ldr	r2, [r3, #0]
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	605a      	str	r2, [r3, #4]
 800a66e:	e026      	b.n	800a6be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	68d8      	ldr	r0, [r3, #12]
 800a674:	68fb      	ldr	r3, [r7, #12]
 800a676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a678:	461a      	mov	r2, r3
 800a67a:	68b9      	ldr	r1, [r7, #8]
 800a67c:	f002 f85c 	bl	800c738 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	68da      	ldr	r2, [r3, #12]
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a688:	425b      	negs	r3, r3
 800a68a:	441a      	add	r2, r3
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	68da      	ldr	r2, [r3, #12]
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	429a      	cmp	r2, r3
 800a69a:	d207      	bcs.n	800a6ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	689a      	ldr	r2, [r3, #8]
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6a4:	425b      	negs	r3, r3
 800a6a6:	441a      	add	r2, r3
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	2b02      	cmp	r3, #2
 800a6b0:	d105      	bne.n	800a6be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a6b2:	693b      	ldr	r3, [r7, #16]
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	d002      	beq.n	800a6be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	3b01      	subs	r3, #1
 800a6bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a6be:	693b      	ldr	r3, [r7, #16]
 800a6c0:	1c5a      	adds	r2, r3, #1
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a6c6:	697b      	ldr	r3, [r7, #20]
}
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	3718      	adds	r7, #24
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	bd80      	pop	{r7, pc}

0800a6d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b082      	sub	sp, #8
 800a6d4:	af00      	add	r7, sp, #0
 800a6d6:	6078      	str	r0, [r7, #4]
 800a6d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d018      	beq.n	800a714 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	68da      	ldr	r2, [r3, #12]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6ea:	441a      	add	r2, r3
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	68da      	ldr	r2, [r3, #12]
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	689b      	ldr	r3, [r3, #8]
 800a6f8:	429a      	cmp	r2, r3
 800a6fa:	d303      	bcc.n	800a704 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	681a      	ldr	r2, [r3, #0]
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	68d9      	ldr	r1, [r3, #12]
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a70c:	461a      	mov	r2, r3
 800a70e:	6838      	ldr	r0, [r7, #0]
 800a710:	f002 f812 	bl	800c738 <memcpy>
	}
}
 800a714:	bf00      	nop
 800a716:	3708      	adds	r7, #8
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}

0800a71c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a71c:	b580      	push	{r7, lr}
 800a71e:	b084      	sub	sp, #16
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a724:	f001 fcce 	bl	800c0c4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a72e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a730:	e011      	b.n	800a756 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a736:	2b00      	cmp	r3, #0
 800a738:	d012      	beq.n	800a760 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	3324      	adds	r3, #36	; 0x24
 800a73e:	4618      	mov	r0, r3
 800a740:	f000 fda8 	bl	800b294 <xTaskRemoveFromEventList>
 800a744:	4603      	mov	r3, r0
 800a746:	2b00      	cmp	r3, #0
 800a748:	d001      	beq.n	800a74e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a74a:	f000 fe7f 	bl	800b44c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a74e:	7bfb      	ldrb	r3, [r7, #15]
 800a750:	3b01      	subs	r3, #1
 800a752:	b2db      	uxtb	r3, r3
 800a754:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a756:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a75a:	2b00      	cmp	r3, #0
 800a75c:	dce9      	bgt.n	800a732 <prvUnlockQueue+0x16>
 800a75e:	e000      	b.n	800a762 <prvUnlockQueue+0x46>
					break;
 800a760:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	22ff      	movs	r2, #255	; 0xff
 800a766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a76a:	f001 fcdb 	bl	800c124 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a76e:	f001 fca9 	bl	800c0c4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a778:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a77a:	e011      	b.n	800a7a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	691b      	ldr	r3, [r3, #16]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d012      	beq.n	800a7aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	3310      	adds	r3, #16
 800a788:	4618      	mov	r0, r3
 800a78a:	f000 fd83 	bl	800b294 <xTaskRemoveFromEventList>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d001      	beq.n	800a798 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a794:	f000 fe5a 	bl	800b44c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a798:	7bbb      	ldrb	r3, [r7, #14]
 800a79a:	3b01      	subs	r3, #1
 800a79c:	b2db      	uxtb	r3, r3
 800a79e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a7a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	dce9      	bgt.n	800a77c <prvUnlockQueue+0x60>
 800a7a8:	e000      	b.n	800a7ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a7aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	22ff      	movs	r2, #255	; 0xff
 800a7b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a7b4:	f001 fcb6 	bl	800c124 <vPortExitCritical>
}
 800a7b8:	bf00      	nop
 800a7ba:	3710      	adds	r7, #16
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	bd80      	pop	{r7, pc}

0800a7c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a7c8:	f001 fc7c 	bl	800c0c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7d0:	2b00      	cmp	r3, #0
 800a7d2:	d102      	bne.n	800a7da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	60fb      	str	r3, [r7, #12]
 800a7d8:	e001      	b.n	800a7de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a7da:	2300      	movs	r3, #0
 800a7dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a7de:	f001 fca1 	bl	800c124 <vPortExitCritical>

	return xReturn;
 800a7e2:	68fb      	ldr	r3, [r7, #12]
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3710      	adds	r7, #16
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}

0800a7ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a7f4:	f001 fc66 	bl	800c0c4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a7f8:	687b      	ldr	r3, [r7, #4]
 800a7fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a800:	429a      	cmp	r2, r3
 800a802:	d102      	bne.n	800a80a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a804:	2301      	movs	r3, #1
 800a806:	60fb      	str	r3, [r7, #12]
 800a808:	e001      	b.n	800a80e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a80a:	2300      	movs	r3, #0
 800a80c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a80e:	f001 fc89 	bl	800c124 <vPortExitCritical>

	return xReturn;
 800a812:	68fb      	ldr	r3, [r7, #12]
}
 800a814:	4618      	mov	r0, r3
 800a816:	3710      	adds	r7, #16
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}

0800a81c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a81c:	b480      	push	{r7}
 800a81e:	b085      	sub	sp, #20
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
 800a824:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a826:	2300      	movs	r3, #0
 800a828:	60fb      	str	r3, [r7, #12]
 800a82a:	e014      	b.n	800a856 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a82c:	4a0f      	ldr	r2, [pc, #60]	; (800a86c <vQueueAddToRegistry+0x50>)
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d10b      	bne.n	800a850 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a838:	490c      	ldr	r1, [pc, #48]	; (800a86c <vQueueAddToRegistry+0x50>)
 800a83a:	68fb      	ldr	r3, [r7, #12]
 800a83c:	683a      	ldr	r2, [r7, #0]
 800a83e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a842:	4a0a      	ldr	r2, [pc, #40]	; (800a86c <vQueueAddToRegistry+0x50>)
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	00db      	lsls	r3, r3, #3
 800a848:	4413      	add	r3, r2
 800a84a:	687a      	ldr	r2, [r7, #4]
 800a84c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a84e:	e006      	b.n	800a85e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	3301      	adds	r3, #1
 800a854:	60fb      	str	r3, [r7, #12]
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	2b07      	cmp	r3, #7
 800a85a:	d9e7      	bls.n	800a82c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a85c:	bf00      	nop
 800a85e:	bf00      	nop
 800a860:	3714      	adds	r7, #20
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr
 800a86a:	bf00      	nop
 800a86c:	2000108c 	.word	0x2000108c

0800a870 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a870:	b580      	push	{r7, lr}
 800a872:	b086      	sub	sp, #24
 800a874:	af00      	add	r7, sp, #0
 800a876:	60f8      	str	r0, [r7, #12]
 800a878:	60b9      	str	r1, [r7, #8]
 800a87a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a880:	f001 fc20 	bl	800c0c4 <vPortEnterCritical>
 800a884:	697b      	ldr	r3, [r7, #20]
 800a886:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a88a:	b25b      	sxtb	r3, r3
 800a88c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a890:	d103      	bne.n	800a89a <vQueueWaitForMessageRestricted+0x2a>
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	2200      	movs	r2, #0
 800a896:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a8a0:	b25b      	sxtb	r3, r3
 800a8a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a8a6:	d103      	bne.n	800a8b0 <vQueueWaitForMessageRestricted+0x40>
 800a8a8:	697b      	ldr	r3, [r7, #20]
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a8b0:	f001 fc38 	bl	800c124 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a8b4:	697b      	ldr	r3, [r7, #20]
 800a8b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d106      	bne.n	800a8ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	3324      	adds	r3, #36	; 0x24
 800a8c0:	687a      	ldr	r2, [r7, #4]
 800a8c2:	68b9      	ldr	r1, [r7, #8]
 800a8c4:	4618      	mov	r0, r3
 800a8c6:	f000 fcb9 	bl	800b23c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a8ca:	6978      	ldr	r0, [r7, #20]
 800a8cc:	f7ff ff26 	bl	800a71c <prvUnlockQueue>
	}
 800a8d0:	bf00      	nop
 800a8d2:	3718      	adds	r7, #24
 800a8d4:	46bd      	mov	sp, r7
 800a8d6:	bd80      	pop	{r7, pc}

0800a8d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a8d8:	b580      	push	{r7, lr}
 800a8da:	b08e      	sub	sp, #56	; 0x38
 800a8dc:	af04      	add	r7, sp, #16
 800a8de:	60f8      	str	r0, [r7, #12]
 800a8e0:	60b9      	str	r1, [r7, #8]
 800a8e2:	607a      	str	r2, [r7, #4]
 800a8e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a8e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d10a      	bne.n	800a902 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a8ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f0:	f383 8811 	msr	BASEPRI, r3
 800a8f4:	f3bf 8f6f 	isb	sy
 800a8f8:	f3bf 8f4f 	dsb	sy
 800a8fc:	623b      	str	r3, [r7, #32]
}
 800a8fe:	bf00      	nop
 800a900:	e7fe      	b.n	800a900 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a902:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a904:	2b00      	cmp	r3, #0
 800a906:	d10a      	bne.n	800a91e <xTaskCreateStatic+0x46>
	__asm volatile
 800a908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a90c:	f383 8811 	msr	BASEPRI, r3
 800a910:	f3bf 8f6f 	isb	sy
 800a914:	f3bf 8f4f 	dsb	sy
 800a918:	61fb      	str	r3, [r7, #28]
}
 800a91a:	bf00      	nop
 800a91c:	e7fe      	b.n	800a91c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a91e:	235c      	movs	r3, #92	; 0x5c
 800a920:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a922:	693b      	ldr	r3, [r7, #16]
 800a924:	2b5c      	cmp	r3, #92	; 0x5c
 800a926:	d00a      	beq.n	800a93e <xTaskCreateStatic+0x66>
	__asm volatile
 800a928:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a92c:	f383 8811 	msr	BASEPRI, r3
 800a930:	f3bf 8f6f 	isb	sy
 800a934:	f3bf 8f4f 	dsb	sy
 800a938:	61bb      	str	r3, [r7, #24]
}
 800a93a:	bf00      	nop
 800a93c:	e7fe      	b.n	800a93c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a93e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a942:	2b00      	cmp	r3, #0
 800a944:	d01e      	beq.n	800a984 <xTaskCreateStatic+0xac>
 800a946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d01b      	beq.n	800a984 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a94c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a94e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a950:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a952:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a954:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a956:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a958:	2202      	movs	r2, #2
 800a95a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a95e:	2300      	movs	r3, #0
 800a960:	9303      	str	r3, [sp, #12]
 800a962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a964:	9302      	str	r3, [sp, #8]
 800a966:	f107 0314 	add.w	r3, r7, #20
 800a96a:	9301      	str	r3, [sp, #4]
 800a96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a96e:	9300      	str	r3, [sp, #0]
 800a970:	683b      	ldr	r3, [r7, #0]
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	68b9      	ldr	r1, [r7, #8]
 800a976:	68f8      	ldr	r0, [r7, #12]
 800a978:	f000 f850 	bl	800aa1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a97c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a97e:	f000 f8dd 	bl	800ab3c <prvAddNewTaskToReadyList>
 800a982:	e001      	b.n	800a988 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a984:	2300      	movs	r3, #0
 800a986:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a988:	697b      	ldr	r3, [r7, #20]
	}
 800a98a:	4618      	mov	r0, r3
 800a98c:	3728      	adds	r7, #40	; 0x28
 800a98e:	46bd      	mov	sp, r7
 800a990:	bd80      	pop	{r7, pc}

0800a992 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a992:	b580      	push	{r7, lr}
 800a994:	b08c      	sub	sp, #48	; 0x30
 800a996:	af04      	add	r7, sp, #16
 800a998:	60f8      	str	r0, [r7, #12]
 800a99a:	60b9      	str	r1, [r7, #8]
 800a99c:	603b      	str	r3, [r7, #0]
 800a99e:	4613      	mov	r3, r2
 800a9a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a9a2:	88fb      	ldrh	r3, [r7, #6]
 800a9a4:	009b      	lsls	r3, r3, #2
 800a9a6:	4618      	mov	r0, r3
 800a9a8:	f001 fcae 	bl	800c308 <pvPortMalloc>
 800a9ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a9ae:	697b      	ldr	r3, [r7, #20]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d00e      	beq.n	800a9d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a9b4:	205c      	movs	r0, #92	; 0x5c
 800a9b6:	f001 fca7 	bl	800c308 <pvPortMalloc>
 800a9ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a9bc:	69fb      	ldr	r3, [r7, #28]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d003      	beq.n	800a9ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a9c2:	69fb      	ldr	r3, [r7, #28]
 800a9c4:	697a      	ldr	r2, [r7, #20]
 800a9c6:	631a      	str	r2, [r3, #48]	; 0x30
 800a9c8:	e005      	b.n	800a9d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a9ca:	6978      	ldr	r0, [r7, #20]
 800a9cc:	f001 fd68 	bl	800c4a0 <vPortFree>
 800a9d0:	e001      	b.n	800a9d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a9d6:	69fb      	ldr	r3, [r7, #28]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d017      	beq.n	800aa0c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a9dc:	69fb      	ldr	r3, [r7, #28]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a9e4:	88fa      	ldrh	r2, [r7, #6]
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	9303      	str	r3, [sp, #12]
 800a9ea:	69fb      	ldr	r3, [r7, #28]
 800a9ec:	9302      	str	r3, [sp, #8]
 800a9ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9f0:	9301      	str	r3, [sp, #4]
 800a9f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9f4:	9300      	str	r3, [sp, #0]
 800a9f6:	683b      	ldr	r3, [r7, #0]
 800a9f8:	68b9      	ldr	r1, [r7, #8]
 800a9fa:	68f8      	ldr	r0, [r7, #12]
 800a9fc:	f000 f80e 	bl	800aa1c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa00:	69f8      	ldr	r0, [r7, #28]
 800aa02:	f000 f89b 	bl	800ab3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aa06:	2301      	movs	r3, #1
 800aa08:	61bb      	str	r3, [r7, #24]
 800aa0a:	e002      	b.n	800aa12 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aa0c:	f04f 33ff 	mov.w	r3, #4294967295
 800aa10:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aa12:	69bb      	ldr	r3, [r7, #24]
	}
 800aa14:	4618      	mov	r0, r3
 800aa16:	3720      	adds	r7, #32
 800aa18:	46bd      	mov	sp, r7
 800aa1a:	bd80      	pop	{r7, pc}

0800aa1c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b088      	sub	sp, #32
 800aa20:	af00      	add	r7, sp, #0
 800aa22:	60f8      	str	r0, [r7, #12]
 800aa24:	60b9      	str	r1, [r7, #8]
 800aa26:	607a      	str	r2, [r7, #4]
 800aa28:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800aa2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa2c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	009b      	lsls	r3, r3, #2
 800aa32:	461a      	mov	r2, r3
 800aa34:	21a5      	movs	r1, #165	; 0xa5
 800aa36:	f001 fe8d 	bl	800c754 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800aa3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa3c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa3e:	687b      	ldr	r3, [r7, #4]
 800aa40:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800aa44:	3b01      	subs	r3, #1
 800aa46:	009b      	lsls	r3, r3, #2
 800aa48:	4413      	add	r3, r2
 800aa4a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800aa4c:	69bb      	ldr	r3, [r7, #24]
 800aa4e:	f023 0307 	bic.w	r3, r3, #7
 800aa52:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800aa54:	69bb      	ldr	r3, [r7, #24]
 800aa56:	f003 0307 	and.w	r3, r3, #7
 800aa5a:	2b00      	cmp	r3, #0
 800aa5c:	d00a      	beq.n	800aa74 <prvInitialiseNewTask+0x58>
	__asm volatile
 800aa5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa62:	f383 8811 	msr	BASEPRI, r3
 800aa66:	f3bf 8f6f 	isb	sy
 800aa6a:	f3bf 8f4f 	dsb	sy
 800aa6e:	617b      	str	r3, [r7, #20]
}
 800aa70:	bf00      	nop
 800aa72:	e7fe      	b.n	800aa72 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800aa74:	68bb      	ldr	r3, [r7, #8]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d01f      	beq.n	800aaba <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	61fb      	str	r3, [r7, #28]
 800aa7e:	e012      	b.n	800aaa6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800aa80:	68ba      	ldr	r2, [r7, #8]
 800aa82:	69fb      	ldr	r3, [r7, #28]
 800aa84:	4413      	add	r3, r2
 800aa86:	7819      	ldrb	r1, [r3, #0]
 800aa88:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aa8a:	69fb      	ldr	r3, [r7, #28]
 800aa8c:	4413      	add	r3, r2
 800aa8e:	3334      	adds	r3, #52	; 0x34
 800aa90:	460a      	mov	r2, r1
 800aa92:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aa94:	68ba      	ldr	r2, [r7, #8]
 800aa96:	69fb      	ldr	r3, [r7, #28]
 800aa98:	4413      	add	r3, r2
 800aa9a:	781b      	ldrb	r3, [r3, #0]
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d006      	beq.n	800aaae <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800aaa0:	69fb      	ldr	r3, [r7, #28]
 800aaa2:	3301      	adds	r3, #1
 800aaa4:	61fb      	str	r3, [r7, #28]
 800aaa6:	69fb      	ldr	r3, [r7, #28]
 800aaa8:	2b0f      	cmp	r3, #15
 800aaaa:	d9e9      	bls.n	800aa80 <prvInitialiseNewTask+0x64>
 800aaac:	e000      	b.n	800aab0 <prvInitialiseNewTask+0x94>
			{
				break;
 800aaae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800aab0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aab2:	2200      	movs	r2, #0
 800aab4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800aab8:	e003      	b.n	800aac2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800aaba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aabc:	2200      	movs	r2, #0
 800aabe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800aac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac4:	2b37      	cmp	r3, #55	; 0x37
 800aac6:	d901      	bls.n	800aacc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800aac8:	2337      	movs	r3, #55	; 0x37
 800aaca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800aacc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aace:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aad0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800aad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aad4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800aad6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800aad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aada:	2200      	movs	r2, #0
 800aadc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800aade:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aae0:	3304      	adds	r3, #4
 800aae2:	4618      	mov	r0, r3
 800aae4:	f7ff f978 	bl	8009dd8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800aae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaea:	3318      	adds	r3, #24
 800aaec:	4618      	mov	r0, r3
 800aaee:	f7ff f973 	bl	8009dd8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800aaf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aaf4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800aaf6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800aaf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aafa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800aafe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab00:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ab02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab06:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ab08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab0a:	2200      	movs	r2, #0
 800ab0c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ab0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab10:	2200      	movs	r2, #0
 800ab12:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ab16:	683a      	ldr	r2, [r7, #0]
 800ab18:	68f9      	ldr	r1, [r7, #12]
 800ab1a:	69b8      	ldr	r0, [r7, #24]
 800ab1c:	f001 f9a6 	bl	800be6c <pxPortInitialiseStack>
 800ab20:	4602      	mov	r2, r0
 800ab22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab24:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ab26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d002      	beq.n	800ab32 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ab2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ab32:	bf00      	nop
 800ab34:	3720      	adds	r7, #32
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
	...

0800ab3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ab44:	f001 fabe 	bl	800c0c4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ab48:	4b2d      	ldr	r3, [pc, #180]	; (800ac00 <prvAddNewTaskToReadyList+0xc4>)
 800ab4a:	681b      	ldr	r3, [r3, #0]
 800ab4c:	3301      	adds	r3, #1
 800ab4e:	4a2c      	ldr	r2, [pc, #176]	; (800ac00 <prvAddNewTaskToReadyList+0xc4>)
 800ab50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ab52:	4b2c      	ldr	r3, [pc, #176]	; (800ac04 <prvAddNewTaskToReadyList+0xc8>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d109      	bne.n	800ab6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ab5a:	4a2a      	ldr	r2, [pc, #168]	; (800ac04 <prvAddNewTaskToReadyList+0xc8>)
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ab60:	4b27      	ldr	r3, [pc, #156]	; (800ac00 <prvAddNewTaskToReadyList+0xc4>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	d110      	bne.n	800ab8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ab68:	f000 fc94 	bl	800b494 <prvInitialiseTaskLists>
 800ab6c:	e00d      	b.n	800ab8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ab6e:	4b26      	ldr	r3, [pc, #152]	; (800ac08 <prvAddNewTaskToReadyList+0xcc>)
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d109      	bne.n	800ab8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ab76:	4b23      	ldr	r3, [pc, #140]	; (800ac04 <prvAddNewTaskToReadyList+0xc8>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab80:	429a      	cmp	r2, r3
 800ab82:	d802      	bhi.n	800ab8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ab84:	4a1f      	ldr	r2, [pc, #124]	; (800ac04 <prvAddNewTaskToReadyList+0xc8>)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ab8a:	4b20      	ldr	r3, [pc, #128]	; (800ac0c <prvAddNewTaskToReadyList+0xd0>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	3301      	adds	r3, #1
 800ab90:	4a1e      	ldr	r2, [pc, #120]	; (800ac0c <prvAddNewTaskToReadyList+0xd0>)
 800ab92:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ab94:	4b1d      	ldr	r3, [pc, #116]	; (800ac0c <prvAddNewTaskToReadyList+0xd0>)
 800ab96:	681a      	ldr	r2, [r3, #0]
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aba0:	4b1b      	ldr	r3, [pc, #108]	; (800ac10 <prvAddNewTaskToReadyList+0xd4>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d903      	bls.n	800abb0 <prvAddNewTaskToReadyList+0x74>
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abac:	4a18      	ldr	r2, [pc, #96]	; (800ac10 <prvAddNewTaskToReadyList+0xd4>)
 800abae:	6013      	str	r3, [r2, #0]
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abb4:	4613      	mov	r3, r2
 800abb6:	009b      	lsls	r3, r3, #2
 800abb8:	4413      	add	r3, r2
 800abba:	009b      	lsls	r3, r3, #2
 800abbc:	4a15      	ldr	r2, [pc, #84]	; (800ac14 <prvAddNewTaskToReadyList+0xd8>)
 800abbe:	441a      	add	r2, r3
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	3304      	adds	r3, #4
 800abc4:	4619      	mov	r1, r3
 800abc6:	4610      	mov	r0, r2
 800abc8:	f7ff f913 	bl	8009df2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800abcc:	f001 faaa 	bl	800c124 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800abd0:	4b0d      	ldr	r3, [pc, #52]	; (800ac08 <prvAddNewTaskToReadyList+0xcc>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	2b00      	cmp	r3, #0
 800abd6:	d00e      	beq.n	800abf6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800abd8:	4b0a      	ldr	r3, [pc, #40]	; (800ac04 <prvAddNewTaskToReadyList+0xc8>)
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800abe2:	429a      	cmp	r2, r3
 800abe4:	d207      	bcs.n	800abf6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800abe6:	4b0c      	ldr	r3, [pc, #48]	; (800ac18 <prvAddNewTaskToReadyList+0xdc>)
 800abe8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800abec:	601a      	str	r2, [r3, #0]
 800abee:	f3bf 8f4f 	dsb	sy
 800abf2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800abf6:	bf00      	nop
 800abf8:	3708      	adds	r7, #8
 800abfa:	46bd      	mov	sp, r7
 800abfc:	bd80      	pop	{r7, pc}
 800abfe:	bf00      	nop
 800ac00:	200015a0 	.word	0x200015a0
 800ac04:	200010cc 	.word	0x200010cc
 800ac08:	200015ac 	.word	0x200015ac
 800ac0c:	200015bc 	.word	0x200015bc
 800ac10:	200015a8 	.word	0x200015a8
 800ac14:	200010d0 	.word	0x200010d0
 800ac18:	e000ed04 	.word	0xe000ed04

0800ac1c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800ac1c:	b580      	push	{r7, lr}
 800ac1e:	b08a      	sub	sp, #40	; 0x28
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	6078      	str	r0, [r7, #4]
 800ac24:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800ac26:	2300      	movs	r3, #0
 800ac28:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d10a      	bne.n	800ac46 <vTaskDelayUntil+0x2a>
	__asm volatile
 800ac30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac34:	f383 8811 	msr	BASEPRI, r3
 800ac38:	f3bf 8f6f 	isb	sy
 800ac3c:	f3bf 8f4f 	dsb	sy
 800ac40:	617b      	str	r3, [r7, #20]
}
 800ac42:	bf00      	nop
 800ac44:	e7fe      	b.n	800ac44 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800ac46:	683b      	ldr	r3, [r7, #0]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	d10a      	bne.n	800ac62 <vTaskDelayUntil+0x46>
	__asm volatile
 800ac4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac50:	f383 8811 	msr	BASEPRI, r3
 800ac54:	f3bf 8f6f 	isb	sy
 800ac58:	f3bf 8f4f 	dsb	sy
 800ac5c:	613b      	str	r3, [r7, #16]
}
 800ac5e:	bf00      	nop
 800ac60:	e7fe      	b.n	800ac60 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800ac62:	4b2a      	ldr	r3, [pc, #168]	; (800ad0c <vTaskDelayUntil+0xf0>)
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d00a      	beq.n	800ac80 <vTaskDelayUntil+0x64>
	__asm volatile
 800ac6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac6e:	f383 8811 	msr	BASEPRI, r3
 800ac72:	f3bf 8f6f 	isb	sy
 800ac76:	f3bf 8f4f 	dsb	sy
 800ac7a:	60fb      	str	r3, [r7, #12]
}
 800ac7c:	bf00      	nop
 800ac7e:	e7fe      	b.n	800ac7e <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800ac80:	f000 f8e4 	bl	800ae4c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800ac84:	4b22      	ldr	r3, [pc, #136]	; (800ad10 <vTaskDelayUntil+0xf4>)
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	683a      	ldr	r2, [r7, #0]
 800ac90:	4413      	add	r3, r2
 800ac92:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	6a3a      	ldr	r2, [r7, #32]
 800ac9a:	429a      	cmp	r2, r3
 800ac9c:	d20b      	bcs.n	800acb6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	69fa      	ldr	r2, [r7, #28]
 800aca4:	429a      	cmp	r2, r3
 800aca6:	d211      	bcs.n	800accc <vTaskDelayUntil+0xb0>
 800aca8:	69fa      	ldr	r2, [r7, #28]
 800acaa:	6a3b      	ldr	r3, [r7, #32]
 800acac:	429a      	cmp	r2, r3
 800acae:	d90d      	bls.n	800accc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800acb0:	2301      	movs	r3, #1
 800acb2:	627b      	str	r3, [r7, #36]	; 0x24
 800acb4:	e00a      	b.n	800accc <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	681b      	ldr	r3, [r3, #0]
 800acba:	69fa      	ldr	r2, [r7, #28]
 800acbc:	429a      	cmp	r2, r3
 800acbe:	d303      	bcc.n	800acc8 <vTaskDelayUntil+0xac>
 800acc0:	69fa      	ldr	r2, [r7, #28]
 800acc2:	6a3b      	ldr	r3, [r7, #32]
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d901      	bls.n	800accc <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800acc8:	2301      	movs	r3, #1
 800acca:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	69fa      	ldr	r2, [r7, #28]
 800acd0:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800acd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acd4:	2b00      	cmp	r3, #0
 800acd6:	d006      	beq.n	800ace6 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800acd8:	69fa      	ldr	r2, [r7, #28]
 800acda:	6a3b      	ldr	r3, [r7, #32]
 800acdc:	1ad3      	subs	r3, r2, r3
 800acde:	2100      	movs	r1, #0
 800ace0:	4618      	mov	r0, r3
 800ace2:	f000 fd21 	bl	800b728 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800ace6:	f000 f8bf 	bl	800ae68 <xTaskResumeAll>
 800acea:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800acec:	69bb      	ldr	r3, [r7, #24]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d107      	bne.n	800ad02 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800acf2:	4b08      	ldr	r3, [pc, #32]	; (800ad14 <vTaskDelayUntil+0xf8>)
 800acf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800acf8:	601a      	str	r2, [r3, #0]
 800acfa:	f3bf 8f4f 	dsb	sy
 800acfe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ad02:	bf00      	nop
 800ad04:	3728      	adds	r7, #40	; 0x28
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
 800ad0a:	bf00      	nop
 800ad0c:	200015c8 	.word	0x200015c8
 800ad10:	200015a4 	.word	0x200015a4
 800ad14:	e000ed04 	.word	0xe000ed04

0800ad18 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b084      	sub	sp, #16
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ad20:	2300      	movs	r3, #0
 800ad22:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d017      	beq.n	800ad5a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ad2a:	4b13      	ldr	r3, [pc, #76]	; (800ad78 <vTaskDelay+0x60>)
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	2b00      	cmp	r3, #0
 800ad30:	d00a      	beq.n	800ad48 <vTaskDelay+0x30>
	__asm volatile
 800ad32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad36:	f383 8811 	msr	BASEPRI, r3
 800ad3a:	f3bf 8f6f 	isb	sy
 800ad3e:	f3bf 8f4f 	dsb	sy
 800ad42:	60bb      	str	r3, [r7, #8]
}
 800ad44:	bf00      	nop
 800ad46:	e7fe      	b.n	800ad46 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ad48:	f000 f880 	bl	800ae4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ad4c:	2100      	movs	r1, #0
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f000 fcea 	bl	800b728 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ad54:	f000 f888 	bl	800ae68 <xTaskResumeAll>
 800ad58:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ad5a:	68fb      	ldr	r3, [r7, #12]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d107      	bne.n	800ad70 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ad60:	4b06      	ldr	r3, [pc, #24]	; (800ad7c <vTaskDelay+0x64>)
 800ad62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad66:	601a      	str	r2, [r3, #0]
 800ad68:	f3bf 8f4f 	dsb	sy
 800ad6c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ad70:	bf00      	nop
 800ad72:	3710      	adds	r7, #16
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}
 800ad78:	200015c8 	.word	0x200015c8
 800ad7c:	e000ed04 	.word	0xe000ed04

0800ad80 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b08a      	sub	sp, #40	; 0x28
 800ad84:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ad86:	2300      	movs	r3, #0
 800ad88:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ad8e:	463a      	mov	r2, r7
 800ad90:	1d39      	adds	r1, r7, #4
 800ad92:	f107 0308 	add.w	r3, r7, #8
 800ad96:	4618      	mov	r0, r3
 800ad98:	f7fe ffca 	bl	8009d30 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ad9c:	6839      	ldr	r1, [r7, #0]
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	68ba      	ldr	r2, [r7, #8]
 800ada2:	9202      	str	r2, [sp, #8]
 800ada4:	9301      	str	r3, [sp, #4]
 800ada6:	2300      	movs	r3, #0
 800ada8:	9300      	str	r3, [sp, #0]
 800adaa:	2300      	movs	r3, #0
 800adac:	460a      	mov	r2, r1
 800adae:	4921      	ldr	r1, [pc, #132]	; (800ae34 <vTaskStartScheduler+0xb4>)
 800adb0:	4821      	ldr	r0, [pc, #132]	; (800ae38 <vTaskStartScheduler+0xb8>)
 800adb2:	f7ff fd91 	bl	800a8d8 <xTaskCreateStatic>
 800adb6:	4603      	mov	r3, r0
 800adb8:	4a20      	ldr	r2, [pc, #128]	; (800ae3c <vTaskStartScheduler+0xbc>)
 800adba:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800adbc:	4b1f      	ldr	r3, [pc, #124]	; (800ae3c <vTaskStartScheduler+0xbc>)
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	2b00      	cmp	r3, #0
 800adc2:	d002      	beq.n	800adca <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800adc4:	2301      	movs	r3, #1
 800adc6:	617b      	str	r3, [r7, #20]
 800adc8:	e001      	b.n	800adce <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800adca:	2300      	movs	r3, #0
 800adcc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800adce:	697b      	ldr	r3, [r7, #20]
 800add0:	2b01      	cmp	r3, #1
 800add2:	d102      	bne.n	800adda <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800add4:	f000 fcfc 	bl	800b7d0 <xTimerCreateTimerTask>
 800add8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800adda:	697b      	ldr	r3, [r7, #20]
 800addc:	2b01      	cmp	r3, #1
 800adde:	d116      	bne.n	800ae0e <vTaskStartScheduler+0x8e>
	__asm volatile
 800ade0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade4:	f383 8811 	msr	BASEPRI, r3
 800ade8:	f3bf 8f6f 	isb	sy
 800adec:	f3bf 8f4f 	dsb	sy
 800adf0:	613b      	str	r3, [r7, #16]
}
 800adf2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800adf4:	4b12      	ldr	r3, [pc, #72]	; (800ae40 <vTaskStartScheduler+0xc0>)
 800adf6:	f04f 32ff 	mov.w	r2, #4294967295
 800adfa:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800adfc:	4b11      	ldr	r3, [pc, #68]	; (800ae44 <vTaskStartScheduler+0xc4>)
 800adfe:	2201      	movs	r2, #1
 800ae00:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ae02:	4b11      	ldr	r3, [pc, #68]	; (800ae48 <vTaskStartScheduler+0xc8>)
 800ae04:	2200      	movs	r2, #0
 800ae06:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ae08:	f001 f8ba 	bl	800bf80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ae0c:	e00e      	b.n	800ae2c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ae0e:	697b      	ldr	r3, [r7, #20]
 800ae10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae14:	d10a      	bne.n	800ae2c <vTaskStartScheduler+0xac>
	__asm volatile
 800ae16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae1a:	f383 8811 	msr	BASEPRI, r3
 800ae1e:	f3bf 8f6f 	isb	sy
 800ae22:	f3bf 8f4f 	dsb	sy
 800ae26:	60fb      	str	r3, [r7, #12]
}
 800ae28:	bf00      	nop
 800ae2a:	e7fe      	b.n	800ae2a <vTaskStartScheduler+0xaa>
}
 800ae2c:	bf00      	nop
 800ae2e:	3718      	adds	r7, #24
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}
 800ae34:	08010b48 	.word	0x08010b48
 800ae38:	0800b465 	.word	0x0800b465
 800ae3c:	200015c4 	.word	0x200015c4
 800ae40:	200015c0 	.word	0x200015c0
 800ae44:	200015ac 	.word	0x200015ac
 800ae48:	200015a4 	.word	0x200015a4

0800ae4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ae4c:	b480      	push	{r7}
 800ae4e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800ae50:	4b04      	ldr	r3, [pc, #16]	; (800ae64 <vTaskSuspendAll+0x18>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	3301      	adds	r3, #1
 800ae56:	4a03      	ldr	r2, [pc, #12]	; (800ae64 <vTaskSuspendAll+0x18>)
 800ae58:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800ae5a:	bf00      	nop
 800ae5c:	46bd      	mov	sp, r7
 800ae5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae62:	4770      	bx	lr
 800ae64:	200015c8 	.word	0x200015c8

0800ae68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ae68:	b580      	push	{r7, lr}
 800ae6a:	b084      	sub	sp, #16
 800ae6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ae6e:	2300      	movs	r3, #0
 800ae70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ae72:	2300      	movs	r3, #0
 800ae74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ae76:	4b42      	ldr	r3, [pc, #264]	; (800af80 <xTaskResumeAll+0x118>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d10a      	bne.n	800ae94 <xTaskResumeAll+0x2c>
	__asm volatile
 800ae7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae82:	f383 8811 	msr	BASEPRI, r3
 800ae86:	f3bf 8f6f 	isb	sy
 800ae8a:	f3bf 8f4f 	dsb	sy
 800ae8e:	603b      	str	r3, [r7, #0]
}
 800ae90:	bf00      	nop
 800ae92:	e7fe      	b.n	800ae92 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ae94:	f001 f916 	bl	800c0c4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ae98:	4b39      	ldr	r3, [pc, #228]	; (800af80 <xTaskResumeAll+0x118>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	3b01      	subs	r3, #1
 800ae9e:	4a38      	ldr	r2, [pc, #224]	; (800af80 <xTaskResumeAll+0x118>)
 800aea0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aea2:	4b37      	ldr	r3, [pc, #220]	; (800af80 <xTaskResumeAll+0x118>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d162      	bne.n	800af70 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aeaa:	4b36      	ldr	r3, [pc, #216]	; (800af84 <xTaskResumeAll+0x11c>)
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	2b00      	cmp	r3, #0
 800aeb0:	d05e      	beq.n	800af70 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800aeb2:	e02f      	b.n	800af14 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aeb4:	4b34      	ldr	r3, [pc, #208]	; (800af88 <xTaskResumeAll+0x120>)
 800aeb6:	68db      	ldr	r3, [r3, #12]
 800aeb8:	68db      	ldr	r3, [r3, #12]
 800aeba:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	3318      	adds	r3, #24
 800aec0:	4618      	mov	r0, r3
 800aec2:	f7fe fff3 	bl	8009eac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aec6:	68fb      	ldr	r3, [r7, #12]
 800aec8:	3304      	adds	r3, #4
 800aeca:	4618      	mov	r0, r3
 800aecc:	f7fe ffee 	bl	8009eac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aed4:	4b2d      	ldr	r3, [pc, #180]	; (800af8c <xTaskResumeAll+0x124>)
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	429a      	cmp	r2, r3
 800aeda:	d903      	bls.n	800aee4 <xTaskResumeAll+0x7c>
 800aedc:	68fb      	ldr	r3, [r7, #12]
 800aede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aee0:	4a2a      	ldr	r2, [pc, #168]	; (800af8c <xTaskResumeAll+0x124>)
 800aee2:	6013      	str	r3, [r2, #0]
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aee8:	4613      	mov	r3, r2
 800aeea:	009b      	lsls	r3, r3, #2
 800aeec:	4413      	add	r3, r2
 800aeee:	009b      	lsls	r3, r3, #2
 800aef0:	4a27      	ldr	r2, [pc, #156]	; (800af90 <xTaskResumeAll+0x128>)
 800aef2:	441a      	add	r2, r3
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	3304      	adds	r3, #4
 800aef8:	4619      	mov	r1, r3
 800aefa:	4610      	mov	r0, r2
 800aefc:	f7fe ff79 	bl	8009df2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af04:	4b23      	ldr	r3, [pc, #140]	; (800af94 <xTaskResumeAll+0x12c>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d302      	bcc.n	800af14 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800af0e:	4b22      	ldr	r3, [pc, #136]	; (800af98 <xTaskResumeAll+0x130>)
 800af10:	2201      	movs	r2, #1
 800af12:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af14:	4b1c      	ldr	r3, [pc, #112]	; (800af88 <xTaskResumeAll+0x120>)
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d1cb      	bne.n	800aeb4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800af1c:	68fb      	ldr	r3, [r7, #12]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d001      	beq.n	800af26 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800af22:	f000 fb55 	bl	800b5d0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800af26:	4b1d      	ldr	r3, [pc, #116]	; (800af9c <xTaskResumeAll+0x134>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d010      	beq.n	800af54 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800af32:	f000 f847 	bl	800afc4 <xTaskIncrementTick>
 800af36:	4603      	mov	r3, r0
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d002      	beq.n	800af42 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800af3c:	4b16      	ldr	r3, [pc, #88]	; (800af98 <xTaskResumeAll+0x130>)
 800af3e:	2201      	movs	r2, #1
 800af40:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	3b01      	subs	r3, #1
 800af46:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	2b00      	cmp	r3, #0
 800af4c:	d1f1      	bne.n	800af32 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800af4e:	4b13      	ldr	r3, [pc, #76]	; (800af9c <xTaskResumeAll+0x134>)
 800af50:	2200      	movs	r2, #0
 800af52:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800af54:	4b10      	ldr	r3, [pc, #64]	; (800af98 <xTaskResumeAll+0x130>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d009      	beq.n	800af70 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800af5c:	2301      	movs	r3, #1
 800af5e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800af60:	4b0f      	ldr	r3, [pc, #60]	; (800afa0 <xTaskResumeAll+0x138>)
 800af62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800af66:	601a      	str	r2, [r3, #0]
 800af68:	f3bf 8f4f 	dsb	sy
 800af6c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800af70:	f001 f8d8 	bl	800c124 <vPortExitCritical>

	return xAlreadyYielded;
 800af74:	68bb      	ldr	r3, [r7, #8]
}
 800af76:	4618      	mov	r0, r3
 800af78:	3710      	adds	r7, #16
 800af7a:	46bd      	mov	sp, r7
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	200015c8 	.word	0x200015c8
 800af84:	200015a0 	.word	0x200015a0
 800af88:	20001560 	.word	0x20001560
 800af8c:	200015a8 	.word	0x200015a8
 800af90:	200010d0 	.word	0x200010d0
 800af94:	200010cc 	.word	0x200010cc
 800af98:	200015b4 	.word	0x200015b4
 800af9c:	200015b0 	.word	0x200015b0
 800afa0:	e000ed04 	.word	0xe000ed04

0800afa4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800afa4:	b480      	push	{r7}
 800afa6:	b083      	sub	sp, #12
 800afa8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800afaa:	4b05      	ldr	r3, [pc, #20]	; (800afc0 <xTaskGetTickCount+0x1c>)
 800afac:	681b      	ldr	r3, [r3, #0]
 800afae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800afb0:	687b      	ldr	r3, [r7, #4]
}
 800afb2:	4618      	mov	r0, r3
 800afb4:	370c      	adds	r7, #12
 800afb6:	46bd      	mov	sp, r7
 800afb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbc:	4770      	bx	lr
 800afbe:	bf00      	nop
 800afc0:	200015a4 	.word	0x200015a4

0800afc4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b086      	sub	sp, #24
 800afc8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800afca:	2300      	movs	r3, #0
 800afcc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afce:	4b4f      	ldr	r3, [pc, #316]	; (800b10c <xTaskIncrementTick+0x148>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	f040 808f 	bne.w	800b0f6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800afd8:	4b4d      	ldr	r3, [pc, #308]	; (800b110 <xTaskIncrementTick+0x14c>)
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	3301      	adds	r3, #1
 800afde:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800afe0:	4a4b      	ldr	r2, [pc, #300]	; (800b110 <xTaskIncrementTick+0x14c>)
 800afe2:	693b      	ldr	r3, [r7, #16]
 800afe4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800afe6:	693b      	ldr	r3, [r7, #16]
 800afe8:	2b00      	cmp	r3, #0
 800afea:	d120      	bne.n	800b02e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800afec:	4b49      	ldr	r3, [pc, #292]	; (800b114 <xTaskIncrementTick+0x150>)
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d00a      	beq.n	800b00c <xTaskIncrementTick+0x48>
	__asm volatile
 800aff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800affa:	f383 8811 	msr	BASEPRI, r3
 800affe:	f3bf 8f6f 	isb	sy
 800b002:	f3bf 8f4f 	dsb	sy
 800b006:	603b      	str	r3, [r7, #0]
}
 800b008:	bf00      	nop
 800b00a:	e7fe      	b.n	800b00a <xTaskIncrementTick+0x46>
 800b00c:	4b41      	ldr	r3, [pc, #260]	; (800b114 <xTaskIncrementTick+0x150>)
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	60fb      	str	r3, [r7, #12]
 800b012:	4b41      	ldr	r3, [pc, #260]	; (800b118 <xTaskIncrementTick+0x154>)
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	4a3f      	ldr	r2, [pc, #252]	; (800b114 <xTaskIncrementTick+0x150>)
 800b018:	6013      	str	r3, [r2, #0]
 800b01a:	4a3f      	ldr	r2, [pc, #252]	; (800b118 <xTaskIncrementTick+0x154>)
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	6013      	str	r3, [r2, #0]
 800b020:	4b3e      	ldr	r3, [pc, #248]	; (800b11c <xTaskIncrementTick+0x158>)
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	3301      	adds	r3, #1
 800b026:	4a3d      	ldr	r2, [pc, #244]	; (800b11c <xTaskIncrementTick+0x158>)
 800b028:	6013      	str	r3, [r2, #0]
 800b02a:	f000 fad1 	bl	800b5d0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b02e:	4b3c      	ldr	r3, [pc, #240]	; (800b120 <xTaskIncrementTick+0x15c>)
 800b030:	681b      	ldr	r3, [r3, #0]
 800b032:	693a      	ldr	r2, [r7, #16]
 800b034:	429a      	cmp	r2, r3
 800b036:	d349      	bcc.n	800b0cc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b038:	4b36      	ldr	r3, [pc, #216]	; (800b114 <xTaskIncrementTick+0x150>)
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	2b00      	cmp	r3, #0
 800b040:	d104      	bne.n	800b04c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b042:	4b37      	ldr	r3, [pc, #220]	; (800b120 <xTaskIncrementTick+0x15c>)
 800b044:	f04f 32ff 	mov.w	r2, #4294967295
 800b048:	601a      	str	r2, [r3, #0]
					break;
 800b04a:	e03f      	b.n	800b0cc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b04c:	4b31      	ldr	r3, [pc, #196]	; (800b114 <xTaskIncrementTick+0x150>)
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	68db      	ldr	r3, [r3, #12]
 800b052:	68db      	ldr	r3, [r3, #12]
 800b054:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	685b      	ldr	r3, [r3, #4]
 800b05a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b05c:	693a      	ldr	r2, [r7, #16]
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	429a      	cmp	r2, r3
 800b062:	d203      	bcs.n	800b06c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b064:	4a2e      	ldr	r2, [pc, #184]	; (800b120 <xTaskIncrementTick+0x15c>)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b06a:	e02f      	b.n	800b0cc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	3304      	adds	r3, #4
 800b070:	4618      	mov	r0, r3
 800b072:	f7fe ff1b 	bl	8009eac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b07a:	2b00      	cmp	r3, #0
 800b07c:	d004      	beq.n	800b088 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	3318      	adds	r3, #24
 800b082:	4618      	mov	r0, r3
 800b084:	f7fe ff12 	bl	8009eac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b088:	68bb      	ldr	r3, [r7, #8]
 800b08a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b08c:	4b25      	ldr	r3, [pc, #148]	; (800b124 <xTaskIncrementTick+0x160>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	429a      	cmp	r2, r3
 800b092:	d903      	bls.n	800b09c <xTaskIncrementTick+0xd8>
 800b094:	68bb      	ldr	r3, [r7, #8]
 800b096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b098:	4a22      	ldr	r2, [pc, #136]	; (800b124 <xTaskIncrementTick+0x160>)
 800b09a:	6013      	str	r3, [r2, #0]
 800b09c:	68bb      	ldr	r3, [r7, #8]
 800b09e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0a0:	4613      	mov	r3, r2
 800b0a2:	009b      	lsls	r3, r3, #2
 800b0a4:	4413      	add	r3, r2
 800b0a6:	009b      	lsls	r3, r3, #2
 800b0a8:	4a1f      	ldr	r2, [pc, #124]	; (800b128 <xTaskIncrementTick+0x164>)
 800b0aa:	441a      	add	r2, r3
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	3304      	adds	r3, #4
 800b0b0:	4619      	mov	r1, r3
 800b0b2:	4610      	mov	r0, r2
 800b0b4:	f7fe fe9d 	bl	8009df2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0bc:	4b1b      	ldr	r3, [pc, #108]	; (800b12c <xTaskIncrementTick+0x168>)
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0c2:	429a      	cmp	r2, r3
 800b0c4:	d3b8      	bcc.n	800b038 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b0c6:	2301      	movs	r3, #1
 800b0c8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b0ca:	e7b5      	b.n	800b038 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b0cc:	4b17      	ldr	r3, [pc, #92]	; (800b12c <xTaskIncrementTick+0x168>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0d2:	4915      	ldr	r1, [pc, #84]	; (800b128 <xTaskIncrementTick+0x164>)
 800b0d4:	4613      	mov	r3, r2
 800b0d6:	009b      	lsls	r3, r3, #2
 800b0d8:	4413      	add	r3, r2
 800b0da:	009b      	lsls	r3, r3, #2
 800b0dc:	440b      	add	r3, r1
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	2b01      	cmp	r3, #1
 800b0e2:	d901      	bls.n	800b0e8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b0e4:	2301      	movs	r3, #1
 800b0e6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b0e8:	4b11      	ldr	r3, [pc, #68]	; (800b130 <xTaskIncrementTick+0x16c>)
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	2b00      	cmp	r3, #0
 800b0ee:	d007      	beq.n	800b100 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	617b      	str	r3, [r7, #20]
 800b0f4:	e004      	b.n	800b100 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b0f6:	4b0f      	ldr	r3, [pc, #60]	; (800b134 <xTaskIncrementTick+0x170>)
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	3301      	adds	r3, #1
 800b0fc:	4a0d      	ldr	r2, [pc, #52]	; (800b134 <xTaskIncrementTick+0x170>)
 800b0fe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b100:	697b      	ldr	r3, [r7, #20]
}
 800b102:	4618      	mov	r0, r3
 800b104:	3718      	adds	r7, #24
 800b106:	46bd      	mov	sp, r7
 800b108:	bd80      	pop	{r7, pc}
 800b10a:	bf00      	nop
 800b10c:	200015c8 	.word	0x200015c8
 800b110:	200015a4 	.word	0x200015a4
 800b114:	20001558 	.word	0x20001558
 800b118:	2000155c 	.word	0x2000155c
 800b11c:	200015b8 	.word	0x200015b8
 800b120:	200015c0 	.word	0x200015c0
 800b124:	200015a8 	.word	0x200015a8
 800b128:	200010d0 	.word	0x200010d0
 800b12c:	200010cc 	.word	0x200010cc
 800b130:	200015b4 	.word	0x200015b4
 800b134:	200015b0 	.word	0x200015b0

0800b138 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b138:	b480      	push	{r7}
 800b13a:	b085      	sub	sp, #20
 800b13c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b13e:	4b28      	ldr	r3, [pc, #160]	; (800b1e0 <vTaskSwitchContext+0xa8>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	2b00      	cmp	r3, #0
 800b144:	d003      	beq.n	800b14e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b146:	4b27      	ldr	r3, [pc, #156]	; (800b1e4 <vTaskSwitchContext+0xac>)
 800b148:	2201      	movs	r2, #1
 800b14a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b14c:	e041      	b.n	800b1d2 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800b14e:	4b25      	ldr	r3, [pc, #148]	; (800b1e4 <vTaskSwitchContext+0xac>)
 800b150:	2200      	movs	r2, #0
 800b152:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b154:	4b24      	ldr	r3, [pc, #144]	; (800b1e8 <vTaskSwitchContext+0xb0>)
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	60fb      	str	r3, [r7, #12]
 800b15a:	e010      	b.n	800b17e <vTaskSwitchContext+0x46>
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2b00      	cmp	r3, #0
 800b160:	d10a      	bne.n	800b178 <vTaskSwitchContext+0x40>
	__asm volatile
 800b162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b166:	f383 8811 	msr	BASEPRI, r3
 800b16a:	f3bf 8f6f 	isb	sy
 800b16e:	f3bf 8f4f 	dsb	sy
 800b172:	607b      	str	r3, [r7, #4]
}
 800b174:	bf00      	nop
 800b176:	e7fe      	b.n	800b176 <vTaskSwitchContext+0x3e>
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	3b01      	subs	r3, #1
 800b17c:	60fb      	str	r3, [r7, #12]
 800b17e:	491b      	ldr	r1, [pc, #108]	; (800b1ec <vTaskSwitchContext+0xb4>)
 800b180:	68fa      	ldr	r2, [r7, #12]
 800b182:	4613      	mov	r3, r2
 800b184:	009b      	lsls	r3, r3, #2
 800b186:	4413      	add	r3, r2
 800b188:	009b      	lsls	r3, r3, #2
 800b18a:	440b      	add	r3, r1
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	d0e4      	beq.n	800b15c <vTaskSwitchContext+0x24>
 800b192:	68fa      	ldr	r2, [r7, #12]
 800b194:	4613      	mov	r3, r2
 800b196:	009b      	lsls	r3, r3, #2
 800b198:	4413      	add	r3, r2
 800b19a:	009b      	lsls	r3, r3, #2
 800b19c:	4a13      	ldr	r2, [pc, #76]	; (800b1ec <vTaskSwitchContext+0xb4>)
 800b19e:	4413      	add	r3, r2
 800b1a0:	60bb      	str	r3, [r7, #8]
 800b1a2:	68bb      	ldr	r3, [r7, #8]
 800b1a4:	685b      	ldr	r3, [r3, #4]
 800b1a6:	685a      	ldr	r2, [r3, #4]
 800b1a8:	68bb      	ldr	r3, [r7, #8]
 800b1aa:	605a      	str	r2, [r3, #4]
 800b1ac:	68bb      	ldr	r3, [r7, #8]
 800b1ae:	685a      	ldr	r2, [r3, #4]
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	3308      	adds	r3, #8
 800b1b4:	429a      	cmp	r2, r3
 800b1b6:	d104      	bne.n	800b1c2 <vTaskSwitchContext+0x8a>
 800b1b8:	68bb      	ldr	r3, [r7, #8]
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	685a      	ldr	r2, [r3, #4]
 800b1be:	68bb      	ldr	r3, [r7, #8]
 800b1c0:	605a      	str	r2, [r3, #4]
 800b1c2:	68bb      	ldr	r3, [r7, #8]
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	68db      	ldr	r3, [r3, #12]
 800b1c8:	4a09      	ldr	r2, [pc, #36]	; (800b1f0 <vTaskSwitchContext+0xb8>)
 800b1ca:	6013      	str	r3, [r2, #0]
 800b1cc:	4a06      	ldr	r2, [pc, #24]	; (800b1e8 <vTaskSwitchContext+0xb0>)
 800b1ce:	68fb      	ldr	r3, [r7, #12]
 800b1d0:	6013      	str	r3, [r2, #0]
}
 800b1d2:	bf00      	nop
 800b1d4:	3714      	adds	r7, #20
 800b1d6:	46bd      	mov	sp, r7
 800b1d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1dc:	4770      	bx	lr
 800b1de:	bf00      	nop
 800b1e0:	200015c8 	.word	0x200015c8
 800b1e4:	200015b4 	.word	0x200015b4
 800b1e8:	200015a8 	.word	0x200015a8
 800b1ec:	200010d0 	.word	0x200010d0
 800b1f0:	200010cc 	.word	0x200010cc

0800b1f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b084      	sub	sp, #16
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
 800b1fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b1fe:	687b      	ldr	r3, [r7, #4]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d10a      	bne.n	800b21a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b208:	f383 8811 	msr	BASEPRI, r3
 800b20c:	f3bf 8f6f 	isb	sy
 800b210:	f3bf 8f4f 	dsb	sy
 800b214:	60fb      	str	r3, [r7, #12]
}
 800b216:	bf00      	nop
 800b218:	e7fe      	b.n	800b218 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b21a:	4b07      	ldr	r3, [pc, #28]	; (800b238 <vTaskPlaceOnEventList+0x44>)
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	3318      	adds	r3, #24
 800b220:	4619      	mov	r1, r3
 800b222:	6878      	ldr	r0, [r7, #4]
 800b224:	f7fe fe09 	bl	8009e3a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b228:	2101      	movs	r1, #1
 800b22a:	6838      	ldr	r0, [r7, #0]
 800b22c:	f000 fa7c 	bl	800b728 <prvAddCurrentTaskToDelayedList>
}
 800b230:	bf00      	nop
 800b232:	3710      	adds	r7, #16
 800b234:	46bd      	mov	sp, r7
 800b236:	bd80      	pop	{r7, pc}
 800b238:	200010cc 	.word	0x200010cc

0800b23c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b23c:	b580      	push	{r7, lr}
 800b23e:	b086      	sub	sp, #24
 800b240:	af00      	add	r7, sp, #0
 800b242:	60f8      	str	r0, [r7, #12]
 800b244:	60b9      	str	r1, [r7, #8]
 800b246:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d10a      	bne.n	800b264 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b24e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b252:	f383 8811 	msr	BASEPRI, r3
 800b256:	f3bf 8f6f 	isb	sy
 800b25a:	f3bf 8f4f 	dsb	sy
 800b25e:	617b      	str	r3, [r7, #20]
}
 800b260:	bf00      	nop
 800b262:	e7fe      	b.n	800b262 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b264:	4b0a      	ldr	r3, [pc, #40]	; (800b290 <vTaskPlaceOnEventListRestricted+0x54>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	3318      	adds	r3, #24
 800b26a:	4619      	mov	r1, r3
 800b26c:	68f8      	ldr	r0, [r7, #12]
 800b26e:	f7fe fdc0 	bl	8009df2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	2b00      	cmp	r3, #0
 800b276:	d002      	beq.n	800b27e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b278:	f04f 33ff 	mov.w	r3, #4294967295
 800b27c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b27e:	6879      	ldr	r1, [r7, #4]
 800b280:	68b8      	ldr	r0, [r7, #8]
 800b282:	f000 fa51 	bl	800b728 <prvAddCurrentTaskToDelayedList>
	}
 800b286:	bf00      	nop
 800b288:	3718      	adds	r7, #24
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}
 800b28e:	bf00      	nop
 800b290:	200010cc 	.word	0x200010cc

0800b294 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b294:	b580      	push	{r7, lr}
 800b296:	b086      	sub	sp, #24
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	68db      	ldr	r3, [r3, #12]
 800b2a0:	68db      	ldr	r3, [r3, #12]
 800b2a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b2a4:	693b      	ldr	r3, [r7, #16]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d10a      	bne.n	800b2c0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ae:	f383 8811 	msr	BASEPRI, r3
 800b2b2:	f3bf 8f6f 	isb	sy
 800b2b6:	f3bf 8f4f 	dsb	sy
 800b2ba:	60fb      	str	r3, [r7, #12]
}
 800b2bc:	bf00      	nop
 800b2be:	e7fe      	b.n	800b2be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b2c0:	693b      	ldr	r3, [r7, #16]
 800b2c2:	3318      	adds	r3, #24
 800b2c4:	4618      	mov	r0, r3
 800b2c6:	f7fe fdf1 	bl	8009eac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2ca:	4b1e      	ldr	r3, [pc, #120]	; (800b344 <xTaskRemoveFromEventList+0xb0>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d11d      	bne.n	800b30e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	3304      	adds	r3, #4
 800b2d6:	4618      	mov	r0, r3
 800b2d8:	f7fe fde8 	bl	8009eac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b2dc:	693b      	ldr	r3, [r7, #16]
 800b2de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2e0:	4b19      	ldr	r3, [pc, #100]	; (800b348 <xTaskRemoveFromEventList+0xb4>)
 800b2e2:	681b      	ldr	r3, [r3, #0]
 800b2e4:	429a      	cmp	r2, r3
 800b2e6:	d903      	bls.n	800b2f0 <xTaskRemoveFromEventList+0x5c>
 800b2e8:	693b      	ldr	r3, [r7, #16]
 800b2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ec:	4a16      	ldr	r2, [pc, #88]	; (800b348 <xTaskRemoveFromEventList+0xb4>)
 800b2ee:	6013      	str	r3, [r2, #0]
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2f4:	4613      	mov	r3, r2
 800b2f6:	009b      	lsls	r3, r3, #2
 800b2f8:	4413      	add	r3, r2
 800b2fa:	009b      	lsls	r3, r3, #2
 800b2fc:	4a13      	ldr	r2, [pc, #76]	; (800b34c <xTaskRemoveFromEventList+0xb8>)
 800b2fe:	441a      	add	r2, r3
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	3304      	adds	r3, #4
 800b304:	4619      	mov	r1, r3
 800b306:	4610      	mov	r0, r2
 800b308:	f7fe fd73 	bl	8009df2 <vListInsertEnd>
 800b30c:	e005      	b.n	800b31a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b30e:	693b      	ldr	r3, [r7, #16]
 800b310:	3318      	adds	r3, #24
 800b312:	4619      	mov	r1, r3
 800b314:	480e      	ldr	r0, [pc, #56]	; (800b350 <xTaskRemoveFromEventList+0xbc>)
 800b316:	f7fe fd6c 	bl	8009df2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b31a:	693b      	ldr	r3, [r7, #16]
 800b31c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b31e:	4b0d      	ldr	r3, [pc, #52]	; (800b354 <xTaskRemoveFromEventList+0xc0>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b324:	429a      	cmp	r2, r3
 800b326:	d905      	bls.n	800b334 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b328:	2301      	movs	r3, #1
 800b32a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b32c:	4b0a      	ldr	r3, [pc, #40]	; (800b358 <xTaskRemoveFromEventList+0xc4>)
 800b32e:	2201      	movs	r2, #1
 800b330:	601a      	str	r2, [r3, #0]
 800b332:	e001      	b.n	800b338 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b334:	2300      	movs	r3, #0
 800b336:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b338:	697b      	ldr	r3, [r7, #20]
}
 800b33a:	4618      	mov	r0, r3
 800b33c:	3718      	adds	r7, #24
 800b33e:	46bd      	mov	sp, r7
 800b340:	bd80      	pop	{r7, pc}
 800b342:	bf00      	nop
 800b344:	200015c8 	.word	0x200015c8
 800b348:	200015a8 	.word	0x200015a8
 800b34c:	200010d0 	.word	0x200010d0
 800b350:	20001560 	.word	0x20001560
 800b354:	200010cc 	.word	0x200010cc
 800b358:	200015b4 	.word	0x200015b4

0800b35c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b35c:	b480      	push	{r7}
 800b35e:	b083      	sub	sp, #12
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b364:	4b06      	ldr	r3, [pc, #24]	; (800b380 <vTaskInternalSetTimeOutState+0x24>)
 800b366:	681a      	ldr	r2, [r3, #0]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b36c:	4b05      	ldr	r3, [pc, #20]	; (800b384 <vTaskInternalSetTimeOutState+0x28>)
 800b36e:	681a      	ldr	r2, [r3, #0]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	605a      	str	r2, [r3, #4]
}
 800b374:	bf00      	nop
 800b376:	370c      	adds	r7, #12
 800b378:	46bd      	mov	sp, r7
 800b37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b37e:	4770      	bx	lr
 800b380:	200015b8 	.word	0x200015b8
 800b384:	200015a4 	.word	0x200015a4

0800b388 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b388:	b580      	push	{r7, lr}
 800b38a:	b088      	sub	sp, #32
 800b38c:	af00      	add	r7, sp, #0
 800b38e:	6078      	str	r0, [r7, #4]
 800b390:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d10a      	bne.n	800b3ae <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b39c:	f383 8811 	msr	BASEPRI, r3
 800b3a0:	f3bf 8f6f 	isb	sy
 800b3a4:	f3bf 8f4f 	dsb	sy
 800b3a8:	613b      	str	r3, [r7, #16]
}
 800b3aa:	bf00      	nop
 800b3ac:	e7fe      	b.n	800b3ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b3ae:	683b      	ldr	r3, [r7, #0]
 800b3b0:	2b00      	cmp	r3, #0
 800b3b2:	d10a      	bne.n	800b3ca <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b3b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3b8:	f383 8811 	msr	BASEPRI, r3
 800b3bc:	f3bf 8f6f 	isb	sy
 800b3c0:	f3bf 8f4f 	dsb	sy
 800b3c4:	60fb      	str	r3, [r7, #12]
}
 800b3c6:	bf00      	nop
 800b3c8:	e7fe      	b.n	800b3c8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b3ca:	f000 fe7b 	bl	800c0c4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b3ce:	4b1d      	ldr	r3, [pc, #116]	; (800b444 <xTaskCheckForTimeOut+0xbc>)
 800b3d0:	681b      	ldr	r3, [r3, #0]
 800b3d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	685b      	ldr	r3, [r3, #4]
 800b3d8:	69ba      	ldr	r2, [r7, #24]
 800b3da:	1ad3      	subs	r3, r2, r3
 800b3dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b3de:	683b      	ldr	r3, [r7, #0]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3e6:	d102      	bne.n	800b3ee <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b3e8:	2300      	movs	r3, #0
 800b3ea:	61fb      	str	r3, [r7, #28]
 800b3ec:	e023      	b.n	800b436 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	681a      	ldr	r2, [r3, #0]
 800b3f2:	4b15      	ldr	r3, [pc, #84]	; (800b448 <xTaskCheckForTimeOut+0xc0>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	429a      	cmp	r2, r3
 800b3f8:	d007      	beq.n	800b40a <xTaskCheckForTimeOut+0x82>
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	685b      	ldr	r3, [r3, #4]
 800b3fe:	69ba      	ldr	r2, [r7, #24]
 800b400:	429a      	cmp	r2, r3
 800b402:	d302      	bcc.n	800b40a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b404:	2301      	movs	r3, #1
 800b406:	61fb      	str	r3, [r7, #28]
 800b408:	e015      	b.n	800b436 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	697a      	ldr	r2, [r7, #20]
 800b410:	429a      	cmp	r2, r3
 800b412:	d20b      	bcs.n	800b42c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b414:	683b      	ldr	r3, [r7, #0]
 800b416:	681a      	ldr	r2, [r3, #0]
 800b418:	697b      	ldr	r3, [r7, #20]
 800b41a:	1ad2      	subs	r2, r2, r3
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f7ff ff9b 	bl	800b35c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b426:	2300      	movs	r3, #0
 800b428:	61fb      	str	r3, [r7, #28]
 800b42a:	e004      	b.n	800b436 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	2200      	movs	r2, #0
 800b430:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b432:	2301      	movs	r3, #1
 800b434:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b436:	f000 fe75 	bl	800c124 <vPortExitCritical>

	return xReturn;
 800b43a:	69fb      	ldr	r3, [r7, #28]
}
 800b43c:	4618      	mov	r0, r3
 800b43e:	3720      	adds	r7, #32
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}
 800b444:	200015a4 	.word	0x200015a4
 800b448:	200015b8 	.word	0x200015b8

0800b44c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b44c:	b480      	push	{r7}
 800b44e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b450:	4b03      	ldr	r3, [pc, #12]	; (800b460 <vTaskMissedYield+0x14>)
 800b452:	2201      	movs	r2, #1
 800b454:	601a      	str	r2, [r3, #0]
}
 800b456:	bf00      	nop
 800b458:	46bd      	mov	sp, r7
 800b45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b45e:	4770      	bx	lr
 800b460:	200015b4 	.word	0x200015b4

0800b464 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b464:	b580      	push	{r7, lr}
 800b466:	b082      	sub	sp, #8
 800b468:	af00      	add	r7, sp, #0
 800b46a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b46c:	f000 f852 	bl	800b514 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b470:	4b06      	ldr	r3, [pc, #24]	; (800b48c <prvIdleTask+0x28>)
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	2b01      	cmp	r3, #1
 800b476:	d9f9      	bls.n	800b46c <prvIdleTask+0x8>
			{
				taskYIELD();
 800b478:	4b05      	ldr	r3, [pc, #20]	; (800b490 <prvIdleTask+0x2c>)
 800b47a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b47e:	601a      	str	r2, [r3, #0]
 800b480:	f3bf 8f4f 	dsb	sy
 800b484:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b488:	e7f0      	b.n	800b46c <prvIdleTask+0x8>
 800b48a:	bf00      	nop
 800b48c:	200010d0 	.word	0x200010d0
 800b490:	e000ed04 	.word	0xe000ed04

0800b494 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b494:	b580      	push	{r7, lr}
 800b496:	b082      	sub	sp, #8
 800b498:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b49a:	2300      	movs	r3, #0
 800b49c:	607b      	str	r3, [r7, #4]
 800b49e:	e00c      	b.n	800b4ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b4a0:	687a      	ldr	r2, [r7, #4]
 800b4a2:	4613      	mov	r3, r2
 800b4a4:	009b      	lsls	r3, r3, #2
 800b4a6:	4413      	add	r3, r2
 800b4a8:	009b      	lsls	r3, r3, #2
 800b4aa:	4a12      	ldr	r2, [pc, #72]	; (800b4f4 <prvInitialiseTaskLists+0x60>)
 800b4ac:	4413      	add	r3, r2
 800b4ae:	4618      	mov	r0, r3
 800b4b0:	f7fe fc72 	bl	8009d98 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	3301      	adds	r3, #1
 800b4b8:	607b      	str	r3, [r7, #4]
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	2b37      	cmp	r3, #55	; 0x37
 800b4be:	d9ef      	bls.n	800b4a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b4c0:	480d      	ldr	r0, [pc, #52]	; (800b4f8 <prvInitialiseTaskLists+0x64>)
 800b4c2:	f7fe fc69 	bl	8009d98 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b4c6:	480d      	ldr	r0, [pc, #52]	; (800b4fc <prvInitialiseTaskLists+0x68>)
 800b4c8:	f7fe fc66 	bl	8009d98 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b4cc:	480c      	ldr	r0, [pc, #48]	; (800b500 <prvInitialiseTaskLists+0x6c>)
 800b4ce:	f7fe fc63 	bl	8009d98 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b4d2:	480c      	ldr	r0, [pc, #48]	; (800b504 <prvInitialiseTaskLists+0x70>)
 800b4d4:	f7fe fc60 	bl	8009d98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b4d8:	480b      	ldr	r0, [pc, #44]	; (800b508 <prvInitialiseTaskLists+0x74>)
 800b4da:	f7fe fc5d 	bl	8009d98 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b4de:	4b0b      	ldr	r3, [pc, #44]	; (800b50c <prvInitialiseTaskLists+0x78>)
 800b4e0:	4a05      	ldr	r2, [pc, #20]	; (800b4f8 <prvInitialiseTaskLists+0x64>)
 800b4e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b4e4:	4b0a      	ldr	r3, [pc, #40]	; (800b510 <prvInitialiseTaskLists+0x7c>)
 800b4e6:	4a05      	ldr	r2, [pc, #20]	; (800b4fc <prvInitialiseTaskLists+0x68>)
 800b4e8:	601a      	str	r2, [r3, #0]
}
 800b4ea:	bf00      	nop
 800b4ec:	3708      	adds	r7, #8
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	bf00      	nop
 800b4f4:	200010d0 	.word	0x200010d0
 800b4f8:	20001530 	.word	0x20001530
 800b4fc:	20001544 	.word	0x20001544
 800b500:	20001560 	.word	0x20001560
 800b504:	20001574 	.word	0x20001574
 800b508:	2000158c 	.word	0x2000158c
 800b50c:	20001558 	.word	0x20001558
 800b510:	2000155c 	.word	0x2000155c

0800b514 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b514:	b580      	push	{r7, lr}
 800b516:	b082      	sub	sp, #8
 800b518:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b51a:	e019      	b.n	800b550 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b51c:	f000 fdd2 	bl	800c0c4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b520:	4b10      	ldr	r3, [pc, #64]	; (800b564 <prvCheckTasksWaitingTermination+0x50>)
 800b522:	68db      	ldr	r3, [r3, #12]
 800b524:	68db      	ldr	r3, [r3, #12]
 800b526:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	3304      	adds	r3, #4
 800b52c:	4618      	mov	r0, r3
 800b52e:	f7fe fcbd 	bl	8009eac <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b532:	4b0d      	ldr	r3, [pc, #52]	; (800b568 <prvCheckTasksWaitingTermination+0x54>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	3b01      	subs	r3, #1
 800b538:	4a0b      	ldr	r2, [pc, #44]	; (800b568 <prvCheckTasksWaitingTermination+0x54>)
 800b53a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b53c:	4b0b      	ldr	r3, [pc, #44]	; (800b56c <prvCheckTasksWaitingTermination+0x58>)
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	3b01      	subs	r3, #1
 800b542:	4a0a      	ldr	r2, [pc, #40]	; (800b56c <prvCheckTasksWaitingTermination+0x58>)
 800b544:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b546:	f000 fded 	bl	800c124 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b54a:	6878      	ldr	r0, [r7, #4]
 800b54c:	f000 f810 	bl	800b570 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b550:	4b06      	ldr	r3, [pc, #24]	; (800b56c <prvCheckTasksWaitingTermination+0x58>)
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	2b00      	cmp	r3, #0
 800b556:	d1e1      	bne.n	800b51c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b558:	bf00      	nop
 800b55a:	bf00      	nop
 800b55c:	3708      	adds	r7, #8
 800b55e:	46bd      	mov	sp, r7
 800b560:	bd80      	pop	{r7, pc}
 800b562:	bf00      	nop
 800b564:	20001574 	.word	0x20001574
 800b568:	200015a0 	.word	0x200015a0
 800b56c:	20001588 	.word	0x20001588

0800b570 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b570:	b580      	push	{r7, lr}
 800b572:	b084      	sub	sp, #16
 800b574:	af00      	add	r7, sp, #0
 800b576:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d108      	bne.n	800b594 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b586:	4618      	mov	r0, r3
 800b588:	f000 ff8a 	bl	800c4a0 <vPortFree>
				vPortFree( pxTCB );
 800b58c:	6878      	ldr	r0, [r7, #4]
 800b58e:	f000 ff87 	bl	800c4a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b592:	e018      	b.n	800b5c6 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b59a:	2b01      	cmp	r3, #1
 800b59c:	d103      	bne.n	800b5a6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800b59e:	6878      	ldr	r0, [r7, #4]
 800b5a0:	f000 ff7e 	bl	800c4a0 <vPortFree>
	}
 800b5a4:	e00f      	b.n	800b5c6 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800b5ac:	2b02      	cmp	r3, #2
 800b5ae:	d00a      	beq.n	800b5c6 <prvDeleteTCB+0x56>
	__asm volatile
 800b5b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5b4:	f383 8811 	msr	BASEPRI, r3
 800b5b8:	f3bf 8f6f 	isb	sy
 800b5bc:	f3bf 8f4f 	dsb	sy
 800b5c0:	60fb      	str	r3, [r7, #12]
}
 800b5c2:	bf00      	nop
 800b5c4:	e7fe      	b.n	800b5c4 <prvDeleteTCB+0x54>
	}
 800b5c6:	bf00      	nop
 800b5c8:	3710      	adds	r7, #16
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}
	...

0800b5d0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b083      	sub	sp, #12
 800b5d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b5d6:	4b0c      	ldr	r3, [pc, #48]	; (800b608 <prvResetNextTaskUnblockTime+0x38>)
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d104      	bne.n	800b5ea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b5e0:	4b0a      	ldr	r3, [pc, #40]	; (800b60c <prvResetNextTaskUnblockTime+0x3c>)
 800b5e2:	f04f 32ff 	mov.w	r2, #4294967295
 800b5e6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b5e8:	e008      	b.n	800b5fc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b5ea:	4b07      	ldr	r3, [pc, #28]	; (800b608 <prvResetNextTaskUnblockTime+0x38>)
 800b5ec:	681b      	ldr	r3, [r3, #0]
 800b5ee:	68db      	ldr	r3, [r3, #12]
 800b5f0:	68db      	ldr	r3, [r3, #12]
 800b5f2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	685b      	ldr	r3, [r3, #4]
 800b5f8:	4a04      	ldr	r2, [pc, #16]	; (800b60c <prvResetNextTaskUnblockTime+0x3c>)
 800b5fa:	6013      	str	r3, [r2, #0]
}
 800b5fc:	bf00      	nop
 800b5fe:	370c      	adds	r7, #12
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr
 800b608:	20001558 	.word	0x20001558
 800b60c:	200015c0 	.word	0x200015c0

0800b610 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b610:	b480      	push	{r7}
 800b612:	b083      	sub	sp, #12
 800b614:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b616:	4b0b      	ldr	r3, [pc, #44]	; (800b644 <xTaskGetSchedulerState+0x34>)
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d102      	bne.n	800b624 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b61e:	2301      	movs	r3, #1
 800b620:	607b      	str	r3, [r7, #4]
 800b622:	e008      	b.n	800b636 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b624:	4b08      	ldr	r3, [pc, #32]	; (800b648 <xTaskGetSchedulerState+0x38>)
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d102      	bne.n	800b632 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b62c:	2302      	movs	r3, #2
 800b62e:	607b      	str	r3, [r7, #4]
 800b630:	e001      	b.n	800b636 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b632:	2300      	movs	r3, #0
 800b634:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b636:	687b      	ldr	r3, [r7, #4]
	}
 800b638:	4618      	mov	r0, r3
 800b63a:	370c      	adds	r7, #12
 800b63c:	46bd      	mov	sp, r7
 800b63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b642:	4770      	bx	lr
 800b644:	200015ac 	.word	0x200015ac
 800b648:	200015c8 	.word	0x200015c8

0800b64c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b64c:	b580      	push	{r7, lr}
 800b64e:	b086      	sub	sp, #24
 800b650:	af00      	add	r7, sp, #0
 800b652:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b658:	2300      	movs	r3, #0
 800b65a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2b00      	cmp	r3, #0
 800b660:	d056      	beq.n	800b710 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b662:	4b2e      	ldr	r3, [pc, #184]	; (800b71c <xTaskPriorityDisinherit+0xd0>)
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	693a      	ldr	r2, [r7, #16]
 800b668:	429a      	cmp	r2, r3
 800b66a:	d00a      	beq.n	800b682 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b66c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b670:	f383 8811 	msr	BASEPRI, r3
 800b674:	f3bf 8f6f 	isb	sy
 800b678:	f3bf 8f4f 	dsb	sy
 800b67c:	60fb      	str	r3, [r7, #12]
}
 800b67e:	bf00      	nop
 800b680:	e7fe      	b.n	800b680 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b682:	693b      	ldr	r3, [r7, #16]
 800b684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b686:	2b00      	cmp	r3, #0
 800b688:	d10a      	bne.n	800b6a0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b68a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b68e:	f383 8811 	msr	BASEPRI, r3
 800b692:	f3bf 8f6f 	isb	sy
 800b696:	f3bf 8f4f 	dsb	sy
 800b69a:	60bb      	str	r3, [r7, #8]
}
 800b69c:	bf00      	nop
 800b69e:	e7fe      	b.n	800b69e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b6a0:	693b      	ldr	r3, [r7, #16]
 800b6a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6a4:	1e5a      	subs	r2, r3, #1
 800b6a6:	693b      	ldr	r3, [r7, #16]
 800b6a8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b6aa:	693b      	ldr	r3, [r7, #16]
 800b6ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6ae:	693b      	ldr	r3, [r7, #16]
 800b6b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	d02c      	beq.n	800b710 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d128      	bne.n	800b710 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b6be:	693b      	ldr	r3, [r7, #16]
 800b6c0:	3304      	adds	r3, #4
 800b6c2:	4618      	mov	r0, r3
 800b6c4:	f7fe fbf2 	bl	8009eac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b6c8:	693b      	ldr	r3, [r7, #16]
 800b6ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6d4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b6d8:	693b      	ldr	r3, [r7, #16]
 800b6da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b6dc:	693b      	ldr	r3, [r7, #16]
 800b6de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6e0:	4b0f      	ldr	r3, [pc, #60]	; (800b720 <xTaskPriorityDisinherit+0xd4>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	429a      	cmp	r2, r3
 800b6e6:	d903      	bls.n	800b6f0 <xTaskPriorityDisinherit+0xa4>
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6ec:	4a0c      	ldr	r2, [pc, #48]	; (800b720 <xTaskPriorityDisinherit+0xd4>)
 800b6ee:	6013      	str	r3, [r2, #0]
 800b6f0:	693b      	ldr	r3, [r7, #16]
 800b6f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6f4:	4613      	mov	r3, r2
 800b6f6:	009b      	lsls	r3, r3, #2
 800b6f8:	4413      	add	r3, r2
 800b6fa:	009b      	lsls	r3, r3, #2
 800b6fc:	4a09      	ldr	r2, [pc, #36]	; (800b724 <xTaskPriorityDisinherit+0xd8>)
 800b6fe:	441a      	add	r2, r3
 800b700:	693b      	ldr	r3, [r7, #16]
 800b702:	3304      	adds	r3, #4
 800b704:	4619      	mov	r1, r3
 800b706:	4610      	mov	r0, r2
 800b708:	f7fe fb73 	bl	8009df2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b70c:	2301      	movs	r3, #1
 800b70e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b710:	697b      	ldr	r3, [r7, #20]
	}
 800b712:	4618      	mov	r0, r3
 800b714:	3718      	adds	r7, #24
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}
 800b71a:	bf00      	nop
 800b71c:	200010cc 	.word	0x200010cc
 800b720:	200015a8 	.word	0x200015a8
 800b724:	200010d0 	.word	0x200010d0

0800b728 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b728:	b580      	push	{r7, lr}
 800b72a:	b084      	sub	sp, #16
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	6078      	str	r0, [r7, #4]
 800b730:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b732:	4b21      	ldr	r3, [pc, #132]	; (800b7b8 <prvAddCurrentTaskToDelayedList+0x90>)
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b738:	4b20      	ldr	r3, [pc, #128]	; (800b7bc <prvAddCurrentTaskToDelayedList+0x94>)
 800b73a:	681b      	ldr	r3, [r3, #0]
 800b73c:	3304      	adds	r3, #4
 800b73e:	4618      	mov	r0, r3
 800b740:	f7fe fbb4 	bl	8009eac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b74a:	d10a      	bne.n	800b762 <prvAddCurrentTaskToDelayedList+0x3a>
 800b74c:	683b      	ldr	r3, [r7, #0]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d007      	beq.n	800b762 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b752:	4b1a      	ldr	r3, [pc, #104]	; (800b7bc <prvAddCurrentTaskToDelayedList+0x94>)
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	3304      	adds	r3, #4
 800b758:	4619      	mov	r1, r3
 800b75a:	4819      	ldr	r0, [pc, #100]	; (800b7c0 <prvAddCurrentTaskToDelayedList+0x98>)
 800b75c:	f7fe fb49 	bl	8009df2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b760:	e026      	b.n	800b7b0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b762:	68fa      	ldr	r2, [r7, #12]
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	4413      	add	r3, r2
 800b768:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b76a:	4b14      	ldr	r3, [pc, #80]	; (800b7bc <prvAddCurrentTaskToDelayedList+0x94>)
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	68ba      	ldr	r2, [r7, #8]
 800b770:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b772:	68ba      	ldr	r2, [r7, #8]
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	429a      	cmp	r2, r3
 800b778:	d209      	bcs.n	800b78e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b77a:	4b12      	ldr	r3, [pc, #72]	; (800b7c4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b77c:	681a      	ldr	r2, [r3, #0]
 800b77e:	4b0f      	ldr	r3, [pc, #60]	; (800b7bc <prvAddCurrentTaskToDelayedList+0x94>)
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	3304      	adds	r3, #4
 800b784:	4619      	mov	r1, r3
 800b786:	4610      	mov	r0, r2
 800b788:	f7fe fb57 	bl	8009e3a <vListInsert>
}
 800b78c:	e010      	b.n	800b7b0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b78e:	4b0e      	ldr	r3, [pc, #56]	; (800b7c8 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b790:	681a      	ldr	r2, [r3, #0]
 800b792:	4b0a      	ldr	r3, [pc, #40]	; (800b7bc <prvAddCurrentTaskToDelayedList+0x94>)
 800b794:	681b      	ldr	r3, [r3, #0]
 800b796:	3304      	adds	r3, #4
 800b798:	4619      	mov	r1, r3
 800b79a:	4610      	mov	r0, r2
 800b79c:	f7fe fb4d 	bl	8009e3a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b7a0:	4b0a      	ldr	r3, [pc, #40]	; (800b7cc <prvAddCurrentTaskToDelayedList+0xa4>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	68ba      	ldr	r2, [r7, #8]
 800b7a6:	429a      	cmp	r2, r3
 800b7a8:	d202      	bcs.n	800b7b0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b7aa:	4a08      	ldr	r2, [pc, #32]	; (800b7cc <prvAddCurrentTaskToDelayedList+0xa4>)
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	6013      	str	r3, [r2, #0]
}
 800b7b0:	bf00      	nop
 800b7b2:	3710      	adds	r7, #16
 800b7b4:	46bd      	mov	sp, r7
 800b7b6:	bd80      	pop	{r7, pc}
 800b7b8:	200015a4 	.word	0x200015a4
 800b7bc:	200010cc 	.word	0x200010cc
 800b7c0:	2000158c 	.word	0x2000158c
 800b7c4:	2000155c 	.word	0x2000155c
 800b7c8:	20001558 	.word	0x20001558
 800b7cc:	200015c0 	.word	0x200015c0

0800b7d0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b08a      	sub	sp, #40	; 0x28
 800b7d4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b7d6:	2300      	movs	r3, #0
 800b7d8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b7da:	f000 fb07 	bl	800bdec <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b7de:	4b1c      	ldr	r3, [pc, #112]	; (800b850 <xTimerCreateTimerTask+0x80>)
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d021      	beq.n	800b82a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b7ea:	2300      	movs	r3, #0
 800b7ec:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b7ee:	1d3a      	adds	r2, r7, #4
 800b7f0:	f107 0108 	add.w	r1, r7, #8
 800b7f4:	f107 030c 	add.w	r3, r7, #12
 800b7f8:	4618      	mov	r0, r3
 800b7fa:	f7fe fab3 	bl	8009d64 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b7fe:	6879      	ldr	r1, [r7, #4]
 800b800:	68bb      	ldr	r3, [r7, #8]
 800b802:	68fa      	ldr	r2, [r7, #12]
 800b804:	9202      	str	r2, [sp, #8]
 800b806:	9301      	str	r3, [sp, #4]
 800b808:	2302      	movs	r3, #2
 800b80a:	9300      	str	r3, [sp, #0]
 800b80c:	2300      	movs	r3, #0
 800b80e:	460a      	mov	r2, r1
 800b810:	4910      	ldr	r1, [pc, #64]	; (800b854 <xTimerCreateTimerTask+0x84>)
 800b812:	4811      	ldr	r0, [pc, #68]	; (800b858 <xTimerCreateTimerTask+0x88>)
 800b814:	f7ff f860 	bl	800a8d8 <xTaskCreateStatic>
 800b818:	4603      	mov	r3, r0
 800b81a:	4a10      	ldr	r2, [pc, #64]	; (800b85c <xTimerCreateTimerTask+0x8c>)
 800b81c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b81e:	4b0f      	ldr	r3, [pc, #60]	; (800b85c <xTimerCreateTimerTask+0x8c>)
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	2b00      	cmp	r3, #0
 800b824:	d001      	beq.n	800b82a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b826:	2301      	movs	r3, #1
 800b828:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b82a:	697b      	ldr	r3, [r7, #20]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d10a      	bne.n	800b846 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b830:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b834:	f383 8811 	msr	BASEPRI, r3
 800b838:	f3bf 8f6f 	isb	sy
 800b83c:	f3bf 8f4f 	dsb	sy
 800b840:	613b      	str	r3, [r7, #16]
}
 800b842:	bf00      	nop
 800b844:	e7fe      	b.n	800b844 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b846:	697b      	ldr	r3, [r7, #20]
}
 800b848:	4618      	mov	r0, r3
 800b84a:	3718      	adds	r7, #24
 800b84c:	46bd      	mov	sp, r7
 800b84e:	bd80      	pop	{r7, pc}
 800b850:	200015fc 	.word	0x200015fc
 800b854:	08010b50 	.word	0x08010b50
 800b858:	0800b995 	.word	0x0800b995
 800b85c:	20001600 	.word	0x20001600

0800b860 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b860:	b580      	push	{r7, lr}
 800b862:	b08a      	sub	sp, #40	; 0x28
 800b864:	af00      	add	r7, sp, #0
 800b866:	60f8      	str	r0, [r7, #12]
 800b868:	60b9      	str	r1, [r7, #8]
 800b86a:	607a      	str	r2, [r7, #4]
 800b86c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b86e:	2300      	movs	r3, #0
 800b870:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d10a      	bne.n	800b88e <xTimerGenericCommand+0x2e>
	__asm volatile
 800b878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b87c:	f383 8811 	msr	BASEPRI, r3
 800b880:	f3bf 8f6f 	isb	sy
 800b884:	f3bf 8f4f 	dsb	sy
 800b888:	623b      	str	r3, [r7, #32]
}
 800b88a:	bf00      	nop
 800b88c:	e7fe      	b.n	800b88c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b88e:	4b1a      	ldr	r3, [pc, #104]	; (800b8f8 <xTimerGenericCommand+0x98>)
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d02a      	beq.n	800b8ec <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b896:	68bb      	ldr	r3, [r7, #8]
 800b898:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b89e:	68fb      	ldr	r3, [r7, #12]
 800b8a0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b8a2:	68bb      	ldr	r3, [r7, #8]
 800b8a4:	2b05      	cmp	r3, #5
 800b8a6:	dc18      	bgt.n	800b8da <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b8a8:	f7ff feb2 	bl	800b610 <xTaskGetSchedulerState>
 800b8ac:	4603      	mov	r3, r0
 800b8ae:	2b02      	cmp	r3, #2
 800b8b0:	d109      	bne.n	800b8c6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b8b2:	4b11      	ldr	r3, [pc, #68]	; (800b8f8 <xTimerGenericCommand+0x98>)
 800b8b4:	6818      	ldr	r0, [r3, #0]
 800b8b6:	f107 0110 	add.w	r1, r7, #16
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b8be:	f7fe fc23 	bl	800a108 <xQueueGenericSend>
 800b8c2:	6278      	str	r0, [r7, #36]	; 0x24
 800b8c4:	e012      	b.n	800b8ec <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b8c6:	4b0c      	ldr	r3, [pc, #48]	; (800b8f8 <xTimerGenericCommand+0x98>)
 800b8c8:	6818      	ldr	r0, [r3, #0]
 800b8ca:	f107 0110 	add.w	r1, r7, #16
 800b8ce:	2300      	movs	r3, #0
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	f7fe fc19 	bl	800a108 <xQueueGenericSend>
 800b8d6:	6278      	str	r0, [r7, #36]	; 0x24
 800b8d8:	e008      	b.n	800b8ec <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b8da:	4b07      	ldr	r3, [pc, #28]	; (800b8f8 <xTimerGenericCommand+0x98>)
 800b8dc:	6818      	ldr	r0, [r3, #0]
 800b8de:	f107 0110 	add.w	r1, r7, #16
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	683a      	ldr	r2, [r7, #0]
 800b8e6:	f7fe fd0d 	bl	800a304 <xQueueGenericSendFromISR>
 800b8ea:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3728      	adds	r7, #40	; 0x28
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	200015fc 	.word	0x200015fc

0800b8fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b8fc:	b580      	push	{r7, lr}
 800b8fe:	b088      	sub	sp, #32
 800b900:	af02      	add	r7, sp, #8
 800b902:	6078      	str	r0, [r7, #4]
 800b904:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b906:	4b22      	ldr	r3, [pc, #136]	; (800b990 <prvProcessExpiredTimer+0x94>)
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	68db      	ldr	r3, [r3, #12]
 800b90c:	68db      	ldr	r3, [r3, #12]
 800b90e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b910:	697b      	ldr	r3, [r7, #20]
 800b912:	3304      	adds	r3, #4
 800b914:	4618      	mov	r0, r3
 800b916:	f7fe fac9 	bl	8009eac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b91a:	697b      	ldr	r3, [r7, #20]
 800b91c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b920:	f003 0304 	and.w	r3, r3, #4
 800b924:	2b00      	cmp	r3, #0
 800b926:	d022      	beq.n	800b96e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b928:	697b      	ldr	r3, [r7, #20]
 800b92a:	699a      	ldr	r2, [r3, #24]
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	18d1      	adds	r1, r2, r3
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	683a      	ldr	r2, [r7, #0]
 800b934:	6978      	ldr	r0, [r7, #20]
 800b936:	f000 f8d1 	bl	800badc <prvInsertTimerInActiveList>
 800b93a:	4603      	mov	r3, r0
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d01f      	beq.n	800b980 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b940:	2300      	movs	r3, #0
 800b942:	9300      	str	r3, [sp, #0]
 800b944:	2300      	movs	r3, #0
 800b946:	687a      	ldr	r2, [r7, #4]
 800b948:	2100      	movs	r1, #0
 800b94a:	6978      	ldr	r0, [r7, #20]
 800b94c:	f7ff ff88 	bl	800b860 <xTimerGenericCommand>
 800b950:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b952:	693b      	ldr	r3, [r7, #16]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d113      	bne.n	800b980 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b95c:	f383 8811 	msr	BASEPRI, r3
 800b960:	f3bf 8f6f 	isb	sy
 800b964:	f3bf 8f4f 	dsb	sy
 800b968:	60fb      	str	r3, [r7, #12]
}
 800b96a:	bf00      	nop
 800b96c:	e7fe      	b.n	800b96c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b974:	f023 0301 	bic.w	r3, r3, #1
 800b978:	b2da      	uxtb	r2, r3
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	6a1b      	ldr	r3, [r3, #32]
 800b984:	6978      	ldr	r0, [r7, #20]
 800b986:	4798      	blx	r3
}
 800b988:	bf00      	nop
 800b98a:	3718      	adds	r7, #24
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}
 800b990:	200015f4 	.word	0x200015f4

0800b994 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b994:	b580      	push	{r7, lr}
 800b996:	b084      	sub	sp, #16
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b99c:	f107 0308 	add.w	r3, r7, #8
 800b9a0:	4618      	mov	r0, r3
 800b9a2:	f000 f857 	bl	800ba54 <prvGetNextExpireTime>
 800b9a6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b9a8:	68bb      	ldr	r3, [r7, #8]
 800b9aa:	4619      	mov	r1, r3
 800b9ac:	68f8      	ldr	r0, [r7, #12]
 800b9ae:	f000 f803 	bl	800b9b8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b9b2:	f000 f8d5 	bl	800bb60 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b9b6:	e7f1      	b.n	800b99c <prvTimerTask+0x8>

0800b9b8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b084      	sub	sp, #16
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
 800b9c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b9c2:	f7ff fa43 	bl	800ae4c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b9c6:	f107 0308 	add.w	r3, r7, #8
 800b9ca:	4618      	mov	r0, r3
 800b9cc:	f000 f866 	bl	800ba9c <prvSampleTimeNow>
 800b9d0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b9d2:	68bb      	ldr	r3, [r7, #8]
 800b9d4:	2b00      	cmp	r3, #0
 800b9d6:	d130      	bne.n	800ba3a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b9d8:	683b      	ldr	r3, [r7, #0]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d10a      	bne.n	800b9f4 <prvProcessTimerOrBlockTask+0x3c>
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	429a      	cmp	r2, r3
 800b9e4:	d806      	bhi.n	800b9f4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b9e6:	f7ff fa3f 	bl	800ae68 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b9ea:	68f9      	ldr	r1, [r7, #12]
 800b9ec:	6878      	ldr	r0, [r7, #4]
 800b9ee:	f7ff ff85 	bl	800b8fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b9f2:	e024      	b.n	800ba3e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	2b00      	cmp	r3, #0
 800b9f8:	d008      	beq.n	800ba0c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b9fa:	4b13      	ldr	r3, [pc, #76]	; (800ba48 <prvProcessTimerOrBlockTask+0x90>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d101      	bne.n	800ba08 <prvProcessTimerOrBlockTask+0x50>
 800ba04:	2301      	movs	r3, #1
 800ba06:	e000      	b.n	800ba0a <prvProcessTimerOrBlockTask+0x52>
 800ba08:	2300      	movs	r3, #0
 800ba0a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ba0c:	4b0f      	ldr	r3, [pc, #60]	; (800ba4c <prvProcessTimerOrBlockTask+0x94>)
 800ba0e:	6818      	ldr	r0, [r3, #0]
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	1ad3      	subs	r3, r2, r3
 800ba16:	683a      	ldr	r2, [r7, #0]
 800ba18:	4619      	mov	r1, r3
 800ba1a:	f7fe ff29 	bl	800a870 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ba1e:	f7ff fa23 	bl	800ae68 <xTaskResumeAll>
 800ba22:	4603      	mov	r3, r0
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d10a      	bne.n	800ba3e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ba28:	4b09      	ldr	r3, [pc, #36]	; (800ba50 <prvProcessTimerOrBlockTask+0x98>)
 800ba2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ba2e:	601a      	str	r2, [r3, #0]
 800ba30:	f3bf 8f4f 	dsb	sy
 800ba34:	f3bf 8f6f 	isb	sy
}
 800ba38:	e001      	b.n	800ba3e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ba3a:	f7ff fa15 	bl	800ae68 <xTaskResumeAll>
}
 800ba3e:	bf00      	nop
 800ba40:	3710      	adds	r7, #16
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
 800ba46:	bf00      	nop
 800ba48:	200015f8 	.word	0x200015f8
 800ba4c:	200015fc 	.word	0x200015fc
 800ba50:	e000ed04 	.word	0xe000ed04

0800ba54 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ba54:	b480      	push	{r7}
 800ba56:	b085      	sub	sp, #20
 800ba58:	af00      	add	r7, sp, #0
 800ba5a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ba5c:	4b0e      	ldr	r3, [pc, #56]	; (800ba98 <prvGetNextExpireTime+0x44>)
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d101      	bne.n	800ba6a <prvGetNextExpireTime+0x16>
 800ba66:	2201      	movs	r2, #1
 800ba68:	e000      	b.n	800ba6c <prvGetNextExpireTime+0x18>
 800ba6a:	2200      	movs	r2, #0
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d105      	bne.n	800ba84 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ba78:	4b07      	ldr	r3, [pc, #28]	; (800ba98 <prvGetNextExpireTime+0x44>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	68db      	ldr	r3, [r3, #12]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	60fb      	str	r3, [r7, #12]
 800ba82:	e001      	b.n	800ba88 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ba84:	2300      	movs	r3, #0
 800ba86:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ba88:	68fb      	ldr	r3, [r7, #12]
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3714      	adds	r7, #20
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba94:	4770      	bx	lr
 800ba96:	bf00      	nop
 800ba98:	200015f4 	.word	0x200015f4

0800ba9c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b084      	sub	sp, #16
 800baa0:	af00      	add	r7, sp, #0
 800baa2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800baa4:	f7ff fa7e 	bl	800afa4 <xTaskGetTickCount>
 800baa8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800baaa:	4b0b      	ldr	r3, [pc, #44]	; (800bad8 <prvSampleTimeNow+0x3c>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	68fa      	ldr	r2, [r7, #12]
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d205      	bcs.n	800bac0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bab4:	f000 f936 	bl	800bd24 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bab8:	687b      	ldr	r3, [r7, #4]
 800baba:	2201      	movs	r2, #1
 800babc:	601a      	str	r2, [r3, #0]
 800babe:	e002      	b.n	800bac6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2200      	movs	r2, #0
 800bac4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bac6:	4a04      	ldr	r2, [pc, #16]	; (800bad8 <prvSampleTimeNow+0x3c>)
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bacc:	68fb      	ldr	r3, [r7, #12]
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3710      	adds	r7, #16
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}
 800bad6:	bf00      	nop
 800bad8:	20001604 	.word	0x20001604

0800badc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800badc:	b580      	push	{r7, lr}
 800bade:	b086      	sub	sp, #24
 800bae0:	af00      	add	r7, sp, #0
 800bae2:	60f8      	str	r0, [r7, #12]
 800bae4:	60b9      	str	r1, [r7, #8]
 800bae6:	607a      	str	r2, [r7, #4]
 800bae8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800baea:	2300      	movs	r3, #0
 800baec:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800baee:	68fb      	ldr	r3, [r7, #12]
 800baf0:	68ba      	ldr	r2, [r7, #8]
 800baf2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	68fa      	ldr	r2, [r7, #12]
 800baf8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bafa:	68ba      	ldr	r2, [r7, #8]
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	429a      	cmp	r2, r3
 800bb00:	d812      	bhi.n	800bb28 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bb02:	687a      	ldr	r2, [r7, #4]
 800bb04:	683b      	ldr	r3, [r7, #0]
 800bb06:	1ad2      	subs	r2, r2, r3
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	699b      	ldr	r3, [r3, #24]
 800bb0c:	429a      	cmp	r2, r3
 800bb0e:	d302      	bcc.n	800bb16 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bb10:	2301      	movs	r3, #1
 800bb12:	617b      	str	r3, [r7, #20]
 800bb14:	e01b      	b.n	800bb4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bb16:	4b10      	ldr	r3, [pc, #64]	; (800bb58 <prvInsertTimerInActiveList+0x7c>)
 800bb18:	681a      	ldr	r2, [r3, #0]
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	3304      	adds	r3, #4
 800bb1e:	4619      	mov	r1, r3
 800bb20:	4610      	mov	r0, r2
 800bb22:	f7fe f98a 	bl	8009e3a <vListInsert>
 800bb26:	e012      	b.n	800bb4e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bb28:	687a      	ldr	r2, [r7, #4]
 800bb2a:	683b      	ldr	r3, [r7, #0]
 800bb2c:	429a      	cmp	r2, r3
 800bb2e:	d206      	bcs.n	800bb3e <prvInsertTimerInActiveList+0x62>
 800bb30:	68ba      	ldr	r2, [r7, #8]
 800bb32:	683b      	ldr	r3, [r7, #0]
 800bb34:	429a      	cmp	r2, r3
 800bb36:	d302      	bcc.n	800bb3e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bb38:	2301      	movs	r3, #1
 800bb3a:	617b      	str	r3, [r7, #20]
 800bb3c:	e007      	b.n	800bb4e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bb3e:	4b07      	ldr	r3, [pc, #28]	; (800bb5c <prvInsertTimerInActiveList+0x80>)
 800bb40:	681a      	ldr	r2, [r3, #0]
 800bb42:	68fb      	ldr	r3, [r7, #12]
 800bb44:	3304      	adds	r3, #4
 800bb46:	4619      	mov	r1, r3
 800bb48:	4610      	mov	r0, r2
 800bb4a:	f7fe f976 	bl	8009e3a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bb4e:	697b      	ldr	r3, [r7, #20]
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3718      	adds	r7, #24
 800bb54:	46bd      	mov	sp, r7
 800bb56:	bd80      	pop	{r7, pc}
 800bb58:	200015f8 	.word	0x200015f8
 800bb5c:	200015f4 	.word	0x200015f4

0800bb60 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	b08e      	sub	sp, #56	; 0x38
 800bb64:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bb66:	e0ca      	b.n	800bcfe <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	da18      	bge.n	800bba0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bb6e:	1d3b      	adds	r3, r7, #4
 800bb70:	3304      	adds	r3, #4
 800bb72:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bb74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d10a      	bne.n	800bb90 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bb7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb7e:	f383 8811 	msr	BASEPRI, r3
 800bb82:	f3bf 8f6f 	isb	sy
 800bb86:	f3bf 8f4f 	dsb	sy
 800bb8a:	61fb      	str	r3, [r7, #28]
}
 800bb8c:	bf00      	nop
 800bb8e:	e7fe      	b.n	800bb8e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bb90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb96:	6850      	ldr	r0, [r2, #4]
 800bb98:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bb9a:	6892      	ldr	r2, [r2, #8]
 800bb9c:	4611      	mov	r1, r2
 800bb9e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2b00      	cmp	r3, #0
 800bba4:	f2c0 80aa 	blt.w	800bcfc <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800bba8:	68fb      	ldr	r3, [r7, #12]
 800bbaa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800bbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbae:	695b      	ldr	r3, [r3, #20]
 800bbb0:	2b00      	cmp	r3, #0
 800bbb2:	d004      	beq.n	800bbbe <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bbb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bbb6:	3304      	adds	r3, #4
 800bbb8:	4618      	mov	r0, r3
 800bbba:	f7fe f977 	bl	8009eac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bbbe:	463b      	mov	r3, r7
 800bbc0:	4618      	mov	r0, r3
 800bbc2:	f7ff ff6b 	bl	800ba9c <prvSampleTimeNow>
 800bbc6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	2b09      	cmp	r3, #9
 800bbcc:	f200 8097 	bhi.w	800bcfe <prvProcessReceivedCommands+0x19e>
 800bbd0:	a201      	add	r2, pc, #4	; (adr r2, 800bbd8 <prvProcessReceivedCommands+0x78>)
 800bbd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bbd6:	bf00      	nop
 800bbd8:	0800bc01 	.word	0x0800bc01
 800bbdc:	0800bc01 	.word	0x0800bc01
 800bbe0:	0800bc01 	.word	0x0800bc01
 800bbe4:	0800bc75 	.word	0x0800bc75
 800bbe8:	0800bc89 	.word	0x0800bc89
 800bbec:	0800bcd3 	.word	0x0800bcd3
 800bbf0:	0800bc01 	.word	0x0800bc01
 800bbf4:	0800bc01 	.word	0x0800bc01
 800bbf8:	0800bc75 	.word	0x0800bc75
 800bbfc:	0800bc89 	.word	0x0800bc89
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bc00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc02:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc06:	f043 0301 	orr.w	r3, r3, #1
 800bc0a:	b2da      	uxtb	r2, r3
 800bc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800bc12:	68ba      	ldr	r2, [r7, #8]
 800bc14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc16:	699b      	ldr	r3, [r3, #24]
 800bc18:	18d1      	adds	r1, r2, r3
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bc1e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc20:	f7ff ff5c 	bl	800badc <prvInsertTimerInActiveList>
 800bc24:	4603      	mov	r3, r0
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	d069      	beq.n	800bcfe <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bc2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc2c:	6a1b      	ldr	r3, [r3, #32]
 800bc2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc30:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bc32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc38:	f003 0304 	and.w	r3, r3, #4
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d05e      	beq.n	800bcfe <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bc40:	68ba      	ldr	r2, [r7, #8]
 800bc42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc44:	699b      	ldr	r3, [r3, #24]
 800bc46:	441a      	add	r2, r3
 800bc48:	2300      	movs	r3, #0
 800bc4a:	9300      	str	r3, [sp, #0]
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	2100      	movs	r1, #0
 800bc50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bc52:	f7ff fe05 	bl	800b860 <xTimerGenericCommand>
 800bc56:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800bc58:	6a3b      	ldr	r3, [r7, #32]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d14f      	bne.n	800bcfe <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bc5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc62:	f383 8811 	msr	BASEPRI, r3
 800bc66:	f3bf 8f6f 	isb	sy
 800bc6a:	f3bf 8f4f 	dsb	sy
 800bc6e:	61bb      	str	r3, [r7, #24]
}
 800bc70:	bf00      	nop
 800bc72:	e7fe      	b.n	800bc72 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc76:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc7a:	f023 0301 	bic.w	r3, r3, #1
 800bc7e:	b2da      	uxtb	r2, r3
 800bc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc82:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bc86:	e03a      	b.n	800bcfe <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bc88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bc8e:	f043 0301 	orr.w	r3, r3, #1
 800bc92:	b2da      	uxtb	r2, r3
 800bc94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bc9a:	68ba      	ldr	r2, [r7, #8]
 800bc9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bc9e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bca2:	699b      	ldr	r3, [r3, #24]
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d10a      	bne.n	800bcbe <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcac:	f383 8811 	msr	BASEPRI, r3
 800bcb0:	f3bf 8f6f 	isb	sy
 800bcb4:	f3bf 8f4f 	dsb	sy
 800bcb8:	617b      	str	r3, [r7, #20]
}
 800bcba:	bf00      	nop
 800bcbc:	e7fe      	b.n	800bcbc <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bcbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcc0:	699a      	ldr	r2, [r3, #24]
 800bcc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc4:	18d1      	adds	r1, r2, r3
 800bcc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bcca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bccc:	f7ff ff06 	bl	800badc <prvInsertTimerInActiveList>
					break;
 800bcd0:	e015      	b.n	800bcfe <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bcd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcd4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcd8:	f003 0302 	and.w	r3, r3, #2
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d103      	bne.n	800bce8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bce0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bce2:	f000 fbdd 	bl	800c4a0 <vPortFree>
 800bce6:	e00a      	b.n	800bcfe <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bcee:	f023 0301 	bic.w	r3, r3, #1
 800bcf2:	b2da      	uxtb	r2, r3
 800bcf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bcf6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bcfa:	e000      	b.n	800bcfe <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bcfc:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bcfe:	4b08      	ldr	r3, [pc, #32]	; (800bd20 <prvProcessReceivedCommands+0x1c0>)
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	1d39      	adds	r1, r7, #4
 800bd04:	2200      	movs	r2, #0
 800bd06:	4618      	mov	r0, r3
 800bd08:	f7fe fb98 	bl	800a43c <xQueueReceive>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	f47f af2a 	bne.w	800bb68 <prvProcessReceivedCommands+0x8>
	}
}
 800bd14:	bf00      	nop
 800bd16:	bf00      	nop
 800bd18:	3730      	adds	r7, #48	; 0x30
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	bd80      	pop	{r7, pc}
 800bd1e:	bf00      	nop
 800bd20:	200015fc 	.word	0x200015fc

0800bd24 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bd24:	b580      	push	{r7, lr}
 800bd26:	b088      	sub	sp, #32
 800bd28:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bd2a:	e048      	b.n	800bdbe <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bd2c:	4b2d      	ldr	r3, [pc, #180]	; (800bde4 <prvSwitchTimerLists+0xc0>)
 800bd2e:	681b      	ldr	r3, [r3, #0]
 800bd30:	68db      	ldr	r3, [r3, #12]
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bd36:	4b2b      	ldr	r3, [pc, #172]	; (800bde4 <prvSwitchTimerLists+0xc0>)
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	68db      	ldr	r3, [r3, #12]
 800bd3c:	68db      	ldr	r3, [r3, #12]
 800bd3e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bd40:	68fb      	ldr	r3, [r7, #12]
 800bd42:	3304      	adds	r3, #4
 800bd44:	4618      	mov	r0, r3
 800bd46:	f7fe f8b1 	bl	8009eac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	6a1b      	ldr	r3, [r3, #32]
 800bd4e:	68f8      	ldr	r0, [r7, #12]
 800bd50:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bd52:	68fb      	ldr	r3, [r7, #12]
 800bd54:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bd58:	f003 0304 	and.w	r3, r3, #4
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d02e      	beq.n	800bdbe <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	699b      	ldr	r3, [r3, #24]
 800bd64:	693a      	ldr	r2, [r7, #16]
 800bd66:	4413      	add	r3, r2
 800bd68:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bd6a:	68ba      	ldr	r2, [r7, #8]
 800bd6c:	693b      	ldr	r3, [r7, #16]
 800bd6e:	429a      	cmp	r2, r3
 800bd70:	d90e      	bls.n	800bd90 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bd72:	68fb      	ldr	r3, [r7, #12]
 800bd74:	68ba      	ldr	r2, [r7, #8]
 800bd76:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bd78:	68fb      	ldr	r3, [r7, #12]
 800bd7a:	68fa      	ldr	r2, [r7, #12]
 800bd7c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bd7e:	4b19      	ldr	r3, [pc, #100]	; (800bde4 <prvSwitchTimerLists+0xc0>)
 800bd80:	681a      	ldr	r2, [r3, #0]
 800bd82:	68fb      	ldr	r3, [r7, #12]
 800bd84:	3304      	adds	r3, #4
 800bd86:	4619      	mov	r1, r3
 800bd88:	4610      	mov	r0, r2
 800bd8a:	f7fe f856 	bl	8009e3a <vListInsert>
 800bd8e:	e016      	b.n	800bdbe <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bd90:	2300      	movs	r3, #0
 800bd92:	9300      	str	r3, [sp, #0]
 800bd94:	2300      	movs	r3, #0
 800bd96:	693a      	ldr	r2, [r7, #16]
 800bd98:	2100      	movs	r1, #0
 800bd9a:	68f8      	ldr	r0, [r7, #12]
 800bd9c:	f7ff fd60 	bl	800b860 <xTimerGenericCommand>
 800bda0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d10a      	bne.n	800bdbe <prvSwitchTimerLists+0x9a>
	__asm volatile
 800bda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdac:	f383 8811 	msr	BASEPRI, r3
 800bdb0:	f3bf 8f6f 	isb	sy
 800bdb4:	f3bf 8f4f 	dsb	sy
 800bdb8:	603b      	str	r3, [r7, #0]
}
 800bdba:	bf00      	nop
 800bdbc:	e7fe      	b.n	800bdbc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bdbe:	4b09      	ldr	r3, [pc, #36]	; (800bde4 <prvSwitchTimerLists+0xc0>)
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	681b      	ldr	r3, [r3, #0]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d1b1      	bne.n	800bd2c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bdc8:	4b06      	ldr	r3, [pc, #24]	; (800bde4 <prvSwitchTimerLists+0xc0>)
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bdce:	4b06      	ldr	r3, [pc, #24]	; (800bde8 <prvSwitchTimerLists+0xc4>)
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	4a04      	ldr	r2, [pc, #16]	; (800bde4 <prvSwitchTimerLists+0xc0>)
 800bdd4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800bdd6:	4a04      	ldr	r2, [pc, #16]	; (800bde8 <prvSwitchTimerLists+0xc4>)
 800bdd8:	697b      	ldr	r3, [r7, #20]
 800bdda:	6013      	str	r3, [r2, #0]
}
 800bddc:	bf00      	nop
 800bdde:	3718      	adds	r7, #24
 800bde0:	46bd      	mov	sp, r7
 800bde2:	bd80      	pop	{r7, pc}
 800bde4:	200015f4 	.word	0x200015f4
 800bde8:	200015f8 	.word	0x200015f8

0800bdec <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b082      	sub	sp, #8
 800bdf0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bdf2:	f000 f967 	bl	800c0c4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bdf6:	4b15      	ldr	r3, [pc, #84]	; (800be4c <prvCheckForValidListAndQueue+0x60>)
 800bdf8:	681b      	ldr	r3, [r3, #0]
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d120      	bne.n	800be40 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800bdfe:	4814      	ldr	r0, [pc, #80]	; (800be50 <prvCheckForValidListAndQueue+0x64>)
 800be00:	f7fd ffca 	bl	8009d98 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800be04:	4813      	ldr	r0, [pc, #76]	; (800be54 <prvCheckForValidListAndQueue+0x68>)
 800be06:	f7fd ffc7 	bl	8009d98 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800be0a:	4b13      	ldr	r3, [pc, #76]	; (800be58 <prvCheckForValidListAndQueue+0x6c>)
 800be0c:	4a10      	ldr	r2, [pc, #64]	; (800be50 <prvCheckForValidListAndQueue+0x64>)
 800be0e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800be10:	4b12      	ldr	r3, [pc, #72]	; (800be5c <prvCheckForValidListAndQueue+0x70>)
 800be12:	4a10      	ldr	r2, [pc, #64]	; (800be54 <prvCheckForValidListAndQueue+0x68>)
 800be14:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800be16:	2300      	movs	r3, #0
 800be18:	9300      	str	r3, [sp, #0]
 800be1a:	4b11      	ldr	r3, [pc, #68]	; (800be60 <prvCheckForValidListAndQueue+0x74>)
 800be1c:	4a11      	ldr	r2, [pc, #68]	; (800be64 <prvCheckForValidListAndQueue+0x78>)
 800be1e:	2110      	movs	r1, #16
 800be20:	200a      	movs	r0, #10
 800be22:	f7fe f8d5 	bl	8009fd0 <xQueueGenericCreateStatic>
 800be26:	4603      	mov	r3, r0
 800be28:	4a08      	ldr	r2, [pc, #32]	; (800be4c <prvCheckForValidListAndQueue+0x60>)
 800be2a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800be2c:	4b07      	ldr	r3, [pc, #28]	; (800be4c <prvCheckForValidListAndQueue+0x60>)
 800be2e:	681b      	ldr	r3, [r3, #0]
 800be30:	2b00      	cmp	r3, #0
 800be32:	d005      	beq.n	800be40 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800be34:	4b05      	ldr	r3, [pc, #20]	; (800be4c <prvCheckForValidListAndQueue+0x60>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	490b      	ldr	r1, [pc, #44]	; (800be68 <prvCheckForValidListAndQueue+0x7c>)
 800be3a:	4618      	mov	r0, r3
 800be3c:	f7fe fcee 	bl	800a81c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800be40:	f000 f970 	bl	800c124 <vPortExitCritical>
}
 800be44:	bf00      	nop
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}
 800be4a:	bf00      	nop
 800be4c:	200015fc 	.word	0x200015fc
 800be50:	200015cc 	.word	0x200015cc
 800be54:	200015e0 	.word	0x200015e0
 800be58:	200015f4 	.word	0x200015f4
 800be5c:	200015f8 	.word	0x200015f8
 800be60:	200016a8 	.word	0x200016a8
 800be64:	20001608 	.word	0x20001608
 800be68:	08010b58 	.word	0x08010b58

0800be6c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800be6c:	b480      	push	{r7}
 800be6e:	b085      	sub	sp, #20
 800be70:	af00      	add	r7, sp, #0
 800be72:	60f8      	str	r0, [r7, #12]
 800be74:	60b9      	str	r1, [r7, #8]
 800be76:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800be78:	68fb      	ldr	r3, [r7, #12]
 800be7a:	3b04      	subs	r3, #4
 800be7c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800be84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be86:	68fb      	ldr	r3, [r7, #12]
 800be88:	3b04      	subs	r3, #4
 800be8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	f023 0201 	bic.w	r2, r3, #1
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	3b04      	subs	r3, #4
 800be9a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800be9c:	4a0c      	ldr	r2, [pc, #48]	; (800bed0 <pxPortInitialiseStack+0x64>)
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	3b14      	subs	r3, #20
 800bea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bea8:	687a      	ldr	r2, [r7, #4]
 800beaa:	68fb      	ldr	r3, [r7, #12]
 800beac:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800beae:	68fb      	ldr	r3, [r7, #12]
 800beb0:	3b04      	subs	r3, #4
 800beb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	f06f 0202 	mvn.w	r2, #2
 800beba:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800bebc:	68fb      	ldr	r3, [r7, #12]
 800bebe:	3b20      	subs	r3, #32
 800bec0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bec2:	68fb      	ldr	r3, [r7, #12]
}
 800bec4:	4618      	mov	r0, r3
 800bec6:	3714      	adds	r7, #20
 800bec8:	46bd      	mov	sp, r7
 800beca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bece:	4770      	bx	lr
 800bed0:	0800bed5 	.word	0x0800bed5

0800bed4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bed4:	b480      	push	{r7}
 800bed6:	b085      	sub	sp, #20
 800bed8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800beda:	2300      	movs	r3, #0
 800bedc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bede:	4b12      	ldr	r3, [pc, #72]	; (800bf28 <prvTaskExitError+0x54>)
 800bee0:	681b      	ldr	r3, [r3, #0]
 800bee2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bee6:	d00a      	beq.n	800befe <prvTaskExitError+0x2a>
	__asm volatile
 800bee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800beec:	f383 8811 	msr	BASEPRI, r3
 800bef0:	f3bf 8f6f 	isb	sy
 800bef4:	f3bf 8f4f 	dsb	sy
 800bef8:	60fb      	str	r3, [r7, #12]
}
 800befa:	bf00      	nop
 800befc:	e7fe      	b.n	800befc <prvTaskExitError+0x28>
	__asm volatile
 800befe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf02:	f383 8811 	msr	BASEPRI, r3
 800bf06:	f3bf 8f6f 	isb	sy
 800bf0a:	f3bf 8f4f 	dsb	sy
 800bf0e:	60bb      	str	r3, [r7, #8]
}
 800bf10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bf12:	bf00      	nop
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d0fc      	beq.n	800bf14 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bf1a:	bf00      	nop
 800bf1c:	bf00      	nop
 800bf1e:	3714      	adds	r7, #20
 800bf20:	46bd      	mov	sp, r7
 800bf22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf26:	4770      	bx	lr
 800bf28:	20000024 	.word	0x20000024
 800bf2c:	00000000 	.word	0x00000000

0800bf30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bf30:	4b07      	ldr	r3, [pc, #28]	; (800bf50 <pxCurrentTCBConst2>)
 800bf32:	6819      	ldr	r1, [r3, #0]
 800bf34:	6808      	ldr	r0, [r1, #0]
 800bf36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf3a:	f380 8809 	msr	PSP, r0
 800bf3e:	f3bf 8f6f 	isb	sy
 800bf42:	f04f 0000 	mov.w	r0, #0
 800bf46:	f380 8811 	msr	BASEPRI, r0
 800bf4a:	4770      	bx	lr
 800bf4c:	f3af 8000 	nop.w

0800bf50 <pxCurrentTCBConst2>:
 800bf50:	200010cc 	.word	0x200010cc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bf54:	bf00      	nop
 800bf56:	bf00      	nop

0800bf58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bf58:	4808      	ldr	r0, [pc, #32]	; (800bf7c <prvPortStartFirstTask+0x24>)
 800bf5a:	6800      	ldr	r0, [r0, #0]
 800bf5c:	6800      	ldr	r0, [r0, #0]
 800bf5e:	f380 8808 	msr	MSP, r0
 800bf62:	f04f 0000 	mov.w	r0, #0
 800bf66:	f380 8814 	msr	CONTROL, r0
 800bf6a:	b662      	cpsie	i
 800bf6c:	b661      	cpsie	f
 800bf6e:	f3bf 8f4f 	dsb	sy
 800bf72:	f3bf 8f6f 	isb	sy
 800bf76:	df00      	svc	0
 800bf78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bf7a:	bf00      	nop
 800bf7c:	e000ed08 	.word	0xe000ed08

0800bf80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bf80:	b580      	push	{r7, lr}
 800bf82:	b086      	sub	sp, #24
 800bf84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bf86:	4b46      	ldr	r3, [pc, #280]	; (800c0a0 <xPortStartScheduler+0x120>)
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	4a46      	ldr	r2, [pc, #280]	; (800c0a4 <xPortStartScheduler+0x124>)
 800bf8c:	4293      	cmp	r3, r2
 800bf8e:	d10a      	bne.n	800bfa6 <xPortStartScheduler+0x26>
	__asm volatile
 800bf90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf94:	f383 8811 	msr	BASEPRI, r3
 800bf98:	f3bf 8f6f 	isb	sy
 800bf9c:	f3bf 8f4f 	dsb	sy
 800bfa0:	613b      	str	r3, [r7, #16]
}
 800bfa2:	bf00      	nop
 800bfa4:	e7fe      	b.n	800bfa4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bfa6:	4b3e      	ldr	r3, [pc, #248]	; (800c0a0 <xPortStartScheduler+0x120>)
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	4a3f      	ldr	r2, [pc, #252]	; (800c0a8 <xPortStartScheduler+0x128>)
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d10a      	bne.n	800bfc6 <xPortStartScheduler+0x46>
	__asm volatile
 800bfb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb4:	f383 8811 	msr	BASEPRI, r3
 800bfb8:	f3bf 8f6f 	isb	sy
 800bfbc:	f3bf 8f4f 	dsb	sy
 800bfc0:	60fb      	str	r3, [r7, #12]
}
 800bfc2:	bf00      	nop
 800bfc4:	e7fe      	b.n	800bfc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bfc6:	4b39      	ldr	r3, [pc, #228]	; (800c0ac <xPortStartScheduler+0x12c>)
 800bfc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	781b      	ldrb	r3, [r3, #0]
 800bfce:	b2db      	uxtb	r3, r3
 800bfd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bfd2:	697b      	ldr	r3, [r7, #20]
 800bfd4:	22ff      	movs	r2, #255	; 0xff
 800bfd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	781b      	ldrb	r3, [r3, #0]
 800bfdc:	b2db      	uxtb	r3, r3
 800bfde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bfe0:	78fb      	ldrb	r3, [r7, #3]
 800bfe2:	b2db      	uxtb	r3, r3
 800bfe4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bfe8:	b2da      	uxtb	r2, r3
 800bfea:	4b31      	ldr	r3, [pc, #196]	; (800c0b0 <xPortStartScheduler+0x130>)
 800bfec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bfee:	4b31      	ldr	r3, [pc, #196]	; (800c0b4 <xPortStartScheduler+0x134>)
 800bff0:	2207      	movs	r2, #7
 800bff2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bff4:	e009      	b.n	800c00a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bff6:	4b2f      	ldr	r3, [pc, #188]	; (800c0b4 <xPortStartScheduler+0x134>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	3b01      	subs	r3, #1
 800bffc:	4a2d      	ldr	r2, [pc, #180]	; (800c0b4 <xPortStartScheduler+0x134>)
 800bffe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c000:	78fb      	ldrb	r3, [r7, #3]
 800c002:	b2db      	uxtb	r3, r3
 800c004:	005b      	lsls	r3, r3, #1
 800c006:	b2db      	uxtb	r3, r3
 800c008:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c00a:	78fb      	ldrb	r3, [r7, #3]
 800c00c:	b2db      	uxtb	r3, r3
 800c00e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c012:	2b80      	cmp	r3, #128	; 0x80
 800c014:	d0ef      	beq.n	800bff6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c016:	4b27      	ldr	r3, [pc, #156]	; (800c0b4 <xPortStartScheduler+0x134>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	f1c3 0307 	rsb	r3, r3, #7
 800c01e:	2b04      	cmp	r3, #4
 800c020:	d00a      	beq.n	800c038 <xPortStartScheduler+0xb8>
	__asm volatile
 800c022:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c026:	f383 8811 	msr	BASEPRI, r3
 800c02a:	f3bf 8f6f 	isb	sy
 800c02e:	f3bf 8f4f 	dsb	sy
 800c032:	60bb      	str	r3, [r7, #8]
}
 800c034:	bf00      	nop
 800c036:	e7fe      	b.n	800c036 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c038:	4b1e      	ldr	r3, [pc, #120]	; (800c0b4 <xPortStartScheduler+0x134>)
 800c03a:	681b      	ldr	r3, [r3, #0]
 800c03c:	021b      	lsls	r3, r3, #8
 800c03e:	4a1d      	ldr	r2, [pc, #116]	; (800c0b4 <xPortStartScheduler+0x134>)
 800c040:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c042:	4b1c      	ldr	r3, [pc, #112]	; (800c0b4 <xPortStartScheduler+0x134>)
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c04a:	4a1a      	ldr	r2, [pc, #104]	; (800c0b4 <xPortStartScheduler+0x134>)
 800c04c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	b2da      	uxtb	r2, r3
 800c052:	697b      	ldr	r3, [r7, #20]
 800c054:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c056:	4b18      	ldr	r3, [pc, #96]	; (800c0b8 <xPortStartScheduler+0x138>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	4a17      	ldr	r2, [pc, #92]	; (800c0b8 <xPortStartScheduler+0x138>)
 800c05c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c060:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c062:	4b15      	ldr	r3, [pc, #84]	; (800c0b8 <xPortStartScheduler+0x138>)
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	4a14      	ldr	r2, [pc, #80]	; (800c0b8 <xPortStartScheduler+0x138>)
 800c068:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c06c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c06e:	f000 f8dd 	bl	800c22c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c072:	4b12      	ldr	r3, [pc, #72]	; (800c0bc <xPortStartScheduler+0x13c>)
 800c074:	2200      	movs	r2, #0
 800c076:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c078:	f000 f8fc 	bl	800c274 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c07c:	4b10      	ldr	r3, [pc, #64]	; (800c0c0 <xPortStartScheduler+0x140>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	4a0f      	ldr	r2, [pc, #60]	; (800c0c0 <xPortStartScheduler+0x140>)
 800c082:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c086:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c088:	f7ff ff66 	bl	800bf58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c08c:	f7ff f854 	bl	800b138 <vTaskSwitchContext>
	prvTaskExitError();
 800c090:	f7ff ff20 	bl	800bed4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c094:	2300      	movs	r3, #0
}
 800c096:	4618      	mov	r0, r3
 800c098:	3718      	adds	r7, #24
 800c09a:	46bd      	mov	sp, r7
 800c09c:	bd80      	pop	{r7, pc}
 800c09e:	bf00      	nop
 800c0a0:	e000ed00 	.word	0xe000ed00
 800c0a4:	410fc271 	.word	0x410fc271
 800c0a8:	410fc270 	.word	0x410fc270
 800c0ac:	e000e400 	.word	0xe000e400
 800c0b0:	200016f8 	.word	0x200016f8
 800c0b4:	200016fc 	.word	0x200016fc
 800c0b8:	e000ed20 	.word	0xe000ed20
 800c0bc:	20000024 	.word	0x20000024
 800c0c0:	e000ef34 	.word	0xe000ef34

0800c0c4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c0c4:	b480      	push	{r7}
 800c0c6:	b083      	sub	sp, #12
 800c0c8:	af00      	add	r7, sp, #0
	__asm volatile
 800c0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0ce:	f383 8811 	msr	BASEPRI, r3
 800c0d2:	f3bf 8f6f 	isb	sy
 800c0d6:	f3bf 8f4f 	dsb	sy
 800c0da:	607b      	str	r3, [r7, #4]
}
 800c0dc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c0de:	4b0f      	ldr	r3, [pc, #60]	; (800c11c <vPortEnterCritical+0x58>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	3301      	adds	r3, #1
 800c0e4:	4a0d      	ldr	r2, [pc, #52]	; (800c11c <vPortEnterCritical+0x58>)
 800c0e6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c0e8:	4b0c      	ldr	r3, [pc, #48]	; (800c11c <vPortEnterCritical+0x58>)
 800c0ea:	681b      	ldr	r3, [r3, #0]
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	d10f      	bne.n	800c110 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c0f0:	4b0b      	ldr	r3, [pc, #44]	; (800c120 <vPortEnterCritical+0x5c>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	b2db      	uxtb	r3, r3
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d00a      	beq.n	800c110 <vPortEnterCritical+0x4c>
	__asm volatile
 800c0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0fe:	f383 8811 	msr	BASEPRI, r3
 800c102:	f3bf 8f6f 	isb	sy
 800c106:	f3bf 8f4f 	dsb	sy
 800c10a:	603b      	str	r3, [r7, #0]
}
 800c10c:	bf00      	nop
 800c10e:	e7fe      	b.n	800c10e <vPortEnterCritical+0x4a>
	}
}
 800c110:	bf00      	nop
 800c112:	370c      	adds	r7, #12
 800c114:	46bd      	mov	sp, r7
 800c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11a:	4770      	bx	lr
 800c11c:	20000024 	.word	0x20000024
 800c120:	e000ed04 	.word	0xe000ed04

0800c124 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c124:	b480      	push	{r7}
 800c126:	b083      	sub	sp, #12
 800c128:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c12a:	4b12      	ldr	r3, [pc, #72]	; (800c174 <vPortExitCritical+0x50>)
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d10a      	bne.n	800c148 <vPortExitCritical+0x24>
	__asm volatile
 800c132:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c136:	f383 8811 	msr	BASEPRI, r3
 800c13a:	f3bf 8f6f 	isb	sy
 800c13e:	f3bf 8f4f 	dsb	sy
 800c142:	607b      	str	r3, [r7, #4]
}
 800c144:	bf00      	nop
 800c146:	e7fe      	b.n	800c146 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c148:	4b0a      	ldr	r3, [pc, #40]	; (800c174 <vPortExitCritical+0x50>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	3b01      	subs	r3, #1
 800c14e:	4a09      	ldr	r2, [pc, #36]	; (800c174 <vPortExitCritical+0x50>)
 800c150:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c152:	4b08      	ldr	r3, [pc, #32]	; (800c174 <vPortExitCritical+0x50>)
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	2b00      	cmp	r3, #0
 800c158:	d105      	bne.n	800c166 <vPortExitCritical+0x42>
 800c15a:	2300      	movs	r3, #0
 800c15c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	f383 8811 	msr	BASEPRI, r3
}
 800c164:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c166:	bf00      	nop
 800c168:	370c      	adds	r7, #12
 800c16a:	46bd      	mov	sp, r7
 800c16c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c170:	4770      	bx	lr
 800c172:	bf00      	nop
 800c174:	20000024 	.word	0x20000024
	...

0800c180 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c180:	f3ef 8009 	mrs	r0, PSP
 800c184:	f3bf 8f6f 	isb	sy
 800c188:	4b15      	ldr	r3, [pc, #84]	; (800c1e0 <pxCurrentTCBConst>)
 800c18a:	681a      	ldr	r2, [r3, #0]
 800c18c:	f01e 0f10 	tst.w	lr, #16
 800c190:	bf08      	it	eq
 800c192:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c196:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c19a:	6010      	str	r0, [r2, #0]
 800c19c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c1a0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c1a4:	f380 8811 	msr	BASEPRI, r0
 800c1a8:	f3bf 8f4f 	dsb	sy
 800c1ac:	f3bf 8f6f 	isb	sy
 800c1b0:	f7fe ffc2 	bl	800b138 <vTaskSwitchContext>
 800c1b4:	f04f 0000 	mov.w	r0, #0
 800c1b8:	f380 8811 	msr	BASEPRI, r0
 800c1bc:	bc09      	pop	{r0, r3}
 800c1be:	6819      	ldr	r1, [r3, #0]
 800c1c0:	6808      	ldr	r0, [r1, #0]
 800c1c2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c1c6:	f01e 0f10 	tst.w	lr, #16
 800c1ca:	bf08      	it	eq
 800c1cc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c1d0:	f380 8809 	msr	PSP, r0
 800c1d4:	f3bf 8f6f 	isb	sy
 800c1d8:	4770      	bx	lr
 800c1da:	bf00      	nop
 800c1dc:	f3af 8000 	nop.w

0800c1e0 <pxCurrentTCBConst>:
 800c1e0:	200010cc 	.word	0x200010cc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c1e4:	bf00      	nop
 800c1e6:	bf00      	nop

0800c1e8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b082      	sub	sp, #8
 800c1ec:	af00      	add	r7, sp, #0
	__asm volatile
 800c1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f2:	f383 8811 	msr	BASEPRI, r3
 800c1f6:	f3bf 8f6f 	isb	sy
 800c1fa:	f3bf 8f4f 	dsb	sy
 800c1fe:	607b      	str	r3, [r7, #4]
}
 800c200:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c202:	f7fe fedf 	bl	800afc4 <xTaskIncrementTick>
 800c206:	4603      	mov	r3, r0
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d003      	beq.n	800c214 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c20c:	4b06      	ldr	r3, [pc, #24]	; (800c228 <xPortSysTickHandler+0x40>)
 800c20e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c212:	601a      	str	r2, [r3, #0]
 800c214:	2300      	movs	r3, #0
 800c216:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c218:	683b      	ldr	r3, [r7, #0]
 800c21a:	f383 8811 	msr	BASEPRI, r3
}
 800c21e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c220:	bf00      	nop
 800c222:	3708      	adds	r7, #8
 800c224:	46bd      	mov	sp, r7
 800c226:	bd80      	pop	{r7, pc}
 800c228:	e000ed04 	.word	0xe000ed04

0800c22c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c22c:	b480      	push	{r7}
 800c22e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c230:	4b0b      	ldr	r3, [pc, #44]	; (800c260 <vPortSetupTimerInterrupt+0x34>)
 800c232:	2200      	movs	r2, #0
 800c234:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c236:	4b0b      	ldr	r3, [pc, #44]	; (800c264 <vPortSetupTimerInterrupt+0x38>)
 800c238:	2200      	movs	r2, #0
 800c23a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c23c:	4b0a      	ldr	r3, [pc, #40]	; (800c268 <vPortSetupTimerInterrupt+0x3c>)
 800c23e:	681b      	ldr	r3, [r3, #0]
 800c240:	4a0a      	ldr	r2, [pc, #40]	; (800c26c <vPortSetupTimerInterrupt+0x40>)
 800c242:	fba2 2303 	umull	r2, r3, r2, r3
 800c246:	099b      	lsrs	r3, r3, #6
 800c248:	4a09      	ldr	r2, [pc, #36]	; (800c270 <vPortSetupTimerInterrupt+0x44>)
 800c24a:	3b01      	subs	r3, #1
 800c24c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c24e:	4b04      	ldr	r3, [pc, #16]	; (800c260 <vPortSetupTimerInterrupt+0x34>)
 800c250:	2207      	movs	r2, #7
 800c252:	601a      	str	r2, [r3, #0]
}
 800c254:	bf00      	nop
 800c256:	46bd      	mov	sp, r7
 800c258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c25c:	4770      	bx	lr
 800c25e:	bf00      	nop
 800c260:	e000e010 	.word	0xe000e010
 800c264:	e000e018 	.word	0xe000e018
 800c268:	20000018 	.word	0x20000018
 800c26c:	10624dd3 	.word	0x10624dd3
 800c270:	e000e014 	.word	0xe000e014

0800c274 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c274:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c284 <vPortEnableVFP+0x10>
 800c278:	6801      	ldr	r1, [r0, #0]
 800c27a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c27e:	6001      	str	r1, [r0, #0]
 800c280:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c282:	bf00      	nop
 800c284:	e000ed88 	.word	0xe000ed88

0800c288 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c288:	b480      	push	{r7}
 800c28a:	b085      	sub	sp, #20
 800c28c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c28e:	f3ef 8305 	mrs	r3, IPSR
 800c292:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	2b0f      	cmp	r3, #15
 800c298:	d914      	bls.n	800c2c4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c29a:	4a17      	ldr	r2, [pc, #92]	; (800c2f8 <vPortValidateInterruptPriority+0x70>)
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	4413      	add	r3, r2
 800c2a0:	781b      	ldrb	r3, [r3, #0]
 800c2a2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c2a4:	4b15      	ldr	r3, [pc, #84]	; (800c2fc <vPortValidateInterruptPriority+0x74>)
 800c2a6:	781b      	ldrb	r3, [r3, #0]
 800c2a8:	7afa      	ldrb	r2, [r7, #11]
 800c2aa:	429a      	cmp	r2, r3
 800c2ac:	d20a      	bcs.n	800c2c4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c2ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2b2:	f383 8811 	msr	BASEPRI, r3
 800c2b6:	f3bf 8f6f 	isb	sy
 800c2ba:	f3bf 8f4f 	dsb	sy
 800c2be:	607b      	str	r3, [r7, #4]
}
 800c2c0:	bf00      	nop
 800c2c2:	e7fe      	b.n	800c2c2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c2c4:	4b0e      	ldr	r3, [pc, #56]	; (800c300 <vPortValidateInterruptPriority+0x78>)
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c2cc:	4b0d      	ldr	r3, [pc, #52]	; (800c304 <vPortValidateInterruptPriority+0x7c>)
 800c2ce:	681b      	ldr	r3, [r3, #0]
 800c2d0:	429a      	cmp	r2, r3
 800c2d2:	d90a      	bls.n	800c2ea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c2d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2d8:	f383 8811 	msr	BASEPRI, r3
 800c2dc:	f3bf 8f6f 	isb	sy
 800c2e0:	f3bf 8f4f 	dsb	sy
 800c2e4:	603b      	str	r3, [r7, #0]
}
 800c2e6:	bf00      	nop
 800c2e8:	e7fe      	b.n	800c2e8 <vPortValidateInterruptPriority+0x60>
	}
 800c2ea:	bf00      	nop
 800c2ec:	3714      	adds	r7, #20
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2f4:	4770      	bx	lr
 800c2f6:	bf00      	nop
 800c2f8:	e000e3f0 	.word	0xe000e3f0
 800c2fc:	200016f8 	.word	0x200016f8
 800c300:	e000ed0c 	.word	0xe000ed0c
 800c304:	200016fc 	.word	0x200016fc

0800c308 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c308:	b580      	push	{r7, lr}
 800c30a:	b08a      	sub	sp, #40	; 0x28
 800c30c:	af00      	add	r7, sp, #0
 800c30e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c310:	2300      	movs	r3, #0
 800c312:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c314:	f7fe fd9a 	bl	800ae4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c318:	4b5b      	ldr	r3, [pc, #364]	; (800c488 <pvPortMalloc+0x180>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	2b00      	cmp	r3, #0
 800c31e:	d101      	bne.n	800c324 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c320:	f000 f920 	bl	800c564 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c324:	4b59      	ldr	r3, [pc, #356]	; (800c48c <pvPortMalloc+0x184>)
 800c326:	681a      	ldr	r2, [r3, #0]
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	4013      	ands	r3, r2
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	f040 8093 	bne.w	800c458 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d01d      	beq.n	800c374 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c338:	2208      	movs	r2, #8
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	4413      	add	r3, r2
 800c33e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f003 0307 	and.w	r3, r3, #7
 800c346:	2b00      	cmp	r3, #0
 800c348:	d014      	beq.n	800c374 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	f023 0307 	bic.w	r3, r3, #7
 800c350:	3308      	adds	r3, #8
 800c352:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	f003 0307 	and.w	r3, r3, #7
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d00a      	beq.n	800c374 <pvPortMalloc+0x6c>
	__asm volatile
 800c35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c362:	f383 8811 	msr	BASEPRI, r3
 800c366:	f3bf 8f6f 	isb	sy
 800c36a:	f3bf 8f4f 	dsb	sy
 800c36e:	617b      	str	r3, [r7, #20]
}
 800c370:	bf00      	nop
 800c372:	e7fe      	b.n	800c372 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d06e      	beq.n	800c458 <pvPortMalloc+0x150>
 800c37a:	4b45      	ldr	r3, [pc, #276]	; (800c490 <pvPortMalloc+0x188>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	687a      	ldr	r2, [r7, #4]
 800c380:	429a      	cmp	r2, r3
 800c382:	d869      	bhi.n	800c458 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c384:	4b43      	ldr	r3, [pc, #268]	; (800c494 <pvPortMalloc+0x18c>)
 800c386:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c388:	4b42      	ldr	r3, [pc, #264]	; (800c494 <pvPortMalloc+0x18c>)
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c38e:	e004      	b.n	800c39a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c392:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c396:	681b      	ldr	r3, [r3, #0]
 800c398:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c39a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c39c:	685b      	ldr	r3, [r3, #4]
 800c39e:	687a      	ldr	r2, [r7, #4]
 800c3a0:	429a      	cmp	r2, r3
 800c3a2:	d903      	bls.n	800c3ac <pvPortMalloc+0xa4>
 800c3a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d1f1      	bne.n	800c390 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c3ac:	4b36      	ldr	r3, [pc, #216]	; (800c488 <pvPortMalloc+0x180>)
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3b2:	429a      	cmp	r2, r3
 800c3b4:	d050      	beq.n	800c458 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c3b6:	6a3b      	ldr	r3, [r7, #32]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	2208      	movs	r2, #8
 800c3bc:	4413      	add	r3, r2
 800c3be:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c3c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3c2:	681a      	ldr	r2, [r3, #0]
 800c3c4:	6a3b      	ldr	r3, [r7, #32]
 800c3c6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c3ca:	685a      	ldr	r2, [r3, #4]
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	1ad2      	subs	r2, r2, r3
 800c3d0:	2308      	movs	r3, #8
 800c3d2:	005b      	lsls	r3, r3, #1
 800c3d4:	429a      	cmp	r2, r3
 800c3d6:	d91f      	bls.n	800c418 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c3d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	4413      	add	r3, r2
 800c3de:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c3e0:	69bb      	ldr	r3, [r7, #24]
 800c3e2:	f003 0307 	and.w	r3, r3, #7
 800c3e6:	2b00      	cmp	r3, #0
 800c3e8:	d00a      	beq.n	800c400 <pvPortMalloc+0xf8>
	__asm volatile
 800c3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3ee:	f383 8811 	msr	BASEPRI, r3
 800c3f2:	f3bf 8f6f 	isb	sy
 800c3f6:	f3bf 8f4f 	dsb	sy
 800c3fa:	613b      	str	r3, [r7, #16]
}
 800c3fc:	bf00      	nop
 800c3fe:	e7fe      	b.n	800c3fe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c402:	685a      	ldr	r2, [r3, #4]
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	1ad2      	subs	r2, r2, r3
 800c408:	69bb      	ldr	r3, [r7, #24]
 800c40a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c40c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c40e:	687a      	ldr	r2, [r7, #4]
 800c410:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c412:	69b8      	ldr	r0, [r7, #24]
 800c414:	f000 f908 	bl	800c628 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c418:	4b1d      	ldr	r3, [pc, #116]	; (800c490 <pvPortMalloc+0x188>)
 800c41a:	681a      	ldr	r2, [r3, #0]
 800c41c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c41e:	685b      	ldr	r3, [r3, #4]
 800c420:	1ad3      	subs	r3, r2, r3
 800c422:	4a1b      	ldr	r2, [pc, #108]	; (800c490 <pvPortMalloc+0x188>)
 800c424:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c426:	4b1a      	ldr	r3, [pc, #104]	; (800c490 <pvPortMalloc+0x188>)
 800c428:	681a      	ldr	r2, [r3, #0]
 800c42a:	4b1b      	ldr	r3, [pc, #108]	; (800c498 <pvPortMalloc+0x190>)
 800c42c:	681b      	ldr	r3, [r3, #0]
 800c42e:	429a      	cmp	r2, r3
 800c430:	d203      	bcs.n	800c43a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c432:	4b17      	ldr	r3, [pc, #92]	; (800c490 <pvPortMalloc+0x188>)
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	4a18      	ldr	r2, [pc, #96]	; (800c498 <pvPortMalloc+0x190>)
 800c438:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c43c:	685a      	ldr	r2, [r3, #4]
 800c43e:	4b13      	ldr	r3, [pc, #76]	; (800c48c <pvPortMalloc+0x184>)
 800c440:	681b      	ldr	r3, [r3, #0]
 800c442:	431a      	orrs	r2, r3
 800c444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c446:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44a:	2200      	movs	r2, #0
 800c44c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c44e:	4b13      	ldr	r3, [pc, #76]	; (800c49c <pvPortMalloc+0x194>)
 800c450:	681b      	ldr	r3, [r3, #0]
 800c452:	3301      	adds	r3, #1
 800c454:	4a11      	ldr	r2, [pc, #68]	; (800c49c <pvPortMalloc+0x194>)
 800c456:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c458:	f7fe fd06 	bl	800ae68 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c45c:	69fb      	ldr	r3, [r7, #28]
 800c45e:	f003 0307 	and.w	r3, r3, #7
 800c462:	2b00      	cmp	r3, #0
 800c464:	d00a      	beq.n	800c47c <pvPortMalloc+0x174>
	__asm volatile
 800c466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c46a:	f383 8811 	msr	BASEPRI, r3
 800c46e:	f3bf 8f6f 	isb	sy
 800c472:	f3bf 8f4f 	dsb	sy
 800c476:	60fb      	str	r3, [r7, #12]
}
 800c478:	bf00      	nop
 800c47a:	e7fe      	b.n	800c47a <pvPortMalloc+0x172>
	return pvReturn;
 800c47c:	69fb      	ldr	r3, [r7, #28]
}
 800c47e:	4618      	mov	r0, r3
 800c480:	3728      	adds	r7, #40	; 0x28
 800c482:	46bd      	mov	sp, r7
 800c484:	bd80      	pop	{r7, pc}
 800c486:	bf00      	nop
 800c488:	20005308 	.word	0x20005308
 800c48c:	2000531c 	.word	0x2000531c
 800c490:	2000530c 	.word	0x2000530c
 800c494:	20005300 	.word	0x20005300
 800c498:	20005310 	.word	0x20005310
 800c49c:	20005314 	.word	0x20005314

0800c4a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b086      	sub	sp, #24
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d04d      	beq.n	800c54e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c4b2:	2308      	movs	r3, #8
 800c4b4:	425b      	negs	r3, r3
 800c4b6:	697a      	ldr	r2, [r7, #20]
 800c4b8:	4413      	add	r3, r2
 800c4ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c4c0:	693b      	ldr	r3, [r7, #16]
 800c4c2:	685a      	ldr	r2, [r3, #4]
 800c4c4:	4b24      	ldr	r3, [pc, #144]	; (800c558 <vPortFree+0xb8>)
 800c4c6:	681b      	ldr	r3, [r3, #0]
 800c4c8:	4013      	ands	r3, r2
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d10a      	bne.n	800c4e4 <vPortFree+0x44>
	__asm volatile
 800c4ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4d2:	f383 8811 	msr	BASEPRI, r3
 800c4d6:	f3bf 8f6f 	isb	sy
 800c4da:	f3bf 8f4f 	dsb	sy
 800c4de:	60fb      	str	r3, [r7, #12]
}
 800c4e0:	bf00      	nop
 800c4e2:	e7fe      	b.n	800c4e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c4e4:	693b      	ldr	r3, [r7, #16]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d00a      	beq.n	800c502 <vPortFree+0x62>
	__asm volatile
 800c4ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c4f0:	f383 8811 	msr	BASEPRI, r3
 800c4f4:	f3bf 8f6f 	isb	sy
 800c4f8:	f3bf 8f4f 	dsb	sy
 800c4fc:	60bb      	str	r3, [r7, #8]
}
 800c4fe:	bf00      	nop
 800c500:	e7fe      	b.n	800c500 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c502:	693b      	ldr	r3, [r7, #16]
 800c504:	685a      	ldr	r2, [r3, #4]
 800c506:	4b14      	ldr	r3, [pc, #80]	; (800c558 <vPortFree+0xb8>)
 800c508:	681b      	ldr	r3, [r3, #0]
 800c50a:	4013      	ands	r3, r2
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d01e      	beq.n	800c54e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c510:	693b      	ldr	r3, [r7, #16]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d11a      	bne.n	800c54e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c518:	693b      	ldr	r3, [r7, #16]
 800c51a:	685a      	ldr	r2, [r3, #4]
 800c51c:	4b0e      	ldr	r3, [pc, #56]	; (800c558 <vPortFree+0xb8>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	43db      	mvns	r3, r3
 800c522:	401a      	ands	r2, r3
 800c524:	693b      	ldr	r3, [r7, #16]
 800c526:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c528:	f7fe fc90 	bl	800ae4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c52c:	693b      	ldr	r3, [r7, #16]
 800c52e:	685a      	ldr	r2, [r3, #4]
 800c530:	4b0a      	ldr	r3, [pc, #40]	; (800c55c <vPortFree+0xbc>)
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	4413      	add	r3, r2
 800c536:	4a09      	ldr	r2, [pc, #36]	; (800c55c <vPortFree+0xbc>)
 800c538:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c53a:	6938      	ldr	r0, [r7, #16]
 800c53c:	f000 f874 	bl	800c628 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c540:	4b07      	ldr	r3, [pc, #28]	; (800c560 <vPortFree+0xc0>)
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	3301      	adds	r3, #1
 800c546:	4a06      	ldr	r2, [pc, #24]	; (800c560 <vPortFree+0xc0>)
 800c548:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c54a:	f7fe fc8d 	bl	800ae68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c54e:	bf00      	nop
 800c550:	3718      	adds	r7, #24
 800c552:	46bd      	mov	sp, r7
 800c554:	bd80      	pop	{r7, pc}
 800c556:	bf00      	nop
 800c558:	2000531c 	.word	0x2000531c
 800c55c:	2000530c 	.word	0x2000530c
 800c560:	20005318 	.word	0x20005318

0800c564 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c564:	b480      	push	{r7}
 800c566:	b085      	sub	sp, #20
 800c568:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c56a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800c56e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c570:	4b27      	ldr	r3, [pc, #156]	; (800c610 <prvHeapInit+0xac>)
 800c572:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	f003 0307 	and.w	r3, r3, #7
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d00c      	beq.n	800c598 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	3307      	adds	r3, #7
 800c582:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c584:	68fb      	ldr	r3, [r7, #12]
 800c586:	f023 0307 	bic.w	r3, r3, #7
 800c58a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c58c:	68ba      	ldr	r2, [r7, #8]
 800c58e:	68fb      	ldr	r3, [r7, #12]
 800c590:	1ad3      	subs	r3, r2, r3
 800c592:	4a1f      	ldr	r2, [pc, #124]	; (800c610 <prvHeapInit+0xac>)
 800c594:	4413      	add	r3, r2
 800c596:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c598:	68fb      	ldr	r3, [r7, #12]
 800c59a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c59c:	4a1d      	ldr	r2, [pc, #116]	; (800c614 <prvHeapInit+0xb0>)
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c5a2:	4b1c      	ldr	r3, [pc, #112]	; (800c614 <prvHeapInit+0xb0>)
 800c5a4:	2200      	movs	r2, #0
 800c5a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	68ba      	ldr	r2, [r7, #8]
 800c5ac:	4413      	add	r3, r2
 800c5ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c5b0:	2208      	movs	r2, #8
 800c5b2:	68fb      	ldr	r3, [r7, #12]
 800c5b4:	1a9b      	subs	r3, r3, r2
 800c5b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c5b8:	68fb      	ldr	r3, [r7, #12]
 800c5ba:	f023 0307 	bic.w	r3, r3, #7
 800c5be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c5c0:	68fb      	ldr	r3, [r7, #12]
 800c5c2:	4a15      	ldr	r2, [pc, #84]	; (800c618 <prvHeapInit+0xb4>)
 800c5c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c5c6:	4b14      	ldr	r3, [pc, #80]	; (800c618 <prvHeapInit+0xb4>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	2200      	movs	r2, #0
 800c5cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c5ce:	4b12      	ldr	r3, [pc, #72]	; (800c618 <prvHeapInit+0xb4>)
 800c5d0:	681b      	ldr	r3, [r3, #0]
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	68fa      	ldr	r2, [r7, #12]
 800c5de:	1ad2      	subs	r2, r2, r3
 800c5e0:	683b      	ldr	r3, [r7, #0]
 800c5e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c5e4:	4b0c      	ldr	r3, [pc, #48]	; (800c618 <prvHeapInit+0xb4>)
 800c5e6:	681a      	ldr	r2, [r3, #0]
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c5ec:	683b      	ldr	r3, [r7, #0]
 800c5ee:	685b      	ldr	r3, [r3, #4]
 800c5f0:	4a0a      	ldr	r2, [pc, #40]	; (800c61c <prvHeapInit+0xb8>)
 800c5f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	685b      	ldr	r3, [r3, #4]
 800c5f8:	4a09      	ldr	r2, [pc, #36]	; (800c620 <prvHeapInit+0xbc>)
 800c5fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c5fc:	4b09      	ldr	r3, [pc, #36]	; (800c624 <prvHeapInit+0xc0>)
 800c5fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c602:	601a      	str	r2, [r3, #0]
}
 800c604:	bf00      	nop
 800c606:	3714      	adds	r7, #20
 800c608:	46bd      	mov	sp, r7
 800c60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c60e:	4770      	bx	lr
 800c610:	20001700 	.word	0x20001700
 800c614:	20005300 	.word	0x20005300
 800c618:	20005308 	.word	0x20005308
 800c61c:	20005310 	.word	0x20005310
 800c620:	2000530c 	.word	0x2000530c
 800c624:	2000531c 	.word	0x2000531c

0800c628 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c628:	b480      	push	{r7}
 800c62a:	b085      	sub	sp, #20
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c630:	4b28      	ldr	r3, [pc, #160]	; (800c6d4 <prvInsertBlockIntoFreeList+0xac>)
 800c632:	60fb      	str	r3, [r7, #12]
 800c634:	e002      	b.n	800c63c <prvInsertBlockIntoFreeList+0x14>
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	60fb      	str	r3, [r7, #12]
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	687a      	ldr	r2, [r7, #4]
 800c642:	429a      	cmp	r2, r3
 800c644:	d8f7      	bhi.n	800c636 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c64a:	68fb      	ldr	r3, [r7, #12]
 800c64c:	685b      	ldr	r3, [r3, #4]
 800c64e:	68ba      	ldr	r2, [r7, #8]
 800c650:	4413      	add	r3, r2
 800c652:	687a      	ldr	r2, [r7, #4]
 800c654:	429a      	cmp	r2, r3
 800c656:	d108      	bne.n	800c66a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	685a      	ldr	r2, [r3, #4]
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	685b      	ldr	r3, [r3, #4]
 800c660:	441a      	add	r2, r3
 800c662:	68fb      	ldr	r3, [r7, #12]
 800c664:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	685b      	ldr	r3, [r3, #4]
 800c672:	68ba      	ldr	r2, [r7, #8]
 800c674:	441a      	add	r2, r3
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	681b      	ldr	r3, [r3, #0]
 800c67a:	429a      	cmp	r2, r3
 800c67c:	d118      	bne.n	800c6b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	681a      	ldr	r2, [r3, #0]
 800c682:	4b15      	ldr	r3, [pc, #84]	; (800c6d8 <prvInsertBlockIntoFreeList+0xb0>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	429a      	cmp	r2, r3
 800c688:	d00d      	beq.n	800c6a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	685a      	ldr	r2, [r3, #4]
 800c68e:	68fb      	ldr	r3, [r7, #12]
 800c690:	681b      	ldr	r3, [r3, #0]
 800c692:	685b      	ldr	r3, [r3, #4]
 800c694:	441a      	add	r2, r3
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	681a      	ldr	r2, [r3, #0]
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	601a      	str	r2, [r3, #0]
 800c6a4:	e008      	b.n	800c6b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c6a6:	4b0c      	ldr	r3, [pc, #48]	; (800c6d8 <prvInsertBlockIntoFreeList+0xb0>)
 800c6a8:	681a      	ldr	r2, [r3, #0]
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	601a      	str	r2, [r3, #0]
 800c6ae:	e003      	b.n	800c6b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	681a      	ldr	r2, [r3, #0]
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c6b8:	68fa      	ldr	r2, [r7, #12]
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	429a      	cmp	r2, r3
 800c6be:	d002      	beq.n	800c6c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c6c0:	68fb      	ldr	r3, [r7, #12]
 800c6c2:	687a      	ldr	r2, [r7, #4]
 800c6c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c6c6:	bf00      	nop
 800c6c8:	3714      	adds	r7, #20
 800c6ca:	46bd      	mov	sp, r7
 800c6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d0:	4770      	bx	lr
 800c6d2:	bf00      	nop
 800c6d4:	20005300 	.word	0x20005300
 800c6d8:	20005308 	.word	0x20005308

0800c6dc <atoi>:
 800c6dc:	220a      	movs	r2, #10
 800c6de:	2100      	movs	r1, #0
 800c6e0:	f000 bda8 	b.w	800d234 <strtol>

0800c6e4 <__errno>:
 800c6e4:	4b01      	ldr	r3, [pc, #4]	; (800c6ec <__errno+0x8>)
 800c6e6:	6818      	ldr	r0, [r3, #0]
 800c6e8:	4770      	bx	lr
 800c6ea:	bf00      	nop
 800c6ec:	20000028 	.word	0x20000028

0800c6f0 <__libc_init_array>:
 800c6f0:	b570      	push	{r4, r5, r6, lr}
 800c6f2:	4d0d      	ldr	r5, [pc, #52]	; (800c728 <__libc_init_array+0x38>)
 800c6f4:	4c0d      	ldr	r4, [pc, #52]	; (800c72c <__libc_init_array+0x3c>)
 800c6f6:	1b64      	subs	r4, r4, r5
 800c6f8:	10a4      	asrs	r4, r4, #2
 800c6fa:	2600      	movs	r6, #0
 800c6fc:	42a6      	cmp	r6, r4
 800c6fe:	d109      	bne.n	800c714 <__libc_init_array+0x24>
 800c700:	4d0b      	ldr	r5, [pc, #44]	; (800c730 <__libc_init_array+0x40>)
 800c702:	4c0c      	ldr	r4, [pc, #48]	; (800c734 <__libc_init_array+0x44>)
 800c704:	f004 f996 	bl	8010a34 <_init>
 800c708:	1b64      	subs	r4, r4, r5
 800c70a:	10a4      	asrs	r4, r4, #2
 800c70c:	2600      	movs	r6, #0
 800c70e:	42a6      	cmp	r6, r4
 800c710:	d105      	bne.n	800c71e <__libc_init_array+0x2e>
 800c712:	bd70      	pop	{r4, r5, r6, pc}
 800c714:	f855 3b04 	ldr.w	r3, [r5], #4
 800c718:	4798      	blx	r3
 800c71a:	3601      	adds	r6, #1
 800c71c:	e7ee      	b.n	800c6fc <__libc_init_array+0xc>
 800c71e:	f855 3b04 	ldr.w	r3, [r5], #4
 800c722:	4798      	blx	r3
 800c724:	3601      	adds	r6, #1
 800c726:	e7f2      	b.n	800c70e <__libc_init_array+0x1e>
 800c728:	08011bc0 	.word	0x08011bc0
 800c72c:	08011bc0 	.word	0x08011bc0
 800c730:	08011bc0 	.word	0x08011bc0
 800c734:	08011bc4 	.word	0x08011bc4

0800c738 <memcpy>:
 800c738:	440a      	add	r2, r1
 800c73a:	4291      	cmp	r1, r2
 800c73c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c740:	d100      	bne.n	800c744 <memcpy+0xc>
 800c742:	4770      	bx	lr
 800c744:	b510      	push	{r4, lr}
 800c746:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c74a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c74e:	4291      	cmp	r1, r2
 800c750:	d1f9      	bne.n	800c746 <memcpy+0xe>
 800c752:	bd10      	pop	{r4, pc}

0800c754 <memset>:
 800c754:	4402      	add	r2, r0
 800c756:	4603      	mov	r3, r0
 800c758:	4293      	cmp	r3, r2
 800c75a:	d100      	bne.n	800c75e <memset+0xa>
 800c75c:	4770      	bx	lr
 800c75e:	f803 1b01 	strb.w	r1, [r3], #1
 800c762:	e7f9      	b.n	800c758 <memset+0x4>

0800c764 <__cvt>:
 800c764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c768:	ec55 4b10 	vmov	r4, r5, d0
 800c76c:	2d00      	cmp	r5, #0
 800c76e:	460e      	mov	r6, r1
 800c770:	4619      	mov	r1, r3
 800c772:	462b      	mov	r3, r5
 800c774:	bfbb      	ittet	lt
 800c776:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800c77a:	461d      	movlt	r5, r3
 800c77c:	2300      	movge	r3, #0
 800c77e:	232d      	movlt	r3, #45	; 0x2d
 800c780:	700b      	strb	r3, [r1, #0]
 800c782:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c784:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800c788:	4691      	mov	r9, r2
 800c78a:	f023 0820 	bic.w	r8, r3, #32
 800c78e:	bfbc      	itt	lt
 800c790:	4622      	movlt	r2, r4
 800c792:	4614      	movlt	r4, r2
 800c794:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c798:	d005      	beq.n	800c7a6 <__cvt+0x42>
 800c79a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800c79e:	d100      	bne.n	800c7a2 <__cvt+0x3e>
 800c7a0:	3601      	adds	r6, #1
 800c7a2:	2102      	movs	r1, #2
 800c7a4:	e000      	b.n	800c7a8 <__cvt+0x44>
 800c7a6:	2103      	movs	r1, #3
 800c7a8:	ab03      	add	r3, sp, #12
 800c7aa:	9301      	str	r3, [sp, #4]
 800c7ac:	ab02      	add	r3, sp, #8
 800c7ae:	9300      	str	r3, [sp, #0]
 800c7b0:	ec45 4b10 	vmov	d0, r4, r5
 800c7b4:	4653      	mov	r3, sl
 800c7b6:	4632      	mov	r2, r6
 800c7b8:	f000 fdf2 	bl	800d3a0 <_dtoa_r>
 800c7bc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800c7c0:	4607      	mov	r7, r0
 800c7c2:	d102      	bne.n	800c7ca <__cvt+0x66>
 800c7c4:	f019 0f01 	tst.w	r9, #1
 800c7c8:	d022      	beq.n	800c810 <__cvt+0xac>
 800c7ca:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800c7ce:	eb07 0906 	add.w	r9, r7, r6
 800c7d2:	d110      	bne.n	800c7f6 <__cvt+0x92>
 800c7d4:	783b      	ldrb	r3, [r7, #0]
 800c7d6:	2b30      	cmp	r3, #48	; 0x30
 800c7d8:	d10a      	bne.n	800c7f0 <__cvt+0x8c>
 800c7da:	2200      	movs	r2, #0
 800c7dc:	2300      	movs	r3, #0
 800c7de:	4620      	mov	r0, r4
 800c7e0:	4629      	mov	r1, r5
 800c7e2:	f7f4 f971 	bl	8000ac8 <__aeabi_dcmpeq>
 800c7e6:	b918      	cbnz	r0, 800c7f0 <__cvt+0x8c>
 800c7e8:	f1c6 0601 	rsb	r6, r6, #1
 800c7ec:	f8ca 6000 	str.w	r6, [sl]
 800c7f0:	f8da 3000 	ldr.w	r3, [sl]
 800c7f4:	4499      	add	r9, r3
 800c7f6:	2200      	movs	r2, #0
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	4629      	mov	r1, r5
 800c7fe:	f7f4 f963 	bl	8000ac8 <__aeabi_dcmpeq>
 800c802:	b108      	cbz	r0, 800c808 <__cvt+0xa4>
 800c804:	f8cd 900c 	str.w	r9, [sp, #12]
 800c808:	2230      	movs	r2, #48	; 0x30
 800c80a:	9b03      	ldr	r3, [sp, #12]
 800c80c:	454b      	cmp	r3, r9
 800c80e:	d307      	bcc.n	800c820 <__cvt+0xbc>
 800c810:	9b03      	ldr	r3, [sp, #12]
 800c812:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c814:	1bdb      	subs	r3, r3, r7
 800c816:	4638      	mov	r0, r7
 800c818:	6013      	str	r3, [r2, #0]
 800c81a:	b004      	add	sp, #16
 800c81c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c820:	1c59      	adds	r1, r3, #1
 800c822:	9103      	str	r1, [sp, #12]
 800c824:	701a      	strb	r2, [r3, #0]
 800c826:	e7f0      	b.n	800c80a <__cvt+0xa6>

0800c828 <__exponent>:
 800c828:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c82a:	4603      	mov	r3, r0
 800c82c:	2900      	cmp	r1, #0
 800c82e:	bfb8      	it	lt
 800c830:	4249      	neglt	r1, r1
 800c832:	f803 2b02 	strb.w	r2, [r3], #2
 800c836:	bfb4      	ite	lt
 800c838:	222d      	movlt	r2, #45	; 0x2d
 800c83a:	222b      	movge	r2, #43	; 0x2b
 800c83c:	2909      	cmp	r1, #9
 800c83e:	7042      	strb	r2, [r0, #1]
 800c840:	dd2a      	ble.n	800c898 <__exponent+0x70>
 800c842:	f10d 0407 	add.w	r4, sp, #7
 800c846:	46a4      	mov	ip, r4
 800c848:	270a      	movs	r7, #10
 800c84a:	46a6      	mov	lr, r4
 800c84c:	460a      	mov	r2, r1
 800c84e:	fb91 f6f7 	sdiv	r6, r1, r7
 800c852:	fb07 1516 	mls	r5, r7, r6, r1
 800c856:	3530      	adds	r5, #48	; 0x30
 800c858:	2a63      	cmp	r2, #99	; 0x63
 800c85a:	f104 34ff 	add.w	r4, r4, #4294967295
 800c85e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800c862:	4631      	mov	r1, r6
 800c864:	dcf1      	bgt.n	800c84a <__exponent+0x22>
 800c866:	3130      	adds	r1, #48	; 0x30
 800c868:	f1ae 0502 	sub.w	r5, lr, #2
 800c86c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800c870:	1c44      	adds	r4, r0, #1
 800c872:	4629      	mov	r1, r5
 800c874:	4561      	cmp	r1, ip
 800c876:	d30a      	bcc.n	800c88e <__exponent+0x66>
 800c878:	f10d 0209 	add.w	r2, sp, #9
 800c87c:	eba2 020e 	sub.w	r2, r2, lr
 800c880:	4565      	cmp	r5, ip
 800c882:	bf88      	it	hi
 800c884:	2200      	movhi	r2, #0
 800c886:	4413      	add	r3, r2
 800c888:	1a18      	subs	r0, r3, r0
 800c88a:	b003      	add	sp, #12
 800c88c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c88e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c892:	f804 2f01 	strb.w	r2, [r4, #1]!
 800c896:	e7ed      	b.n	800c874 <__exponent+0x4c>
 800c898:	2330      	movs	r3, #48	; 0x30
 800c89a:	3130      	adds	r1, #48	; 0x30
 800c89c:	7083      	strb	r3, [r0, #2]
 800c89e:	70c1      	strb	r1, [r0, #3]
 800c8a0:	1d03      	adds	r3, r0, #4
 800c8a2:	e7f1      	b.n	800c888 <__exponent+0x60>

0800c8a4 <_printf_float>:
 800c8a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8a8:	ed2d 8b02 	vpush	{d8}
 800c8ac:	b08d      	sub	sp, #52	; 0x34
 800c8ae:	460c      	mov	r4, r1
 800c8b0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800c8b4:	4616      	mov	r6, r2
 800c8b6:	461f      	mov	r7, r3
 800c8b8:	4605      	mov	r5, r0
 800c8ba:	f001 fb71 	bl	800dfa0 <_localeconv_r>
 800c8be:	f8d0 a000 	ldr.w	sl, [r0]
 800c8c2:	4650      	mov	r0, sl
 800c8c4:	f7f3 fc84 	bl	80001d0 <strlen>
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	930a      	str	r3, [sp, #40]	; 0x28
 800c8cc:	6823      	ldr	r3, [r4, #0]
 800c8ce:	9305      	str	r3, [sp, #20]
 800c8d0:	f8d8 3000 	ldr.w	r3, [r8]
 800c8d4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800c8d8:	3307      	adds	r3, #7
 800c8da:	f023 0307 	bic.w	r3, r3, #7
 800c8de:	f103 0208 	add.w	r2, r3, #8
 800c8e2:	f8c8 2000 	str.w	r2, [r8]
 800c8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c8ea:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c8ee:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c8f2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c8f6:	9307      	str	r3, [sp, #28]
 800c8f8:	f8cd 8018 	str.w	r8, [sp, #24]
 800c8fc:	ee08 0a10 	vmov	s16, r0
 800c900:	4b9f      	ldr	r3, [pc, #636]	; (800cb80 <_printf_float+0x2dc>)
 800c902:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c906:	f04f 32ff 	mov.w	r2, #4294967295
 800c90a:	f7f4 f90f 	bl	8000b2c <__aeabi_dcmpun>
 800c90e:	bb88      	cbnz	r0, 800c974 <_printf_float+0xd0>
 800c910:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c914:	4b9a      	ldr	r3, [pc, #616]	; (800cb80 <_printf_float+0x2dc>)
 800c916:	f04f 32ff 	mov.w	r2, #4294967295
 800c91a:	f7f4 f8e9 	bl	8000af0 <__aeabi_dcmple>
 800c91e:	bb48      	cbnz	r0, 800c974 <_printf_float+0xd0>
 800c920:	2200      	movs	r2, #0
 800c922:	2300      	movs	r3, #0
 800c924:	4640      	mov	r0, r8
 800c926:	4649      	mov	r1, r9
 800c928:	f7f4 f8d8 	bl	8000adc <__aeabi_dcmplt>
 800c92c:	b110      	cbz	r0, 800c934 <_printf_float+0x90>
 800c92e:	232d      	movs	r3, #45	; 0x2d
 800c930:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c934:	4b93      	ldr	r3, [pc, #588]	; (800cb84 <_printf_float+0x2e0>)
 800c936:	4894      	ldr	r0, [pc, #592]	; (800cb88 <_printf_float+0x2e4>)
 800c938:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c93c:	bf94      	ite	ls
 800c93e:	4698      	movls	r8, r3
 800c940:	4680      	movhi	r8, r0
 800c942:	2303      	movs	r3, #3
 800c944:	6123      	str	r3, [r4, #16]
 800c946:	9b05      	ldr	r3, [sp, #20]
 800c948:	f023 0204 	bic.w	r2, r3, #4
 800c94c:	6022      	str	r2, [r4, #0]
 800c94e:	f04f 0900 	mov.w	r9, #0
 800c952:	9700      	str	r7, [sp, #0]
 800c954:	4633      	mov	r3, r6
 800c956:	aa0b      	add	r2, sp, #44	; 0x2c
 800c958:	4621      	mov	r1, r4
 800c95a:	4628      	mov	r0, r5
 800c95c:	f000 f9d8 	bl	800cd10 <_printf_common>
 800c960:	3001      	adds	r0, #1
 800c962:	f040 8090 	bne.w	800ca86 <_printf_float+0x1e2>
 800c966:	f04f 30ff 	mov.w	r0, #4294967295
 800c96a:	b00d      	add	sp, #52	; 0x34
 800c96c:	ecbd 8b02 	vpop	{d8}
 800c970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c974:	4642      	mov	r2, r8
 800c976:	464b      	mov	r3, r9
 800c978:	4640      	mov	r0, r8
 800c97a:	4649      	mov	r1, r9
 800c97c:	f7f4 f8d6 	bl	8000b2c <__aeabi_dcmpun>
 800c980:	b140      	cbz	r0, 800c994 <_printf_float+0xf0>
 800c982:	464b      	mov	r3, r9
 800c984:	2b00      	cmp	r3, #0
 800c986:	bfbc      	itt	lt
 800c988:	232d      	movlt	r3, #45	; 0x2d
 800c98a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c98e:	487f      	ldr	r0, [pc, #508]	; (800cb8c <_printf_float+0x2e8>)
 800c990:	4b7f      	ldr	r3, [pc, #508]	; (800cb90 <_printf_float+0x2ec>)
 800c992:	e7d1      	b.n	800c938 <_printf_float+0x94>
 800c994:	6863      	ldr	r3, [r4, #4]
 800c996:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c99a:	9206      	str	r2, [sp, #24]
 800c99c:	1c5a      	adds	r2, r3, #1
 800c99e:	d13f      	bne.n	800ca20 <_printf_float+0x17c>
 800c9a0:	2306      	movs	r3, #6
 800c9a2:	6063      	str	r3, [r4, #4]
 800c9a4:	9b05      	ldr	r3, [sp, #20]
 800c9a6:	6861      	ldr	r1, [r4, #4]
 800c9a8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	9303      	str	r3, [sp, #12]
 800c9b0:	ab0a      	add	r3, sp, #40	; 0x28
 800c9b2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c9b6:	ab09      	add	r3, sp, #36	; 0x24
 800c9b8:	ec49 8b10 	vmov	d0, r8, r9
 800c9bc:	9300      	str	r3, [sp, #0]
 800c9be:	6022      	str	r2, [r4, #0]
 800c9c0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c9c4:	4628      	mov	r0, r5
 800c9c6:	f7ff fecd 	bl	800c764 <__cvt>
 800c9ca:	9b06      	ldr	r3, [sp, #24]
 800c9cc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c9ce:	2b47      	cmp	r3, #71	; 0x47
 800c9d0:	4680      	mov	r8, r0
 800c9d2:	d108      	bne.n	800c9e6 <_printf_float+0x142>
 800c9d4:	1cc8      	adds	r0, r1, #3
 800c9d6:	db02      	blt.n	800c9de <_printf_float+0x13a>
 800c9d8:	6863      	ldr	r3, [r4, #4]
 800c9da:	4299      	cmp	r1, r3
 800c9dc:	dd41      	ble.n	800ca62 <_printf_float+0x1be>
 800c9de:	f1ab 0b02 	sub.w	fp, fp, #2
 800c9e2:	fa5f fb8b 	uxtb.w	fp, fp
 800c9e6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c9ea:	d820      	bhi.n	800ca2e <_printf_float+0x18a>
 800c9ec:	3901      	subs	r1, #1
 800c9ee:	465a      	mov	r2, fp
 800c9f0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c9f4:	9109      	str	r1, [sp, #36]	; 0x24
 800c9f6:	f7ff ff17 	bl	800c828 <__exponent>
 800c9fa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c9fc:	1813      	adds	r3, r2, r0
 800c9fe:	2a01      	cmp	r2, #1
 800ca00:	4681      	mov	r9, r0
 800ca02:	6123      	str	r3, [r4, #16]
 800ca04:	dc02      	bgt.n	800ca0c <_printf_float+0x168>
 800ca06:	6822      	ldr	r2, [r4, #0]
 800ca08:	07d2      	lsls	r2, r2, #31
 800ca0a:	d501      	bpl.n	800ca10 <_printf_float+0x16c>
 800ca0c:	3301      	adds	r3, #1
 800ca0e:	6123      	str	r3, [r4, #16]
 800ca10:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d09c      	beq.n	800c952 <_printf_float+0xae>
 800ca18:	232d      	movs	r3, #45	; 0x2d
 800ca1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ca1e:	e798      	b.n	800c952 <_printf_float+0xae>
 800ca20:	9a06      	ldr	r2, [sp, #24]
 800ca22:	2a47      	cmp	r2, #71	; 0x47
 800ca24:	d1be      	bne.n	800c9a4 <_printf_float+0x100>
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d1bc      	bne.n	800c9a4 <_printf_float+0x100>
 800ca2a:	2301      	movs	r3, #1
 800ca2c:	e7b9      	b.n	800c9a2 <_printf_float+0xfe>
 800ca2e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800ca32:	d118      	bne.n	800ca66 <_printf_float+0x1c2>
 800ca34:	2900      	cmp	r1, #0
 800ca36:	6863      	ldr	r3, [r4, #4]
 800ca38:	dd0b      	ble.n	800ca52 <_printf_float+0x1ae>
 800ca3a:	6121      	str	r1, [r4, #16]
 800ca3c:	b913      	cbnz	r3, 800ca44 <_printf_float+0x1a0>
 800ca3e:	6822      	ldr	r2, [r4, #0]
 800ca40:	07d0      	lsls	r0, r2, #31
 800ca42:	d502      	bpl.n	800ca4a <_printf_float+0x1a6>
 800ca44:	3301      	adds	r3, #1
 800ca46:	440b      	add	r3, r1
 800ca48:	6123      	str	r3, [r4, #16]
 800ca4a:	65a1      	str	r1, [r4, #88]	; 0x58
 800ca4c:	f04f 0900 	mov.w	r9, #0
 800ca50:	e7de      	b.n	800ca10 <_printf_float+0x16c>
 800ca52:	b913      	cbnz	r3, 800ca5a <_printf_float+0x1b6>
 800ca54:	6822      	ldr	r2, [r4, #0]
 800ca56:	07d2      	lsls	r2, r2, #31
 800ca58:	d501      	bpl.n	800ca5e <_printf_float+0x1ba>
 800ca5a:	3302      	adds	r3, #2
 800ca5c:	e7f4      	b.n	800ca48 <_printf_float+0x1a4>
 800ca5e:	2301      	movs	r3, #1
 800ca60:	e7f2      	b.n	800ca48 <_printf_float+0x1a4>
 800ca62:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800ca66:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ca68:	4299      	cmp	r1, r3
 800ca6a:	db05      	blt.n	800ca78 <_printf_float+0x1d4>
 800ca6c:	6823      	ldr	r3, [r4, #0]
 800ca6e:	6121      	str	r1, [r4, #16]
 800ca70:	07d8      	lsls	r0, r3, #31
 800ca72:	d5ea      	bpl.n	800ca4a <_printf_float+0x1a6>
 800ca74:	1c4b      	adds	r3, r1, #1
 800ca76:	e7e7      	b.n	800ca48 <_printf_float+0x1a4>
 800ca78:	2900      	cmp	r1, #0
 800ca7a:	bfd4      	ite	le
 800ca7c:	f1c1 0202 	rsble	r2, r1, #2
 800ca80:	2201      	movgt	r2, #1
 800ca82:	4413      	add	r3, r2
 800ca84:	e7e0      	b.n	800ca48 <_printf_float+0x1a4>
 800ca86:	6823      	ldr	r3, [r4, #0]
 800ca88:	055a      	lsls	r2, r3, #21
 800ca8a:	d407      	bmi.n	800ca9c <_printf_float+0x1f8>
 800ca8c:	6923      	ldr	r3, [r4, #16]
 800ca8e:	4642      	mov	r2, r8
 800ca90:	4631      	mov	r1, r6
 800ca92:	4628      	mov	r0, r5
 800ca94:	47b8      	blx	r7
 800ca96:	3001      	adds	r0, #1
 800ca98:	d12c      	bne.n	800caf4 <_printf_float+0x250>
 800ca9a:	e764      	b.n	800c966 <_printf_float+0xc2>
 800ca9c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800caa0:	f240 80e0 	bls.w	800cc64 <_printf_float+0x3c0>
 800caa4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800caa8:	2200      	movs	r2, #0
 800caaa:	2300      	movs	r3, #0
 800caac:	f7f4 f80c 	bl	8000ac8 <__aeabi_dcmpeq>
 800cab0:	2800      	cmp	r0, #0
 800cab2:	d034      	beq.n	800cb1e <_printf_float+0x27a>
 800cab4:	4a37      	ldr	r2, [pc, #220]	; (800cb94 <_printf_float+0x2f0>)
 800cab6:	2301      	movs	r3, #1
 800cab8:	4631      	mov	r1, r6
 800caba:	4628      	mov	r0, r5
 800cabc:	47b8      	blx	r7
 800cabe:	3001      	adds	r0, #1
 800cac0:	f43f af51 	beq.w	800c966 <_printf_float+0xc2>
 800cac4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cac8:	429a      	cmp	r2, r3
 800caca:	db02      	blt.n	800cad2 <_printf_float+0x22e>
 800cacc:	6823      	ldr	r3, [r4, #0]
 800cace:	07d8      	lsls	r0, r3, #31
 800cad0:	d510      	bpl.n	800caf4 <_printf_float+0x250>
 800cad2:	ee18 3a10 	vmov	r3, s16
 800cad6:	4652      	mov	r2, sl
 800cad8:	4631      	mov	r1, r6
 800cada:	4628      	mov	r0, r5
 800cadc:	47b8      	blx	r7
 800cade:	3001      	adds	r0, #1
 800cae0:	f43f af41 	beq.w	800c966 <_printf_float+0xc2>
 800cae4:	f04f 0800 	mov.w	r8, #0
 800cae8:	f104 091a 	add.w	r9, r4, #26
 800caec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800caee:	3b01      	subs	r3, #1
 800caf0:	4543      	cmp	r3, r8
 800caf2:	dc09      	bgt.n	800cb08 <_printf_float+0x264>
 800caf4:	6823      	ldr	r3, [r4, #0]
 800caf6:	079b      	lsls	r3, r3, #30
 800caf8:	f100 8105 	bmi.w	800cd06 <_printf_float+0x462>
 800cafc:	68e0      	ldr	r0, [r4, #12]
 800cafe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cb00:	4298      	cmp	r0, r3
 800cb02:	bfb8      	it	lt
 800cb04:	4618      	movlt	r0, r3
 800cb06:	e730      	b.n	800c96a <_printf_float+0xc6>
 800cb08:	2301      	movs	r3, #1
 800cb0a:	464a      	mov	r2, r9
 800cb0c:	4631      	mov	r1, r6
 800cb0e:	4628      	mov	r0, r5
 800cb10:	47b8      	blx	r7
 800cb12:	3001      	adds	r0, #1
 800cb14:	f43f af27 	beq.w	800c966 <_printf_float+0xc2>
 800cb18:	f108 0801 	add.w	r8, r8, #1
 800cb1c:	e7e6      	b.n	800caec <_printf_float+0x248>
 800cb1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	dc39      	bgt.n	800cb98 <_printf_float+0x2f4>
 800cb24:	4a1b      	ldr	r2, [pc, #108]	; (800cb94 <_printf_float+0x2f0>)
 800cb26:	2301      	movs	r3, #1
 800cb28:	4631      	mov	r1, r6
 800cb2a:	4628      	mov	r0, r5
 800cb2c:	47b8      	blx	r7
 800cb2e:	3001      	adds	r0, #1
 800cb30:	f43f af19 	beq.w	800c966 <_printf_float+0xc2>
 800cb34:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cb38:	4313      	orrs	r3, r2
 800cb3a:	d102      	bne.n	800cb42 <_printf_float+0x29e>
 800cb3c:	6823      	ldr	r3, [r4, #0]
 800cb3e:	07d9      	lsls	r1, r3, #31
 800cb40:	d5d8      	bpl.n	800caf4 <_printf_float+0x250>
 800cb42:	ee18 3a10 	vmov	r3, s16
 800cb46:	4652      	mov	r2, sl
 800cb48:	4631      	mov	r1, r6
 800cb4a:	4628      	mov	r0, r5
 800cb4c:	47b8      	blx	r7
 800cb4e:	3001      	adds	r0, #1
 800cb50:	f43f af09 	beq.w	800c966 <_printf_float+0xc2>
 800cb54:	f04f 0900 	mov.w	r9, #0
 800cb58:	f104 0a1a 	add.w	sl, r4, #26
 800cb5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb5e:	425b      	negs	r3, r3
 800cb60:	454b      	cmp	r3, r9
 800cb62:	dc01      	bgt.n	800cb68 <_printf_float+0x2c4>
 800cb64:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cb66:	e792      	b.n	800ca8e <_printf_float+0x1ea>
 800cb68:	2301      	movs	r3, #1
 800cb6a:	4652      	mov	r2, sl
 800cb6c:	4631      	mov	r1, r6
 800cb6e:	4628      	mov	r0, r5
 800cb70:	47b8      	blx	r7
 800cb72:	3001      	adds	r0, #1
 800cb74:	f43f aef7 	beq.w	800c966 <_printf_float+0xc2>
 800cb78:	f109 0901 	add.w	r9, r9, #1
 800cb7c:	e7ee      	b.n	800cb5c <_printf_float+0x2b8>
 800cb7e:	bf00      	nop
 800cb80:	7fefffff 	.word	0x7fefffff
 800cb84:	0801174c 	.word	0x0801174c
 800cb88:	08011750 	.word	0x08011750
 800cb8c:	08011758 	.word	0x08011758
 800cb90:	08011754 	.word	0x08011754
 800cb94:	0801175c 	.word	0x0801175c
 800cb98:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cb9a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cb9c:	429a      	cmp	r2, r3
 800cb9e:	bfa8      	it	ge
 800cba0:	461a      	movge	r2, r3
 800cba2:	2a00      	cmp	r2, #0
 800cba4:	4691      	mov	r9, r2
 800cba6:	dc37      	bgt.n	800cc18 <_printf_float+0x374>
 800cba8:	f04f 0b00 	mov.w	fp, #0
 800cbac:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cbb0:	f104 021a 	add.w	r2, r4, #26
 800cbb4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800cbb6:	9305      	str	r3, [sp, #20]
 800cbb8:	eba3 0309 	sub.w	r3, r3, r9
 800cbbc:	455b      	cmp	r3, fp
 800cbbe:	dc33      	bgt.n	800cc28 <_printf_float+0x384>
 800cbc0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cbc4:	429a      	cmp	r2, r3
 800cbc6:	db3b      	blt.n	800cc40 <_printf_float+0x39c>
 800cbc8:	6823      	ldr	r3, [r4, #0]
 800cbca:	07da      	lsls	r2, r3, #31
 800cbcc:	d438      	bmi.n	800cc40 <_printf_float+0x39c>
 800cbce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cbd0:	9a05      	ldr	r2, [sp, #20]
 800cbd2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800cbd4:	1a9a      	subs	r2, r3, r2
 800cbd6:	eba3 0901 	sub.w	r9, r3, r1
 800cbda:	4591      	cmp	r9, r2
 800cbdc:	bfa8      	it	ge
 800cbde:	4691      	movge	r9, r2
 800cbe0:	f1b9 0f00 	cmp.w	r9, #0
 800cbe4:	dc35      	bgt.n	800cc52 <_printf_float+0x3ae>
 800cbe6:	f04f 0800 	mov.w	r8, #0
 800cbea:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800cbee:	f104 0a1a 	add.w	sl, r4, #26
 800cbf2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800cbf6:	1a9b      	subs	r3, r3, r2
 800cbf8:	eba3 0309 	sub.w	r3, r3, r9
 800cbfc:	4543      	cmp	r3, r8
 800cbfe:	f77f af79 	ble.w	800caf4 <_printf_float+0x250>
 800cc02:	2301      	movs	r3, #1
 800cc04:	4652      	mov	r2, sl
 800cc06:	4631      	mov	r1, r6
 800cc08:	4628      	mov	r0, r5
 800cc0a:	47b8      	blx	r7
 800cc0c:	3001      	adds	r0, #1
 800cc0e:	f43f aeaa 	beq.w	800c966 <_printf_float+0xc2>
 800cc12:	f108 0801 	add.w	r8, r8, #1
 800cc16:	e7ec      	b.n	800cbf2 <_printf_float+0x34e>
 800cc18:	4613      	mov	r3, r2
 800cc1a:	4631      	mov	r1, r6
 800cc1c:	4642      	mov	r2, r8
 800cc1e:	4628      	mov	r0, r5
 800cc20:	47b8      	blx	r7
 800cc22:	3001      	adds	r0, #1
 800cc24:	d1c0      	bne.n	800cba8 <_printf_float+0x304>
 800cc26:	e69e      	b.n	800c966 <_printf_float+0xc2>
 800cc28:	2301      	movs	r3, #1
 800cc2a:	4631      	mov	r1, r6
 800cc2c:	4628      	mov	r0, r5
 800cc2e:	9205      	str	r2, [sp, #20]
 800cc30:	47b8      	blx	r7
 800cc32:	3001      	adds	r0, #1
 800cc34:	f43f ae97 	beq.w	800c966 <_printf_float+0xc2>
 800cc38:	9a05      	ldr	r2, [sp, #20]
 800cc3a:	f10b 0b01 	add.w	fp, fp, #1
 800cc3e:	e7b9      	b.n	800cbb4 <_printf_float+0x310>
 800cc40:	ee18 3a10 	vmov	r3, s16
 800cc44:	4652      	mov	r2, sl
 800cc46:	4631      	mov	r1, r6
 800cc48:	4628      	mov	r0, r5
 800cc4a:	47b8      	blx	r7
 800cc4c:	3001      	adds	r0, #1
 800cc4e:	d1be      	bne.n	800cbce <_printf_float+0x32a>
 800cc50:	e689      	b.n	800c966 <_printf_float+0xc2>
 800cc52:	9a05      	ldr	r2, [sp, #20]
 800cc54:	464b      	mov	r3, r9
 800cc56:	4442      	add	r2, r8
 800cc58:	4631      	mov	r1, r6
 800cc5a:	4628      	mov	r0, r5
 800cc5c:	47b8      	blx	r7
 800cc5e:	3001      	adds	r0, #1
 800cc60:	d1c1      	bne.n	800cbe6 <_printf_float+0x342>
 800cc62:	e680      	b.n	800c966 <_printf_float+0xc2>
 800cc64:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cc66:	2a01      	cmp	r2, #1
 800cc68:	dc01      	bgt.n	800cc6e <_printf_float+0x3ca>
 800cc6a:	07db      	lsls	r3, r3, #31
 800cc6c:	d538      	bpl.n	800cce0 <_printf_float+0x43c>
 800cc6e:	2301      	movs	r3, #1
 800cc70:	4642      	mov	r2, r8
 800cc72:	4631      	mov	r1, r6
 800cc74:	4628      	mov	r0, r5
 800cc76:	47b8      	blx	r7
 800cc78:	3001      	adds	r0, #1
 800cc7a:	f43f ae74 	beq.w	800c966 <_printf_float+0xc2>
 800cc7e:	ee18 3a10 	vmov	r3, s16
 800cc82:	4652      	mov	r2, sl
 800cc84:	4631      	mov	r1, r6
 800cc86:	4628      	mov	r0, r5
 800cc88:	47b8      	blx	r7
 800cc8a:	3001      	adds	r0, #1
 800cc8c:	f43f ae6b 	beq.w	800c966 <_printf_float+0xc2>
 800cc90:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800cc94:	2200      	movs	r2, #0
 800cc96:	2300      	movs	r3, #0
 800cc98:	f7f3 ff16 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc9c:	b9d8      	cbnz	r0, 800ccd6 <_printf_float+0x432>
 800cc9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800cca0:	f108 0201 	add.w	r2, r8, #1
 800cca4:	3b01      	subs	r3, #1
 800cca6:	4631      	mov	r1, r6
 800cca8:	4628      	mov	r0, r5
 800ccaa:	47b8      	blx	r7
 800ccac:	3001      	adds	r0, #1
 800ccae:	d10e      	bne.n	800ccce <_printf_float+0x42a>
 800ccb0:	e659      	b.n	800c966 <_printf_float+0xc2>
 800ccb2:	2301      	movs	r3, #1
 800ccb4:	4652      	mov	r2, sl
 800ccb6:	4631      	mov	r1, r6
 800ccb8:	4628      	mov	r0, r5
 800ccba:	47b8      	blx	r7
 800ccbc:	3001      	adds	r0, #1
 800ccbe:	f43f ae52 	beq.w	800c966 <_printf_float+0xc2>
 800ccc2:	f108 0801 	add.w	r8, r8, #1
 800ccc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ccc8:	3b01      	subs	r3, #1
 800ccca:	4543      	cmp	r3, r8
 800cccc:	dcf1      	bgt.n	800ccb2 <_printf_float+0x40e>
 800ccce:	464b      	mov	r3, r9
 800ccd0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800ccd4:	e6dc      	b.n	800ca90 <_printf_float+0x1ec>
 800ccd6:	f04f 0800 	mov.w	r8, #0
 800ccda:	f104 0a1a 	add.w	sl, r4, #26
 800ccde:	e7f2      	b.n	800ccc6 <_printf_float+0x422>
 800cce0:	2301      	movs	r3, #1
 800cce2:	4642      	mov	r2, r8
 800cce4:	e7df      	b.n	800cca6 <_printf_float+0x402>
 800cce6:	2301      	movs	r3, #1
 800cce8:	464a      	mov	r2, r9
 800ccea:	4631      	mov	r1, r6
 800ccec:	4628      	mov	r0, r5
 800ccee:	47b8      	blx	r7
 800ccf0:	3001      	adds	r0, #1
 800ccf2:	f43f ae38 	beq.w	800c966 <_printf_float+0xc2>
 800ccf6:	f108 0801 	add.w	r8, r8, #1
 800ccfa:	68e3      	ldr	r3, [r4, #12]
 800ccfc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800ccfe:	1a5b      	subs	r3, r3, r1
 800cd00:	4543      	cmp	r3, r8
 800cd02:	dcf0      	bgt.n	800cce6 <_printf_float+0x442>
 800cd04:	e6fa      	b.n	800cafc <_printf_float+0x258>
 800cd06:	f04f 0800 	mov.w	r8, #0
 800cd0a:	f104 0919 	add.w	r9, r4, #25
 800cd0e:	e7f4      	b.n	800ccfa <_printf_float+0x456>

0800cd10 <_printf_common>:
 800cd10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd14:	4616      	mov	r6, r2
 800cd16:	4699      	mov	r9, r3
 800cd18:	688a      	ldr	r2, [r1, #8]
 800cd1a:	690b      	ldr	r3, [r1, #16]
 800cd1c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cd20:	4293      	cmp	r3, r2
 800cd22:	bfb8      	it	lt
 800cd24:	4613      	movlt	r3, r2
 800cd26:	6033      	str	r3, [r6, #0]
 800cd28:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cd2c:	4607      	mov	r7, r0
 800cd2e:	460c      	mov	r4, r1
 800cd30:	b10a      	cbz	r2, 800cd36 <_printf_common+0x26>
 800cd32:	3301      	adds	r3, #1
 800cd34:	6033      	str	r3, [r6, #0]
 800cd36:	6823      	ldr	r3, [r4, #0]
 800cd38:	0699      	lsls	r1, r3, #26
 800cd3a:	bf42      	ittt	mi
 800cd3c:	6833      	ldrmi	r3, [r6, #0]
 800cd3e:	3302      	addmi	r3, #2
 800cd40:	6033      	strmi	r3, [r6, #0]
 800cd42:	6825      	ldr	r5, [r4, #0]
 800cd44:	f015 0506 	ands.w	r5, r5, #6
 800cd48:	d106      	bne.n	800cd58 <_printf_common+0x48>
 800cd4a:	f104 0a19 	add.w	sl, r4, #25
 800cd4e:	68e3      	ldr	r3, [r4, #12]
 800cd50:	6832      	ldr	r2, [r6, #0]
 800cd52:	1a9b      	subs	r3, r3, r2
 800cd54:	42ab      	cmp	r3, r5
 800cd56:	dc26      	bgt.n	800cda6 <_printf_common+0x96>
 800cd58:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cd5c:	1e13      	subs	r3, r2, #0
 800cd5e:	6822      	ldr	r2, [r4, #0]
 800cd60:	bf18      	it	ne
 800cd62:	2301      	movne	r3, #1
 800cd64:	0692      	lsls	r2, r2, #26
 800cd66:	d42b      	bmi.n	800cdc0 <_printf_common+0xb0>
 800cd68:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cd6c:	4649      	mov	r1, r9
 800cd6e:	4638      	mov	r0, r7
 800cd70:	47c0      	blx	r8
 800cd72:	3001      	adds	r0, #1
 800cd74:	d01e      	beq.n	800cdb4 <_printf_common+0xa4>
 800cd76:	6823      	ldr	r3, [r4, #0]
 800cd78:	68e5      	ldr	r5, [r4, #12]
 800cd7a:	6832      	ldr	r2, [r6, #0]
 800cd7c:	f003 0306 	and.w	r3, r3, #6
 800cd80:	2b04      	cmp	r3, #4
 800cd82:	bf08      	it	eq
 800cd84:	1aad      	subeq	r5, r5, r2
 800cd86:	68a3      	ldr	r3, [r4, #8]
 800cd88:	6922      	ldr	r2, [r4, #16]
 800cd8a:	bf0c      	ite	eq
 800cd8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800cd90:	2500      	movne	r5, #0
 800cd92:	4293      	cmp	r3, r2
 800cd94:	bfc4      	itt	gt
 800cd96:	1a9b      	subgt	r3, r3, r2
 800cd98:	18ed      	addgt	r5, r5, r3
 800cd9a:	2600      	movs	r6, #0
 800cd9c:	341a      	adds	r4, #26
 800cd9e:	42b5      	cmp	r5, r6
 800cda0:	d11a      	bne.n	800cdd8 <_printf_common+0xc8>
 800cda2:	2000      	movs	r0, #0
 800cda4:	e008      	b.n	800cdb8 <_printf_common+0xa8>
 800cda6:	2301      	movs	r3, #1
 800cda8:	4652      	mov	r2, sl
 800cdaa:	4649      	mov	r1, r9
 800cdac:	4638      	mov	r0, r7
 800cdae:	47c0      	blx	r8
 800cdb0:	3001      	adds	r0, #1
 800cdb2:	d103      	bne.n	800cdbc <_printf_common+0xac>
 800cdb4:	f04f 30ff 	mov.w	r0, #4294967295
 800cdb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdbc:	3501      	adds	r5, #1
 800cdbe:	e7c6      	b.n	800cd4e <_printf_common+0x3e>
 800cdc0:	18e1      	adds	r1, r4, r3
 800cdc2:	1c5a      	adds	r2, r3, #1
 800cdc4:	2030      	movs	r0, #48	; 0x30
 800cdc6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800cdca:	4422      	add	r2, r4
 800cdcc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800cdd0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800cdd4:	3302      	adds	r3, #2
 800cdd6:	e7c7      	b.n	800cd68 <_printf_common+0x58>
 800cdd8:	2301      	movs	r3, #1
 800cdda:	4622      	mov	r2, r4
 800cddc:	4649      	mov	r1, r9
 800cdde:	4638      	mov	r0, r7
 800cde0:	47c0      	blx	r8
 800cde2:	3001      	adds	r0, #1
 800cde4:	d0e6      	beq.n	800cdb4 <_printf_common+0xa4>
 800cde6:	3601      	adds	r6, #1
 800cde8:	e7d9      	b.n	800cd9e <_printf_common+0x8e>
	...

0800cdec <_printf_i>:
 800cdec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cdf0:	7e0f      	ldrb	r7, [r1, #24]
 800cdf2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800cdf4:	2f78      	cmp	r7, #120	; 0x78
 800cdf6:	4691      	mov	r9, r2
 800cdf8:	4680      	mov	r8, r0
 800cdfa:	460c      	mov	r4, r1
 800cdfc:	469a      	mov	sl, r3
 800cdfe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ce02:	d807      	bhi.n	800ce14 <_printf_i+0x28>
 800ce04:	2f62      	cmp	r7, #98	; 0x62
 800ce06:	d80a      	bhi.n	800ce1e <_printf_i+0x32>
 800ce08:	2f00      	cmp	r7, #0
 800ce0a:	f000 80d8 	beq.w	800cfbe <_printf_i+0x1d2>
 800ce0e:	2f58      	cmp	r7, #88	; 0x58
 800ce10:	f000 80a3 	beq.w	800cf5a <_printf_i+0x16e>
 800ce14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800ce1c:	e03a      	b.n	800ce94 <_printf_i+0xa8>
 800ce1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800ce22:	2b15      	cmp	r3, #21
 800ce24:	d8f6      	bhi.n	800ce14 <_printf_i+0x28>
 800ce26:	a101      	add	r1, pc, #4	; (adr r1, 800ce2c <_printf_i+0x40>)
 800ce28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ce2c:	0800ce85 	.word	0x0800ce85
 800ce30:	0800ce99 	.word	0x0800ce99
 800ce34:	0800ce15 	.word	0x0800ce15
 800ce38:	0800ce15 	.word	0x0800ce15
 800ce3c:	0800ce15 	.word	0x0800ce15
 800ce40:	0800ce15 	.word	0x0800ce15
 800ce44:	0800ce99 	.word	0x0800ce99
 800ce48:	0800ce15 	.word	0x0800ce15
 800ce4c:	0800ce15 	.word	0x0800ce15
 800ce50:	0800ce15 	.word	0x0800ce15
 800ce54:	0800ce15 	.word	0x0800ce15
 800ce58:	0800cfa5 	.word	0x0800cfa5
 800ce5c:	0800cec9 	.word	0x0800cec9
 800ce60:	0800cf87 	.word	0x0800cf87
 800ce64:	0800ce15 	.word	0x0800ce15
 800ce68:	0800ce15 	.word	0x0800ce15
 800ce6c:	0800cfc7 	.word	0x0800cfc7
 800ce70:	0800ce15 	.word	0x0800ce15
 800ce74:	0800cec9 	.word	0x0800cec9
 800ce78:	0800ce15 	.word	0x0800ce15
 800ce7c:	0800ce15 	.word	0x0800ce15
 800ce80:	0800cf8f 	.word	0x0800cf8f
 800ce84:	682b      	ldr	r3, [r5, #0]
 800ce86:	1d1a      	adds	r2, r3, #4
 800ce88:	681b      	ldr	r3, [r3, #0]
 800ce8a:	602a      	str	r2, [r5, #0]
 800ce8c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ce90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ce94:	2301      	movs	r3, #1
 800ce96:	e0a3      	b.n	800cfe0 <_printf_i+0x1f4>
 800ce98:	6820      	ldr	r0, [r4, #0]
 800ce9a:	6829      	ldr	r1, [r5, #0]
 800ce9c:	0606      	lsls	r6, r0, #24
 800ce9e:	f101 0304 	add.w	r3, r1, #4
 800cea2:	d50a      	bpl.n	800ceba <_printf_i+0xce>
 800cea4:	680e      	ldr	r6, [r1, #0]
 800cea6:	602b      	str	r3, [r5, #0]
 800cea8:	2e00      	cmp	r6, #0
 800ceaa:	da03      	bge.n	800ceb4 <_printf_i+0xc8>
 800ceac:	232d      	movs	r3, #45	; 0x2d
 800ceae:	4276      	negs	r6, r6
 800ceb0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ceb4:	485e      	ldr	r0, [pc, #376]	; (800d030 <_printf_i+0x244>)
 800ceb6:	230a      	movs	r3, #10
 800ceb8:	e019      	b.n	800ceee <_printf_i+0x102>
 800ceba:	680e      	ldr	r6, [r1, #0]
 800cebc:	602b      	str	r3, [r5, #0]
 800cebe:	f010 0f40 	tst.w	r0, #64	; 0x40
 800cec2:	bf18      	it	ne
 800cec4:	b236      	sxthne	r6, r6
 800cec6:	e7ef      	b.n	800cea8 <_printf_i+0xbc>
 800cec8:	682b      	ldr	r3, [r5, #0]
 800ceca:	6820      	ldr	r0, [r4, #0]
 800cecc:	1d19      	adds	r1, r3, #4
 800cece:	6029      	str	r1, [r5, #0]
 800ced0:	0601      	lsls	r1, r0, #24
 800ced2:	d501      	bpl.n	800ced8 <_printf_i+0xec>
 800ced4:	681e      	ldr	r6, [r3, #0]
 800ced6:	e002      	b.n	800cede <_printf_i+0xf2>
 800ced8:	0646      	lsls	r6, r0, #25
 800ceda:	d5fb      	bpl.n	800ced4 <_printf_i+0xe8>
 800cedc:	881e      	ldrh	r6, [r3, #0]
 800cede:	4854      	ldr	r0, [pc, #336]	; (800d030 <_printf_i+0x244>)
 800cee0:	2f6f      	cmp	r7, #111	; 0x6f
 800cee2:	bf0c      	ite	eq
 800cee4:	2308      	moveq	r3, #8
 800cee6:	230a      	movne	r3, #10
 800cee8:	2100      	movs	r1, #0
 800ceea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ceee:	6865      	ldr	r5, [r4, #4]
 800cef0:	60a5      	str	r5, [r4, #8]
 800cef2:	2d00      	cmp	r5, #0
 800cef4:	bfa2      	ittt	ge
 800cef6:	6821      	ldrge	r1, [r4, #0]
 800cef8:	f021 0104 	bicge.w	r1, r1, #4
 800cefc:	6021      	strge	r1, [r4, #0]
 800cefe:	b90e      	cbnz	r6, 800cf04 <_printf_i+0x118>
 800cf00:	2d00      	cmp	r5, #0
 800cf02:	d04d      	beq.n	800cfa0 <_printf_i+0x1b4>
 800cf04:	4615      	mov	r5, r2
 800cf06:	fbb6 f1f3 	udiv	r1, r6, r3
 800cf0a:	fb03 6711 	mls	r7, r3, r1, r6
 800cf0e:	5dc7      	ldrb	r7, [r0, r7]
 800cf10:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800cf14:	4637      	mov	r7, r6
 800cf16:	42bb      	cmp	r3, r7
 800cf18:	460e      	mov	r6, r1
 800cf1a:	d9f4      	bls.n	800cf06 <_printf_i+0x11a>
 800cf1c:	2b08      	cmp	r3, #8
 800cf1e:	d10b      	bne.n	800cf38 <_printf_i+0x14c>
 800cf20:	6823      	ldr	r3, [r4, #0]
 800cf22:	07de      	lsls	r6, r3, #31
 800cf24:	d508      	bpl.n	800cf38 <_printf_i+0x14c>
 800cf26:	6923      	ldr	r3, [r4, #16]
 800cf28:	6861      	ldr	r1, [r4, #4]
 800cf2a:	4299      	cmp	r1, r3
 800cf2c:	bfde      	ittt	le
 800cf2e:	2330      	movle	r3, #48	; 0x30
 800cf30:	f805 3c01 	strble.w	r3, [r5, #-1]
 800cf34:	f105 35ff 	addle.w	r5, r5, #4294967295
 800cf38:	1b52      	subs	r2, r2, r5
 800cf3a:	6122      	str	r2, [r4, #16]
 800cf3c:	f8cd a000 	str.w	sl, [sp]
 800cf40:	464b      	mov	r3, r9
 800cf42:	aa03      	add	r2, sp, #12
 800cf44:	4621      	mov	r1, r4
 800cf46:	4640      	mov	r0, r8
 800cf48:	f7ff fee2 	bl	800cd10 <_printf_common>
 800cf4c:	3001      	adds	r0, #1
 800cf4e:	d14c      	bne.n	800cfea <_printf_i+0x1fe>
 800cf50:	f04f 30ff 	mov.w	r0, #4294967295
 800cf54:	b004      	add	sp, #16
 800cf56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cf5a:	4835      	ldr	r0, [pc, #212]	; (800d030 <_printf_i+0x244>)
 800cf5c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800cf60:	6829      	ldr	r1, [r5, #0]
 800cf62:	6823      	ldr	r3, [r4, #0]
 800cf64:	f851 6b04 	ldr.w	r6, [r1], #4
 800cf68:	6029      	str	r1, [r5, #0]
 800cf6a:	061d      	lsls	r5, r3, #24
 800cf6c:	d514      	bpl.n	800cf98 <_printf_i+0x1ac>
 800cf6e:	07df      	lsls	r7, r3, #31
 800cf70:	bf44      	itt	mi
 800cf72:	f043 0320 	orrmi.w	r3, r3, #32
 800cf76:	6023      	strmi	r3, [r4, #0]
 800cf78:	b91e      	cbnz	r6, 800cf82 <_printf_i+0x196>
 800cf7a:	6823      	ldr	r3, [r4, #0]
 800cf7c:	f023 0320 	bic.w	r3, r3, #32
 800cf80:	6023      	str	r3, [r4, #0]
 800cf82:	2310      	movs	r3, #16
 800cf84:	e7b0      	b.n	800cee8 <_printf_i+0xfc>
 800cf86:	6823      	ldr	r3, [r4, #0]
 800cf88:	f043 0320 	orr.w	r3, r3, #32
 800cf8c:	6023      	str	r3, [r4, #0]
 800cf8e:	2378      	movs	r3, #120	; 0x78
 800cf90:	4828      	ldr	r0, [pc, #160]	; (800d034 <_printf_i+0x248>)
 800cf92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800cf96:	e7e3      	b.n	800cf60 <_printf_i+0x174>
 800cf98:	0659      	lsls	r1, r3, #25
 800cf9a:	bf48      	it	mi
 800cf9c:	b2b6      	uxthmi	r6, r6
 800cf9e:	e7e6      	b.n	800cf6e <_printf_i+0x182>
 800cfa0:	4615      	mov	r5, r2
 800cfa2:	e7bb      	b.n	800cf1c <_printf_i+0x130>
 800cfa4:	682b      	ldr	r3, [r5, #0]
 800cfa6:	6826      	ldr	r6, [r4, #0]
 800cfa8:	6961      	ldr	r1, [r4, #20]
 800cfaa:	1d18      	adds	r0, r3, #4
 800cfac:	6028      	str	r0, [r5, #0]
 800cfae:	0635      	lsls	r5, r6, #24
 800cfb0:	681b      	ldr	r3, [r3, #0]
 800cfb2:	d501      	bpl.n	800cfb8 <_printf_i+0x1cc>
 800cfb4:	6019      	str	r1, [r3, #0]
 800cfb6:	e002      	b.n	800cfbe <_printf_i+0x1d2>
 800cfb8:	0670      	lsls	r0, r6, #25
 800cfba:	d5fb      	bpl.n	800cfb4 <_printf_i+0x1c8>
 800cfbc:	8019      	strh	r1, [r3, #0]
 800cfbe:	2300      	movs	r3, #0
 800cfc0:	6123      	str	r3, [r4, #16]
 800cfc2:	4615      	mov	r5, r2
 800cfc4:	e7ba      	b.n	800cf3c <_printf_i+0x150>
 800cfc6:	682b      	ldr	r3, [r5, #0]
 800cfc8:	1d1a      	adds	r2, r3, #4
 800cfca:	602a      	str	r2, [r5, #0]
 800cfcc:	681d      	ldr	r5, [r3, #0]
 800cfce:	6862      	ldr	r2, [r4, #4]
 800cfd0:	2100      	movs	r1, #0
 800cfd2:	4628      	mov	r0, r5
 800cfd4:	f7f3 f904 	bl	80001e0 <memchr>
 800cfd8:	b108      	cbz	r0, 800cfde <_printf_i+0x1f2>
 800cfda:	1b40      	subs	r0, r0, r5
 800cfdc:	6060      	str	r0, [r4, #4]
 800cfde:	6863      	ldr	r3, [r4, #4]
 800cfe0:	6123      	str	r3, [r4, #16]
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800cfe8:	e7a8      	b.n	800cf3c <_printf_i+0x150>
 800cfea:	6923      	ldr	r3, [r4, #16]
 800cfec:	462a      	mov	r2, r5
 800cfee:	4649      	mov	r1, r9
 800cff0:	4640      	mov	r0, r8
 800cff2:	47d0      	blx	sl
 800cff4:	3001      	adds	r0, #1
 800cff6:	d0ab      	beq.n	800cf50 <_printf_i+0x164>
 800cff8:	6823      	ldr	r3, [r4, #0]
 800cffa:	079b      	lsls	r3, r3, #30
 800cffc:	d413      	bmi.n	800d026 <_printf_i+0x23a>
 800cffe:	68e0      	ldr	r0, [r4, #12]
 800d000:	9b03      	ldr	r3, [sp, #12]
 800d002:	4298      	cmp	r0, r3
 800d004:	bfb8      	it	lt
 800d006:	4618      	movlt	r0, r3
 800d008:	e7a4      	b.n	800cf54 <_printf_i+0x168>
 800d00a:	2301      	movs	r3, #1
 800d00c:	4632      	mov	r2, r6
 800d00e:	4649      	mov	r1, r9
 800d010:	4640      	mov	r0, r8
 800d012:	47d0      	blx	sl
 800d014:	3001      	adds	r0, #1
 800d016:	d09b      	beq.n	800cf50 <_printf_i+0x164>
 800d018:	3501      	adds	r5, #1
 800d01a:	68e3      	ldr	r3, [r4, #12]
 800d01c:	9903      	ldr	r1, [sp, #12]
 800d01e:	1a5b      	subs	r3, r3, r1
 800d020:	42ab      	cmp	r3, r5
 800d022:	dcf2      	bgt.n	800d00a <_printf_i+0x21e>
 800d024:	e7eb      	b.n	800cffe <_printf_i+0x212>
 800d026:	2500      	movs	r5, #0
 800d028:	f104 0619 	add.w	r6, r4, #25
 800d02c:	e7f5      	b.n	800d01a <_printf_i+0x22e>
 800d02e:	bf00      	nop
 800d030:	0801175e 	.word	0x0801175e
 800d034:	0801176f 	.word	0x0801176f

0800d038 <siprintf>:
 800d038:	b40e      	push	{r1, r2, r3}
 800d03a:	b500      	push	{lr}
 800d03c:	b09c      	sub	sp, #112	; 0x70
 800d03e:	ab1d      	add	r3, sp, #116	; 0x74
 800d040:	9002      	str	r0, [sp, #8]
 800d042:	9006      	str	r0, [sp, #24]
 800d044:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d048:	4809      	ldr	r0, [pc, #36]	; (800d070 <siprintf+0x38>)
 800d04a:	9107      	str	r1, [sp, #28]
 800d04c:	9104      	str	r1, [sp, #16]
 800d04e:	4909      	ldr	r1, [pc, #36]	; (800d074 <siprintf+0x3c>)
 800d050:	f853 2b04 	ldr.w	r2, [r3], #4
 800d054:	9105      	str	r1, [sp, #20]
 800d056:	6800      	ldr	r0, [r0, #0]
 800d058:	9301      	str	r3, [sp, #4]
 800d05a:	a902      	add	r1, sp, #8
 800d05c:	f001 fc82 	bl	800e964 <_svfiprintf_r>
 800d060:	9b02      	ldr	r3, [sp, #8]
 800d062:	2200      	movs	r2, #0
 800d064:	701a      	strb	r2, [r3, #0]
 800d066:	b01c      	add	sp, #112	; 0x70
 800d068:	f85d eb04 	ldr.w	lr, [sp], #4
 800d06c:	b003      	add	sp, #12
 800d06e:	4770      	bx	lr
 800d070:	20000028 	.word	0x20000028
 800d074:	ffff0208 	.word	0xffff0208

0800d078 <strtok>:
 800d078:	4b16      	ldr	r3, [pc, #88]	; (800d0d4 <strtok+0x5c>)
 800d07a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d07c:	681e      	ldr	r6, [r3, #0]
 800d07e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800d080:	4605      	mov	r5, r0
 800d082:	b9fc      	cbnz	r4, 800d0c4 <strtok+0x4c>
 800d084:	2050      	movs	r0, #80	; 0x50
 800d086:	9101      	str	r1, [sp, #4]
 800d088:	f000 ff8e 	bl	800dfa8 <malloc>
 800d08c:	9901      	ldr	r1, [sp, #4]
 800d08e:	65b0      	str	r0, [r6, #88]	; 0x58
 800d090:	4602      	mov	r2, r0
 800d092:	b920      	cbnz	r0, 800d09e <strtok+0x26>
 800d094:	4b10      	ldr	r3, [pc, #64]	; (800d0d8 <strtok+0x60>)
 800d096:	4811      	ldr	r0, [pc, #68]	; (800d0dc <strtok+0x64>)
 800d098:	2157      	movs	r1, #87	; 0x57
 800d09a:	f000 f8d5 	bl	800d248 <__assert_func>
 800d09e:	e9c0 4400 	strd	r4, r4, [r0]
 800d0a2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800d0a6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800d0aa:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800d0ae:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800d0b2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800d0b6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800d0ba:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800d0be:	6184      	str	r4, [r0, #24]
 800d0c0:	7704      	strb	r4, [r0, #28]
 800d0c2:	6244      	str	r4, [r0, #36]	; 0x24
 800d0c4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	4628      	mov	r0, r5
 800d0ca:	b002      	add	sp, #8
 800d0cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d0d0:	f000 b806 	b.w	800d0e0 <__strtok_r>
 800d0d4:	20000028 	.word	0x20000028
 800d0d8:	08011780 	.word	0x08011780
 800d0dc:	08011797 	.word	0x08011797

0800d0e0 <__strtok_r>:
 800d0e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d0e2:	b908      	cbnz	r0, 800d0e8 <__strtok_r+0x8>
 800d0e4:	6810      	ldr	r0, [r2, #0]
 800d0e6:	b188      	cbz	r0, 800d10c <__strtok_r+0x2c>
 800d0e8:	4604      	mov	r4, r0
 800d0ea:	4620      	mov	r0, r4
 800d0ec:	f814 5b01 	ldrb.w	r5, [r4], #1
 800d0f0:	460f      	mov	r7, r1
 800d0f2:	f817 6b01 	ldrb.w	r6, [r7], #1
 800d0f6:	b91e      	cbnz	r6, 800d100 <__strtok_r+0x20>
 800d0f8:	b965      	cbnz	r5, 800d114 <__strtok_r+0x34>
 800d0fa:	6015      	str	r5, [r2, #0]
 800d0fc:	4628      	mov	r0, r5
 800d0fe:	e005      	b.n	800d10c <__strtok_r+0x2c>
 800d100:	42b5      	cmp	r5, r6
 800d102:	d1f6      	bne.n	800d0f2 <__strtok_r+0x12>
 800d104:	2b00      	cmp	r3, #0
 800d106:	d1f0      	bne.n	800d0ea <__strtok_r+0xa>
 800d108:	6014      	str	r4, [r2, #0]
 800d10a:	7003      	strb	r3, [r0, #0]
 800d10c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d10e:	461c      	mov	r4, r3
 800d110:	e00c      	b.n	800d12c <__strtok_r+0x4c>
 800d112:	b915      	cbnz	r5, 800d11a <__strtok_r+0x3a>
 800d114:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d118:	460e      	mov	r6, r1
 800d11a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800d11e:	42ab      	cmp	r3, r5
 800d120:	d1f7      	bne.n	800d112 <__strtok_r+0x32>
 800d122:	2b00      	cmp	r3, #0
 800d124:	d0f3      	beq.n	800d10e <__strtok_r+0x2e>
 800d126:	2300      	movs	r3, #0
 800d128:	f804 3c01 	strb.w	r3, [r4, #-1]
 800d12c:	6014      	str	r4, [r2, #0]
 800d12e:	e7ed      	b.n	800d10c <__strtok_r+0x2c>

0800d130 <_strtol_l.constprop.0>:
 800d130:	2b01      	cmp	r3, #1
 800d132:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d136:	d001      	beq.n	800d13c <_strtol_l.constprop.0+0xc>
 800d138:	2b24      	cmp	r3, #36	; 0x24
 800d13a:	d906      	bls.n	800d14a <_strtol_l.constprop.0+0x1a>
 800d13c:	f7ff fad2 	bl	800c6e4 <__errno>
 800d140:	2316      	movs	r3, #22
 800d142:	6003      	str	r3, [r0, #0]
 800d144:	2000      	movs	r0, #0
 800d146:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d14a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d230 <_strtol_l.constprop.0+0x100>
 800d14e:	460d      	mov	r5, r1
 800d150:	462e      	mov	r6, r5
 800d152:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d156:	f814 700c 	ldrb.w	r7, [r4, ip]
 800d15a:	f017 0708 	ands.w	r7, r7, #8
 800d15e:	d1f7      	bne.n	800d150 <_strtol_l.constprop.0+0x20>
 800d160:	2c2d      	cmp	r4, #45	; 0x2d
 800d162:	d132      	bne.n	800d1ca <_strtol_l.constprop.0+0x9a>
 800d164:	782c      	ldrb	r4, [r5, #0]
 800d166:	2701      	movs	r7, #1
 800d168:	1cb5      	adds	r5, r6, #2
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d05b      	beq.n	800d226 <_strtol_l.constprop.0+0xf6>
 800d16e:	2b10      	cmp	r3, #16
 800d170:	d109      	bne.n	800d186 <_strtol_l.constprop.0+0x56>
 800d172:	2c30      	cmp	r4, #48	; 0x30
 800d174:	d107      	bne.n	800d186 <_strtol_l.constprop.0+0x56>
 800d176:	782c      	ldrb	r4, [r5, #0]
 800d178:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d17c:	2c58      	cmp	r4, #88	; 0x58
 800d17e:	d14d      	bne.n	800d21c <_strtol_l.constprop.0+0xec>
 800d180:	786c      	ldrb	r4, [r5, #1]
 800d182:	2310      	movs	r3, #16
 800d184:	3502      	adds	r5, #2
 800d186:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d18a:	f108 38ff 	add.w	r8, r8, #4294967295
 800d18e:	f04f 0c00 	mov.w	ip, #0
 800d192:	fbb8 f9f3 	udiv	r9, r8, r3
 800d196:	4666      	mov	r6, ip
 800d198:	fb03 8a19 	mls	sl, r3, r9, r8
 800d19c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800d1a0:	f1be 0f09 	cmp.w	lr, #9
 800d1a4:	d816      	bhi.n	800d1d4 <_strtol_l.constprop.0+0xa4>
 800d1a6:	4674      	mov	r4, lr
 800d1a8:	42a3      	cmp	r3, r4
 800d1aa:	dd24      	ble.n	800d1f6 <_strtol_l.constprop.0+0xc6>
 800d1ac:	f1bc 0f00 	cmp.w	ip, #0
 800d1b0:	db1e      	blt.n	800d1f0 <_strtol_l.constprop.0+0xc0>
 800d1b2:	45b1      	cmp	r9, r6
 800d1b4:	d31c      	bcc.n	800d1f0 <_strtol_l.constprop.0+0xc0>
 800d1b6:	d101      	bne.n	800d1bc <_strtol_l.constprop.0+0x8c>
 800d1b8:	45a2      	cmp	sl, r4
 800d1ba:	db19      	blt.n	800d1f0 <_strtol_l.constprop.0+0xc0>
 800d1bc:	fb06 4603 	mla	r6, r6, r3, r4
 800d1c0:	f04f 0c01 	mov.w	ip, #1
 800d1c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d1c8:	e7e8      	b.n	800d19c <_strtol_l.constprop.0+0x6c>
 800d1ca:	2c2b      	cmp	r4, #43	; 0x2b
 800d1cc:	bf04      	itt	eq
 800d1ce:	782c      	ldrbeq	r4, [r5, #0]
 800d1d0:	1cb5      	addeq	r5, r6, #2
 800d1d2:	e7ca      	b.n	800d16a <_strtol_l.constprop.0+0x3a>
 800d1d4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800d1d8:	f1be 0f19 	cmp.w	lr, #25
 800d1dc:	d801      	bhi.n	800d1e2 <_strtol_l.constprop.0+0xb2>
 800d1de:	3c37      	subs	r4, #55	; 0x37
 800d1e0:	e7e2      	b.n	800d1a8 <_strtol_l.constprop.0+0x78>
 800d1e2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800d1e6:	f1be 0f19 	cmp.w	lr, #25
 800d1ea:	d804      	bhi.n	800d1f6 <_strtol_l.constprop.0+0xc6>
 800d1ec:	3c57      	subs	r4, #87	; 0x57
 800d1ee:	e7db      	b.n	800d1a8 <_strtol_l.constprop.0+0x78>
 800d1f0:	f04f 3cff 	mov.w	ip, #4294967295
 800d1f4:	e7e6      	b.n	800d1c4 <_strtol_l.constprop.0+0x94>
 800d1f6:	f1bc 0f00 	cmp.w	ip, #0
 800d1fa:	da05      	bge.n	800d208 <_strtol_l.constprop.0+0xd8>
 800d1fc:	2322      	movs	r3, #34	; 0x22
 800d1fe:	6003      	str	r3, [r0, #0]
 800d200:	4646      	mov	r6, r8
 800d202:	b942      	cbnz	r2, 800d216 <_strtol_l.constprop.0+0xe6>
 800d204:	4630      	mov	r0, r6
 800d206:	e79e      	b.n	800d146 <_strtol_l.constprop.0+0x16>
 800d208:	b107      	cbz	r7, 800d20c <_strtol_l.constprop.0+0xdc>
 800d20a:	4276      	negs	r6, r6
 800d20c:	2a00      	cmp	r2, #0
 800d20e:	d0f9      	beq.n	800d204 <_strtol_l.constprop.0+0xd4>
 800d210:	f1bc 0f00 	cmp.w	ip, #0
 800d214:	d000      	beq.n	800d218 <_strtol_l.constprop.0+0xe8>
 800d216:	1e69      	subs	r1, r5, #1
 800d218:	6011      	str	r1, [r2, #0]
 800d21a:	e7f3      	b.n	800d204 <_strtol_l.constprop.0+0xd4>
 800d21c:	2430      	movs	r4, #48	; 0x30
 800d21e:	2b00      	cmp	r3, #0
 800d220:	d1b1      	bne.n	800d186 <_strtol_l.constprop.0+0x56>
 800d222:	2308      	movs	r3, #8
 800d224:	e7af      	b.n	800d186 <_strtol_l.constprop.0+0x56>
 800d226:	2c30      	cmp	r4, #48	; 0x30
 800d228:	d0a5      	beq.n	800d176 <_strtol_l.constprop.0+0x46>
 800d22a:	230a      	movs	r3, #10
 800d22c:	e7ab      	b.n	800d186 <_strtol_l.constprop.0+0x56>
 800d22e:	bf00      	nop
 800d230:	08011831 	.word	0x08011831

0800d234 <strtol>:
 800d234:	4613      	mov	r3, r2
 800d236:	460a      	mov	r2, r1
 800d238:	4601      	mov	r1, r0
 800d23a:	4802      	ldr	r0, [pc, #8]	; (800d244 <strtol+0x10>)
 800d23c:	6800      	ldr	r0, [r0, #0]
 800d23e:	f7ff bf77 	b.w	800d130 <_strtol_l.constprop.0>
 800d242:	bf00      	nop
 800d244:	20000028 	.word	0x20000028

0800d248 <__assert_func>:
 800d248:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d24a:	4614      	mov	r4, r2
 800d24c:	461a      	mov	r2, r3
 800d24e:	4b09      	ldr	r3, [pc, #36]	; (800d274 <__assert_func+0x2c>)
 800d250:	681b      	ldr	r3, [r3, #0]
 800d252:	4605      	mov	r5, r0
 800d254:	68d8      	ldr	r0, [r3, #12]
 800d256:	b14c      	cbz	r4, 800d26c <__assert_func+0x24>
 800d258:	4b07      	ldr	r3, [pc, #28]	; (800d278 <__assert_func+0x30>)
 800d25a:	9100      	str	r1, [sp, #0]
 800d25c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d260:	4906      	ldr	r1, [pc, #24]	; (800d27c <__assert_func+0x34>)
 800d262:	462b      	mov	r3, r5
 800d264:	f000 fe8a 	bl	800df7c <fiprintf>
 800d268:	f001 fea6 	bl	800efb8 <abort>
 800d26c:	4b04      	ldr	r3, [pc, #16]	; (800d280 <__assert_func+0x38>)
 800d26e:	461c      	mov	r4, r3
 800d270:	e7f3      	b.n	800d25a <__assert_func+0x12>
 800d272:	bf00      	nop
 800d274:	20000028 	.word	0x20000028
 800d278:	080117f4 	.word	0x080117f4
 800d27c:	08011801 	.word	0x08011801
 800d280:	0801182f 	.word	0x0801182f

0800d284 <quorem>:
 800d284:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d288:	6903      	ldr	r3, [r0, #16]
 800d28a:	690c      	ldr	r4, [r1, #16]
 800d28c:	42a3      	cmp	r3, r4
 800d28e:	4607      	mov	r7, r0
 800d290:	f2c0 8081 	blt.w	800d396 <quorem+0x112>
 800d294:	3c01      	subs	r4, #1
 800d296:	f101 0814 	add.w	r8, r1, #20
 800d29a:	f100 0514 	add.w	r5, r0, #20
 800d29e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d2a2:	9301      	str	r3, [sp, #4]
 800d2a4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d2a8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d2ac:	3301      	adds	r3, #1
 800d2ae:	429a      	cmp	r2, r3
 800d2b0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800d2b4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d2b8:	fbb2 f6f3 	udiv	r6, r2, r3
 800d2bc:	d331      	bcc.n	800d322 <quorem+0x9e>
 800d2be:	f04f 0e00 	mov.w	lr, #0
 800d2c2:	4640      	mov	r0, r8
 800d2c4:	46ac      	mov	ip, r5
 800d2c6:	46f2      	mov	sl, lr
 800d2c8:	f850 2b04 	ldr.w	r2, [r0], #4
 800d2cc:	b293      	uxth	r3, r2
 800d2ce:	fb06 e303 	mla	r3, r6, r3, lr
 800d2d2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800d2d6:	b29b      	uxth	r3, r3
 800d2d8:	ebaa 0303 	sub.w	r3, sl, r3
 800d2dc:	f8dc a000 	ldr.w	sl, [ip]
 800d2e0:	0c12      	lsrs	r2, r2, #16
 800d2e2:	fa13 f38a 	uxtah	r3, r3, sl
 800d2e6:	fb06 e202 	mla	r2, r6, r2, lr
 800d2ea:	9300      	str	r3, [sp, #0]
 800d2ec:	9b00      	ldr	r3, [sp, #0]
 800d2ee:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800d2f2:	b292      	uxth	r2, r2
 800d2f4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800d2f8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d2fc:	f8bd 3000 	ldrh.w	r3, [sp]
 800d300:	4581      	cmp	r9, r0
 800d302:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d306:	f84c 3b04 	str.w	r3, [ip], #4
 800d30a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800d30e:	d2db      	bcs.n	800d2c8 <quorem+0x44>
 800d310:	f855 300b 	ldr.w	r3, [r5, fp]
 800d314:	b92b      	cbnz	r3, 800d322 <quorem+0x9e>
 800d316:	9b01      	ldr	r3, [sp, #4]
 800d318:	3b04      	subs	r3, #4
 800d31a:	429d      	cmp	r5, r3
 800d31c:	461a      	mov	r2, r3
 800d31e:	d32e      	bcc.n	800d37e <quorem+0xfa>
 800d320:	613c      	str	r4, [r7, #16]
 800d322:	4638      	mov	r0, r7
 800d324:	f001 f8ca 	bl	800e4bc <__mcmp>
 800d328:	2800      	cmp	r0, #0
 800d32a:	db24      	blt.n	800d376 <quorem+0xf2>
 800d32c:	3601      	adds	r6, #1
 800d32e:	4628      	mov	r0, r5
 800d330:	f04f 0c00 	mov.w	ip, #0
 800d334:	f858 2b04 	ldr.w	r2, [r8], #4
 800d338:	f8d0 e000 	ldr.w	lr, [r0]
 800d33c:	b293      	uxth	r3, r2
 800d33e:	ebac 0303 	sub.w	r3, ip, r3
 800d342:	0c12      	lsrs	r2, r2, #16
 800d344:	fa13 f38e 	uxtah	r3, r3, lr
 800d348:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800d34c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800d350:	b29b      	uxth	r3, r3
 800d352:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d356:	45c1      	cmp	r9, r8
 800d358:	f840 3b04 	str.w	r3, [r0], #4
 800d35c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800d360:	d2e8      	bcs.n	800d334 <quorem+0xb0>
 800d362:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d366:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d36a:	b922      	cbnz	r2, 800d376 <quorem+0xf2>
 800d36c:	3b04      	subs	r3, #4
 800d36e:	429d      	cmp	r5, r3
 800d370:	461a      	mov	r2, r3
 800d372:	d30a      	bcc.n	800d38a <quorem+0x106>
 800d374:	613c      	str	r4, [r7, #16]
 800d376:	4630      	mov	r0, r6
 800d378:	b003      	add	sp, #12
 800d37a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d37e:	6812      	ldr	r2, [r2, #0]
 800d380:	3b04      	subs	r3, #4
 800d382:	2a00      	cmp	r2, #0
 800d384:	d1cc      	bne.n	800d320 <quorem+0x9c>
 800d386:	3c01      	subs	r4, #1
 800d388:	e7c7      	b.n	800d31a <quorem+0x96>
 800d38a:	6812      	ldr	r2, [r2, #0]
 800d38c:	3b04      	subs	r3, #4
 800d38e:	2a00      	cmp	r2, #0
 800d390:	d1f0      	bne.n	800d374 <quorem+0xf0>
 800d392:	3c01      	subs	r4, #1
 800d394:	e7eb      	b.n	800d36e <quorem+0xea>
 800d396:	2000      	movs	r0, #0
 800d398:	e7ee      	b.n	800d378 <quorem+0xf4>
 800d39a:	0000      	movs	r0, r0
 800d39c:	0000      	movs	r0, r0
	...

0800d3a0 <_dtoa_r>:
 800d3a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3a4:	ed2d 8b04 	vpush	{d8-d9}
 800d3a8:	ec57 6b10 	vmov	r6, r7, d0
 800d3ac:	b093      	sub	sp, #76	; 0x4c
 800d3ae:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800d3b0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800d3b4:	9106      	str	r1, [sp, #24]
 800d3b6:	ee10 aa10 	vmov	sl, s0
 800d3ba:	4604      	mov	r4, r0
 800d3bc:	9209      	str	r2, [sp, #36]	; 0x24
 800d3be:	930c      	str	r3, [sp, #48]	; 0x30
 800d3c0:	46bb      	mov	fp, r7
 800d3c2:	b975      	cbnz	r5, 800d3e2 <_dtoa_r+0x42>
 800d3c4:	2010      	movs	r0, #16
 800d3c6:	f000 fdef 	bl	800dfa8 <malloc>
 800d3ca:	4602      	mov	r2, r0
 800d3cc:	6260      	str	r0, [r4, #36]	; 0x24
 800d3ce:	b920      	cbnz	r0, 800d3da <_dtoa_r+0x3a>
 800d3d0:	4ba7      	ldr	r3, [pc, #668]	; (800d670 <_dtoa_r+0x2d0>)
 800d3d2:	21ea      	movs	r1, #234	; 0xea
 800d3d4:	48a7      	ldr	r0, [pc, #668]	; (800d674 <_dtoa_r+0x2d4>)
 800d3d6:	f7ff ff37 	bl	800d248 <__assert_func>
 800d3da:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800d3de:	6005      	str	r5, [r0, #0]
 800d3e0:	60c5      	str	r5, [r0, #12]
 800d3e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3e4:	6819      	ldr	r1, [r3, #0]
 800d3e6:	b151      	cbz	r1, 800d3fe <_dtoa_r+0x5e>
 800d3e8:	685a      	ldr	r2, [r3, #4]
 800d3ea:	604a      	str	r2, [r1, #4]
 800d3ec:	2301      	movs	r3, #1
 800d3ee:	4093      	lsls	r3, r2
 800d3f0:	608b      	str	r3, [r1, #8]
 800d3f2:	4620      	mov	r0, r4
 800d3f4:	f000 fe20 	bl	800e038 <_Bfree>
 800d3f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	601a      	str	r2, [r3, #0]
 800d3fe:	1e3b      	subs	r3, r7, #0
 800d400:	bfaa      	itet	ge
 800d402:	2300      	movge	r3, #0
 800d404:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800d408:	f8c8 3000 	strge.w	r3, [r8]
 800d40c:	4b9a      	ldr	r3, [pc, #616]	; (800d678 <_dtoa_r+0x2d8>)
 800d40e:	bfbc      	itt	lt
 800d410:	2201      	movlt	r2, #1
 800d412:	f8c8 2000 	strlt.w	r2, [r8]
 800d416:	ea33 030b 	bics.w	r3, r3, fp
 800d41a:	d11b      	bne.n	800d454 <_dtoa_r+0xb4>
 800d41c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d41e:	f242 730f 	movw	r3, #9999	; 0x270f
 800d422:	6013      	str	r3, [r2, #0]
 800d424:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d428:	4333      	orrs	r3, r6
 800d42a:	f000 8592 	beq.w	800df52 <_dtoa_r+0xbb2>
 800d42e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d430:	b963      	cbnz	r3, 800d44c <_dtoa_r+0xac>
 800d432:	4b92      	ldr	r3, [pc, #584]	; (800d67c <_dtoa_r+0x2dc>)
 800d434:	e022      	b.n	800d47c <_dtoa_r+0xdc>
 800d436:	4b92      	ldr	r3, [pc, #584]	; (800d680 <_dtoa_r+0x2e0>)
 800d438:	9301      	str	r3, [sp, #4]
 800d43a:	3308      	adds	r3, #8
 800d43c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800d43e:	6013      	str	r3, [r2, #0]
 800d440:	9801      	ldr	r0, [sp, #4]
 800d442:	b013      	add	sp, #76	; 0x4c
 800d444:	ecbd 8b04 	vpop	{d8-d9}
 800d448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d44c:	4b8b      	ldr	r3, [pc, #556]	; (800d67c <_dtoa_r+0x2dc>)
 800d44e:	9301      	str	r3, [sp, #4]
 800d450:	3303      	adds	r3, #3
 800d452:	e7f3      	b.n	800d43c <_dtoa_r+0x9c>
 800d454:	2200      	movs	r2, #0
 800d456:	2300      	movs	r3, #0
 800d458:	4650      	mov	r0, sl
 800d45a:	4659      	mov	r1, fp
 800d45c:	f7f3 fb34 	bl	8000ac8 <__aeabi_dcmpeq>
 800d460:	ec4b ab19 	vmov	d9, sl, fp
 800d464:	4680      	mov	r8, r0
 800d466:	b158      	cbz	r0, 800d480 <_dtoa_r+0xe0>
 800d468:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d46a:	2301      	movs	r3, #1
 800d46c:	6013      	str	r3, [r2, #0]
 800d46e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d470:	2b00      	cmp	r3, #0
 800d472:	f000 856b 	beq.w	800df4c <_dtoa_r+0xbac>
 800d476:	4883      	ldr	r0, [pc, #524]	; (800d684 <_dtoa_r+0x2e4>)
 800d478:	6018      	str	r0, [r3, #0]
 800d47a:	1e43      	subs	r3, r0, #1
 800d47c:	9301      	str	r3, [sp, #4]
 800d47e:	e7df      	b.n	800d440 <_dtoa_r+0xa0>
 800d480:	ec4b ab10 	vmov	d0, sl, fp
 800d484:	aa10      	add	r2, sp, #64	; 0x40
 800d486:	a911      	add	r1, sp, #68	; 0x44
 800d488:	4620      	mov	r0, r4
 800d48a:	f001 f8bd 	bl	800e608 <__d2b>
 800d48e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800d492:	ee08 0a10 	vmov	s16, r0
 800d496:	2d00      	cmp	r5, #0
 800d498:	f000 8084 	beq.w	800d5a4 <_dtoa_r+0x204>
 800d49c:	ee19 3a90 	vmov	r3, s19
 800d4a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d4a4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800d4a8:	4656      	mov	r6, sl
 800d4aa:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800d4ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800d4b2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800d4b6:	4b74      	ldr	r3, [pc, #464]	; (800d688 <_dtoa_r+0x2e8>)
 800d4b8:	2200      	movs	r2, #0
 800d4ba:	4630      	mov	r0, r6
 800d4bc:	4639      	mov	r1, r7
 800d4be:	f7f2 fee3 	bl	8000288 <__aeabi_dsub>
 800d4c2:	a365      	add	r3, pc, #404	; (adr r3, 800d658 <_dtoa_r+0x2b8>)
 800d4c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4c8:	f7f3 f896 	bl	80005f8 <__aeabi_dmul>
 800d4cc:	a364      	add	r3, pc, #400	; (adr r3, 800d660 <_dtoa_r+0x2c0>)
 800d4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4d2:	f7f2 fedb 	bl	800028c <__adddf3>
 800d4d6:	4606      	mov	r6, r0
 800d4d8:	4628      	mov	r0, r5
 800d4da:	460f      	mov	r7, r1
 800d4dc:	f7f3 f822 	bl	8000524 <__aeabi_i2d>
 800d4e0:	a361      	add	r3, pc, #388	; (adr r3, 800d668 <_dtoa_r+0x2c8>)
 800d4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d4e6:	f7f3 f887 	bl	80005f8 <__aeabi_dmul>
 800d4ea:	4602      	mov	r2, r0
 800d4ec:	460b      	mov	r3, r1
 800d4ee:	4630      	mov	r0, r6
 800d4f0:	4639      	mov	r1, r7
 800d4f2:	f7f2 fecb 	bl	800028c <__adddf3>
 800d4f6:	4606      	mov	r6, r0
 800d4f8:	460f      	mov	r7, r1
 800d4fa:	f7f3 fb2d 	bl	8000b58 <__aeabi_d2iz>
 800d4fe:	2200      	movs	r2, #0
 800d500:	9000      	str	r0, [sp, #0]
 800d502:	2300      	movs	r3, #0
 800d504:	4630      	mov	r0, r6
 800d506:	4639      	mov	r1, r7
 800d508:	f7f3 fae8 	bl	8000adc <__aeabi_dcmplt>
 800d50c:	b150      	cbz	r0, 800d524 <_dtoa_r+0x184>
 800d50e:	9800      	ldr	r0, [sp, #0]
 800d510:	f7f3 f808 	bl	8000524 <__aeabi_i2d>
 800d514:	4632      	mov	r2, r6
 800d516:	463b      	mov	r3, r7
 800d518:	f7f3 fad6 	bl	8000ac8 <__aeabi_dcmpeq>
 800d51c:	b910      	cbnz	r0, 800d524 <_dtoa_r+0x184>
 800d51e:	9b00      	ldr	r3, [sp, #0]
 800d520:	3b01      	subs	r3, #1
 800d522:	9300      	str	r3, [sp, #0]
 800d524:	9b00      	ldr	r3, [sp, #0]
 800d526:	2b16      	cmp	r3, #22
 800d528:	d85a      	bhi.n	800d5e0 <_dtoa_r+0x240>
 800d52a:	9a00      	ldr	r2, [sp, #0]
 800d52c:	4b57      	ldr	r3, [pc, #348]	; (800d68c <_dtoa_r+0x2ec>)
 800d52e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d532:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d536:	ec51 0b19 	vmov	r0, r1, d9
 800d53a:	f7f3 facf 	bl	8000adc <__aeabi_dcmplt>
 800d53e:	2800      	cmp	r0, #0
 800d540:	d050      	beq.n	800d5e4 <_dtoa_r+0x244>
 800d542:	9b00      	ldr	r3, [sp, #0]
 800d544:	3b01      	subs	r3, #1
 800d546:	9300      	str	r3, [sp, #0]
 800d548:	2300      	movs	r3, #0
 800d54a:	930b      	str	r3, [sp, #44]	; 0x2c
 800d54c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d54e:	1b5d      	subs	r5, r3, r5
 800d550:	1e6b      	subs	r3, r5, #1
 800d552:	9305      	str	r3, [sp, #20]
 800d554:	bf45      	ittet	mi
 800d556:	f1c5 0301 	rsbmi	r3, r5, #1
 800d55a:	9304      	strmi	r3, [sp, #16]
 800d55c:	2300      	movpl	r3, #0
 800d55e:	2300      	movmi	r3, #0
 800d560:	bf4c      	ite	mi
 800d562:	9305      	strmi	r3, [sp, #20]
 800d564:	9304      	strpl	r3, [sp, #16]
 800d566:	9b00      	ldr	r3, [sp, #0]
 800d568:	2b00      	cmp	r3, #0
 800d56a:	db3d      	blt.n	800d5e8 <_dtoa_r+0x248>
 800d56c:	9b05      	ldr	r3, [sp, #20]
 800d56e:	9a00      	ldr	r2, [sp, #0]
 800d570:	920a      	str	r2, [sp, #40]	; 0x28
 800d572:	4413      	add	r3, r2
 800d574:	9305      	str	r3, [sp, #20]
 800d576:	2300      	movs	r3, #0
 800d578:	9307      	str	r3, [sp, #28]
 800d57a:	9b06      	ldr	r3, [sp, #24]
 800d57c:	2b09      	cmp	r3, #9
 800d57e:	f200 8089 	bhi.w	800d694 <_dtoa_r+0x2f4>
 800d582:	2b05      	cmp	r3, #5
 800d584:	bfc4      	itt	gt
 800d586:	3b04      	subgt	r3, #4
 800d588:	9306      	strgt	r3, [sp, #24]
 800d58a:	9b06      	ldr	r3, [sp, #24]
 800d58c:	f1a3 0302 	sub.w	r3, r3, #2
 800d590:	bfcc      	ite	gt
 800d592:	2500      	movgt	r5, #0
 800d594:	2501      	movle	r5, #1
 800d596:	2b03      	cmp	r3, #3
 800d598:	f200 8087 	bhi.w	800d6aa <_dtoa_r+0x30a>
 800d59c:	e8df f003 	tbb	[pc, r3]
 800d5a0:	59383a2d 	.word	0x59383a2d
 800d5a4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800d5a8:	441d      	add	r5, r3
 800d5aa:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800d5ae:	2b20      	cmp	r3, #32
 800d5b0:	bfc1      	itttt	gt
 800d5b2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800d5b6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800d5ba:	fa0b f303 	lslgt.w	r3, fp, r3
 800d5be:	fa26 f000 	lsrgt.w	r0, r6, r0
 800d5c2:	bfda      	itte	le
 800d5c4:	f1c3 0320 	rsble	r3, r3, #32
 800d5c8:	fa06 f003 	lslle.w	r0, r6, r3
 800d5cc:	4318      	orrgt	r0, r3
 800d5ce:	f7f2 ff99 	bl	8000504 <__aeabi_ui2d>
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	4606      	mov	r6, r0
 800d5d6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800d5da:	3d01      	subs	r5, #1
 800d5dc:	930e      	str	r3, [sp, #56]	; 0x38
 800d5de:	e76a      	b.n	800d4b6 <_dtoa_r+0x116>
 800d5e0:	2301      	movs	r3, #1
 800d5e2:	e7b2      	b.n	800d54a <_dtoa_r+0x1aa>
 800d5e4:	900b      	str	r0, [sp, #44]	; 0x2c
 800d5e6:	e7b1      	b.n	800d54c <_dtoa_r+0x1ac>
 800d5e8:	9b04      	ldr	r3, [sp, #16]
 800d5ea:	9a00      	ldr	r2, [sp, #0]
 800d5ec:	1a9b      	subs	r3, r3, r2
 800d5ee:	9304      	str	r3, [sp, #16]
 800d5f0:	4253      	negs	r3, r2
 800d5f2:	9307      	str	r3, [sp, #28]
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	930a      	str	r3, [sp, #40]	; 0x28
 800d5f8:	e7bf      	b.n	800d57a <_dtoa_r+0x1da>
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	9308      	str	r3, [sp, #32]
 800d5fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d600:	2b00      	cmp	r3, #0
 800d602:	dc55      	bgt.n	800d6b0 <_dtoa_r+0x310>
 800d604:	2301      	movs	r3, #1
 800d606:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d60a:	461a      	mov	r2, r3
 800d60c:	9209      	str	r2, [sp, #36]	; 0x24
 800d60e:	e00c      	b.n	800d62a <_dtoa_r+0x28a>
 800d610:	2301      	movs	r3, #1
 800d612:	e7f3      	b.n	800d5fc <_dtoa_r+0x25c>
 800d614:	2300      	movs	r3, #0
 800d616:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d618:	9308      	str	r3, [sp, #32]
 800d61a:	9b00      	ldr	r3, [sp, #0]
 800d61c:	4413      	add	r3, r2
 800d61e:	9302      	str	r3, [sp, #8]
 800d620:	3301      	adds	r3, #1
 800d622:	2b01      	cmp	r3, #1
 800d624:	9303      	str	r3, [sp, #12]
 800d626:	bfb8      	it	lt
 800d628:	2301      	movlt	r3, #1
 800d62a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800d62c:	2200      	movs	r2, #0
 800d62e:	6042      	str	r2, [r0, #4]
 800d630:	2204      	movs	r2, #4
 800d632:	f102 0614 	add.w	r6, r2, #20
 800d636:	429e      	cmp	r6, r3
 800d638:	6841      	ldr	r1, [r0, #4]
 800d63a:	d93d      	bls.n	800d6b8 <_dtoa_r+0x318>
 800d63c:	4620      	mov	r0, r4
 800d63e:	f000 fcbb 	bl	800dfb8 <_Balloc>
 800d642:	9001      	str	r0, [sp, #4]
 800d644:	2800      	cmp	r0, #0
 800d646:	d13b      	bne.n	800d6c0 <_dtoa_r+0x320>
 800d648:	4b11      	ldr	r3, [pc, #68]	; (800d690 <_dtoa_r+0x2f0>)
 800d64a:	4602      	mov	r2, r0
 800d64c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800d650:	e6c0      	b.n	800d3d4 <_dtoa_r+0x34>
 800d652:	2301      	movs	r3, #1
 800d654:	e7df      	b.n	800d616 <_dtoa_r+0x276>
 800d656:	bf00      	nop
 800d658:	636f4361 	.word	0x636f4361
 800d65c:	3fd287a7 	.word	0x3fd287a7
 800d660:	8b60c8b3 	.word	0x8b60c8b3
 800d664:	3fc68a28 	.word	0x3fc68a28
 800d668:	509f79fb 	.word	0x509f79fb
 800d66c:	3fd34413 	.word	0x3fd34413
 800d670:	08011780 	.word	0x08011780
 800d674:	0801193e 	.word	0x0801193e
 800d678:	7ff00000 	.word	0x7ff00000
 800d67c:	0801193a 	.word	0x0801193a
 800d680:	08011931 	.word	0x08011931
 800d684:	0801175d 	.word	0x0801175d
 800d688:	3ff80000 	.word	0x3ff80000
 800d68c:	08011a30 	.word	0x08011a30
 800d690:	08011999 	.word	0x08011999
 800d694:	2501      	movs	r5, #1
 800d696:	2300      	movs	r3, #0
 800d698:	9306      	str	r3, [sp, #24]
 800d69a:	9508      	str	r5, [sp, #32]
 800d69c:	f04f 33ff 	mov.w	r3, #4294967295
 800d6a0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	2312      	movs	r3, #18
 800d6a8:	e7b0      	b.n	800d60c <_dtoa_r+0x26c>
 800d6aa:	2301      	movs	r3, #1
 800d6ac:	9308      	str	r3, [sp, #32]
 800d6ae:	e7f5      	b.n	800d69c <_dtoa_r+0x2fc>
 800d6b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d6b2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800d6b6:	e7b8      	b.n	800d62a <_dtoa_r+0x28a>
 800d6b8:	3101      	adds	r1, #1
 800d6ba:	6041      	str	r1, [r0, #4]
 800d6bc:	0052      	lsls	r2, r2, #1
 800d6be:	e7b8      	b.n	800d632 <_dtoa_r+0x292>
 800d6c0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d6c2:	9a01      	ldr	r2, [sp, #4]
 800d6c4:	601a      	str	r2, [r3, #0]
 800d6c6:	9b03      	ldr	r3, [sp, #12]
 800d6c8:	2b0e      	cmp	r3, #14
 800d6ca:	f200 809d 	bhi.w	800d808 <_dtoa_r+0x468>
 800d6ce:	2d00      	cmp	r5, #0
 800d6d0:	f000 809a 	beq.w	800d808 <_dtoa_r+0x468>
 800d6d4:	9b00      	ldr	r3, [sp, #0]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	dd32      	ble.n	800d740 <_dtoa_r+0x3a0>
 800d6da:	4ab7      	ldr	r2, [pc, #732]	; (800d9b8 <_dtoa_r+0x618>)
 800d6dc:	f003 030f 	and.w	r3, r3, #15
 800d6e0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800d6e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d6e8:	9b00      	ldr	r3, [sp, #0]
 800d6ea:	05d8      	lsls	r0, r3, #23
 800d6ec:	ea4f 1723 	mov.w	r7, r3, asr #4
 800d6f0:	d516      	bpl.n	800d720 <_dtoa_r+0x380>
 800d6f2:	4bb2      	ldr	r3, [pc, #712]	; (800d9bc <_dtoa_r+0x61c>)
 800d6f4:	ec51 0b19 	vmov	r0, r1, d9
 800d6f8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d6fc:	f7f3 f8a6 	bl	800084c <__aeabi_ddiv>
 800d700:	f007 070f 	and.w	r7, r7, #15
 800d704:	4682      	mov	sl, r0
 800d706:	468b      	mov	fp, r1
 800d708:	2503      	movs	r5, #3
 800d70a:	4eac      	ldr	r6, [pc, #688]	; (800d9bc <_dtoa_r+0x61c>)
 800d70c:	b957      	cbnz	r7, 800d724 <_dtoa_r+0x384>
 800d70e:	4642      	mov	r2, r8
 800d710:	464b      	mov	r3, r9
 800d712:	4650      	mov	r0, sl
 800d714:	4659      	mov	r1, fp
 800d716:	f7f3 f899 	bl	800084c <__aeabi_ddiv>
 800d71a:	4682      	mov	sl, r0
 800d71c:	468b      	mov	fp, r1
 800d71e:	e028      	b.n	800d772 <_dtoa_r+0x3d2>
 800d720:	2502      	movs	r5, #2
 800d722:	e7f2      	b.n	800d70a <_dtoa_r+0x36a>
 800d724:	07f9      	lsls	r1, r7, #31
 800d726:	d508      	bpl.n	800d73a <_dtoa_r+0x39a>
 800d728:	4640      	mov	r0, r8
 800d72a:	4649      	mov	r1, r9
 800d72c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d730:	f7f2 ff62 	bl	80005f8 <__aeabi_dmul>
 800d734:	3501      	adds	r5, #1
 800d736:	4680      	mov	r8, r0
 800d738:	4689      	mov	r9, r1
 800d73a:	107f      	asrs	r7, r7, #1
 800d73c:	3608      	adds	r6, #8
 800d73e:	e7e5      	b.n	800d70c <_dtoa_r+0x36c>
 800d740:	f000 809b 	beq.w	800d87a <_dtoa_r+0x4da>
 800d744:	9b00      	ldr	r3, [sp, #0]
 800d746:	4f9d      	ldr	r7, [pc, #628]	; (800d9bc <_dtoa_r+0x61c>)
 800d748:	425e      	negs	r6, r3
 800d74a:	4b9b      	ldr	r3, [pc, #620]	; (800d9b8 <_dtoa_r+0x618>)
 800d74c:	f006 020f 	and.w	r2, r6, #15
 800d750:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d754:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d758:	ec51 0b19 	vmov	r0, r1, d9
 800d75c:	f7f2 ff4c 	bl	80005f8 <__aeabi_dmul>
 800d760:	1136      	asrs	r6, r6, #4
 800d762:	4682      	mov	sl, r0
 800d764:	468b      	mov	fp, r1
 800d766:	2300      	movs	r3, #0
 800d768:	2502      	movs	r5, #2
 800d76a:	2e00      	cmp	r6, #0
 800d76c:	d17a      	bne.n	800d864 <_dtoa_r+0x4c4>
 800d76e:	2b00      	cmp	r3, #0
 800d770:	d1d3      	bne.n	800d71a <_dtoa_r+0x37a>
 800d772:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d774:	2b00      	cmp	r3, #0
 800d776:	f000 8082 	beq.w	800d87e <_dtoa_r+0x4de>
 800d77a:	4b91      	ldr	r3, [pc, #580]	; (800d9c0 <_dtoa_r+0x620>)
 800d77c:	2200      	movs	r2, #0
 800d77e:	4650      	mov	r0, sl
 800d780:	4659      	mov	r1, fp
 800d782:	f7f3 f9ab 	bl	8000adc <__aeabi_dcmplt>
 800d786:	2800      	cmp	r0, #0
 800d788:	d079      	beq.n	800d87e <_dtoa_r+0x4de>
 800d78a:	9b03      	ldr	r3, [sp, #12]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d076      	beq.n	800d87e <_dtoa_r+0x4de>
 800d790:	9b02      	ldr	r3, [sp, #8]
 800d792:	2b00      	cmp	r3, #0
 800d794:	dd36      	ble.n	800d804 <_dtoa_r+0x464>
 800d796:	9b00      	ldr	r3, [sp, #0]
 800d798:	4650      	mov	r0, sl
 800d79a:	4659      	mov	r1, fp
 800d79c:	1e5f      	subs	r7, r3, #1
 800d79e:	2200      	movs	r2, #0
 800d7a0:	4b88      	ldr	r3, [pc, #544]	; (800d9c4 <_dtoa_r+0x624>)
 800d7a2:	f7f2 ff29 	bl	80005f8 <__aeabi_dmul>
 800d7a6:	9e02      	ldr	r6, [sp, #8]
 800d7a8:	4682      	mov	sl, r0
 800d7aa:	468b      	mov	fp, r1
 800d7ac:	3501      	adds	r5, #1
 800d7ae:	4628      	mov	r0, r5
 800d7b0:	f7f2 feb8 	bl	8000524 <__aeabi_i2d>
 800d7b4:	4652      	mov	r2, sl
 800d7b6:	465b      	mov	r3, fp
 800d7b8:	f7f2 ff1e 	bl	80005f8 <__aeabi_dmul>
 800d7bc:	4b82      	ldr	r3, [pc, #520]	; (800d9c8 <_dtoa_r+0x628>)
 800d7be:	2200      	movs	r2, #0
 800d7c0:	f7f2 fd64 	bl	800028c <__adddf3>
 800d7c4:	46d0      	mov	r8, sl
 800d7c6:	46d9      	mov	r9, fp
 800d7c8:	4682      	mov	sl, r0
 800d7ca:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800d7ce:	2e00      	cmp	r6, #0
 800d7d0:	d158      	bne.n	800d884 <_dtoa_r+0x4e4>
 800d7d2:	4b7e      	ldr	r3, [pc, #504]	; (800d9cc <_dtoa_r+0x62c>)
 800d7d4:	2200      	movs	r2, #0
 800d7d6:	4640      	mov	r0, r8
 800d7d8:	4649      	mov	r1, r9
 800d7da:	f7f2 fd55 	bl	8000288 <__aeabi_dsub>
 800d7de:	4652      	mov	r2, sl
 800d7e0:	465b      	mov	r3, fp
 800d7e2:	4680      	mov	r8, r0
 800d7e4:	4689      	mov	r9, r1
 800d7e6:	f7f3 f997 	bl	8000b18 <__aeabi_dcmpgt>
 800d7ea:	2800      	cmp	r0, #0
 800d7ec:	f040 8295 	bne.w	800dd1a <_dtoa_r+0x97a>
 800d7f0:	4652      	mov	r2, sl
 800d7f2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800d7f6:	4640      	mov	r0, r8
 800d7f8:	4649      	mov	r1, r9
 800d7fa:	f7f3 f96f 	bl	8000adc <__aeabi_dcmplt>
 800d7fe:	2800      	cmp	r0, #0
 800d800:	f040 8289 	bne.w	800dd16 <_dtoa_r+0x976>
 800d804:	ec5b ab19 	vmov	sl, fp, d9
 800d808:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d80a:	2b00      	cmp	r3, #0
 800d80c:	f2c0 8148 	blt.w	800daa0 <_dtoa_r+0x700>
 800d810:	9a00      	ldr	r2, [sp, #0]
 800d812:	2a0e      	cmp	r2, #14
 800d814:	f300 8144 	bgt.w	800daa0 <_dtoa_r+0x700>
 800d818:	4b67      	ldr	r3, [pc, #412]	; (800d9b8 <_dtoa_r+0x618>)
 800d81a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d81e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d822:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d824:	2b00      	cmp	r3, #0
 800d826:	f280 80d5 	bge.w	800d9d4 <_dtoa_r+0x634>
 800d82a:	9b03      	ldr	r3, [sp, #12]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	f300 80d1 	bgt.w	800d9d4 <_dtoa_r+0x634>
 800d832:	f040 826f 	bne.w	800dd14 <_dtoa_r+0x974>
 800d836:	4b65      	ldr	r3, [pc, #404]	; (800d9cc <_dtoa_r+0x62c>)
 800d838:	2200      	movs	r2, #0
 800d83a:	4640      	mov	r0, r8
 800d83c:	4649      	mov	r1, r9
 800d83e:	f7f2 fedb 	bl	80005f8 <__aeabi_dmul>
 800d842:	4652      	mov	r2, sl
 800d844:	465b      	mov	r3, fp
 800d846:	f7f3 f95d 	bl	8000b04 <__aeabi_dcmpge>
 800d84a:	9e03      	ldr	r6, [sp, #12]
 800d84c:	4637      	mov	r7, r6
 800d84e:	2800      	cmp	r0, #0
 800d850:	f040 8245 	bne.w	800dcde <_dtoa_r+0x93e>
 800d854:	9d01      	ldr	r5, [sp, #4]
 800d856:	2331      	movs	r3, #49	; 0x31
 800d858:	f805 3b01 	strb.w	r3, [r5], #1
 800d85c:	9b00      	ldr	r3, [sp, #0]
 800d85e:	3301      	adds	r3, #1
 800d860:	9300      	str	r3, [sp, #0]
 800d862:	e240      	b.n	800dce6 <_dtoa_r+0x946>
 800d864:	07f2      	lsls	r2, r6, #31
 800d866:	d505      	bpl.n	800d874 <_dtoa_r+0x4d4>
 800d868:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d86c:	f7f2 fec4 	bl	80005f8 <__aeabi_dmul>
 800d870:	3501      	adds	r5, #1
 800d872:	2301      	movs	r3, #1
 800d874:	1076      	asrs	r6, r6, #1
 800d876:	3708      	adds	r7, #8
 800d878:	e777      	b.n	800d76a <_dtoa_r+0x3ca>
 800d87a:	2502      	movs	r5, #2
 800d87c:	e779      	b.n	800d772 <_dtoa_r+0x3d2>
 800d87e:	9f00      	ldr	r7, [sp, #0]
 800d880:	9e03      	ldr	r6, [sp, #12]
 800d882:	e794      	b.n	800d7ae <_dtoa_r+0x40e>
 800d884:	9901      	ldr	r1, [sp, #4]
 800d886:	4b4c      	ldr	r3, [pc, #304]	; (800d9b8 <_dtoa_r+0x618>)
 800d888:	4431      	add	r1, r6
 800d88a:	910d      	str	r1, [sp, #52]	; 0x34
 800d88c:	9908      	ldr	r1, [sp, #32]
 800d88e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800d892:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d896:	2900      	cmp	r1, #0
 800d898:	d043      	beq.n	800d922 <_dtoa_r+0x582>
 800d89a:	494d      	ldr	r1, [pc, #308]	; (800d9d0 <_dtoa_r+0x630>)
 800d89c:	2000      	movs	r0, #0
 800d89e:	f7f2 ffd5 	bl	800084c <__aeabi_ddiv>
 800d8a2:	4652      	mov	r2, sl
 800d8a4:	465b      	mov	r3, fp
 800d8a6:	f7f2 fcef 	bl	8000288 <__aeabi_dsub>
 800d8aa:	9d01      	ldr	r5, [sp, #4]
 800d8ac:	4682      	mov	sl, r0
 800d8ae:	468b      	mov	fp, r1
 800d8b0:	4649      	mov	r1, r9
 800d8b2:	4640      	mov	r0, r8
 800d8b4:	f7f3 f950 	bl	8000b58 <__aeabi_d2iz>
 800d8b8:	4606      	mov	r6, r0
 800d8ba:	f7f2 fe33 	bl	8000524 <__aeabi_i2d>
 800d8be:	4602      	mov	r2, r0
 800d8c0:	460b      	mov	r3, r1
 800d8c2:	4640      	mov	r0, r8
 800d8c4:	4649      	mov	r1, r9
 800d8c6:	f7f2 fcdf 	bl	8000288 <__aeabi_dsub>
 800d8ca:	3630      	adds	r6, #48	; 0x30
 800d8cc:	f805 6b01 	strb.w	r6, [r5], #1
 800d8d0:	4652      	mov	r2, sl
 800d8d2:	465b      	mov	r3, fp
 800d8d4:	4680      	mov	r8, r0
 800d8d6:	4689      	mov	r9, r1
 800d8d8:	f7f3 f900 	bl	8000adc <__aeabi_dcmplt>
 800d8dc:	2800      	cmp	r0, #0
 800d8de:	d163      	bne.n	800d9a8 <_dtoa_r+0x608>
 800d8e0:	4642      	mov	r2, r8
 800d8e2:	464b      	mov	r3, r9
 800d8e4:	4936      	ldr	r1, [pc, #216]	; (800d9c0 <_dtoa_r+0x620>)
 800d8e6:	2000      	movs	r0, #0
 800d8e8:	f7f2 fcce 	bl	8000288 <__aeabi_dsub>
 800d8ec:	4652      	mov	r2, sl
 800d8ee:	465b      	mov	r3, fp
 800d8f0:	f7f3 f8f4 	bl	8000adc <__aeabi_dcmplt>
 800d8f4:	2800      	cmp	r0, #0
 800d8f6:	f040 80b5 	bne.w	800da64 <_dtoa_r+0x6c4>
 800d8fa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d8fc:	429d      	cmp	r5, r3
 800d8fe:	d081      	beq.n	800d804 <_dtoa_r+0x464>
 800d900:	4b30      	ldr	r3, [pc, #192]	; (800d9c4 <_dtoa_r+0x624>)
 800d902:	2200      	movs	r2, #0
 800d904:	4650      	mov	r0, sl
 800d906:	4659      	mov	r1, fp
 800d908:	f7f2 fe76 	bl	80005f8 <__aeabi_dmul>
 800d90c:	4b2d      	ldr	r3, [pc, #180]	; (800d9c4 <_dtoa_r+0x624>)
 800d90e:	4682      	mov	sl, r0
 800d910:	468b      	mov	fp, r1
 800d912:	4640      	mov	r0, r8
 800d914:	4649      	mov	r1, r9
 800d916:	2200      	movs	r2, #0
 800d918:	f7f2 fe6e 	bl	80005f8 <__aeabi_dmul>
 800d91c:	4680      	mov	r8, r0
 800d91e:	4689      	mov	r9, r1
 800d920:	e7c6      	b.n	800d8b0 <_dtoa_r+0x510>
 800d922:	4650      	mov	r0, sl
 800d924:	4659      	mov	r1, fp
 800d926:	f7f2 fe67 	bl	80005f8 <__aeabi_dmul>
 800d92a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d92c:	9d01      	ldr	r5, [sp, #4]
 800d92e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d930:	4682      	mov	sl, r0
 800d932:	468b      	mov	fp, r1
 800d934:	4649      	mov	r1, r9
 800d936:	4640      	mov	r0, r8
 800d938:	f7f3 f90e 	bl	8000b58 <__aeabi_d2iz>
 800d93c:	4606      	mov	r6, r0
 800d93e:	f7f2 fdf1 	bl	8000524 <__aeabi_i2d>
 800d942:	3630      	adds	r6, #48	; 0x30
 800d944:	4602      	mov	r2, r0
 800d946:	460b      	mov	r3, r1
 800d948:	4640      	mov	r0, r8
 800d94a:	4649      	mov	r1, r9
 800d94c:	f7f2 fc9c 	bl	8000288 <__aeabi_dsub>
 800d950:	f805 6b01 	strb.w	r6, [r5], #1
 800d954:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d956:	429d      	cmp	r5, r3
 800d958:	4680      	mov	r8, r0
 800d95a:	4689      	mov	r9, r1
 800d95c:	f04f 0200 	mov.w	r2, #0
 800d960:	d124      	bne.n	800d9ac <_dtoa_r+0x60c>
 800d962:	4b1b      	ldr	r3, [pc, #108]	; (800d9d0 <_dtoa_r+0x630>)
 800d964:	4650      	mov	r0, sl
 800d966:	4659      	mov	r1, fp
 800d968:	f7f2 fc90 	bl	800028c <__adddf3>
 800d96c:	4602      	mov	r2, r0
 800d96e:	460b      	mov	r3, r1
 800d970:	4640      	mov	r0, r8
 800d972:	4649      	mov	r1, r9
 800d974:	f7f3 f8d0 	bl	8000b18 <__aeabi_dcmpgt>
 800d978:	2800      	cmp	r0, #0
 800d97a:	d173      	bne.n	800da64 <_dtoa_r+0x6c4>
 800d97c:	4652      	mov	r2, sl
 800d97e:	465b      	mov	r3, fp
 800d980:	4913      	ldr	r1, [pc, #76]	; (800d9d0 <_dtoa_r+0x630>)
 800d982:	2000      	movs	r0, #0
 800d984:	f7f2 fc80 	bl	8000288 <__aeabi_dsub>
 800d988:	4602      	mov	r2, r0
 800d98a:	460b      	mov	r3, r1
 800d98c:	4640      	mov	r0, r8
 800d98e:	4649      	mov	r1, r9
 800d990:	f7f3 f8a4 	bl	8000adc <__aeabi_dcmplt>
 800d994:	2800      	cmp	r0, #0
 800d996:	f43f af35 	beq.w	800d804 <_dtoa_r+0x464>
 800d99a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d99c:	1e6b      	subs	r3, r5, #1
 800d99e:	930f      	str	r3, [sp, #60]	; 0x3c
 800d9a0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d9a4:	2b30      	cmp	r3, #48	; 0x30
 800d9a6:	d0f8      	beq.n	800d99a <_dtoa_r+0x5fa>
 800d9a8:	9700      	str	r7, [sp, #0]
 800d9aa:	e049      	b.n	800da40 <_dtoa_r+0x6a0>
 800d9ac:	4b05      	ldr	r3, [pc, #20]	; (800d9c4 <_dtoa_r+0x624>)
 800d9ae:	f7f2 fe23 	bl	80005f8 <__aeabi_dmul>
 800d9b2:	4680      	mov	r8, r0
 800d9b4:	4689      	mov	r9, r1
 800d9b6:	e7bd      	b.n	800d934 <_dtoa_r+0x594>
 800d9b8:	08011a30 	.word	0x08011a30
 800d9bc:	08011a08 	.word	0x08011a08
 800d9c0:	3ff00000 	.word	0x3ff00000
 800d9c4:	40240000 	.word	0x40240000
 800d9c8:	401c0000 	.word	0x401c0000
 800d9cc:	40140000 	.word	0x40140000
 800d9d0:	3fe00000 	.word	0x3fe00000
 800d9d4:	9d01      	ldr	r5, [sp, #4]
 800d9d6:	4656      	mov	r6, sl
 800d9d8:	465f      	mov	r7, fp
 800d9da:	4642      	mov	r2, r8
 800d9dc:	464b      	mov	r3, r9
 800d9de:	4630      	mov	r0, r6
 800d9e0:	4639      	mov	r1, r7
 800d9e2:	f7f2 ff33 	bl	800084c <__aeabi_ddiv>
 800d9e6:	f7f3 f8b7 	bl	8000b58 <__aeabi_d2iz>
 800d9ea:	4682      	mov	sl, r0
 800d9ec:	f7f2 fd9a 	bl	8000524 <__aeabi_i2d>
 800d9f0:	4642      	mov	r2, r8
 800d9f2:	464b      	mov	r3, r9
 800d9f4:	f7f2 fe00 	bl	80005f8 <__aeabi_dmul>
 800d9f8:	4602      	mov	r2, r0
 800d9fa:	460b      	mov	r3, r1
 800d9fc:	4630      	mov	r0, r6
 800d9fe:	4639      	mov	r1, r7
 800da00:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800da04:	f7f2 fc40 	bl	8000288 <__aeabi_dsub>
 800da08:	f805 6b01 	strb.w	r6, [r5], #1
 800da0c:	9e01      	ldr	r6, [sp, #4]
 800da0e:	9f03      	ldr	r7, [sp, #12]
 800da10:	1bae      	subs	r6, r5, r6
 800da12:	42b7      	cmp	r7, r6
 800da14:	4602      	mov	r2, r0
 800da16:	460b      	mov	r3, r1
 800da18:	d135      	bne.n	800da86 <_dtoa_r+0x6e6>
 800da1a:	f7f2 fc37 	bl	800028c <__adddf3>
 800da1e:	4642      	mov	r2, r8
 800da20:	464b      	mov	r3, r9
 800da22:	4606      	mov	r6, r0
 800da24:	460f      	mov	r7, r1
 800da26:	f7f3 f877 	bl	8000b18 <__aeabi_dcmpgt>
 800da2a:	b9d0      	cbnz	r0, 800da62 <_dtoa_r+0x6c2>
 800da2c:	4642      	mov	r2, r8
 800da2e:	464b      	mov	r3, r9
 800da30:	4630      	mov	r0, r6
 800da32:	4639      	mov	r1, r7
 800da34:	f7f3 f848 	bl	8000ac8 <__aeabi_dcmpeq>
 800da38:	b110      	cbz	r0, 800da40 <_dtoa_r+0x6a0>
 800da3a:	f01a 0f01 	tst.w	sl, #1
 800da3e:	d110      	bne.n	800da62 <_dtoa_r+0x6c2>
 800da40:	4620      	mov	r0, r4
 800da42:	ee18 1a10 	vmov	r1, s16
 800da46:	f000 faf7 	bl	800e038 <_Bfree>
 800da4a:	2300      	movs	r3, #0
 800da4c:	9800      	ldr	r0, [sp, #0]
 800da4e:	702b      	strb	r3, [r5, #0]
 800da50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800da52:	3001      	adds	r0, #1
 800da54:	6018      	str	r0, [r3, #0]
 800da56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800da58:	2b00      	cmp	r3, #0
 800da5a:	f43f acf1 	beq.w	800d440 <_dtoa_r+0xa0>
 800da5e:	601d      	str	r5, [r3, #0]
 800da60:	e4ee      	b.n	800d440 <_dtoa_r+0xa0>
 800da62:	9f00      	ldr	r7, [sp, #0]
 800da64:	462b      	mov	r3, r5
 800da66:	461d      	mov	r5, r3
 800da68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800da6c:	2a39      	cmp	r2, #57	; 0x39
 800da6e:	d106      	bne.n	800da7e <_dtoa_r+0x6de>
 800da70:	9a01      	ldr	r2, [sp, #4]
 800da72:	429a      	cmp	r2, r3
 800da74:	d1f7      	bne.n	800da66 <_dtoa_r+0x6c6>
 800da76:	9901      	ldr	r1, [sp, #4]
 800da78:	2230      	movs	r2, #48	; 0x30
 800da7a:	3701      	adds	r7, #1
 800da7c:	700a      	strb	r2, [r1, #0]
 800da7e:	781a      	ldrb	r2, [r3, #0]
 800da80:	3201      	adds	r2, #1
 800da82:	701a      	strb	r2, [r3, #0]
 800da84:	e790      	b.n	800d9a8 <_dtoa_r+0x608>
 800da86:	4ba6      	ldr	r3, [pc, #664]	; (800dd20 <_dtoa_r+0x980>)
 800da88:	2200      	movs	r2, #0
 800da8a:	f7f2 fdb5 	bl	80005f8 <__aeabi_dmul>
 800da8e:	2200      	movs	r2, #0
 800da90:	2300      	movs	r3, #0
 800da92:	4606      	mov	r6, r0
 800da94:	460f      	mov	r7, r1
 800da96:	f7f3 f817 	bl	8000ac8 <__aeabi_dcmpeq>
 800da9a:	2800      	cmp	r0, #0
 800da9c:	d09d      	beq.n	800d9da <_dtoa_r+0x63a>
 800da9e:	e7cf      	b.n	800da40 <_dtoa_r+0x6a0>
 800daa0:	9a08      	ldr	r2, [sp, #32]
 800daa2:	2a00      	cmp	r2, #0
 800daa4:	f000 80d7 	beq.w	800dc56 <_dtoa_r+0x8b6>
 800daa8:	9a06      	ldr	r2, [sp, #24]
 800daaa:	2a01      	cmp	r2, #1
 800daac:	f300 80ba 	bgt.w	800dc24 <_dtoa_r+0x884>
 800dab0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800dab2:	2a00      	cmp	r2, #0
 800dab4:	f000 80b2 	beq.w	800dc1c <_dtoa_r+0x87c>
 800dab8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800dabc:	9e07      	ldr	r6, [sp, #28]
 800dabe:	9d04      	ldr	r5, [sp, #16]
 800dac0:	9a04      	ldr	r2, [sp, #16]
 800dac2:	441a      	add	r2, r3
 800dac4:	9204      	str	r2, [sp, #16]
 800dac6:	9a05      	ldr	r2, [sp, #20]
 800dac8:	2101      	movs	r1, #1
 800daca:	441a      	add	r2, r3
 800dacc:	4620      	mov	r0, r4
 800dace:	9205      	str	r2, [sp, #20]
 800dad0:	f000 fb6a 	bl	800e1a8 <__i2b>
 800dad4:	4607      	mov	r7, r0
 800dad6:	2d00      	cmp	r5, #0
 800dad8:	dd0c      	ble.n	800daf4 <_dtoa_r+0x754>
 800dada:	9b05      	ldr	r3, [sp, #20]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	dd09      	ble.n	800daf4 <_dtoa_r+0x754>
 800dae0:	42ab      	cmp	r3, r5
 800dae2:	9a04      	ldr	r2, [sp, #16]
 800dae4:	bfa8      	it	ge
 800dae6:	462b      	movge	r3, r5
 800dae8:	1ad2      	subs	r2, r2, r3
 800daea:	9204      	str	r2, [sp, #16]
 800daec:	9a05      	ldr	r2, [sp, #20]
 800daee:	1aed      	subs	r5, r5, r3
 800daf0:	1ad3      	subs	r3, r2, r3
 800daf2:	9305      	str	r3, [sp, #20]
 800daf4:	9b07      	ldr	r3, [sp, #28]
 800daf6:	b31b      	cbz	r3, 800db40 <_dtoa_r+0x7a0>
 800daf8:	9b08      	ldr	r3, [sp, #32]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	f000 80af 	beq.w	800dc5e <_dtoa_r+0x8be>
 800db00:	2e00      	cmp	r6, #0
 800db02:	dd13      	ble.n	800db2c <_dtoa_r+0x78c>
 800db04:	4639      	mov	r1, r7
 800db06:	4632      	mov	r2, r6
 800db08:	4620      	mov	r0, r4
 800db0a:	f000 fc0d 	bl	800e328 <__pow5mult>
 800db0e:	ee18 2a10 	vmov	r2, s16
 800db12:	4601      	mov	r1, r0
 800db14:	4607      	mov	r7, r0
 800db16:	4620      	mov	r0, r4
 800db18:	f000 fb5c 	bl	800e1d4 <__multiply>
 800db1c:	ee18 1a10 	vmov	r1, s16
 800db20:	4680      	mov	r8, r0
 800db22:	4620      	mov	r0, r4
 800db24:	f000 fa88 	bl	800e038 <_Bfree>
 800db28:	ee08 8a10 	vmov	s16, r8
 800db2c:	9b07      	ldr	r3, [sp, #28]
 800db2e:	1b9a      	subs	r2, r3, r6
 800db30:	d006      	beq.n	800db40 <_dtoa_r+0x7a0>
 800db32:	ee18 1a10 	vmov	r1, s16
 800db36:	4620      	mov	r0, r4
 800db38:	f000 fbf6 	bl	800e328 <__pow5mult>
 800db3c:	ee08 0a10 	vmov	s16, r0
 800db40:	2101      	movs	r1, #1
 800db42:	4620      	mov	r0, r4
 800db44:	f000 fb30 	bl	800e1a8 <__i2b>
 800db48:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	4606      	mov	r6, r0
 800db4e:	f340 8088 	ble.w	800dc62 <_dtoa_r+0x8c2>
 800db52:	461a      	mov	r2, r3
 800db54:	4601      	mov	r1, r0
 800db56:	4620      	mov	r0, r4
 800db58:	f000 fbe6 	bl	800e328 <__pow5mult>
 800db5c:	9b06      	ldr	r3, [sp, #24]
 800db5e:	2b01      	cmp	r3, #1
 800db60:	4606      	mov	r6, r0
 800db62:	f340 8081 	ble.w	800dc68 <_dtoa_r+0x8c8>
 800db66:	f04f 0800 	mov.w	r8, #0
 800db6a:	6933      	ldr	r3, [r6, #16]
 800db6c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800db70:	6918      	ldr	r0, [r3, #16]
 800db72:	f000 fac9 	bl	800e108 <__hi0bits>
 800db76:	f1c0 0020 	rsb	r0, r0, #32
 800db7a:	9b05      	ldr	r3, [sp, #20]
 800db7c:	4418      	add	r0, r3
 800db7e:	f010 001f 	ands.w	r0, r0, #31
 800db82:	f000 8092 	beq.w	800dcaa <_dtoa_r+0x90a>
 800db86:	f1c0 0320 	rsb	r3, r0, #32
 800db8a:	2b04      	cmp	r3, #4
 800db8c:	f340 808a 	ble.w	800dca4 <_dtoa_r+0x904>
 800db90:	f1c0 001c 	rsb	r0, r0, #28
 800db94:	9b04      	ldr	r3, [sp, #16]
 800db96:	4403      	add	r3, r0
 800db98:	9304      	str	r3, [sp, #16]
 800db9a:	9b05      	ldr	r3, [sp, #20]
 800db9c:	4403      	add	r3, r0
 800db9e:	4405      	add	r5, r0
 800dba0:	9305      	str	r3, [sp, #20]
 800dba2:	9b04      	ldr	r3, [sp, #16]
 800dba4:	2b00      	cmp	r3, #0
 800dba6:	dd07      	ble.n	800dbb8 <_dtoa_r+0x818>
 800dba8:	ee18 1a10 	vmov	r1, s16
 800dbac:	461a      	mov	r2, r3
 800dbae:	4620      	mov	r0, r4
 800dbb0:	f000 fc14 	bl	800e3dc <__lshift>
 800dbb4:	ee08 0a10 	vmov	s16, r0
 800dbb8:	9b05      	ldr	r3, [sp, #20]
 800dbba:	2b00      	cmp	r3, #0
 800dbbc:	dd05      	ble.n	800dbca <_dtoa_r+0x82a>
 800dbbe:	4631      	mov	r1, r6
 800dbc0:	461a      	mov	r2, r3
 800dbc2:	4620      	mov	r0, r4
 800dbc4:	f000 fc0a 	bl	800e3dc <__lshift>
 800dbc8:	4606      	mov	r6, r0
 800dbca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d06e      	beq.n	800dcae <_dtoa_r+0x90e>
 800dbd0:	ee18 0a10 	vmov	r0, s16
 800dbd4:	4631      	mov	r1, r6
 800dbd6:	f000 fc71 	bl	800e4bc <__mcmp>
 800dbda:	2800      	cmp	r0, #0
 800dbdc:	da67      	bge.n	800dcae <_dtoa_r+0x90e>
 800dbde:	9b00      	ldr	r3, [sp, #0]
 800dbe0:	3b01      	subs	r3, #1
 800dbe2:	ee18 1a10 	vmov	r1, s16
 800dbe6:	9300      	str	r3, [sp, #0]
 800dbe8:	220a      	movs	r2, #10
 800dbea:	2300      	movs	r3, #0
 800dbec:	4620      	mov	r0, r4
 800dbee:	f000 fa45 	bl	800e07c <__multadd>
 800dbf2:	9b08      	ldr	r3, [sp, #32]
 800dbf4:	ee08 0a10 	vmov	s16, r0
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	f000 81b1 	beq.w	800df60 <_dtoa_r+0xbc0>
 800dbfe:	2300      	movs	r3, #0
 800dc00:	4639      	mov	r1, r7
 800dc02:	220a      	movs	r2, #10
 800dc04:	4620      	mov	r0, r4
 800dc06:	f000 fa39 	bl	800e07c <__multadd>
 800dc0a:	9b02      	ldr	r3, [sp, #8]
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	4607      	mov	r7, r0
 800dc10:	f300 808e 	bgt.w	800dd30 <_dtoa_r+0x990>
 800dc14:	9b06      	ldr	r3, [sp, #24]
 800dc16:	2b02      	cmp	r3, #2
 800dc18:	dc51      	bgt.n	800dcbe <_dtoa_r+0x91e>
 800dc1a:	e089      	b.n	800dd30 <_dtoa_r+0x990>
 800dc1c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800dc1e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800dc22:	e74b      	b.n	800dabc <_dtoa_r+0x71c>
 800dc24:	9b03      	ldr	r3, [sp, #12]
 800dc26:	1e5e      	subs	r6, r3, #1
 800dc28:	9b07      	ldr	r3, [sp, #28]
 800dc2a:	42b3      	cmp	r3, r6
 800dc2c:	bfbf      	itttt	lt
 800dc2e:	9b07      	ldrlt	r3, [sp, #28]
 800dc30:	9607      	strlt	r6, [sp, #28]
 800dc32:	1af2      	sublt	r2, r6, r3
 800dc34:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800dc36:	bfb6      	itet	lt
 800dc38:	189b      	addlt	r3, r3, r2
 800dc3a:	1b9e      	subge	r6, r3, r6
 800dc3c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800dc3e:	9b03      	ldr	r3, [sp, #12]
 800dc40:	bfb8      	it	lt
 800dc42:	2600      	movlt	r6, #0
 800dc44:	2b00      	cmp	r3, #0
 800dc46:	bfb7      	itett	lt
 800dc48:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800dc4c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800dc50:	1a9d      	sublt	r5, r3, r2
 800dc52:	2300      	movlt	r3, #0
 800dc54:	e734      	b.n	800dac0 <_dtoa_r+0x720>
 800dc56:	9e07      	ldr	r6, [sp, #28]
 800dc58:	9d04      	ldr	r5, [sp, #16]
 800dc5a:	9f08      	ldr	r7, [sp, #32]
 800dc5c:	e73b      	b.n	800dad6 <_dtoa_r+0x736>
 800dc5e:	9a07      	ldr	r2, [sp, #28]
 800dc60:	e767      	b.n	800db32 <_dtoa_r+0x792>
 800dc62:	9b06      	ldr	r3, [sp, #24]
 800dc64:	2b01      	cmp	r3, #1
 800dc66:	dc18      	bgt.n	800dc9a <_dtoa_r+0x8fa>
 800dc68:	f1ba 0f00 	cmp.w	sl, #0
 800dc6c:	d115      	bne.n	800dc9a <_dtoa_r+0x8fa>
 800dc6e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800dc72:	b993      	cbnz	r3, 800dc9a <_dtoa_r+0x8fa>
 800dc74:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800dc78:	0d1b      	lsrs	r3, r3, #20
 800dc7a:	051b      	lsls	r3, r3, #20
 800dc7c:	b183      	cbz	r3, 800dca0 <_dtoa_r+0x900>
 800dc7e:	9b04      	ldr	r3, [sp, #16]
 800dc80:	3301      	adds	r3, #1
 800dc82:	9304      	str	r3, [sp, #16]
 800dc84:	9b05      	ldr	r3, [sp, #20]
 800dc86:	3301      	adds	r3, #1
 800dc88:	9305      	str	r3, [sp, #20]
 800dc8a:	f04f 0801 	mov.w	r8, #1
 800dc8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	f47f af6a 	bne.w	800db6a <_dtoa_r+0x7ca>
 800dc96:	2001      	movs	r0, #1
 800dc98:	e76f      	b.n	800db7a <_dtoa_r+0x7da>
 800dc9a:	f04f 0800 	mov.w	r8, #0
 800dc9e:	e7f6      	b.n	800dc8e <_dtoa_r+0x8ee>
 800dca0:	4698      	mov	r8, r3
 800dca2:	e7f4      	b.n	800dc8e <_dtoa_r+0x8ee>
 800dca4:	f43f af7d 	beq.w	800dba2 <_dtoa_r+0x802>
 800dca8:	4618      	mov	r0, r3
 800dcaa:	301c      	adds	r0, #28
 800dcac:	e772      	b.n	800db94 <_dtoa_r+0x7f4>
 800dcae:	9b03      	ldr	r3, [sp, #12]
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	dc37      	bgt.n	800dd24 <_dtoa_r+0x984>
 800dcb4:	9b06      	ldr	r3, [sp, #24]
 800dcb6:	2b02      	cmp	r3, #2
 800dcb8:	dd34      	ble.n	800dd24 <_dtoa_r+0x984>
 800dcba:	9b03      	ldr	r3, [sp, #12]
 800dcbc:	9302      	str	r3, [sp, #8]
 800dcbe:	9b02      	ldr	r3, [sp, #8]
 800dcc0:	b96b      	cbnz	r3, 800dcde <_dtoa_r+0x93e>
 800dcc2:	4631      	mov	r1, r6
 800dcc4:	2205      	movs	r2, #5
 800dcc6:	4620      	mov	r0, r4
 800dcc8:	f000 f9d8 	bl	800e07c <__multadd>
 800dccc:	4601      	mov	r1, r0
 800dcce:	4606      	mov	r6, r0
 800dcd0:	ee18 0a10 	vmov	r0, s16
 800dcd4:	f000 fbf2 	bl	800e4bc <__mcmp>
 800dcd8:	2800      	cmp	r0, #0
 800dcda:	f73f adbb 	bgt.w	800d854 <_dtoa_r+0x4b4>
 800dcde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dce0:	9d01      	ldr	r5, [sp, #4]
 800dce2:	43db      	mvns	r3, r3
 800dce4:	9300      	str	r3, [sp, #0]
 800dce6:	f04f 0800 	mov.w	r8, #0
 800dcea:	4631      	mov	r1, r6
 800dcec:	4620      	mov	r0, r4
 800dcee:	f000 f9a3 	bl	800e038 <_Bfree>
 800dcf2:	2f00      	cmp	r7, #0
 800dcf4:	f43f aea4 	beq.w	800da40 <_dtoa_r+0x6a0>
 800dcf8:	f1b8 0f00 	cmp.w	r8, #0
 800dcfc:	d005      	beq.n	800dd0a <_dtoa_r+0x96a>
 800dcfe:	45b8      	cmp	r8, r7
 800dd00:	d003      	beq.n	800dd0a <_dtoa_r+0x96a>
 800dd02:	4641      	mov	r1, r8
 800dd04:	4620      	mov	r0, r4
 800dd06:	f000 f997 	bl	800e038 <_Bfree>
 800dd0a:	4639      	mov	r1, r7
 800dd0c:	4620      	mov	r0, r4
 800dd0e:	f000 f993 	bl	800e038 <_Bfree>
 800dd12:	e695      	b.n	800da40 <_dtoa_r+0x6a0>
 800dd14:	2600      	movs	r6, #0
 800dd16:	4637      	mov	r7, r6
 800dd18:	e7e1      	b.n	800dcde <_dtoa_r+0x93e>
 800dd1a:	9700      	str	r7, [sp, #0]
 800dd1c:	4637      	mov	r7, r6
 800dd1e:	e599      	b.n	800d854 <_dtoa_r+0x4b4>
 800dd20:	40240000 	.word	0x40240000
 800dd24:	9b08      	ldr	r3, [sp, #32]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	f000 80ca 	beq.w	800dec0 <_dtoa_r+0xb20>
 800dd2c:	9b03      	ldr	r3, [sp, #12]
 800dd2e:	9302      	str	r3, [sp, #8]
 800dd30:	2d00      	cmp	r5, #0
 800dd32:	dd05      	ble.n	800dd40 <_dtoa_r+0x9a0>
 800dd34:	4639      	mov	r1, r7
 800dd36:	462a      	mov	r2, r5
 800dd38:	4620      	mov	r0, r4
 800dd3a:	f000 fb4f 	bl	800e3dc <__lshift>
 800dd3e:	4607      	mov	r7, r0
 800dd40:	f1b8 0f00 	cmp.w	r8, #0
 800dd44:	d05b      	beq.n	800ddfe <_dtoa_r+0xa5e>
 800dd46:	6879      	ldr	r1, [r7, #4]
 800dd48:	4620      	mov	r0, r4
 800dd4a:	f000 f935 	bl	800dfb8 <_Balloc>
 800dd4e:	4605      	mov	r5, r0
 800dd50:	b928      	cbnz	r0, 800dd5e <_dtoa_r+0x9be>
 800dd52:	4b87      	ldr	r3, [pc, #540]	; (800df70 <_dtoa_r+0xbd0>)
 800dd54:	4602      	mov	r2, r0
 800dd56:	f240 21ea 	movw	r1, #746	; 0x2ea
 800dd5a:	f7ff bb3b 	b.w	800d3d4 <_dtoa_r+0x34>
 800dd5e:	693a      	ldr	r2, [r7, #16]
 800dd60:	3202      	adds	r2, #2
 800dd62:	0092      	lsls	r2, r2, #2
 800dd64:	f107 010c 	add.w	r1, r7, #12
 800dd68:	300c      	adds	r0, #12
 800dd6a:	f7fe fce5 	bl	800c738 <memcpy>
 800dd6e:	2201      	movs	r2, #1
 800dd70:	4629      	mov	r1, r5
 800dd72:	4620      	mov	r0, r4
 800dd74:	f000 fb32 	bl	800e3dc <__lshift>
 800dd78:	9b01      	ldr	r3, [sp, #4]
 800dd7a:	f103 0901 	add.w	r9, r3, #1
 800dd7e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800dd82:	4413      	add	r3, r2
 800dd84:	9305      	str	r3, [sp, #20]
 800dd86:	f00a 0301 	and.w	r3, sl, #1
 800dd8a:	46b8      	mov	r8, r7
 800dd8c:	9304      	str	r3, [sp, #16]
 800dd8e:	4607      	mov	r7, r0
 800dd90:	4631      	mov	r1, r6
 800dd92:	ee18 0a10 	vmov	r0, s16
 800dd96:	f7ff fa75 	bl	800d284 <quorem>
 800dd9a:	4641      	mov	r1, r8
 800dd9c:	9002      	str	r0, [sp, #8]
 800dd9e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800dda2:	ee18 0a10 	vmov	r0, s16
 800dda6:	f000 fb89 	bl	800e4bc <__mcmp>
 800ddaa:	463a      	mov	r2, r7
 800ddac:	9003      	str	r0, [sp, #12]
 800ddae:	4631      	mov	r1, r6
 800ddb0:	4620      	mov	r0, r4
 800ddb2:	f000 fb9f 	bl	800e4f4 <__mdiff>
 800ddb6:	68c2      	ldr	r2, [r0, #12]
 800ddb8:	f109 3bff 	add.w	fp, r9, #4294967295
 800ddbc:	4605      	mov	r5, r0
 800ddbe:	bb02      	cbnz	r2, 800de02 <_dtoa_r+0xa62>
 800ddc0:	4601      	mov	r1, r0
 800ddc2:	ee18 0a10 	vmov	r0, s16
 800ddc6:	f000 fb79 	bl	800e4bc <__mcmp>
 800ddca:	4602      	mov	r2, r0
 800ddcc:	4629      	mov	r1, r5
 800ddce:	4620      	mov	r0, r4
 800ddd0:	9207      	str	r2, [sp, #28]
 800ddd2:	f000 f931 	bl	800e038 <_Bfree>
 800ddd6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ddda:	ea43 0102 	orr.w	r1, r3, r2
 800ddde:	9b04      	ldr	r3, [sp, #16]
 800dde0:	430b      	orrs	r3, r1
 800dde2:	464d      	mov	r5, r9
 800dde4:	d10f      	bne.n	800de06 <_dtoa_r+0xa66>
 800dde6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ddea:	d02a      	beq.n	800de42 <_dtoa_r+0xaa2>
 800ddec:	9b03      	ldr	r3, [sp, #12]
 800ddee:	2b00      	cmp	r3, #0
 800ddf0:	dd02      	ble.n	800ddf8 <_dtoa_r+0xa58>
 800ddf2:	9b02      	ldr	r3, [sp, #8]
 800ddf4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ddf8:	f88b a000 	strb.w	sl, [fp]
 800ddfc:	e775      	b.n	800dcea <_dtoa_r+0x94a>
 800ddfe:	4638      	mov	r0, r7
 800de00:	e7ba      	b.n	800dd78 <_dtoa_r+0x9d8>
 800de02:	2201      	movs	r2, #1
 800de04:	e7e2      	b.n	800ddcc <_dtoa_r+0xa2c>
 800de06:	9b03      	ldr	r3, [sp, #12]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	db04      	blt.n	800de16 <_dtoa_r+0xa76>
 800de0c:	9906      	ldr	r1, [sp, #24]
 800de0e:	430b      	orrs	r3, r1
 800de10:	9904      	ldr	r1, [sp, #16]
 800de12:	430b      	orrs	r3, r1
 800de14:	d122      	bne.n	800de5c <_dtoa_r+0xabc>
 800de16:	2a00      	cmp	r2, #0
 800de18:	ddee      	ble.n	800ddf8 <_dtoa_r+0xa58>
 800de1a:	ee18 1a10 	vmov	r1, s16
 800de1e:	2201      	movs	r2, #1
 800de20:	4620      	mov	r0, r4
 800de22:	f000 fadb 	bl	800e3dc <__lshift>
 800de26:	4631      	mov	r1, r6
 800de28:	ee08 0a10 	vmov	s16, r0
 800de2c:	f000 fb46 	bl	800e4bc <__mcmp>
 800de30:	2800      	cmp	r0, #0
 800de32:	dc03      	bgt.n	800de3c <_dtoa_r+0xa9c>
 800de34:	d1e0      	bne.n	800ddf8 <_dtoa_r+0xa58>
 800de36:	f01a 0f01 	tst.w	sl, #1
 800de3a:	d0dd      	beq.n	800ddf8 <_dtoa_r+0xa58>
 800de3c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800de40:	d1d7      	bne.n	800ddf2 <_dtoa_r+0xa52>
 800de42:	2339      	movs	r3, #57	; 0x39
 800de44:	f88b 3000 	strb.w	r3, [fp]
 800de48:	462b      	mov	r3, r5
 800de4a:	461d      	mov	r5, r3
 800de4c:	3b01      	subs	r3, #1
 800de4e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800de52:	2a39      	cmp	r2, #57	; 0x39
 800de54:	d071      	beq.n	800df3a <_dtoa_r+0xb9a>
 800de56:	3201      	adds	r2, #1
 800de58:	701a      	strb	r2, [r3, #0]
 800de5a:	e746      	b.n	800dcea <_dtoa_r+0x94a>
 800de5c:	2a00      	cmp	r2, #0
 800de5e:	dd07      	ble.n	800de70 <_dtoa_r+0xad0>
 800de60:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800de64:	d0ed      	beq.n	800de42 <_dtoa_r+0xaa2>
 800de66:	f10a 0301 	add.w	r3, sl, #1
 800de6a:	f88b 3000 	strb.w	r3, [fp]
 800de6e:	e73c      	b.n	800dcea <_dtoa_r+0x94a>
 800de70:	9b05      	ldr	r3, [sp, #20]
 800de72:	f809 ac01 	strb.w	sl, [r9, #-1]
 800de76:	4599      	cmp	r9, r3
 800de78:	d047      	beq.n	800df0a <_dtoa_r+0xb6a>
 800de7a:	ee18 1a10 	vmov	r1, s16
 800de7e:	2300      	movs	r3, #0
 800de80:	220a      	movs	r2, #10
 800de82:	4620      	mov	r0, r4
 800de84:	f000 f8fa 	bl	800e07c <__multadd>
 800de88:	45b8      	cmp	r8, r7
 800de8a:	ee08 0a10 	vmov	s16, r0
 800de8e:	f04f 0300 	mov.w	r3, #0
 800de92:	f04f 020a 	mov.w	r2, #10
 800de96:	4641      	mov	r1, r8
 800de98:	4620      	mov	r0, r4
 800de9a:	d106      	bne.n	800deaa <_dtoa_r+0xb0a>
 800de9c:	f000 f8ee 	bl	800e07c <__multadd>
 800dea0:	4680      	mov	r8, r0
 800dea2:	4607      	mov	r7, r0
 800dea4:	f109 0901 	add.w	r9, r9, #1
 800dea8:	e772      	b.n	800dd90 <_dtoa_r+0x9f0>
 800deaa:	f000 f8e7 	bl	800e07c <__multadd>
 800deae:	4639      	mov	r1, r7
 800deb0:	4680      	mov	r8, r0
 800deb2:	2300      	movs	r3, #0
 800deb4:	220a      	movs	r2, #10
 800deb6:	4620      	mov	r0, r4
 800deb8:	f000 f8e0 	bl	800e07c <__multadd>
 800debc:	4607      	mov	r7, r0
 800debe:	e7f1      	b.n	800dea4 <_dtoa_r+0xb04>
 800dec0:	9b03      	ldr	r3, [sp, #12]
 800dec2:	9302      	str	r3, [sp, #8]
 800dec4:	9d01      	ldr	r5, [sp, #4]
 800dec6:	ee18 0a10 	vmov	r0, s16
 800deca:	4631      	mov	r1, r6
 800decc:	f7ff f9da 	bl	800d284 <quorem>
 800ded0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ded4:	9b01      	ldr	r3, [sp, #4]
 800ded6:	f805 ab01 	strb.w	sl, [r5], #1
 800deda:	1aea      	subs	r2, r5, r3
 800dedc:	9b02      	ldr	r3, [sp, #8]
 800dede:	4293      	cmp	r3, r2
 800dee0:	dd09      	ble.n	800def6 <_dtoa_r+0xb56>
 800dee2:	ee18 1a10 	vmov	r1, s16
 800dee6:	2300      	movs	r3, #0
 800dee8:	220a      	movs	r2, #10
 800deea:	4620      	mov	r0, r4
 800deec:	f000 f8c6 	bl	800e07c <__multadd>
 800def0:	ee08 0a10 	vmov	s16, r0
 800def4:	e7e7      	b.n	800dec6 <_dtoa_r+0xb26>
 800def6:	9b02      	ldr	r3, [sp, #8]
 800def8:	2b00      	cmp	r3, #0
 800defa:	bfc8      	it	gt
 800defc:	461d      	movgt	r5, r3
 800defe:	9b01      	ldr	r3, [sp, #4]
 800df00:	bfd8      	it	le
 800df02:	2501      	movle	r5, #1
 800df04:	441d      	add	r5, r3
 800df06:	f04f 0800 	mov.w	r8, #0
 800df0a:	ee18 1a10 	vmov	r1, s16
 800df0e:	2201      	movs	r2, #1
 800df10:	4620      	mov	r0, r4
 800df12:	f000 fa63 	bl	800e3dc <__lshift>
 800df16:	4631      	mov	r1, r6
 800df18:	ee08 0a10 	vmov	s16, r0
 800df1c:	f000 face 	bl	800e4bc <__mcmp>
 800df20:	2800      	cmp	r0, #0
 800df22:	dc91      	bgt.n	800de48 <_dtoa_r+0xaa8>
 800df24:	d102      	bne.n	800df2c <_dtoa_r+0xb8c>
 800df26:	f01a 0f01 	tst.w	sl, #1
 800df2a:	d18d      	bne.n	800de48 <_dtoa_r+0xaa8>
 800df2c:	462b      	mov	r3, r5
 800df2e:	461d      	mov	r5, r3
 800df30:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800df34:	2a30      	cmp	r2, #48	; 0x30
 800df36:	d0fa      	beq.n	800df2e <_dtoa_r+0xb8e>
 800df38:	e6d7      	b.n	800dcea <_dtoa_r+0x94a>
 800df3a:	9a01      	ldr	r2, [sp, #4]
 800df3c:	429a      	cmp	r2, r3
 800df3e:	d184      	bne.n	800de4a <_dtoa_r+0xaaa>
 800df40:	9b00      	ldr	r3, [sp, #0]
 800df42:	3301      	adds	r3, #1
 800df44:	9300      	str	r3, [sp, #0]
 800df46:	2331      	movs	r3, #49	; 0x31
 800df48:	7013      	strb	r3, [r2, #0]
 800df4a:	e6ce      	b.n	800dcea <_dtoa_r+0x94a>
 800df4c:	4b09      	ldr	r3, [pc, #36]	; (800df74 <_dtoa_r+0xbd4>)
 800df4e:	f7ff ba95 	b.w	800d47c <_dtoa_r+0xdc>
 800df52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800df54:	2b00      	cmp	r3, #0
 800df56:	f47f aa6e 	bne.w	800d436 <_dtoa_r+0x96>
 800df5a:	4b07      	ldr	r3, [pc, #28]	; (800df78 <_dtoa_r+0xbd8>)
 800df5c:	f7ff ba8e 	b.w	800d47c <_dtoa_r+0xdc>
 800df60:	9b02      	ldr	r3, [sp, #8]
 800df62:	2b00      	cmp	r3, #0
 800df64:	dcae      	bgt.n	800dec4 <_dtoa_r+0xb24>
 800df66:	9b06      	ldr	r3, [sp, #24]
 800df68:	2b02      	cmp	r3, #2
 800df6a:	f73f aea8 	bgt.w	800dcbe <_dtoa_r+0x91e>
 800df6e:	e7a9      	b.n	800dec4 <_dtoa_r+0xb24>
 800df70:	08011999 	.word	0x08011999
 800df74:	0801175c 	.word	0x0801175c
 800df78:	08011931 	.word	0x08011931

0800df7c <fiprintf>:
 800df7c:	b40e      	push	{r1, r2, r3}
 800df7e:	b503      	push	{r0, r1, lr}
 800df80:	4601      	mov	r1, r0
 800df82:	ab03      	add	r3, sp, #12
 800df84:	4805      	ldr	r0, [pc, #20]	; (800df9c <fiprintf+0x20>)
 800df86:	f853 2b04 	ldr.w	r2, [r3], #4
 800df8a:	6800      	ldr	r0, [r0, #0]
 800df8c:	9301      	str	r3, [sp, #4]
 800df8e:	f000 fe13 	bl	800ebb8 <_vfiprintf_r>
 800df92:	b002      	add	sp, #8
 800df94:	f85d eb04 	ldr.w	lr, [sp], #4
 800df98:	b003      	add	sp, #12
 800df9a:	4770      	bx	lr
 800df9c:	20000028 	.word	0x20000028

0800dfa0 <_localeconv_r>:
 800dfa0:	4800      	ldr	r0, [pc, #0]	; (800dfa4 <_localeconv_r+0x4>)
 800dfa2:	4770      	bx	lr
 800dfa4:	2000017c 	.word	0x2000017c

0800dfa8 <malloc>:
 800dfa8:	4b02      	ldr	r3, [pc, #8]	; (800dfb4 <malloc+0xc>)
 800dfaa:	4601      	mov	r1, r0
 800dfac:	6818      	ldr	r0, [r3, #0]
 800dfae:	f000 bc09 	b.w	800e7c4 <_malloc_r>
 800dfb2:	bf00      	nop
 800dfb4:	20000028 	.word	0x20000028

0800dfb8 <_Balloc>:
 800dfb8:	b570      	push	{r4, r5, r6, lr}
 800dfba:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dfbc:	4604      	mov	r4, r0
 800dfbe:	460d      	mov	r5, r1
 800dfc0:	b976      	cbnz	r6, 800dfe0 <_Balloc+0x28>
 800dfc2:	2010      	movs	r0, #16
 800dfc4:	f7ff fff0 	bl	800dfa8 <malloc>
 800dfc8:	4602      	mov	r2, r0
 800dfca:	6260      	str	r0, [r4, #36]	; 0x24
 800dfcc:	b920      	cbnz	r0, 800dfd8 <_Balloc+0x20>
 800dfce:	4b18      	ldr	r3, [pc, #96]	; (800e030 <_Balloc+0x78>)
 800dfd0:	4818      	ldr	r0, [pc, #96]	; (800e034 <_Balloc+0x7c>)
 800dfd2:	2166      	movs	r1, #102	; 0x66
 800dfd4:	f7ff f938 	bl	800d248 <__assert_func>
 800dfd8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dfdc:	6006      	str	r6, [r0, #0]
 800dfde:	60c6      	str	r6, [r0, #12]
 800dfe0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800dfe2:	68f3      	ldr	r3, [r6, #12]
 800dfe4:	b183      	cbz	r3, 800e008 <_Balloc+0x50>
 800dfe6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dfe8:	68db      	ldr	r3, [r3, #12]
 800dfea:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dfee:	b9b8      	cbnz	r0, 800e020 <_Balloc+0x68>
 800dff0:	2101      	movs	r1, #1
 800dff2:	fa01 f605 	lsl.w	r6, r1, r5
 800dff6:	1d72      	adds	r2, r6, #5
 800dff8:	0092      	lsls	r2, r2, #2
 800dffa:	4620      	mov	r0, r4
 800dffc:	f000 fb60 	bl	800e6c0 <_calloc_r>
 800e000:	b160      	cbz	r0, 800e01c <_Balloc+0x64>
 800e002:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e006:	e00e      	b.n	800e026 <_Balloc+0x6e>
 800e008:	2221      	movs	r2, #33	; 0x21
 800e00a:	2104      	movs	r1, #4
 800e00c:	4620      	mov	r0, r4
 800e00e:	f000 fb57 	bl	800e6c0 <_calloc_r>
 800e012:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800e014:	60f0      	str	r0, [r6, #12]
 800e016:	68db      	ldr	r3, [r3, #12]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d1e4      	bne.n	800dfe6 <_Balloc+0x2e>
 800e01c:	2000      	movs	r0, #0
 800e01e:	bd70      	pop	{r4, r5, r6, pc}
 800e020:	6802      	ldr	r2, [r0, #0]
 800e022:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e026:	2300      	movs	r3, #0
 800e028:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e02c:	e7f7      	b.n	800e01e <_Balloc+0x66>
 800e02e:	bf00      	nop
 800e030:	08011780 	.word	0x08011780
 800e034:	080119aa 	.word	0x080119aa

0800e038 <_Bfree>:
 800e038:	b570      	push	{r4, r5, r6, lr}
 800e03a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800e03c:	4605      	mov	r5, r0
 800e03e:	460c      	mov	r4, r1
 800e040:	b976      	cbnz	r6, 800e060 <_Bfree+0x28>
 800e042:	2010      	movs	r0, #16
 800e044:	f7ff ffb0 	bl	800dfa8 <malloc>
 800e048:	4602      	mov	r2, r0
 800e04a:	6268      	str	r0, [r5, #36]	; 0x24
 800e04c:	b920      	cbnz	r0, 800e058 <_Bfree+0x20>
 800e04e:	4b09      	ldr	r3, [pc, #36]	; (800e074 <_Bfree+0x3c>)
 800e050:	4809      	ldr	r0, [pc, #36]	; (800e078 <_Bfree+0x40>)
 800e052:	218a      	movs	r1, #138	; 0x8a
 800e054:	f7ff f8f8 	bl	800d248 <__assert_func>
 800e058:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e05c:	6006      	str	r6, [r0, #0]
 800e05e:	60c6      	str	r6, [r0, #12]
 800e060:	b13c      	cbz	r4, 800e072 <_Bfree+0x3a>
 800e062:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800e064:	6862      	ldr	r2, [r4, #4]
 800e066:	68db      	ldr	r3, [r3, #12]
 800e068:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e06c:	6021      	str	r1, [r4, #0]
 800e06e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e072:	bd70      	pop	{r4, r5, r6, pc}
 800e074:	08011780 	.word	0x08011780
 800e078:	080119aa 	.word	0x080119aa

0800e07c <__multadd>:
 800e07c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e080:	690d      	ldr	r5, [r1, #16]
 800e082:	4607      	mov	r7, r0
 800e084:	460c      	mov	r4, r1
 800e086:	461e      	mov	r6, r3
 800e088:	f101 0c14 	add.w	ip, r1, #20
 800e08c:	2000      	movs	r0, #0
 800e08e:	f8dc 3000 	ldr.w	r3, [ip]
 800e092:	b299      	uxth	r1, r3
 800e094:	fb02 6101 	mla	r1, r2, r1, r6
 800e098:	0c1e      	lsrs	r6, r3, #16
 800e09a:	0c0b      	lsrs	r3, r1, #16
 800e09c:	fb02 3306 	mla	r3, r2, r6, r3
 800e0a0:	b289      	uxth	r1, r1
 800e0a2:	3001      	adds	r0, #1
 800e0a4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e0a8:	4285      	cmp	r5, r0
 800e0aa:	f84c 1b04 	str.w	r1, [ip], #4
 800e0ae:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e0b2:	dcec      	bgt.n	800e08e <__multadd+0x12>
 800e0b4:	b30e      	cbz	r6, 800e0fa <__multadd+0x7e>
 800e0b6:	68a3      	ldr	r3, [r4, #8]
 800e0b8:	42ab      	cmp	r3, r5
 800e0ba:	dc19      	bgt.n	800e0f0 <__multadd+0x74>
 800e0bc:	6861      	ldr	r1, [r4, #4]
 800e0be:	4638      	mov	r0, r7
 800e0c0:	3101      	adds	r1, #1
 800e0c2:	f7ff ff79 	bl	800dfb8 <_Balloc>
 800e0c6:	4680      	mov	r8, r0
 800e0c8:	b928      	cbnz	r0, 800e0d6 <__multadd+0x5a>
 800e0ca:	4602      	mov	r2, r0
 800e0cc:	4b0c      	ldr	r3, [pc, #48]	; (800e100 <__multadd+0x84>)
 800e0ce:	480d      	ldr	r0, [pc, #52]	; (800e104 <__multadd+0x88>)
 800e0d0:	21b5      	movs	r1, #181	; 0xb5
 800e0d2:	f7ff f8b9 	bl	800d248 <__assert_func>
 800e0d6:	6922      	ldr	r2, [r4, #16]
 800e0d8:	3202      	adds	r2, #2
 800e0da:	f104 010c 	add.w	r1, r4, #12
 800e0de:	0092      	lsls	r2, r2, #2
 800e0e0:	300c      	adds	r0, #12
 800e0e2:	f7fe fb29 	bl	800c738 <memcpy>
 800e0e6:	4621      	mov	r1, r4
 800e0e8:	4638      	mov	r0, r7
 800e0ea:	f7ff ffa5 	bl	800e038 <_Bfree>
 800e0ee:	4644      	mov	r4, r8
 800e0f0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e0f4:	3501      	adds	r5, #1
 800e0f6:	615e      	str	r6, [r3, #20]
 800e0f8:	6125      	str	r5, [r4, #16]
 800e0fa:	4620      	mov	r0, r4
 800e0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e100:	08011999 	.word	0x08011999
 800e104:	080119aa 	.word	0x080119aa

0800e108 <__hi0bits>:
 800e108:	0c03      	lsrs	r3, r0, #16
 800e10a:	041b      	lsls	r3, r3, #16
 800e10c:	b9d3      	cbnz	r3, 800e144 <__hi0bits+0x3c>
 800e10e:	0400      	lsls	r0, r0, #16
 800e110:	2310      	movs	r3, #16
 800e112:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e116:	bf04      	itt	eq
 800e118:	0200      	lsleq	r0, r0, #8
 800e11a:	3308      	addeq	r3, #8
 800e11c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e120:	bf04      	itt	eq
 800e122:	0100      	lsleq	r0, r0, #4
 800e124:	3304      	addeq	r3, #4
 800e126:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e12a:	bf04      	itt	eq
 800e12c:	0080      	lsleq	r0, r0, #2
 800e12e:	3302      	addeq	r3, #2
 800e130:	2800      	cmp	r0, #0
 800e132:	db05      	blt.n	800e140 <__hi0bits+0x38>
 800e134:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e138:	f103 0301 	add.w	r3, r3, #1
 800e13c:	bf08      	it	eq
 800e13e:	2320      	moveq	r3, #32
 800e140:	4618      	mov	r0, r3
 800e142:	4770      	bx	lr
 800e144:	2300      	movs	r3, #0
 800e146:	e7e4      	b.n	800e112 <__hi0bits+0xa>

0800e148 <__lo0bits>:
 800e148:	6803      	ldr	r3, [r0, #0]
 800e14a:	f013 0207 	ands.w	r2, r3, #7
 800e14e:	4601      	mov	r1, r0
 800e150:	d00b      	beq.n	800e16a <__lo0bits+0x22>
 800e152:	07da      	lsls	r2, r3, #31
 800e154:	d423      	bmi.n	800e19e <__lo0bits+0x56>
 800e156:	0798      	lsls	r0, r3, #30
 800e158:	bf49      	itett	mi
 800e15a:	085b      	lsrmi	r3, r3, #1
 800e15c:	089b      	lsrpl	r3, r3, #2
 800e15e:	2001      	movmi	r0, #1
 800e160:	600b      	strmi	r3, [r1, #0]
 800e162:	bf5c      	itt	pl
 800e164:	600b      	strpl	r3, [r1, #0]
 800e166:	2002      	movpl	r0, #2
 800e168:	4770      	bx	lr
 800e16a:	b298      	uxth	r0, r3
 800e16c:	b9a8      	cbnz	r0, 800e19a <__lo0bits+0x52>
 800e16e:	0c1b      	lsrs	r3, r3, #16
 800e170:	2010      	movs	r0, #16
 800e172:	b2da      	uxtb	r2, r3
 800e174:	b90a      	cbnz	r2, 800e17a <__lo0bits+0x32>
 800e176:	3008      	adds	r0, #8
 800e178:	0a1b      	lsrs	r3, r3, #8
 800e17a:	071a      	lsls	r2, r3, #28
 800e17c:	bf04      	itt	eq
 800e17e:	091b      	lsreq	r3, r3, #4
 800e180:	3004      	addeq	r0, #4
 800e182:	079a      	lsls	r2, r3, #30
 800e184:	bf04      	itt	eq
 800e186:	089b      	lsreq	r3, r3, #2
 800e188:	3002      	addeq	r0, #2
 800e18a:	07da      	lsls	r2, r3, #31
 800e18c:	d403      	bmi.n	800e196 <__lo0bits+0x4e>
 800e18e:	085b      	lsrs	r3, r3, #1
 800e190:	f100 0001 	add.w	r0, r0, #1
 800e194:	d005      	beq.n	800e1a2 <__lo0bits+0x5a>
 800e196:	600b      	str	r3, [r1, #0]
 800e198:	4770      	bx	lr
 800e19a:	4610      	mov	r0, r2
 800e19c:	e7e9      	b.n	800e172 <__lo0bits+0x2a>
 800e19e:	2000      	movs	r0, #0
 800e1a0:	4770      	bx	lr
 800e1a2:	2020      	movs	r0, #32
 800e1a4:	4770      	bx	lr
	...

0800e1a8 <__i2b>:
 800e1a8:	b510      	push	{r4, lr}
 800e1aa:	460c      	mov	r4, r1
 800e1ac:	2101      	movs	r1, #1
 800e1ae:	f7ff ff03 	bl	800dfb8 <_Balloc>
 800e1b2:	4602      	mov	r2, r0
 800e1b4:	b928      	cbnz	r0, 800e1c2 <__i2b+0x1a>
 800e1b6:	4b05      	ldr	r3, [pc, #20]	; (800e1cc <__i2b+0x24>)
 800e1b8:	4805      	ldr	r0, [pc, #20]	; (800e1d0 <__i2b+0x28>)
 800e1ba:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e1be:	f7ff f843 	bl	800d248 <__assert_func>
 800e1c2:	2301      	movs	r3, #1
 800e1c4:	6144      	str	r4, [r0, #20]
 800e1c6:	6103      	str	r3, [r0, #16]
 800e1c8:	bd10      	pop	{r4, pc}
 800e1ca:	bf00      	nop
 800e1cc:	08011999 	.word	0x08011999
 800e1d0:	080119aa 	.word	0x080119aa

0800e1d4 <__multiply>:
 800e1d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e1d8:	4691      	mov	r9, r2
 800e1da:	690a      	ldr	r2, [r1, #16]
 800e1dc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e1e0:	429a      	cmp	r2, r3
 800e1e2:	bfb8      	it	lt
 800e1e4:	460b      	movlt	r3, r1
 800e1e6:	460c      	mov	r4, r1
 800e1e8:	bfbc      	itt	lt
 800e1ea:	464c      	movlt	r4, r9
 800e1ec:	4699      	movlt	r9, r3
 800e1ee:	6927      	ldr	r7, [r4, #16]
 800e1f0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e1f4:	68a3      	ldr	r3, [r4, #8]
 800e1f6:	6861      	ldr	r1, [r4, #4]
 800e1f8:	eb07 060a 	add.w	r6, r7, sl
 800e1fc:	42b3      	cmp	r3, r6
 800e1fe:	b085      	sub	sp, #20
 800e200:	bfb8      	it	lt
 800e202:	3101      	addlt	r1, #1
 800e204:	f7ff fed8 	bl	800dfb8 <_Balloc>
 800e208:	b930      	cbnz	r0, 800e218 <__multiply+0x44>
 800e20a:	4602      	mov	r2, r0
 800e20c:	4b44      	ldr	r3, [pc, #272]	; (800e320 <__multiply+0x14c>)
 800e20e:	4845      	ldr	r0, [pc, #276]	; (800e324 <__multiply+0x150>)
 800e210:	f240 115d 	movw	r1, #349	; 0x15d
 800e214:	f7ff f818 	bl	800d248 <__assert_func>
 800e218:	f100 0514 	add.w	r5, r0, #20
 800e21c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800e220:	462b      	mov	r3, r5
 800e222:	2200      	movs	r2, #0
 800e224:	4543      	cmp	r3, r8
 800e226:	d321      	bcc.n	800e26c <__multiply+0x98>
 800e228:	f104 0314 	add.w	r3, r4, #20
 800e22c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800e230:	f109 0314 	add.w	r3, r9, #20
 800e234:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800e238:	9202      	str	r2, [sp, #8]
 800e23a:	1b3a      	subs	r2, r7, r4
 800e23c:	3a15      	subs	r2, #21
 800e23e:	f022 0203 	bic.w	r2, r2, #3
 800e242:	3204      	adds	r2, #4
 800e244:	f104 0115 	add.w	r1, r4, #21
 800e248:	428f      	cmp	r7, r1
 800e24a:	bf38      	it	cc
 800e24c:	2204      	movcc	r2, #4
 800e24e:	9201      	str	r2, [sp, #4]
 800e250:	9a02      	ldr	r2, [sp, #8]
 800e252:	9303      	str	r3, [sp, #12]
 800e254:	429a      	cmp	r2, r3
 800e256:	d80c      	bhi.n	800e272 <__multiply+0x9e>
 800e258:	2e00      	cmp	r6, #0
 800e25a:	dd03      	ble.n	800e264 <__multiply+0x90>
 800e25c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e260:	2b00      	cmp	r3, #0
 800e262:	d05a      	beq.n	800e31a <__multiply+0x146>
 800e264:	6106      	str	r6, [r0, #16]
 800e266:	b005      	add	sp, #20
 800e268:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e26c:	f843 2b04 	str.w	r2, [r3], #4
 800e270:	e7d8      	b.n	800e224 <__multiply+0x50>
 800e272:	f8b3 a000 	ldrh.w	sl, [r3]
 800e276:	f1ba 0f00 	cmp.w	sl, #0
 800e27a:	d024      	beq.n	800e2c6 <__multiply+0xf2>
 800e27c:	f104 0e14 	add.w	lr, r4, #20
 800e280:	46a9      	mov	r9, r5
 800e282:	f04f 0c00 	mov.w	ip, #0
 800e286:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e28a:	f8d9 1000 	ldr.w	r1, [r9]
 800e28e:	fa1f fb82 	uxth.w	fp, r2
 800e292:	b289      	uxth	r1, r1
 800e294:	fb0a 110b 	mla	r1, sl, fp, r1
 800e298:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e29c:	f8d9 2000 	ldr.w	r2, [r9]
 800e2a0:	4461      	add	r1, ip
 800e2a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e2a6:	fb0a c20b 	mla	r2, sl, fp, ip
 800e2aa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e2ae:	b289      	uxth	r1, r1
 800e2b0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e2b4:	4577      	cmp	r7, lr
 800e2b6:	f849 1b04 	str.w	r1, [r9], #4
 800e2ba:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e2be:	d8e2      	bhi.n	800e286 <__multiply+0xb2>
 800e2c0:	9a01      	ldr	r2, [sp, #4]
 800e2c2:	f845 c002 	str.w	ip, [r5, r2]
 800e2c6:	9a03      	ldr	r2, [sp, #12]
 800e2c8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e2cc:	3304      	adds	r3, #4
 800e2ce:	f1b9 0f00 	cmp.w	r9, #0
 800e2d2:	d020      	beq.n	800e316 <__multiply+0x142>
 800e2d4:	6829      	ldr	r1, [r5, #0]
 800e2d6:	f104 0c14 	add.w	ip, r4, #20
 800e2da:	46ae      	mov	lr, r5
 800e2dc:	f04f 0a00 	mov.w	sl, #0
 800e2e0:	f8bc b000 	ldrh.w	fp, [ip]
 800e2e4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e2e8:	fb09 220b 	mla	r2, r9, fp, r2
 800e2ec:	4492      	add	sl, r2
 800e2ee:	b289      	uxth	r1, r1
 800e2f0:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e2f4:	f84e 1b04 	str.w	r1, [lr], #4
 800e2f8:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e2fc:	f8be 1000 	ldrh.w	r1, [lr]
 800e300:	0c12      	lsrs	r2, r2, #16
 800e302:	fb09 1102 	mla	r1, r9, r2, r1
 800e306:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e30a:	4567      	cmp	r7, ip
 800e30c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e310:	d8e6      	bhi.n	800e2e0 <__multiply+0x10c>
 800e312:	9a01      	ldr	r2, [sp, #4]
 800e314:	50a9      	str	r1, [r5, r2]
 800e316:	3504      	adds	r5, #4
 800e318:	e79a      	b.n	800e250 <__multiply+0x7c>
 800e31a:	3e01      	subs	r6, #1
 800e31c:	e79c      	b.n	800e258 <__multiply+0x84>
 800e31e:	bf00      	nop
 800e320:	08011999 	.word	0x08011999
 800e324:	080119aa 	.word	0x080119aa

0800e328 <__pow5mult>:
 800e328:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e32c:	4615      	mov	r5, r2
 800e32e:	f012 0203 	ands.w	r2, r2, #3
 800e332:	4606      	mov	r6, r0
 800e334:	460f      	mov	r7, r1
 800e336:	d007      	beq.n	800e348 <__pow5mult+0x20>
 800e338:	4c25      	ldr	r4, [pc, #148]	; (800e3d0 <__pow5mult+0xa8>)
 800e33a:	3a01      	subs	r2, #1
 800e33c:	2300      	movs	r3, #0
 800e33e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e342:	f7ff fe9b 	bl	800e07c <__multadd>
 800e346:	4607      	mov	r7, r0
 800e348:	10ad      	asrs	r5, r5, #2
 800e34a:	d03d      	beq.n	800e3c8 <__pow5mult+0xa0>
 800e34c:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e34e:	b97c      	cbnz	r4, 800e370 <__pow5mult+0x48>
 800e350:	2010      	movs	r0, #16
 800e352:	f7ff fe29 	bl	800dfa8 <malloc>
 800e356:	4602      	mov	r2, r0
 800e358:	6270      	str	r0, [r6, #36]	; 0x24
 800e35a:	b928      	cbnz	r0, 800e368 <__pow5mult+0x40>
 800e35c:	4b1d      	ldr	r3, [pc, #116]	; (800e3d4 <__pow5mult+0xac>)
 800e35e:	481e      	ldr	r0, [pc, #120]	; (800e3d8 <__pow5mult+0xb0>)
 800e360:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e364:	f7fe ff70 	bl	800d248 <__assert_func>
 800e368:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e36c:	6004      	str	r4, [r0, #0]
 800e36e:	60c4      	str	r4, [r0, #12]
 800e370:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e374:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e378:	b94c      	cbnz	r4, 800e38e <__pow5mult+0x66>
 800e37a:	f240 2171 	movw	r1, #625	; 0x271
 800e37e:	4630      	mov	r0, r6
 800e380:	f7ff ff12 	bl	800e1a8 <__i2b>
 800e384:	2300      	movs	r3, #0
 800e386:	f8c8 0008 	str.w	r0, [r8, #8]
 800e38a:	4604      	mov	r4, r0
 800e38c:	6003      	str	r3, [r0, #0]
 800e38e:	f04f 0900 	mov.w	r9, #0
 800e392:	07eb      	lsls	r3, r5, #31
 800e394:	d50a      	bpl.n	800e3ac <__pow5mult+0x84>
 800e396:	4639      	mov	r1, r7
 800e398:	4622      	mov	r2, r4
 800e39a:	4630      	mov	r0, r6
 800e39c:	f7ff ff1a 	bl	800e1d4 <__multiply>
 800e3a0:	4639      	mov	r1, r7
 800e3a2:	4680      	mov	r8, r0
 800e3a4:	4630      	mov	r0, r6
 800e3a6:	f7ff fe47 	bl	800e038 <_Bfree>
 800e3aa:	4647      	mov	r7, r8
 800e3ac:	106d      	asrs	r5, r5, #1
 800e3ae:	d00b      	beq.n	800e3c8 <__pow5mult+0xa0>
 800e3b0:	6820      	ldr	r0, [r4, #0]
 800e3b2:	b938      	cbnz	r0, 800e3c4 <__pow5mult+0x9c>
 800e3b4:	4622      	mov	r2, r4
 800e3b6:	4621      	mov	r1, r4
 800e3b8:	4630      	mov	r0, r6
 800e3ba:	f7ff ff0b 	bl	800e1d4 <__multiply>
 800e3be:	6020      	str	r0, [r4, #0]
 800e3c0:	f8c0 9000 	str.w	r9, [r0]
 800e3c4:	4604      	mov	r4, r0
 800e3c6:	e7e4      	b.n	800e392 <__pow5mult+0x6a>
 800e3c8:	4638      	mov	r0, r7
 800e3ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e3ce:	bf00      	nop
 800e3d0:	08011af8 	.word	0x08011af8
 800e3d4:	08011780 	.word	0x08011780
 800e3d8:	080119aa 	.word	0x080119aa

0800e3dc <__lshift>:
 800e3dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e3e0:	460c      	mov	r4, r1
 800e3e2:	6849      	ldr	r1, [r1, #4]
 800e3e4:	6923      	ldr	r3, [r4, #16]
 800e3e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e3ea:	68a3      	ldr	r3, [r4, #8]
 800e3ec:	4607      	mov	r7, r0
 800e3ee:	4691      	mov	r9, r2
 800e3f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e3f4:	f108 0601 	add.w	r6, r8, #1
 800e3f8:	42b3      	cmp	r3, r6
 800e3fa:	db0b      	blt.n	800e414 <__lshift+0x38>
 800e3fc:	4638      	mov	r0, r7
 800e3fe:	f7ff fddb 	bl	800dfb8 <_Balloc>
 800e402:	4605      	mov	r5, r0
 800e404:	b948      	cbnz	r0, 800e41a <__lshift+0x3e>
 800e406:	4602      	mov	r2, r0
 800e408:	4b2a      	ldr	r3, [pc, #168]	; (800e4b4 <__lshift+0xd8>)
 800e40a:	482b      	ldr	r0, [pc, #172]	; (800e4b8 <__lshift+0xdc>)
 800e40c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e410:	f7fe ff1a 	bl	800d248 <__assert_func>
 800e414:	3101      	adds	r1, #1
 800e416:	005b      	lsls	r3, r3, #1
 800e418:	e7ee      	b.n	800e3f8 <__lshift+0x1c>
 800e41a:	2300      	movs	r3, #0
 800e41c:	f100 0114 	add.w	r1, r0, #20
 800e420:	f100 0210 	add.w	r2, r0, #16
 800e424:	4618      	mov	r0, r3
 800e426:	4553      	cmp	r3, sl
 800e428:	db37      	blt.n	800e49a <__lshift+0xbe>
 800e42a:	6920      	ldr	r0, [r4, #16]
 800e42c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e430:	f104 0314 	add.w	r3, r4, #20
 800e434:	f019 091f 	ands.w	r9, r9, #31
 800e438:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e43c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e440:	d02f      	beq.n	800e4a2 <__lshift+0xc6>
 800e442:	f1c9 0e20 	rsb	lr, r9, #32
 800e446:	468a      	mov	sl, r1
 800e448:	f04f 0c00 	mov.w	ip, #0
 800e44c:	681a      	ldr	r2, [r3, #0]
 800e44e:	fa02 f209 	lsl.w	r2, r2, r9
 800e452:	ea42 020c 	orr.w	r2, r2, ip
 800e456:	f84a 2b04 	str.w	r2, [sl], #4
 800e45a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e45e:	4298      	cmp	r0, r3
 800e460:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e464:	d8f2      	bhi.n	800e44c <__lshift+0x70>
 800e466:	1b03      	subs	r3, r0, r4
 800e468:	3b15      	subs	r3, #21
 800e46a:	f023 0303 	bic.w	r3, r3, #3
 800e46e:	3304      	adds	r3, #4
 800e470:	f104 0215 	add.w	r2, r4, #21
 800e474:	4290      	cmp	r0, r2
 800e476:	bf38      	it	cc
 800e478:	2304      	movcc	r3, #4
 800e47a:	f841 c003 	str.w	ip, [r1, r3]
 800e47e:	f1bc 0f00 	cmp.w	ip, #0
 800e482:	d001      	beq.n	800e488 <__lshift+0xac>
 800e484:	f108 0602 	add.w	r6, r8, #2
 800e488:	3e01      	subs	r6, #1
 800e48a:	4638      	mov	r0, r7
 800e48c:	612e      	str	r6, [r5, #16]
 800e48e:	4621      	mov	r1, r4
 800e490:	f7ff fdd2 	bl	800e038 <_Bfree>
 800e494:	4628      	mov	r0, r5
 800e496:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e49a:	f842 0f04 	str.w	r0, [r2, #4]!
 800e49e:	3301      	adds	r3, #1
 800e4a0:	e7c1      	b.n	800e426 <__lshift+0x4a>
 800e4a2:	3904      	subs	r1, #4
 800e4a4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4a8:	f841 2f04 	str.w	r2, [r1, #4]!
 800e4ac:	4298      	cmp	r0, r3
 800e4ae:	d8f9      	bhi.n	800e4a4 <__lshift+0xc8>
 800e4b0:	e7ea      	b.n	800e488 <__lshift+0xac>
 800e4b2:	bf00      	nop
 800e4b4:	08011999 	.word	0x08011999
 800e4b8:	080119aa 	.word	0x080119aa

0800e4bc <__mcmp>:
 800e4bc:	b530      	push	{r4, r5, lr}
 800e4be:	6902      	ldr	r2, [r0, #16]
 800e4c0:	690c      	ldr	r4, [r1, #16]
 800e4c2:	1b12      	subs	r2, r2, r4
 800e4c4:	d10e      	bne.n	800e4e4 <__mcmp+0x28>
 800e4c6:	f100 0314 	add.w	r3, r0, #20
 800e4ca:	3114      	adds	r1, #20
 800e4cc:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e4d0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e4d4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e4d8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e4dc:	42a5      	cmp	r5, r4
 800e4de:	d003      	beq.n	800e4e8 <__mcmp+0x2c>
 800e4e0:	d305      	bcc.n	800e4ee <__mcmp+0x32>
 800e4e2:	2201      	movs	r2, #1
 800e4e4:	4610      	mov	r0, r2
 800e4e6:	bd30      	pop	{r4, r5, pc}
 800e4e8:	4283      	cmp	r3, r0
 800e4ea:	d3f3      	bcc.n	800e4d4 <__mcmp+0x18>
 800e4ec:	e7fa      	b.n	800e4e4 <__mcmp+0x28>
 800e4ee:	f04f 32ff 	mov.w	r2, #4294967295
 800e4f2:	e7f7      	b.n	800e4e4 <__mcmp+0x28>

0800e4f4 <__mdiff>:
 800e4f4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4f8:	460c      	mov	r4, r1
 800e4fa:	4606      	mov	r6, r0
 800e4fc:	4611      	mov	r1, r2
 800e4fe:	4620      	mov	r0, r4
 800e500:	4690      	mov	r8, r2
 800e502:	f7ff ffdb 	bl	800e4bc <__mcmp>
 800e506:	1e05      	subs	r5, r0, #0
 800e508:	d110      	bne.n	800e52c <__mdiff+0x38>
 800e50a:	4629      	mov	r1, r5
 800e50c:	4630      	mov	r0, r6
 800e50e:	f7ff fd53 	bl	800dfb8 <_Balloc>
 800e512:	b930      	cbnz	r0, 800e522 <__mdiff+0x2e>
 800e514:	4b3a      	ldr	r3, [pc, #232]	; (800e600 <__mdiff+0x10c>)
 800e516:	4602      	mov	r2, r0
 800e518:	f240 2132 	movw	r1, #562	; 0x232
 800e51c:	4839      	ldr	r0, [pc, #228]	; (800e604 <__mdiff+0x110>)
 800e51e:	f7fe fe93 	bl	800d248 <__assert_func>
 800e522:	2301      	movs	r3, #1
 800e524:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e528:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e52c:	bfa4      	itt	ge
 800e52e:	4643      	movge	r3, r8
 800e530:	46a0      	movge	r8, r4
 800e532:	4630      	mov	r0, r6
 800e534:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e538:	bfa6      	itte	ge
 800e53a:	461c      	movge	r4, r3
 800e53c:	2500      	movge	r5, #0
 800e53e:	2501      	movlt	r5, #1
 800e540:	f7ff fd3a 	bl	800dfb8 <_Balloc>
 800e544:	b920      	cbnz	r0, 800e550 <__mdiff+0x5c>
 800e546:	4b2e      	ldr	r3, [pc, #184]	; (800e600 <__mdiff+0x10c>)
 800e548:	4602      	mov	r2, r0
 800e54a:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e54e:	e7e5      	b.n	800e51c <__mdiff+0x28>
 800e550:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e554:	6926      	ldr	r6, [r4, #16]
 800e556:	60c5      	str	r5, [r0, #12]
 800e558:	f104 0914 	add.w	r9, r4, #20
 800e55c:	f108 0514 	add.w	r5, r8, #20
 800e560:	f100 0e14 	add.w	lr, r0, #20
 800e564:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e568:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e56c:	f108 0210 	add.w	r2, r8, #16
 800e570:	46f2      	mov	sl, lr
 800e572:	2100      	movs	r1, #0
 800e574:	f859 3b04 	ldr.w	r3, [r9], #4
 800e578:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e57c:	fa1f f883 	uxth.w	r8, r3
 800e580:	fa11 f18b 	uxtah	r1, r1, fp
 800e584:	0c1b      	lsrs	r3, r3, #16
 800e586:	eba1 0808 	sub.w	r8, r1, r8
 800e58a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e58e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e592:	fa1f f888 	uxth.w	r8, r8
 800e596:	1419      	asrs	r1, r3, #16
 800e598:	454e      	cmp	r6, r9
 800e59a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e59e:	f84a 3b04 	str.w	r3, [sl], #4
 800e5a2:	d8e7      	bhi.n	800e574 <__mdiff+0x80>
 800e5a4:	1b33      	subs	r3, r6, r4
 800e5a6:	3b15      	subs	r3, #21
 800e5a8:	f023 0303 	bic.w	r3, r3, #3
 800e5ac:	3304      	adds	r3, #4
 800e5ae:	3415      	adds	r4, #21
 800e5b0:	42a6      	cmp	r6, r4
 800e5b2:	bf38      	it	cc
 800e5b4:	2304      	movcc	r3, #4
 800e5b6:	441d      	add	r5, r3
 800e5b8:	4473      	add	r3, lr
 800e5ba:	469e      	mov	lr, r3
 800e5bc:	462e      	mov	r6, r5
 800e5be:	4566      	cmp	r6, ip
 800e5c0:	d30e      	bcc.n	800e5e0 <__mdiff+0xec>
 800e5c2:	f10c 0203 	add.w	r2, ip, #3
 800e5c6:	1b52      	subs	r2, r2, r5
 800e5c8:	f022 0203 	bic.w	r2, r2, #3
 800e5cc:	3d03      	subs	r5, #3
 800e5ce:	45ac      	cmp	ip, r5
 800e5d0:	bf38      	it	cc
 800e5d2:	2200      	movcc	r2, #0
 800e5d4:	441a      	add	r2, r3
 800e5d6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e5da:	b17b      	cbz	r3, 800e5fc <__mdiff+0x108>
 800e5dc:	6107      	str	r7, [r0, #16]
 800e5de:	e7a3      	b.n	800e528 <__mdiff+0x34>
 800e5e0:	f856 8b04 	ldr.w	r8, [r6], #4
 800e5e4:	fa11 f288 	uxtah	r2, r1, r8
 800e5e8:	1414      	asrs	r4, r2, #16
 800e5ea:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e5ee:	b292      	uxth	r2, r2
 800e5f0:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e5f4:	f84e 2b04 	str.w	r2, [lr], #4
 800e5f8:	1421      	asrs	r1, r4, #16
 800e5fa:	e7e0      	b.n	800e5be <__mdiff+0xca>
 800e5fc:	3f01      	subs	r7, #1
 800e5fe:	e7ea      	b.n	800e5d6 <__mdiff+0xe2>
 800e600:	08011999 	.word	0x08011999
 800e604:	080119aa 	.word	0x080119aa

0800e608 <__d2b>:
 800e608:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e60c:	4689      	mov	r9, r1
 800e60e:	2101      	movs	r1, #1
 800e610:	ec57 6b10 	vmov	r6, r7, d0
 800e614:	4690      	mov	r8, r2
 800e616:	f7ff fccf 	bl	800dfb8 <_Balloc>
 800e61a:	4604      	mov	r4, r0
 800e61c:	b930      	cbnz	r0, 800e62c <__d2b+0x24>
 800e61e:	4602      	mov	r2, r0
 800e620:	4b25      	ldr	r3, [pc, #148]	; (800e6b8 <__d2b+0xb0>)
 800e622:	4826      	ldr	r0, [pc, #152]	; (800e6bc <__d2b+0xb4>)
 800e624:	f240 310a 	movw	r1, #778	; 0x30a
 800e628:	f7fe fe0e 	bl	800d248 <__assert_func>
 800e62c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e630:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e634:	bb35      	cbnz	r5, 800e684 <__d2b+0x7c>
 800e636:	2e00      	cmp	r6, #0
 800e638:	9301      	str	r3, [sp, #4]
 800e63a:	d028      	beq.n	800e68e <__d2b+0x86>
 800e63c:	4668      	mov	r0, sp
 800e63e:	9600      	str	r6, [sp, #0]
 800e640:	f7ff fd82 	bl	800e148 <__lo0bits>
 800e644:	9900      	ldr	r1, [sp, #0]
 800e646:	b300      	cbz	r0, 800e68a <__d2b+0x82>
 800e648:	9a01      	ldr	r2, [sp, #4]
 800e64a:	f1c0 0320 	rsb	r3, r0, #32
 800e64e:	fa02 f303 	lsl.w	r3, r2, r3
 800e652:	430b      	orrs	r3, r1
 800e654:	40c2      	lsrs	r2, r0
 800e656:	6163      	str	r3, [r4, #20]
 800e658:	9201      	str	r2, [sp, #4]
 800e65a:	9b01      	ldr	r3, [sp, #4]
 800e65c:	61a3      	str	r3, [r4, #24]
 800e65e:	2b00      	cmp	r3, #0
 800e660:	bf14      	ite	ne
 800e662:	2202      	movne	r2, #2
 800e664:	2201      	moveq	r2, #1
 800e666:	6122      	str	r2, [r4, #16]
 800e668:	b1d5      	cbz	r5, 800e6a0 <__d2b+0x98>
 800e66a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e66e:	4405      	add	r5, r0
 800e670:	f8c9 5000 	str.w	r5, [r9]
 800e674:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e678:	f8c8 0000 	str.w	r0, [r8]
 800e67c:	4620      	mov	r0, r4
 800e67e:	b003      	add	sp, #12
 800e680:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e688:	e7d5      	b.n	800e636 <__d2b+0x2e>
 800e68a:	6161      	str	r1, [r4, #20]
 800e68c:	e7e5      	b.n	800e65a <__d2b+0x52>
 800e68e:	a801      	add	r0, sp, #4
 800e690:	f7ff fd5a 	bl	800e148 <__lo0bits>
 800e694:	9b01      	ldr	r3, [sp, #4]
 800e696:	6163      	str	r3, [r4, #20]
 800e698:	2201      	movs	r2, #1
 800e69a:	6122      	str	r2, [r4, #16]
 800e69c:	3020      	adds	r0, #32
 800e69e:	e7e3      	b.n	800e668 <__d2b+0x60>
 800e6a0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e6a4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e6a8:	f8c9 0000 	str.w	r0, [r9]
 800e6ac:	6918      	ldr	r0, [r3, #16]
 800e6ae:	f7ff fd2b 	bl	800e108 <__hi0bits>
 800e6b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e6b6:	e7df      	b.n	800e678 <__d2b+0x70>
 800e6b8:	08011999 	.word	0x08011999
 800e6bc:	080119aa 	.word	0x080119aa

0800e6c0 <_calloc_r>:
 800e6c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e6c2:	fba1 2402 	umull	r2, r4, r1, r2
 800e6c6:	b94c      	cbnz	r4, 800e6dc <_calloc_r+0x1c>
 800e6c8:	4611      	mov	r1, r2
 800e6ca:	9201      	str	r2, [sp, #4]
 800e6cc:	f000 f87a 	bl	800e7c4 <_malloc_r>
 800e6d0:	9a01      	ldr	r2, [sp, #4]
 800e6d2:	4605      	mov	r5, r0
 800e6d4:	b930      	cbnz	r0, 800e6e4 <_calloc_r+0x24>
 800e6d6:	4628      	mov	r0, r5
 800e6d8:	b003      	add	sp, #12
 800e6da:	bd30      	pop	{r4, r5, pc}
 800e6dc:	220c      	movs	r2, #12
 800e6de:	6002      	str	r2, [r0, #0]
 800e6e0:	2500      	movs	r5, #0
 800e6e2:	e7f8      	b.n	800e6d6 <_calloc_r+0x16>
 800e6e4:	4621      	mov	r1, r4
 800e6e6:	f7fe f835 	bl	800c754 <memset>
 800e6ea:	e7f4      	b.n	800e6d6 <_calloc_r+0x16>

0800e6ec <_free_r>:
 800e6ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e6ee:	2900      	cmp	r1, #0
 800e6f0:	d044      	beq.n	800e77c <_free_r+0x90>
 800e6f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6f6:	9001      	str	r0, [sp, #4]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	f1a1 0404 	sub.w	r4, r1, #4
 800e6fe:	bfb8      	it	lt
 800e700:	18e4      	addlt	r4, r4, r3
 800e702:	f000 fead 	bl	800f460 <__malloc_lock>
 800e706:	4a1e      	ldr	r2, [pc, #120]	; (800e780 <_free_r+0x94>)
 800e708:	9801      	ldr	r0, [sp, #4]
 800e70a:	6813      	ldr	r3, [r2, #0]
 800e70c:	b933      	cbnz	r3, 800e71c <_free_r+0x30>
 800e70e:	6063      	str	r3, [r4, #4]
 800e710:	6014      	str	r4, [r2, #0]
 800e712:	b003      	add	sp, #12
 800e714:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e718:	f000 bea8 	b.w	800f46c <__malloc_unlock>
 800e71c:	42a3      	cmp	r3, r4
 800e71e:	d908      	bls.n	800e732 <_free_r+0x46>
 800e720:	6825      	ldr	r5, [r4, #0]
 800e722:	1961      	adds	r1, r4, r5
 800e724:	428b      	cmp	r3, r1
 800e726:	bf01      	itttt	eq
 800e728:	6819      	ldreq	r1, [r3, #0]
 800e72a:	685b      	ldreq	r3, [r3, #4]
 800e72c:	1949      	addeq	r1, r1, r5
 800e72e:	6021      	streq	r1, [r4, #0]
 800e730:	e7ed      	b.n	800e70e <_free_r+0x22>
 800e732:	461a      	mov	r2, r3
 800e734:	685b      	ldr	r3, [r3, #4]
 800e736:	b10b      	cbz	r3, 800e73c <_free_r+0x50>
 800e738:	42a3      	cmp	r3, r4
 800e73a:	d9fa      	bls.n	800e732 <_free_r+0x46>
 800e73c:	6811      	ldr	r1, [r2, #0]
 800e73e:	1855      	adds	r5, r2, r1
 800e740:	42a5      	cmp	r5, r4
 800e742:	d10b      	bne.n	800e75c <_free_r+0x70>
 800e744:	6824      	ldr	r4, [r4, #0]
 800e746:	4421      	add	r1, r4
 800e748:	1854      	adds	r4, r2, r1
 800e74a:	42a3      	cmp	r3, r4
 800e74c:	6011      	str	r1, [r2, #0]
 800e74e:	d1e0      	bne.n	800e712 <_free_r+0x26>
 800e750:	681c      	ldr	r4, [r3, #0]
 800e752:	685b      	ldr	r3, [r3, #4]
 800e754:	6053      	str	r3, [r2, #4]
 800e756:	4421      	add	r1, r4
 800e758:	6011      	str	r1, [r2, #0]
 800e75a:	e7da      	b.n	800e712 <_free_r+0x26>
 800e75c:	d902      	bls.n	800e764 <_free_r+0x78>
 800e75e:	230c      	movs	r3, #12
 800e760:	6003      	str	r3, [r0, #0]
 800e762:	e7d6      	b.n	800e712 <_free_r+0x26>
 800e764:	6825      	ldr	r5, [r4, #0]
 800e766:	1961      	adds	r1, r4, r5
 800e768:	428b      	cmp	r3, r1
 800e76a:	bf04      	itt	eq
 800e76c:	6819      	ldreq	r1, [r3, #0]
 800e76e:	685b      	ldreq	r3, [r3, #4]
 800e770:	6063      	str	r3, [r4, #4]
 800e772:	bf04      	itt	eq
 800e774:	1949      	addeq	r1, r1, r5
 800e776:	6021      	streq	r1, [r4, #0]
 800e778:	6054      	str	r4, [r2, #4]
 800e77a:	e7ca      	b.n	800e712 <_free_r+0x26>
 800e77c:	b003      	add	sp, #12
 800e77e:	bd30      	pop	{r4, r5, pc}
 800e780:	20005320 	.word	0x20005320

0800e784 <sbrk_aligned>:
 800e784:	b570      	push	{r4, r5, r6, lr}
 800e786:	4e0e      	ldr	r6, [pc, #56]	; (800e7c0 <sbrk_aligned+0x3c>)
 800e788:	460c      	mov	r4, r1
 800e78a:	6831      	ldr	r1, [r6, #0]
 800e78c:	4605      	mov	r5, r0
 800e78e:	b911      	cbnz	r1, 800e796 <sbrk_aligned+0x12>
 800e790:	f000 fb42 	bl	800ee18 <_sbrk_r>
 800e794:	6030      	str	r0, [r6, #0]
 800e796:	4621      	mov	r1, r4
 800e798:	4628      	mov	r0, r5
 800e79a:	f000 fb3d 	bl	800ee18 <_sbrk_r>
 800e79e:	1c43      	adds	r3, r0, #1
 800e7a0:	d00a      	beq.n	800e7b8 <sbrk_aligned+0x34>
 800e7a2:	1cc4      	adds	r4, r0, #3
 800e7a4:	f024 0403 	bic.w	r4, r4, #3
 800e7a8:	42a0      	cmp	r0, r4
 800e7aa:	d007      	beq.n	800e7bc <sbrk_aligned+0x38>
 800e7ac:	1a21      	subs	r1, r4, r0
 800e7ae:	4628      	mov	r0, r5
 800e7b0:	f000 fb32 	bl	800ee18 <_sbrk_r>
 800e7b4:	3001      	adds	r0, #1
 800e7b6:	d101      	bne.n	800e7bc <sbrk_aligned+0x38>
 800e7b8:	f04f 34ff 	mov.w	r4, #4294967295
 800e7bc:	4620      	mov	r0, r4
 800e7be:	bd70      	pop	{r4, r5, r6, pc}
 800e7c0:	20005324 	.word	0x20005324

0800e7c4 <_malloc_r>:
 800e7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7c8:	1ccd      	adds	r5, r1, #3
 800e7ca:	f025 0503 	bic.w	r5, r5, #3
 800e7ce:	3508      	adds	r5, #8
 800e7d0:	2d0c      	cmp	r5, #12
 800e7d2:	bf38      	it	cc
 800e7d4:	250c      	movcc	r5, #12
 800e7d6:	2d00      	cmp	r5, #0
 800e7d8:	4607      	mov	r7, r0
 800e7da:	db01      	blt.n	800e7e0 <_malloc_r+0x1c>
 800e7dc:	42a9      	cmp	r1, r5
 800e7de:	d905      	bls.n	800e7ec <_malloc_r+0x28>
 800e7e0:	230c      	movs	r3, #12
 800e7e2:	603b      	str	r3, [r7, #0]
 800e7e4:	2600      	movs	r6, #0
 800e7e6:	4630      	mov	r0, r6
 800e7e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7ec:	4e2e      	ldr	r6, [pc, #184]	; (800e8a8 <_malloc_r+0xe4>)
 800e7ee:	f000 fe37 	bl	800f460 <__malloc_lock>
 800e7f2:	6833      	ldr	r3, [r6, #0]
 800e7f4:	461c      	mov	r4, r3
 800e7f6:	bb34      	cbnz	r4, 800e846 <_malloc_r+0x82>
 800e7f8:	4629      	mov	r1, r5
 800e7fa:	4638      	mov	r0, r7
 800e7fc:	f7ff ffc2 	bl	800e784 <sbrk_aligned>
 800e800:	1c43      	adds	r3, r0, #1
 800e802:	4604      	mov	r4, r0
 800e804:	d14d      	bne.n	800e8a2 <_malloc_r+0xde>
 800e806:	6834      	ldr	r4, [r6, #0]
 800e808:	4626      	mov	r6, r4
 800e80a:	2e00      	cmp	r6, #0
 800e80c:	d140      	bne.n	800e890 <_malloc_r+0xcc>
 800e80e:	6823      	ldr	r3, [r4, #0]
 800e810:	4631      	mov	r1, r6
 800e812:	4638      	mov	r0, r7
 800e814:	eb04 0803 	add.w	r8, r4, r3
 800e818:	f000 fafe 	bl	800ee18 <_sbrk_r>
 800e81c:	4580      	cmp	r8, r0
 800e81e:	d13a      	bne.n	800e896 <_malloc_r+0xd2>
 800e820:	6821      	ldr	r1, [r4, #0]
 800e822:	3503      	adds	r5, #3
 800e824:	1a6d      	subs	r5, r5, r1
 800e826:	f025 0503 	bic.w	r5, r5, #3
 800e82a:	3508      	adds	r5, #8
 800e82c:	2d0c      	cmp	r5, #12
 800e82e:	bf38      	it	cc
 800e830:	250c      	movcc	r5, #12
 800e832:	4629      	mov	r1, r5
 800e834:	4638      	mov	r0, r7
 800e836:	f7ff ffa5 	bl	800e784 <sbrk_aligned>
 800e83a:	3001      	adds	r0, #1
 800e83c:	d02b      	beq.n	800e896 <_malloc_r+0xd2>
 800e83e:	6823      	ldr	r3, [r4, #0]
 800e840:	442b      	add	r3, r5
 800e842:	6023      	str	r3, [r4, #0]
 800e844:	e00e      	b.n	800e864 <_malloc_r+0xa0>
 800e846:	6822      	ldr	r2, [r4, #0]
 800e848:	1b52      	subs	r2, r2, r5
 800e84a:	d41e      	bmi.n	800e88a <_malloc_r+0xc6>
 800e84c:	2a0b      	cmp	r2, #11
 800e84e:	d916      	bls.n	800e87e <_malloc_r+0xba>
 800e850:	1961      	adds	r1, r4, r5
 800e852:	42a3      	cmp	r3, r4
 800e854:	6025      	str	r5, [r4, #0]
 800e856:	bf18      	it	ne
 800e858:	6059      	strne	r1, [r3, #4]
 800e85a:	6863      	ldr	r3, [r4, #4]
 800e85c:	bf08      	it	eq
 800e85e:	6031      	streq	r1, [r6, #0]
 800e860:	5162      	str	r2, [r4, r5]
 800e862:	604b      	str	r3, [r1, #4]
 800e864:	4638      	mov	r0, r7
 800e866:	f104 060b 	add.w	r6, r4, #11
 800e86a:	f000 fdff 	bl	800f46c <__malloc_unlock>
 800e86e:	f026 0607 	bic.w	r6, r6, #7
 800e872:	1d23      	adds	r3, r4, #4
 800e874:	1af2      	subs	r2, r6, r3
 800e876:	d0b6      	beq.n	800e7e6 <_malloc_r+0x22>
 800e878:	1b9b      	subs	r3, r3, r6
 800e87a:	50a3      	str	r3, [r4, r2]
 800e87c:	e7b3      	b.n	800e7e6 <_malloc_r+0x22>
 800e87e:	6862      	ldr	r2, [r4, #4]
 800e880:	42a3      	cmp	r3, r4
 800e882:	bf0c      	ite	eq
 800e884:	6032      	streq	r2, [r6, #0]
 800e886:	605a      	strne	r2, [r3, #4]
 800e888:	e7ec      	b.n	800e864 <_malloc_r+0xa0>
 800e88a:	4623      	mov	r3, r4
 800e88c:	6864      	ldr	r4, [r4, #4]
 800e88e:	e7b2      	b.n	800e7f6 <_malloc_r+0x32>
 800e890:	4634      	mov	r4, r6
 800e892:	6876      	ldr	r6, [r6, #4]
 800e894:	e7b9      	b.n	800e80a <_malloc_r+0x46>
 800e896:	230c      	movs	r3, #12
 800e898:	603b      	str	r3, [r7, #0]
 800e89a:	4638      	mov	r0, r7
 800e89c:	f000 fde6 	bl	800f46c <__malloc_unlock>
 800e8a0:	e7a1      	b.n	800e7e6 <_malloc_r+0x22>
 800e8a2:	6025      	str	r5, [r4, #0]
 800e8a4:	e7de      	b.n	800e864 <_malloc_r+0xa0>
 800e8a6:	bf00      	nop
 800e8a8:	20005320 	.word	0x20005320

0800e8ac <__ssputs_r>:
 800e8ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e8b0:	688e      	ldr	r6, [r1, #8]
 800e8b2:	429e      	cmp	r6, r3
 800e8b4:	4682      	mov	sl, r0
 800e8b6:	460c      	mov	r4, r1
 800e8b8:	4690      	mov	r8, r2
 800e8ba:	461f      	mov	r7, r3
 800e8bc:	d838      	bhi.n	800e930 <__ssputs_r+0x84>
 800e8be:	898a      	ldrh	r2, [r1, #12]
 800e8c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e8c4:	d032      	beq.n	800e92c <__ssputs_r+0x80>
 800e8c6:	6825      	ldr	r5, [r4, #0]
 800e8c8:	6909      	ldr	r1, [r1, #16]
 800e8ca:	eba5 0901 	sub.w	r9, r5, r1
 800e8ce:	6965      	ldr	r5, [r4, #20]
 800e8d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e8d4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e8d8:	3301      	adds	r3, #1
 800e8da:	444b      	add	r3, r9
 800e8dc:	106d      	asrs	r5, r5, #1
 800e8de:	429d      	cmp	r5, r3
 800e8e0:	bf38      	it	cc
 800e8e2:	461d      	movcc	r5, r3
 800e8e4:	0553      	lsls	r3, r2, #21
 800e8e6:	d531      	bpl.n	800e94c <__ssputs_r+0xa0>
 800e8e8:	4629      	mov	r1, r5
 800e8ea:	f7ff ff6b 	bl	800e7c4 <_malloc_r>
 800e8ee:	4606      	mov	r6, r0
 800e8f0:	b950      	cbnz	r0, 800e908 <__ssputs_r+0x5c>
 800e8f2:	230c      	movs	r3, #12
 800e8f4:	f8ca 3000 	str.w	r3, [sl]
 800e8f8:	89a3      	ldrh	r3, [r4, #12]
 800e8fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8fe:	81a3      	strh	r3, [r4, #12]
 800e900:	f04f 30ff 	mov.w	r0, #4294967295
 800e904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e908:	6921      	ldr	r1, [r4, #16]
 800e90a:	464a      	mov	r2, r9
 800e90c:	f7fd ff14 	bl	800c738 <memcpy>
 800e910:	89a3      	ldrh	r3, [r4, #12]
 800e912:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e916:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e91a:	81a3      	strh	r3, [r4, #12]
 800e91c:	6126      	str	r6, [r4, #16]
 800e91e:	6165      	str	r5, [r4, #20]
 800e920:	444e      	add	r6, r9
 800e922:	eba5 0509 	sub.w	r5, r5, r9
 800e926:	6026      	str	r6, [r4, #0]
 800e928:	60a5      	str	r5, [r4, #8]
 800e92a:	463e      	mov	r6, r7
 800e92c:	42be      	cmp	r6, r7
 800e92e:	d900      	bls.n	800e932 <__ssputs_r+0x86>
 800e930:	463e      	mov	r6, r7
 800e932:	6820      	ldr	r0, [r4, #0]
 800e934:	4632      	mov	r2, r6
 800e936:	4641      	mov	r1, r8
 800e938:	f000 fd78 	bl	800f42c <memmove>
 800e93c:	68a3      	ldr	r3, [r4, #8]
 800e93e:	1b9b      	subs	r3, r3, r6
 800e940:	60a3      	str	r3, [r4, #8]
 800e942:	6823      	ldr	r3, [r4, #0]
 800e944:	4433      	add	r3, r6
 800e946:	6023      	str	r3, [r4, #0]
 800e948:	2000      	movs	r0, #0
 800e94a:	e7db      	b.n	800e904 <__ssputs_r+0x58>
 800e94c:	462a      	mov	r2, r5
 800e94e:	f000 fd93 	bl	800f478 <_realloc_r>
 800e952:	4606      	mov	r6, r0
 800e954:	2800      	cmp	r0, #0
 800e956:	d1e1      	bne.n	800e91c <__ssputs_r+0x70>
 800e958:	6921      	ldr	r1, [r4, #16]
 800e95a:	4650      	mov	r0, sl
 800e95c:	f7ff fec6 	bl	800e6ec <_free_r>
 800e960:	e7c7      	b.n	800e8f2 <__ssputs_r+0x46>
	...

0800e964 <_svfiprintf_r>:
 800e964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e968:	4698      	mov	r8, r3
 800e96a:	898b      	ldrh	r3, [r1, #12]
 800e96c:	061b      	lsls	r3, r3, #24
 800e96e:	b09d      	sub	sp, #116	; 0x74
 800e970:	4607      	mov	r7, r0
 800e972:	460d      	mov	r5, r1
 800e974:	4614      	mov	r4, r2
 800e976:	d50e      	bpl.n	800e996 <_svfiprintf_r+0x32>
 800e978:	690b      	ldr	r3, [r1, #16]
 800e97a:	b963      	cbnz	r3, 800e996 <_svfiprintf_r+0x32>
 800e97c:	2140      	movs	r1, #64	; 0x40
 800e97e:	f7ff ff21 	bl	800e7c4 <_malloc_r>
 800e982:	6028      	str	r0, [r5, #0]
 800e984:	6128      	str	r0, [r5, #16]
 800e986:	b920      	cbnz	r0, 800e992 <_svfiprintf_r+0x2e>
 800e988:	230c      	movs	r3, #12
 800e98a:	603b      	str	r3, [r7, #0]
 800e98c:	f04f 30ff 	mov.w	r0, #4294967295
 800e990:	e0d1      	b.n	800eb36 <_svfiprintf_r+0x1d2>
 800e992:	2340      	movs	r3, #64	; 0x40
 800e994:	616b      	str	r3, [r5, #20]
 800e996:	2300      	movs	r3, #0
 800e998:	9309      	str	r3, [sp, #36]	; 0x24
 800e99a:	2320      	movs	r3, #32
 800e99c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e9a0:	f8cd 800c 	str.w	r8, [sp, #12]
 800e9a4:	2330      	movs	r3, #48	; 0x30
 800e9a6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800eb50 <_svfiprintf_r+0x1ec>
 800e9aa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e9ae:	f04f 0901 	mov.w	r9, #1
 800e9b2:	4623      	mov	r3, r4
 800e9b4:	469a      	mov	sl, r3
 800e9b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e9ba:	b10a      	cbz	r2, 800e9c0 <_svfiprintf_r+0x5c>
 800e9bc:	2a25      	cmp	r2, #37	; 0x25
 800e9be:	d1f9      	bne.n	800e9b4 <_svfiprintf_r+0x50>
 800e9c0:	ebba 0b04 	subs.w	fp, sl, r4
 800e9c4:	d00b      	beq.n	800e9de <_svfiprintf_r+0x7a>
 800e9c6:	465b      	mov	r3, fp
 800e9c8:	4622      	mov	r2, r4
 800e9ca:	4629      	mov	r1, r5
 800e9cc:	4638      	mov	r0, r7
 800e9ce:	f7ff ff6d 	bl	800e8ac <__ssputs_r>
 800e9d2:	3001      	adds	r0, #1
 800e9d4:	f000 80aa 	beq.w	800eb2c <_svfiprintf_r+0x1c8>
 800e9d8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e9da:	445a      	add	r2, fp
 800e9dc:	9209      	str	r2, [sp, #36]	; 0x24
 800e9de:	f89a 3000 	ldrb.w	r3, [sl]
 800e9e2:	2b00      	cmp	r3, #0
 800e9e4:	f000 80a2 	beq.w	800eb2c <_svfiprintf_r+0x1c8>
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	f04f 32ff 	mov.w	r2, #4294967295
 800e9ee:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e9f2:	f10a 0a01 	add.w	sl, sl, #1
 800e9f6:	9304      	str	r3, [sp, #16]
 800e9f8:	9307      	str	r3, [sp, #28]
 800e9fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e9fe:	931a      	str	r3, [sp, #104]	; 0x68
 800ea00:	4654      	mov	r4, sl
 800ea02:	2205      	movs	r2, #5
 800ea04:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea08:	4851      	ldr	r0, [pc, #324]	; (800eb50 <_svfiprintf_r+0x1ec>)
 800ea0a:	f7f1 fbe9 	bl	80001e0 <memchr>
 800ea0e:	9a04      	ldr	r2, [sp, #16]
 800ea10:	b9d8      	cbnz	r0, 800ea4a <_svfiprintf_r+0xe6>
 800ea12:	06d0      	lsls	r0, r2, #27
 800ea14:	bf44      	itt	mi
 800ea16:	2320      	movmi	r3, #32
 800ea18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea1c:	0711      	lsls	r1, r2, #28
 800ea1e:	bf44      	itt	mi
 800ea20:	232b      	movmi	r3, #43	; 0x2b
 800ea22:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ea26:	f89a 3000 	ldrb.w	r3, [sl]
 800ea2a:	2b2a      	cmp	r3, #42	; 0x2a
 800ea2c:	d015      	beq.n	800ea5a <_svfiprintf_r+0xf6>
 800ea2e:	9a07      	ldr	r2, [sp, #28]
 800ea30:	4654      	mov	r4, sl
 800ea32:	2000      	movs	r0, #0
 800ea34:	f04f 0c0a 	mov.w	ip, #10
 800ea38:	4621      	mov	r1, r4
 800ea3a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ea3e:	3b30      	subs	r3, #48	; 0x30
 800ea40:	2b09      	cmp	r3, #9
 800ea42:	d94e      	bls.n	800eae2 <_svfiprintf_r+0x17e>
 800ea44:	b1b0      	cbz	r0, 800ea74 <_svfiprintf_r+0x110>
 800ea46:	9207      	str	r2, [sp, #28]
 800ea48:	e014      	b.n	800ea74 <_svfiprintf_r+0x110>
 800ea4a:	eba0 0308 	sub.w	r3, r0, r8
 800ea4e:	fa09 f303 	lsl.w	r3, r9, r3
 800ea52:	4313      	orrs	r3, r2
 800ea54:	9304      	str	r3, [sp, #16]
 800ea56:	46a2      	mov	sl, r4
 800ea58:	e7d2      	b.n	800ea00 <_svfiprintf_r+0x9c>
 800ea5a:	9b03      	ldr	r3, [sp, #12]
 800ea5c:	1d19      	adds	r1, r3, #4
 800ea5e:	681b      	ldr	r3, [r3, #0]
 800ea60:	9103      	str	r1, [sp, #12]
 800ea62:	2b00      	cmp	r3, #0
 800ea64:	bfbb      	ittet	lt
 800ea66:	425b      	neglt	r3, r3
 800ea68:	f042 0202 	orrlt.w	r2, r2, #2
 800ea6c:	9307      	strge	r3, [sp, #28]
 800ea6e:	9307      	strlt	r3, [sp, #28]
 800ea70:	bfb8      	it	lt
 800ea72:	9204      	strlt	r2, [sp, #16]
 800ea74:	7823      	ldrb	r3, [r4, #0]
 800ea76:	2b2e      	cmp	r3, #46	; 0x2e
 800ea78:	d10c      	bne.n	800ea94 <_svfiprintf_r+0x130>
 800ea7a:	7863      	ldrb	r3, [r4, #1]
 800ea7c:	2b2a      	cmp	r3, #42	; 0x2a
 800ea7e:	d135      	bne.n	800eaec <_svfiprintf_r+0x188>
 800ea80:	9b03      	ldr	r3, [sp, #12]
 800ea82:	1d1a      	adds	r2, r3, #4
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	9203      	str	r2, [sp, #12]
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	bfb8      	it	lt
 800ea8c:	f04f 33ff 	movlt.w	r3, #4294967295
 800ea90:	3402      	adds	r4, #2
 800ea92:	9305      	str	r3, [sp, #20]
 800ea94:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800eb60 <_svfiprintf_r+0x1fc>
 800ea98:	7821      	ldrb	r1, [r4, #0]
 800ea9a:	2203      	movs	r2, #3
 800ea9c:	4650      	mov	r0, sl
 800ea9e:	f7f1 fb9f 	bl	80001e0 <memchr>
 800eaa2:	b140      	cbz	r0, 800eab6 <_svfiprintf_r+0x152>
 800eaa4:	2340      	movs	r3, #64	; 0x40
 800eaa6:	eba0 000a 	sub.w	r0, r0, sl
 800eaaa:	fa03 f000 	lsl.w	r0, r3, r0
 800eaae:	9b04      	ldr	r3, [sp, #16]
 800eab0:	4303      	orrs	r3, r0
 800eab2:	3401      	adds	r4, #1
 800eab4:	9304      	str	r3, [sp, #16]
 800eab6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eaba:	4826      	ldr	r0, [pc, #152]	; (800eb54 <_svfiprintf_r+0x1f0>)
 800eabc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800eac0:	2206      	movs	r2, #6
 800eac2:	f7f1 fb8d 	bl	80001e0 <memchr>
 800eac6:	2800      	cmp	r0, #0
 800eac8:	d038      	beq.n	800eb3c <_svfiprintf_r+0x1d8>
 800eaca:	4b23      	ldr	r3, [pc, #140]	; (800eb58 <_svfiprintf_r+0x1f4>)
 800eacc:	bb1b      	cbnz	r3, 800eb16 <_svfiprintf_r+0x1b2>
 800eace:	9b03      	ldr	r3, [sp, #12]
 800ead0:	3307      	adds	r3, #7
 800ead2:	f023 0307 	bic.w	r3, r3, #7
 800ead6:	3308      	adds	r3, #8
 800ead8:	9303      	str	r3, [sp, #12]
 800eada:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800eadc:	4433      	add	r3, r6
 800eade:	9309      	str	r3, [sp, #36]	; 0x24
 800eae0:	e767      	b.n	800e9b2 <_svfiprintf_r+0x4e>
 800eae2:	fb0c 3202 	mla	r2, ip, r2, r3
 800eae6:	460c      	mov	r4, r1
 800eae8:	2001      	movs	r0, #1
 800eaea:	e7a5      	b.n	800ea38 <_svfiprintf_r+0xd4>
 800eaec:	2300      	movs	r3, #0
 800eaee:	3401      	adds	r4, #1
 800eaf0:	9305      	str	r3, [sp, #20]
 800eaf2:	4619      	mov	r1, r3
 800eaf4:	f04f 0c0a 	mov.w	ip, #10
 800eaf8:	4620      	mov	r0, r4
 800eafa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eafe:	3a30      	subs	r2, #48	; 0x30
 800eb00:	2a09      	cmp	r2, #9
 800eb02:	d903      	bls.n	800eb0c <_svfiprintf_r+0x1a8>
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d0c5      	beq.n	800ea94 <_svfiprintf_r+0x130>
 800eb08:	9105      	str	r1, [sp, #20]
 800eb0a:	e7c3      	b.n	800ea94 <_svfiprintf_r+0x130>
 800eb0c:	fb0c 2101 	mla	r1, ip, r1, r2
 800eb10:	4604      	mov	r4, r0
 800eb12:	2301      	movs	r3, #1
 800eb14:	e7f0      	b.n	800eaf8 <_svfiprintf_r+0x194>
 800eb16:	ab03      	add	r3, sp, #12
 800eb18:	9300      	str	r3, [sp, #0]
 800eb1a:	462a      	mov	r2, r5
 800eb1c:	4b0f      	ldr	r3, [pc, #60]	; (800eb5c <_svfiprintf_r+0x1f8>)
 800eb1e:	a904      	add	r1, sp, #16
 800eb20:	4638      	mov	r0, r7
 800eb22:	f7fd febf 	bl	800c8a4 <_printf_float>
 800eb26:	1c42      	adds	r2, r0, #1
 800eb28:	4606      	mov	r6, r0
 800eb2a:	d1d6      	bne.n	800eada <_svfiprintf_r+0x176>
 800eb2c:	89ab      	ldrh	r3, [r5, #12]
 800eb2e:	065b      	lsls	r3, r3, #25
 800eb30:	f53f af2c 	bmi.w	800e98c <_svfiprintf_r+0x28>
 800eb34:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eb36:	b01d      	add	sp, #116	; 0x74
 800eb38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb3c:	ab03      	add	r3, sp, #12
 800eb3e:	9300      	str	r3, [sp, #0]
 800eb40:	462a      	mov	r2, r5
 800eb42:	4b06      	ldr	r3, [pc, #24]	; (800eb5c <_svfiprintf_r+0x1f8>)
 800eb44:	a904      	add	r1, sp, #16
 800eb46:	4638      	mov	r0, r7
 800eb48:	f7fe f950 	bl	800cdec <_printf_i>
 800eb4c:	e7eb      	b.n	800eb26 <_svfiprintf_r+0x1c2>
 800eb4e:	bf00      	nop
 800eb50:	08011b04 	.word	0x08011b04
 800eb54:	08011b0e 	.word	0x08011b0e
 800eb58:	0800c8a5 	.word	0x0800c8a5
 800eb5c:	0800e8ad 	.word	0x0800e8ad
 800eb60:	08011b0a 	.word	0x08011b0a

0800eb64 <__sfputc_r>:
 800eb64:	6893      	ldr	r3, [r2, #8]
 800eb66:	3b01      	subs	r3, #1
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	b410      	push	{r4}
 800eb6c:	6093      	str	r3, [r2, #8]
 800eb6e:	da08      	bge.n	800eb82 <__sfputc_r+0x1e>
 800eb70:	6994      	ldr	r4, [r2, #24]
 800eb72:	42a3      	cmp	r3, r4
 800eb74:	db01      	blt.n	800eb7a <__sfputc_r+0x16>
 800eb76:	290a      	cmp	r1, #10
 800eb78:	d103      	bne.n	800eb82 <__sfputc_r+0x1e>
 800eb7a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb7e:	f000 b95b 	b.w	800ee38 <__swbuf_r>
 800eb82:	6813      	ldr	r3, [r2, #0]
 800eb84:	1c58      	adds	r0, r3, #1
 800eb86:	6010      	str	r0, [r2, #0]
 800eb88:	7019      	strb	r1, [r3, #0]
 800eb8a:	4608      	mov	r0, r1
 800eb8c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb90:	4770      	bx	lr

0800eb92 <__sfputs_r>:
 800eb92:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb94:	4606      	mov	r6, r0
 800eb96:	460f      	mov	r7, r1
 800eb98:	4614      	mov	r4, r2
 800eb9a:	18d5      	adds	r5, r2, r3
 800eb9c:	42ac      	cmp	r4, r5
 800eb9e:	d101      	bne.n	800eba4 <__sfputs_r+0x12>
 800eba0:	2000      	movs	r0, #0
 800eba2:	e007      	b.n	800ebb4 <__sfputs_r+0x22>
 800eba4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eba8:	463a      	mov	r2, r7
 800ebaa:	4630      	mov	r0, r6
 800ebac:	f7ff ffda 	bl	800eb64 <__sfputc_r>
 800ebb0:	1c43      	adds	r3, r0, #1
 800ebb2:	d1f3      	bne.n	800eb9c <__sfputs_r+0xa>
 800ebb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ebb8 <_vfiprintf_r>:
 800ebb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebbc:	460d      	mov	r5, r1
 800ebbe:	b09d      	sub	sp, #116	; 0x74
 800ebc0:	4614      	mov	r4, r2
 800ebc2:	4698      	mov	r8, r3
 800ebc4:	4606      	mov	r6, r0
 800ebc6:	b118      	cbz	r0, 800ebd0 <_vfiprintf_r+0x18>
 800ebc8:	6983      	ldr	r3, [r0, #24]
 800ebca:	b90b      	cbnz	r3, 800ebd0 <_vfiprintf_r+0x18>
 800ebcc:	f000 fb16 	bl	800f1fc <__sinit>
 800ebd0:	4b89      	ldr	r3, [pc, #548]	; (800edf8 <_vfiprintf_r+0x240>)
 800ebd2:	429d      	cmp	r5, r3
 800ebd4:	d11b      	bne.n	800ec0e <_vfiprintf_r+0x56>
 800ebd6:	6875      	ldr	r5, [r6, #4]
 800ebd8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ebda:	07d9      	lsls	r1, r3, #31
 800ebdc:	d405      	bmi.n	800ebea <_vfiprintf_r+0x32>
 800ebde:	89ab      	ldrh	r3, [r5, #12]
 800ebe0:	059a      	lsls	r2, r3, #22
 800ebe2:	d402      	bmi.n	800ebea <_vfiprintf_r+0x32>
 800ebe4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ebe6:	f000 fba7 	bl	800f338 <__retarget_lock_acquire_recursive>
 800ebea:	89ab      	ldrh	r3, [r5, #12]
 800ebec:	071b      	lsls	r3, r3, #28
 800ebee:	d501      	bpl.n	800ebf4 <_vfiprintf_r+0x3c>
 800ebf0:	692b      	ldr	r3, [r5, #16]
 800ebf2:	b9eb      	cbnz	r3, 800ec30 <_vfiprintf_r+0x78>
 800ebf4:	4629      	mov	r1, r5
 800ebf6:	4630      	mov	r0, r6
 800ebf8:	f000 f970 	bl	800eedc <__swsetup_r>
 800ebfc:	b1c0      	cbz	r0, 800ec30 <_vfiprintf_r+0x78>
 800ebfe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ec00:	07dc      	lsls	r4, r3, #31
 800ec02:	d50e      	bpl.n	800ec22 <_vfiprintf_r+0x6a>
 800ec04:	f04f 30ff 	mov.w	r0, #4294967295
 800ec08:	b01d      	add	sp, #116	; 0x74
 800ec0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec0e:	4b7b      	ldr	r3, [pc, #492]	; (800edfc <_vfiprintf_r+0x244>)
 800ec10:	429d      	cmp	r5, r3
 800ec12:	d101      	bne.n	800ec18 <_vfiprintf_r+0x60>
 800ec14:	68b5      	ldr	r5, [r6, #8]
 800ec16:	e7df      	b.n	800ebd8 <_vfiprintf_r+0x20>
 800ec18:	4b79      	ldr	r3, [pc, #484]	; (800ee00 <_vfiprintf_r+0x248>)
 800ec1a:	429d      	cmp	r5, r3
 800ec1c:	bf08      	it	eq
 800ec1e:	68f5      	ldreq	r5, [r6, #12]
 800ec20:	e7da      	b.n	800ebd8 <_vfiprintf_r+0x20>
 800ec22:	89ab      	ldrh	r3, [r5, #12]
 800ec24:	0598      	lsls	r0, r3, #22
 800ec26:	d4ed      	bmi.n	800ec04 <_vfiprintf_r+0x4c>
 800ec28:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ec2a:	f000 fb86 	bl	800f33a <__retarget_lock_release_recursive>
 800ec2e:	e7e9      	b.n	800ec04 <_vfiprintf_r+0x4c>
 800ec30:	2300      	movs	r3, #0
 800ec32:	9309      	str	r3, [sp, #36]	; 0x24
 800ec34:	2320      	movs	r3, #32
 800ec36:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ec3a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ec3e:	2330      	movs	r3, #48	; 0x30
 800ec40:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ee04 <_vfiprintf_r+0x24c>
 800ec44:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ec48:	f04f 0901 	mov.w	r9, #1
 800ec4c:	4623      	mov	r3, r4
 800ec4e:	469a      	mov	sl, r3
 800ec50:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec54:	b10a      	cbz	r2, 800ec5a <_vfiprintf_r+0xa2>
 800ec56:	2a25      	cmp	r2, #37	; 0x25
 800ec58:	d1f9      	bne.n	800ec4e <_vfiprintf_r+0x96>
 800ec5a:	ebba 0b04 	subs.w	fp, sl, r4
 800ec5e:	d00b      	beq.n	800ec78 <_vfiprintf_r+0xc0>
 800ec60:	465b      	mov	r3, fp
 800ec62:	4622      	mov	r2, r4
 800ec64:	4629      	mov	r1, r5
 800ec66:	4630      	mov	r0, r6
 800ec68:	f7ff ff93 	bl	800eb92 <__sfputs_r>
 800ec6c:	3001      	adds	r0, #1
 800ec6e:	f000 80aa 	beq.w	800edc6 <_vfiprintf_r+0x20e>
 800ec72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec74:	445a      	add	r2, fp
 800ec76:	9209      	str	r2, [sp, #36]	; 0x24
 800ec78:	f89a 3000 	ldrb.w	r3, [sl]
 800ec7c:	2b00      	cmp	r3, #0
 800ec7e:	f000 80a2 	beq.w	800edc6 <_vfiprintf_r+0x20e>
 800ec82:	2300      	movs	r3, #0
 800ec84:	f04f 32ff 	mov.w	r2, #4294967295
 800ec88:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec8c:	f10a 0a01 	add.w	sl, sl, #1
 800ec90:	9304      	str	r3, [sp, #16]
 800ec92:	9307      	str	r3, [sp, #28]
 800ec94:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec98:	931a      	str	r3, [sp, #104]	; 0x68
 800ec9a:	4654      	mov	r4, sl
 800ec9c:	2205      	movs	r2, #5
 800ec9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eca2:	4858      	ldr	r0, [pc, #352]	; (800ee04 <_vfiprintf_r+0x24c>)
 800eca4:	f7f1 fa9c 	bl	80001e0 <memchr>
 800eca8:	9a04      	ldr	r2, [sp, #16]
 800ecaa:	b9d8      	cbnz	r0, 800ece4 <_vfiprintf_r+0x12c>
 800ecac:	06d1      	lsls	r1, r2, #27
 800ecae:	bf44      	itt	mi
 800ecb0:	2320      	movmi	r3, #32
 800ecb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ecb6:	0713      	lsls	r3, r2, #28
 800ecb8:	bf44      	itt	mi
 800ecba:	232b      	movmi	r3, #43	; 0x2b
 800ecbc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ecc0:	f89a 3000 	ldrb.w	r3, [sl]
 800ecc4:	2b2a      	cmp	r3, #42	; 0x2a
 800ecc6:	d015      	beq.n	800ecf4 <_vfiprintf_r+0x13c>
 800ecc8:	9a07      	ldr	r2, [sp, #28]
 800ecca:	4654      	mov	r4, sl
 800eccc:	2000      	movs	r0, #0
 800ecce:	f04f 0c0a 	mov.w	ip, #10
 800ecd2:	4621      	mov	r1, r4
 800ecd4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ecd8:	3b30      	subs	r3, #48	; 0x30
 800ecda:	2b09      	cmp	r3, #9
 800ecdc:	d94e      	bls.n	800ed7c <_vfiprintf_r+0x1c4>
 800ecde:	b1b0      	cbz	r0, 800ed0e <_vfiprintf_r+0x156>
 800ece0:	9207      	str	r2, [sp, #28]
 800ece2:	e014      	b.n	800ed0e <_vfiprintf_r+0x156>
 800ece4:	eba0 0308 	sub.w	r3, r0, r8
 800ece8:	fa09 f303 	lsl.w	r3, r9, r3
 800ecec:	4313      	orrs	r3, r2
 800ecee:	9304      	str	r3, [sp, #16]
 800ecf0:	46a2      	mov	sl, r4
 800ecf2:	e7d2      	b.n	800ec9a <_vfiprintf_r+0xe2>
 800ecf4:	9b03      	ldr	r3, [sp, #12]
 800ecf6:	1d19      	adds	r1, r3, #4
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	9103      	str	r1, [sp, #12]
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	bfbb      	ittet	lt
 800ed00:	425b      	neglt	r3, r3
 800ed02:	f042 0202 	orrlt.w	r2, r2, #2
 800ed06:	9307      	strge	r3, [sp, #28]
 800ed08:	9307      	strlt	r3, [sp, #28]
 800ed0a:	bfb8      	it	lt
 800ed0c:	9204      	strlt	r2, [sp, #16]
 800ed0e:	7823      	ldrb	r3, [r4, #0]
 800ed10:	2b2e      	cmp	r3, #46	; 0x2e
 800ed12:	d10c      	bne.n	800ed2e <_vfiprintf_r+0x176>
 800ed14:	7863      	ldrb	r3, [r4, #1]
 800ed16:	2b2a      	cmp	r3, #42	; 0x2a
 800ed18:	d135      	bne.n	800ed86 <_vfiprintf_r+0x1ce>
 800ed1a:	9b03      	ldr	r3, [sp, #12]
 800ed1c:	1d1a      	adds	r2, r3, #4
 800ed1e:	681b      	ldr	r3, [r3, #0]
 800ed20:	9203      	str	r2, [sp, #12]
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	bfb8      	it	lt
 800ed26:	f04f 33ff 	movlt.w	r3, #4294967295
 800ed2a:	3402      	adds	r4, #2
 800ed2c:	9305      	str	r3, [sp, #20]
 800ed2e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ee14 <_vfiprintf_r+0x25c>
 800ed32:	7821      	ldrb	r1, [r4, #0]
 800ed34:	2203      	movs	r2, #3
 800ed36:	4650      	mov	r0, sl
 800ed38:	f7f1 fa52 	bl	80001e0 <memchr>
 800ed3c:	b140      	cbz	r0, 800ed50 <_vfiprintf_r+0x198>
 800ed3e:	2340      	movs	r3, #64	; 0x40
 800ed40:	eba0 000a 	sub.w	r0, r0, sl
 800ed44:	fa03 f000 	lsl.w	r0, r3, r0
 800ed48:	9b04      	ldr	r3, [sp, #16]
 800ed4a:	4303      	orrs	r3, r0
 800ed4c:	3401      	adds	r4, #1
 800ed4e:	9304      	str	r3, [sp, #16]
 800ed50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed54:	482c      	ldr	r0, [pc, #176]	; (800ee08 <_vfiprintf_r+0x250>)
 800ed56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ed5a:	2206      	movs	r2, #6
 800ed5c:	f7f1 fa40 	bl	80001e0 <memchr>
 800ed60:	2800      	cmp	r0, #0
 800ed62:	d03f      	beq.n	800ede4 <_vfiprintf_r+0x22c>
 800ed64:	4b29      	ldr	r3, [pc, #164]	; (800ee0c <_vfiprintf_r+0x254>)
 800ed66:	bb1b      	cbnz	r3, 800edb0 <_vfiprintf_r+0x1f8>
 800ed68:	9b03      	ldr	r3, [sp, #12]
 800ed6a:	3307      	adds	r3, #7
 800ed6c:	f023 0307 	bic.w	r3, r3, #7
 800ed70:	3308      	adds	r3, #8
 800ed72:	9303      	str	r3, [sp, #12]
 800ed74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed76:	443b      	add	r3, r7
 800ed78:	9309      	str	r3, [sp, #36]	; 0x24
 800ed7a:	e767      	b.n	800ec4c <_vfiprintf_r+0x94>
 800ed7c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed80:	460c      	mov	r4, r1
 800ed82:	2001      	movs	r0, #1
 800ed84:	e7a5      	b.n	800ecd2 <_vfiprintf_r+0x11a>
 800ed86:	2300      	movs	r3, #0
 800ed88:	3401      	adds	r4, #1
 800ed8a:	9305      	str	r3, [sp, #20]
 800ed8c:	4619      	mov	r1, r3
 800ed8e:	f04f 0c0a 	mov.w	ip, #10
 800ed92:	4620      	mov	r0, r4
 800ed94:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed98:	3a30      	subs	r2, #48	; 0x30
 800ed9a:	2a09      	cmp	r2, #9
 800ed9c:	d903      	bls.n	800eda6 <_vfiprintf_r+0x1ee>
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d0c5      	beq.n	800ed2e <_vfiprintf_r+0x176>
 800eda2:	9105      	str	r1, [sp, #20]
 800eda4:	e7c3      	b.n	800ed2e <_vfiprintf_r+0x176>
 800eda6:	fb0c 2101 	mla	r1, ip, r1, r2
 800edaa:	4604      	mov	r4, r0
 800edac:	2301      	movs	r3, #1
 800edae:	e7f0      	b.n	800ed92 <_vfiprintf_r+0x1da>
 800edb0:	ab03      	add	r3, sp, #12
 800edb2:	9300      	str	r3, [sp, #0]
 800edb4:	462a      	mov	r2, r5
 800edb6:	4b16      	ldr	r3, [pc, #88]	; (800ee10 <_vfiprintf_r+0x258>)
 800edb8:	a904      	add	r1, sp, #16
 800edba:	4630      	mov	r0, r6
 800edbc:	f7fd fd72 	bl	800c8a4 <_printf_float>
 800edc0:	4607      	mov	r7, r0
 800edc2:	1c78      	adds	r0, r7, #1
 800edc4:	d1d6      	bne.n	800ed74 <_vfiprintf_r+0x1bc>
 800edc6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800edc8:	07d9      	lsls	r1, r3, #31
 800edca:	d405      	bmi.n	800edd8 <_vfiprintf_r+0x220>
 800edcc:	89ab      	ldrh	r3, [r5, #12]
 800edce:	059a      	lsls	r2, r3, #22
 800edd0:	d402      	bmi.n	800edd8 <_vfiprintf_r+0x220>
 800edd2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800edd4:	f000 fab1 	bl	800f33a <__retarget_lock_release_recursive>
 800edd8:	89ab      	ldrh	r3, [r5, #12]
 800edda:	065b      	lsls	r3, r3, #25
 800eddc:	f53f af12 	bmi.w	800ec04 <_vfiprintf_r+0x4c>
 800ede0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ede2:	e711      	b.n	800ec08 <_vfiprintf_r+0x50>
 800ede4:	ab03      	add	r3, sp, #12
 800ede6:	9300      	str	r3, [sp, #0]
 800ede8:	462a      	mov	r2, r5
 800edea:	4b09      	ldr	r3, [pc, #36]	; (800ee10 <_vfiprintf_r+0x258>)
 800edec:	a904      	add	r1, sp, #16
 800edee:	4630      	mov	r0, r6
 800edf0:	f7fd fffc 	bl	800cdec <_printf_i>
 800edf4:	e7e4      	b.n	800edc0 <_vfiprintf_r+0x208>
 800edf6:	bf00      	nop
 800edf8:	08011b38 	.word	0x08011b38
 800edfc:	08011b58 	.word	0x08011b58
 800ee00:	08011b18 	.word	0x08011b18
 800ee04:	08011b04 	.word	0x08011b04
 800ee08:	08011b0e 	.word	0x08011b0e
 800ee0c:	0800c8a5 	.word	0x0800c8a5
 800ee10:	0800eb93 	.word	0x0800eb93
 800ee14:	08011b0a 	.word	0x08011b0a

0800ee18 <_sbrk_r>:
 800ee18:	b538      	push	{r3, r4, r5, lr}
 800ee1a:	4d06      	ldr	r5, [pc, #24]	; (800ee34 <_sbrk_r+0x1c>)
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	4604      	mov	r4, r0
 800ee20:	4608      	mov	r0, r1
 800ee22:	602b      	str	r3, [r5, #0]
 800ee24:	f7f5 fc60 	bl	80046e8 <_sbrk>
 800ee28:	1c43      	adds	r3, r0, #1
 800ee2a:	d102      	bne.n	800ee32 <_sbrk_r+0x1a>
 800ee2c:	682b      	ldr	r3, [r5, #0]
 800ee2e:	b103      	cbz	r3, 800ee32 <_sbrk_r+0x1a>
 800ee30:	6023      	str	r3, [r4, #0]
 800ee32:	bd38      	pop	{r3, r4, r5, pc}
 800ee34:	2000532c 	.word	0x2000532c

0800ee38 <__swbuf_r>:
 800ee38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee3a:	460e      	mov	r6, r1
 800ee3c:	4614      	mov	r4, r2
 800ee3e:	4605      	mov	r5, r0
 800ee40:	b118      	cbz	r0, 800ee4a <__swbuf_r+0x12>
 800ee42:	6983      	ldr	r3, [r0, #24]
 800ee44:	b90b      	cbnz	r3, 800ee4a <__swbuf_r+0x12>
 800ee46:	f000 f9d9 	bl	800f1fc <__sinit>
 800ee4a:	4b21      	ldr	r3, [pc, #132]	; (800eed0 <__swbuf_r+0x98>)
 800ee4c:	429c      	cmp	r4, r3
 800ee4e:	d12b      	bne.n	800eea8 <__swbuf_r+0x70>
 800ee50:	686c      	ldr	r4, [r5, #4]
 800ee52:	69a3      	ldr	r3, [r4, #24]
 800ee54:	60a3      	str	r3, [r4, #8]
 800ee56:	89a3      	ldrh	r3, [r4, #12]
 800ee58:	071a      	lsls	r2, r3, #28
 800ee5a:	d52f      	bpl.n	800eebc <__swbuf_r+0x84>
 800ee5c:	6923      	ldr	r3, [r4, #16]
 800ee5e:	b36b      	cbz	r3, 800eebc <__swbuf_r+0x84>
 800ee60:	6923      	ldr	r3, [r4, #16]
 800ee62:	6820      	ldr	r0, [r4, #0]
 800ee64:	1ac0      	subs	r0, r0, r3
 800ee66:	6963      	ldr	r3, [r4, #20]
 800ee68:	b2f6      	uxtb	r6, r6
 800ee6a:	4283      	cmp	r3, r0
 800ee6c:	4637      	mov	r7, r6
 800ee6e:	dc04      	bgt.n	800ee7a <__swbuf_r+0x42>
 800ee70:	4621      	mov	r1, r4
 800ee72:	4628      	mov	r0, r5
 800ee74:	f000 f92e 	bl	800f0d4 <_fflush_r>
 800ee78:	bb30      	cbnz	r0, 800eec8 <__swbuf_r+0x90>
 800ee7a:	68a3      	ldr	r3, [r4, #8]
 800ee7c:	3b01      	subs	r3, #1
 800ee7e:	60a3      	str	r3, [r4, #8]
 800ee80:	6823      	ldr	r3, [r4, #0]
 800ee82:	1c5a      	adds	r2, r3, #1
 800ee84:	6022      	str	r2, [r4, #0]
 800ee86:	701e      	strb	r6, [r3, #0]
 800ee88:	6963      	ldr	r3, [r4, #20]
 800ee8a:	3001      	adds	r0, #1
 800ee8c:	4283      	cmp	r3, r0
 800ee8e:	d004      	beq.n	800ee9a <__swbuf_r+0x62>
 800ee90:	89a3      	ldrh	r3, [r4, #12]
 800ee92:	07db      	lsls	r3, r3, #31
 800ee94:	d506      	bpl.n	800eea4 <__swbuf_r+0x6c>
 800ee96:	2e0a      	cmp	r6, #10
 800ee98:	d104      	bne.n	800eea4 <__swbuf_r+0x6c>
 800ee9a:	4621      	mov	r1, r4
 800ee9c:	4628      	mov	r0, r5
 800ee9e:	f000 f919 	bl	800f0d4 <_fflush_r>
 800eea2:	b988      	cbnz	r0, 800eec8 <__swbuf_r+0x90>
 800eea4:	4638      	mov	r0, r7
 800eea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eea8:	4b0a      	ldr	r3, [pc, #40]	; (800eed4 <__swbuf_r+0x9c>)
 800eeaa:	429c      	cmp	r4, r3
 800eeac:	d101      	bne.n	800eeb2 <__swbuf_r+0x7a>
 800eeae:	68ac      	ldr	r4, [r5, #8]
 800eeb0:	e7cf      	b.n	800ee52 <__swbuf_r+0x1a>
 800eeb2:	4b09      	ldr	r3, [pc, #36]	; (800eed8 <__swbuf_r+0xa0>)
 800eeb4:	429c      	cmp	r4, r3
 800eeb6:	bf08      	it	eq
 800eeb8:	68ec      	ldreq	r4, [r5, #12]
 800eeba:	e7ca      	b.n	800ee52 <__swbuf_r+0x1a>
 800eebc:	4621      	mov	r1, r4
 800eebe:	4628      	mov	r0, r5
 800eec0:	f000 f80c 	bl	800eedc <__swsetup_r>
 800eec4:	2800      	cmp	r0, #0
 800eec6:	d0cb      	beq.n	800ee60 <__swbuf_r+0x28>
 800eec8:	f04f 37ff 	mov.w	r7, #4294967295
 800eecc:	e7ea      	b.n	800eea4 <__swbuf_r+0x6c>
 800eece:	bf00      	nop
 800eed0:	08011b38 	.word	0x08011b38
 800eed4:	08011b58 	.word	0x08011b58
 800eed8:	08011b18 	.word	0x08011b18

0800eedc <__swsetup_r>:
 800eedc:	4b32      	ldr	r3, [pc, #200]	; (800efa8 <__swsetup_r+0xcc>)
 800eede:	b570      	push	{r4, r5, r6, lr}
 800eee0:	681d      	ldr	r5, [r3, #0]
 800eee2:	4606      	mov	r6, r0
 800eee4:	460c      	mov	r4, r1
 800eee6:	b125      	cbz	r5, 800eef2 <__swsetup_r+0x16>
 800eee8:	69ab      	ldr	r3, [r5, #24]
 800eeea:	b913      	cbnz	r3, 800eef2 <__swsetup_r+0x16>
 800eeec:	4628      	mov	r0, r5
 800eeee:	f000 f985 	bl	800f1fc <__sinit>
 800eef2:	4b2e      	ldr	r3, [pc, #184]	; (800efac <__swsetup_r+0xd0>)
 800eef4:	429c      	cmp	r4, r3
 800eef6:	d10f      	bne.n	800ef18 <__swsetup_r+0x3c>
 800eef8:	686c      	ldr	r4, [r5, #4]
 800eefa:	89a3      	ldrh	r3, [r4, #12]
 800eefc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ef00:	0719      	lsls	r1, r3, #28
 800ef02:	d42c      	bmi.n	800ef5e <__swsetup_r+0x82>
 800ef04:	06dd      	lsls	r5, r3, #27
 800ef06:	d411      	bmi.n	800ef2c <__swsetup_r+0x50>
 800ef08:	2309      	movs	r3, #9
 800ef0a:	6033      	str	r3, [r6, #0]
 800ef0c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ef10:	81a3      	strh	r3, [r4, #12]
 800ef12:	f04f 30ff 	mov.w	r0, #4294967295
 800ef16:	e03e      	b.n	800ef96 <__swsetup_r+0xba>
 800ef18:	4b25      	ldr	r3, [pc, #148]	; (800efb0 <__swsetup_r+0xd4>)
 800ef1a:	429c      	cmp	r4, r3
 800ef1c:	d101      	bne.n	800ef22 <__swsetup_r+0x46>
 800ef1e:	68ac      	ldr	r4, [r5, #8]
 800ef20:	e7eb      	b.n	800eefa <__swsetup_r+0x1e>
 800ef22:	4b24      	ldr	r3, [pc, #144]	; (800efb4 <__swsetup_r+0xd8>)
 800ef24:	429c      	cmp	r4, r3
 800ef26:	bf08      	it	eq
 800ef28:	68ec      	ldreq	r4, [r5, #12]
 800ef2a:	e7e6      	b.n	800eefa <__swsetup_r+0x1e>
 800ef2c:	0758      	lsls	r0, r3, #29
 800ef2e:	d512      	bpl.n	800ef56 <__swsetup_r+0x7a>
 800ef30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef32:	b141      	cbz	r1, 800ef46 <__swsetup_r+0x6a>
 800ef34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef38:	4299      	cmp	r1, r3
 800ef3a:	d002      	beq.n	800ef42 <__swsetup_r+0x66>
 800ef3c:	4630      	mov	r0, r6
 800ef3e:	f7ff fbd5 	bl	800e6ec <_free_r>
 800ef42:	2300      	movs	r3, #0
 800ef44:	6363      	str	r3, [r4, #52]	; 0x34
 800ef46:	89a3      	ldrh	r3, [r4, #12]
 800ef48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ef4c:	81a3      	strh	r3, [r4, #12]
 800ef4e:	2300      	movs	r3, #0
 800ef50:	6063      	str	r3, [r4, #4]
 800ef52:	6923      	ldr	r3, [r4, #16]
 800ef54:	6023      	str	r3, [r4, #0]
 800ef56:	89a3      	ldrh	r3, [r4, #12]
 800ef58:	f043 0308 	orr.w	r3, r3, #8
 800ef5c:	81a3      	strh	r3, [r4, #12]
 800ef5e:	6923      	ldr	r3, [r4, #16]
 800ef60:	b94b      	cbnz	r3, 800ef76 <__swsetup_r+0x9a>
 800ef62:	89a3      	ldrh	r3, [r4, #12]
 800ef64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ef68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef6c:	d003      	beq.n	800ef76 <__swsetup_r+0x9a>
 800ef6e:	4621      	mov	r1, r4
 800ef70:	4630      	mov	r0, r6
 800ef72:	f000 fa09 	bl	800f388 <__smakebuf_r>
 800ef76:	89a0      	ldrh	r0, [r4, #12]
 800ef78:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ef7c:	f010 0301 	ands.w	r3, r0, #1
 800ef80:	d00a      	beq.n	800ef98 <__swsetup_r+0xbc>
 800ef82:	2300      	movs	r3, #0
 800ef84:	60a3      	str	r3, [r4, #8]
 800ef86:	6963      	ldr	r3, [r4, #20]
 800ef88:	425b      	negs	r3, r3
 800ef8a:	61a3      	str	r3, [r4, #24]
 800ef8c:	6923      	ldr	r3, [r4, #16]
 800ef8e:	b943      	cbnz	r3, 800efa2 <__swsetup_r+0xc6>
 800ef90:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ef94:	d1ba      	bne.n	800ef0c <__swsetup_r+0x30>
 800ef96:	bd70      	pop	{r4, r5, r6, pc}
 800ef98:	0781      	lsls	r1, r0, #30
 800ef9a:	bf58      	it	pl
 800ef9c:	6963      	ldrpl	r3, [r4, #20]
 800ef9e:	60a3      	str	r3, [r4, #8]
 800efa0:	e7f4      	b.n	800ef8c <__swsetup_r+0xb0>
 800efa2:	2000      	movs	r0, #0
 800efa4:	e7f7      	b.n	800ef96 <__swsetup_r+0xba>
 800efa6:	bf00      	nop
 800efa8:	20000028 	.word	0x20000028
 800efac:	08011b38 	.word	0x08011b38
 800efb0:	08011b58 	.word	0x08011b58
 800efb4:	08011b18 	.word	0x08011b18

0800efb8 <abort>:
 800efb8:	b508      	push	{r3, lr}
 800efba:	2006      	movs	r0, #6
 800efbc:	f000 fab4 	bl	800f528 <raise>
 800efc0:	2001      	movs	r0, #1
 800efc2:	f7f5 fb19 	bl	80045f8 <_exit>
	...

0800efc8 <__sflush_r>:
 800efc8:	898a      	ldrh	r2, [r1, #12]
 800efca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efce:	4605      	mov	r5, r0
 800efd0:	0710      	lsls	r0, r2, #28
 800efd2:	460c      	mov	r4, r1
 800efd4:	d458      	bmi.n	800f088 <__sflush_r+0xc0>
 800efd6:	684b      	ldr	r3, [r1, #4]
 800efd8:	2b00      	cmp	r3, #0
 800efda:	dc05      	bgt.n	800efe8 <__sflush_r+0x20>
 800efdc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800efde:	2b00      	cmp	r3, #0
 800efe0:	dc02      	bgt.n	800efe8 <__sflush_r+0x20>
 800efe2:	2000      	movs	r0, #0
 800efe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efe8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800efea:	2e00      	cmp	r6, #0
 800efec:	d0f9      	beq.n	800efe2 <__sflush_r+0x1a>
 800efee:	2300      	movs	r3, #0
 800eff0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eff4:	682f      	ldr	r7, [r5, #0]
 800eff6:	602b      	str	r3, [r5, #0]
 800eff8:	d032      	beq.n	800f060 <__sflush_r+0x98>
 800effa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800effc:	89a3      	ldrh	r3, [r4, #12]
 800effe:	075a      	lsls	r2, r3, #29
 800f000:	d505      	bpl.n	800f00e <__sflush_r+0x46>
 800f002:	6863      	ldr	r3, [r4, #4]
 800f004:	1ac0      	subs	r0, r0, r3
 800f006:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f008:	b10b      	cbz	r3, 800f00e <__sflush_r+0x46>
 800f00a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f00c:	1ac0      	subs	r0, r0, r3
 800f00e:	2300      	movs	r3, #0
 800f010:	4602      	mov	r2, r0
 800f012:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f014:	6a21      	ldr	r1, [r4, #32]
 800f016:	4628      	mov	r0, r5
 800f018:	47b0      	blx	r6
 800f01a:	1c43      	adds	r3, r0, #1
 800f01c:	89a3      	ldrh	r3, [r4, #12]
 800f01e:	d106      	bne.n	800f02e <__sflush_r+0x66>
 800f020:	6829      	ldr	r1, [r5, #0]
 800f022:	291d      	cmp	r1, #29
 800f024:	d82c      	bhi.n	800f080 <__sflush_r+0xb8>
 800f026:	4a2a      	ldr	r2, [pc, #168]	; (800f0d0 <__sflush_r+0x108>)
 800f028:	40ca      	lsrs	r2, r1
 800f02a:	07d6      	lsls	r6, r2, #31
 800f02c:	d528      	bpl.n	800f080 <__sflush_r+0xb8>
 800f02e:	2200      	movs	r2, #0
 800f030:	6062      	str	r2, [r4, #4]
 800f032:	04d9      	lsls	r1, r3, #19
 800f034:	6922      	ldr	r2, [r4, #16]
 800f036:	6022      	str	r2, [r4, #0]
 800f038:	d504      	bpl.n	800f044 <__sflush_r+0x7c>
 800f03a:	1c42      	adds	r2, r0, #1
 800f03c:	d101      	bne.n	800f042 <__sflush_r+0x7a>
 800f03e:	682b      	ldr	r3, [r5, #0]
 800f040:	b903      	cbnz	r3, 800f044 <__sflush_r+0x7c>
 800f042:	6560      	str	r0, [r4, #84]	; 0x54
 800f044:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f046:	602f      	str	r7, [r5, #0]
 800f048:	2900      	cmp	r1, #0
 800f04a:	d0ca      	beq.n	800efe2 <__sflush_r+0x1a>
 800f04c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f050:	4299      	cmp	r1, r3
 800f052:	d002      	beq.n	800f05a <__sflush_r+0x92>
 800f054:	4628      	mov	r0, r5
 800f056:	f7ff fb49 	bl	800e6ec <_free_r>
 800f05a:	2000      	movs	r0, #0
 800f05c:	6360      	str	r0, [r4, #52]	; 0x34
 800f05e:	e7c1      	b.n	800efe4 <__sflush_r+0x1c>
 800f060:	6a21      	ldr	r1, [r4, #32]
 800f062:	2301      	movs	r3, #1
 800f064:	4628      	mov	r0, r5
 800f066:	47b0      	blx	r6
 800f068:	1c41      	adds	r1, r0, #1
 800f06a:	d1c7      	bne.n	800effc <__sflush_r+0x34>
 800f06c:	682b      	ldr	r3, [r5, #0]
 800f06e:	2b00      	cmp	r3, #0
 800f070:	d0c4      	beq.n	800effc <__sflush_r+0x34>
 800f072:	2b1d      	cmp	r3, #29
 800f074:	d001      	beq.n	800f07a <__sflush_r+0xb2>
 800f076:	2b16      	cmp	r3, #22
 800f078:	d101      	bne.n	800f07e <__sflush_r+0xb6>
 800f07a:	602f      	str	r7, [r5, #0]
 800f07c:	e7b1      	b.n	800efe2 <__sflush_r+0x1a>
 800f07e:	89a3      	ldrh	r3, [r4, #12]
 800f080:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f084:	81a3      	strh	r3, [r4, #12]
 800f086:	e7ad      	b.n	800efe4 <__sflush_r+0x1c>
 800f088:	690f      	ldr	r7, [r1, #16]
 800f08a:	2f00      	cmp	r7, #0
 800f08c:	d0a9      	beq.n	800efe2 <__sflush_r+0x1a>
 800f08e:	0793      	lsls	r3, r2, #30
 800f090:	680e      	ldr	r6, [r1, #0]
 800f092:	bf08      	it	eq
 800f094:	694b      	ldreq	r3, [r1, #20]
 800f096:	600f      	str	r7, [r1, #0]
 800f098:	bf18      	it	ne
 800f09a:	2300      	movne	r3, #0
 800f09c:	eba6 0807 	sub.w	r8, r6, r7
 800f0a0:	608b      	str	r3, [r1, #8]
 800f0a2:	f1b8 0f00 	cmp.w	r8, #0
 800f0a6:	dd9c      	ble.n	800efe2 <__sflush_r+0x1a>
 800f0a8:	6a21      	ldr	r1, [r4, #32]
 800f0aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f0ac:	4643      	mov	r3, r8
 800f0ae:	463a      	mov	r2, r7
 800f0b0:	4628      	mov	r0, r5
 800f0b2:	47b0      	blx	r6
 800f0b4:	2800      	cmp	r0, #0
 800f0b6:	dc06      	bgt.n	800f0c6 <__sflush_r+0xfe>
 800f0b8:	89a3      	ldrh	r3, [r4, #12]
 800f0ba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0be:	81a3      	strh	r3, [r4, #12]
 800f0c0:	f04f 30ff 	mov.w	r0, #4294967295
 800f0c4:	e78e      	b.n	800efe4 <__sflush_r+0x1c>
 800f0c6:	4407      	add	r7, r0
 800f0c8:	eba8 0800 	sub.w	r8, r8, r0
 800f0cc:	e7e9      	b.n	800f0a2 <__sflush_r+0xda>
 800f0ce:	bf00      	nop
 800f0d0:	20400001 	.word	0x20400001

0800f0d4 <_fflush_r>:
 800f0d4:	b538      	push	{r3, r4, r5, lr}
 800f0d6:	690b      	ldr	r3, [r1, #16]
 800f0d8:	4605      	mov	r5, r0
 800f0da:	460c      	mov	r4, r1
 800f0dc:	b913      	cbnz	r3, 800f0e4 <_fflush_r+0x10>
 800f0de:	2500      	movs	r5, #0
 800f0e0:	4628      	mov	r0, r5
 800f0e2:	bd38      	pop	{r3, r4, r5, pc}
 800f0e4:	b118      	cbz	r0, 800f0ee <_fflush_r+0x1a>
 800f0e6:	6983      	ldr	r3, [r0, #24]
 800f0e8:	b90b      	cbnz	r3, 800f0ee <_fflush_r+0x1a>
 800f0ea:	f000 f887 	bl	800f1fc <__sinit>
 800f0ee:	4b14      	ldr	r3, [pc, #80]	; (800f140 <_fflush_r+0x6c>)
 800f0f0:	429c      	cmp	r4, r3
 800f0f2:	d11b      	bne.n	800f12c <_fflush_r+0x58>
 800f0f4:	686c      	ldr	r4, [r5, #4]
 800f0f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0fa:	2b00      	cmp	r3, #0
 800f0fc:	d0ef      	beq.n	800f0de <_fflush_r+0xa>
 800f0fe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f100:	07d0      	lsls	r0, r2, #31
 800f102:	d404      	bmi.n	800f10e <_fflush_r+0x3a>
 800f104:	0599      	lsls	r1, r3, #22
 800f106:	d402      	bmi.n	800f10e <_fflush_r+0x3a>
 800f108:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f10a:	f000 f915 	bl	800f338 <__retarget_lock_acquire_recursive>
 800f10e:	4628      	mov	r0, r5
 800f110:	4621      	mov	r1, r4
 800f112:	f7ff ff59 	bl	800efc8 <__sflush_r>
 800f116:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f118:	07da      	lsls	r2, r3, #31
 800f11a:	4605      	mov	r5, r0
 800f11c:	d4e0      	bmi.n	800f0e0 <_fflush_r+0xc>
 800f11e:	89a3      	ldrh	r3, [r4, #12]
 800f120:	059b      	lsls	r3, r3, #22
 800f122:	d4dd      	bmi.n	800f0e0 <_fflush_r+0xc>
 800f124:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f126:	f000 f908 	bl	800f33a <__retarget_lock_release_recursive>
 800f12a:	e7d9      	b.n	800f0e0 <_fflush_r+0xc>
 800f12c:	4b05      	ldr	r3, [pc, #20]	; (800f144 <_fflush_r+0x70>)
 800f12e:	429c      	cmp	r4, r3
 800f130:	d101      	bne.n	800f136 <_fflush_r+0x62>
 800f132:	68ac      	ldr	r4, [r5, #8]
 800f134:	e7df      	b.n	800f0f6 <_fflush_r+0x22>
 800f136:	4b04      	ldr	r3, [pc, #16]	; (800f148 <_fflush_r+0x74>)
 800f138:	429c      	cmp	r4, r3
 800f13a:	bf08      	it	eq
 800f13c:	68ec      	ldreq	r4, [r5, #12]
 800f13e:	e7da      	b.n	800f0f6 <_fflush_r+0x22>
 800f140:	08011b38 	.word	0x08011b38
 800f144:	08011b58 	.word	0x08011b58
 800f148:	08011b18 	.word	0x08011b18

0800f14c <std>:
 800f14c:	2300      	movs	r3, #0
 800f14e:	b510      	push	{r4, lr}
 800f150:	4604      	mov	r4, r0
 800f152:	e9c0 3300 	strd	r3, r3, [r0]
 800f156:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f15a:	6083      	str	r3, [r0, #8]
 800f15c:	8181      	strh	r1, [r0, #12]
 800f15e:	6643      	str	r3, [r0, #100]	; 0x64
 800f160:	81c2      	strh	r2, [r0, #14]
 800f162:	6183      	str	r3, [r0, #24]
 800f164:	4619      	mov	r1, r3
 800f166:	2208      	movs	r2, #8
 800f168:	305c      	adds	r0, #92	; 0x5c
 800f16a:	f7fd faf3 	bl	800c754 <memset>
 800f16e:	4b05      	ldr	r3, [pc, #20]	; (800f184 <std+0x38>)
 800f170:	6263      	str	r3, [r4, #36]	; 0x24
 800f172:	4b05      	ldr	r3, [pc, #20]	; (800f188 <std+0x3c>)
 800f174:	62a3      	str	r3, [r4, #40]	; 0x28
 800f176:	4b05      	ldr	r3, [pc, #20]	; (800f18c <std+0x40>)
 800f178:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f17a:	4b05      	ldr	r3, [pc, #20]	; (800f190 <std+0x44>)
 800f17c:	6224      	str	r4, [r4, #32]
 800f17e:	6323      	str	r3, [r4, #48]	; 0x30
 800f180:	bd10      	pop	{r4, pc}
 800f182:	bf00      	nop
 800f184:	0800f561 	.word	0x0800f561
 800f188:	0800f583 	.word	0x0800f583
 800f18c:	0800f5bb 	.word	0x0800f5bb
 800f190:	0800f5df 	.word	0x0800f5df

0800f194 <_cleanup_r>:
 800f194:	4901      	ldr	r1, [pc, #4]	; (800f19c <_cleanup_r+0x8>)
 800f196:	f000 b8af 	b.w	800f2f8 <_fwalk_reent>
 800f19a:	bf00      	nop
 800f19c:	0800f0d5 	.word	0x0800f0d5

0800f1a0 <__sfmoreglue>:
 800f1a0:	b570      	push	{r4, r5, r6, lr}
 800f1a2:	2268      	movs	r2, #104	; 0x68
 800f1a4:	1e4d      	subs	r5, r1, #1
 800f1a6:	4355      	muls	r5, r2
 800f1a8:	460e      	mov	r6, r1
 800f1aa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f1ae:	f7ff fb09 	bl	800e7c4 <_malloc_r>
 800f1b2:	4604      	mov	r4, r0
 800f1b4:	b140      	cbz	r0, 800f1c8 <__sfmoreglue+0x28>
 800f1b6:	2100      	movs	r1, #0
 800f1b8:	e9c0 1600 	strd	r1, r6, [r0]
 800f1bc:	300c      	adds	r0, #12
 800f1be:	60a0      	str	r0, [r4, #8]
 800f1c0:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f1c4:	f7fd fac6 	bl	800c754 <memset>
 800f1c8:	4620      	mov	r0, r4
 800f1ca:	bd70      	pop	{r4, r5, r6, pc}

0800f1cc <__sfp_lock_acquire>:
 800f1cc:	4801      	ldr	r0, [pc, #4]	; (800f1d4 <__sfp_lock_acquire+0x8>)
 800f1ce:	f000 b8b3 	b.w	800f338 <__retarget_lock_acquire_recursive>
 800f1d2:	bf00      	nop
 800f1d4:	20005329 	.word	0x20005329

0800f1d8 <__sfp_lock_release>:
 800f1d8:	4801      	ldr	r0, [pc, #4]	; (800f1e0 <__sfp_lock_release+0x8>)
 800f1da:	f000 b8ae 	b.w	800f33a <__retarget_lock_release_recursive>
 800f1de:	bf00      	nop
 800f1e0:	20005329 	.word	0x20005329

0800f1e4 <__sinit_lock_acquire>:
 800f1e4:	4801      	ldr	r0, [pc, #4]	; (800f1ec <__sinit_lock_acquire+0x8>)
 800f1e6:	f000 b8a7 	b.w	800f338 <__retarget_lock_acquire_recursive>
 800f1ea:	bf00      	nop
 800f1ec:	2000532a 	.word	0x2000532a

0800f1f0 <__sinit_lock_release>:
 800f1f0:	4801      	ldr	r0, [pc, #4]	; (800f1f8 <__sinit_lock_release+0x8>)
 800f1f2:	f000 b8a2 	b.w	800f33a <__retarget_lock_release_recursive>
 800f1f6:	bf00      	nop
 800f1f8:	2000532a 	.word	0x2000532a

0800f1fc <__sinit>:
 800f1fc:	b510      	push	{r4, lr}
 800f1fe:	4604      	mov	r4, r0
 800f200:	f7ff fff0 	bl	800f1e4 <__sinit_lock_acquire>
 800f204:	69a3      	ldr	r3, [r4, #24]
 800f206:	b11b      	cbz	r3, 800f210 <__sinit+0x14>
 800f208:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f20c:	f7ff bff0 	b.w	800f1f0 <__sinit_lock_release>
 800f210:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f214:	6523      	str	r3, [r4, #80]	; 0x50
 800f216:	4b13      	ldr	r3, [pc, #76]	; (800f264 <__sinit+0x68>)
 800f218:	4a13      	ldr	r2, [pc, #76]	; (800f268 <__sinit+0x6c>)
 800f21a:	681b      	ldr	r3, [r3, #0]
 800f21c:	62a2      	str	r2, [r4, #40]	; 0x28
 800f21e:	42a3      	cmp	r3, r4
 800f220:	bf04      	itt	eq
 800f222:	2301      	moveq	r3, #1
 800f224:	61a3      	streq	r3, [r4, #24]
 800f226:	4620      	mov	r0, r4
 800f228:	f000 f820 	bl	800f26c <__sfp>
 800f22c:	6060      	str	r0, [r4, #4]
 800f22e:	4620      	mov	r0, r4
 800f230:	f000 f81c 	bl	800f26c <__sfp>
 800f234:	60a0      	str	r0, [r4, #8]
 800f236:	4620      	mov	r0, r4
 800f238:	f000 f818 	bl	800f26c <__sfp>
 800f23c:	2200      	movs	r2, #0
 800f23e:	60e0      	str	r0, [r4, #12]
 800f240:	2104      	movs	r1, #4
 800f242:	6860      	ldr	r0, [r4, #4]
 800f244:	f7ff ff82 	bl	800f14c <std>
 800f248:	68a0      	ldr	r0, [r4, #8]
 800f24a:	2201      	movs	r2, #1
 800f24c:	2109      	movs	r1, #9
 800f24e:	f7ff ff7d 	bl	800f14c <std>
 800f252:	68e0      	ldr	r0, [r4, #12]
 800f254:	2202      	movs	r2, #2
 800f256:	2112      	movs	r1, #18
 800f258:	f7ff ff78 	bl	800f14c <std>
 800f25c:	2301      	movs	r3, #1
 800f25e:	61a3      	str	r3, [r4, #24]
 800f260:	e7d2      	b.n	800f208 <__sinit+0xc>
 800f262:	bf00      	nop
 800f264:	08011748 	.word	0x08011748
 800f268:	0800f195 	.word	0x0800f195

0800f26c <__sfp>:
 800f26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f26e:	4607      	mov	r7, r0
 800f270:	f7ff ffac 	bl	800f1cc <__sfp_lock_acquire>
 800f274:	4b1e      	ldr	r3, [pc, #120]	; (800f2f0 <__sfp+0x84>)
 800f276:	681e      	ldr	r6, [r3, #0]
 800f278:	69b3      	ldr	r3, [r6, #24]
 800f27a:	b913      	cbnz	r3, 800f282 <__sfp+0x16>
 800f27c:	4630      	mov	r0, r6
 800f27e:	f7ff ffbd 	bl	800f1fc <__sinit>
 800f282:	3648      	adds	r6, #72	; 0x48
 800f284:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f288:	3b01      	subs	r3, #1
 800f28a:	d503      	bpl.n	800f294 <__sfp+0x28>
 800f28c:	6833      	ldr	r3, [r6, #0]
 800f28e:	b30b      	cbz	r3, 800f2d4 <__sfp+0x68>
 800f290:	6836      	ldr	r6, [r6, #0]
 800f292:	e7f7      	b.n	800f284 <__sfp+0x18>
 800f294:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f298:	b9d5      	cbnz	r5, 800f2d0 <__sfp+0x64>
 800f29a:	4b16      	ldr	r3, [pc, #88]	; (800f2f4 <__sfp+0x88>)
 800f29c:	60e3      	str	r3, [r4, #12]
 800f29e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f2a2:	6665      	str	r5, [r4, #100]	; 0x64
 800f2a4:	f000 f847 	bl	800f336 <__retarget_lock_init_recursive>
 800f2a8:	f7ff ff96 	bl	800f1d8 <__sfp_lock_release>
 800f2ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f2b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f2b4:	6025      	str	r5, [r4, #0]
 800f2b6:	61a5      	str	r5, [r4, #24]
 800f2b8:	2208      	movs	r2, #8
 800f2ba:	4629      	mov	r1, r5
 800f2bc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f2c0:	f7fd fa48 	bl	800c754 <memset>
 800f2c4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f2c8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f2cc:	4620      	mov	r0, r4
 800f2ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2d0:	3468      	adds	r4, #104	; 0x68
 800f2d2:	e7d9      	b.n	800f288 <__sfp+0x1c>
 800f2d4:	2104      	movs	r1, #4
 800f2d6:	4638      	mov	r0, r7
 800f2d8:	f7ff ff62 	bl	800f1a0 <__sfmoreglue>
 800f2dc:	4604      	mov	r4, r0
 800f2de:	6030      	str	r0, [r6, #0]
 800f2e0:	2800      	cmp	r0, #0
 800f2e2:	d1d5      	bne.n	800f290 <__sfp+0x24>
 800f2e4:	f7ff ff78 	bl	800f1d8 <__sfp_lock_release>
 800f2e8:	230c      	movs	r3, #12
 800f2ea:	603b      	str	r3, [r7, #0]
 800f2ec:	e7ee      	b.n	800f2cc <__sfp+0x60>
 800f2ee:	bf00      	nop
 800f2f0:	08011748 	.word	0x08011748
 800f2f4:	ffff0001 	.word	0xffff0001

0800f2f8 <_fwalk_reent>:
 800f2f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2fc:	4606      	mov	r6, r0
 800f2fe:	4688      	mov	r8, r1
 800f300:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f304:	2700      	movs	r7, #0
 800f306:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f30a:	f1b9 0901 	subs.w	r9, r9, #1
 800f30e:	d505      	bpl.n	800f31c <_fwalk_reent+0x24>
 800f310:	6824      	ldr	r4, [r4, #0]
 800f312:	2c00      	cmp	r4, #0
 800f314:	d1f7      	bne.n	800f306 <_fwalk_reent+0xe>
 800f316:	4638      	mov	r0, r7
 800f318:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f31c:	89ab      	ldrh	r3, [r5, #12]
 800f31e:	2b01      	cmp	r3, #1
 800f320:	d907      	bls.n	800f332 <_fwalk_reent+0x3a>
 800f322:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f326:	3301      	adds	r3, #1
 800f328:	d003      	beq.n	800f332 <_fwalk_reent+0x3a>
 800f32a:	4629      	mov	r1, r5
 800f32c:	4630      	mov	r0, r6
 800f32e:	47c0      	blx	r8
 800f330:	4307      	orrs	r7, r0
 800f332:	3568      	adds	r5, #104	; 0x68
 800f334:	e7e9      	b.n	800f30a <_fwalk_reent+0x12>

0800f336 <__retarget_lock_init_recursive>:
 800f336:	4770      	bx	lr

0800f338 <__retarget_lock_acquire_recursive>:
 800f338:	4770      	bx	lr

0800f33a <__retarget_lock_release_recursive>:
 800f33a:	4770      	bx	lr

0800f33c <__swhatbuf_r>:
 800f33c:	b570      	push	{r4, r5, r6, lr}
 800f33e:	460e      	mov	r6, r1
 800f340:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f344:	2900      	cmp	r1, #0
 800f346:	b096      	sub	sp, #88	; 0x58
 800f348:	4614      	mov	r4, r2
 800f34a:	461d      	mov	r5, r3
 800f34c:	da08      	bge.n	800f360 <__swhatbuf_r+0x24>
 800f34e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f352:	2200      	movs	r2, #0
 800f354:	602a      	str	r2, [r5, #0]
 800f356:	061a      	lsls	r2, r3, #24
 800f358:	d410      	bmi.n	800f37c <__swhatbuf_r+0x40>
 800f35a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f35e:	e00e      	b.n	800f37e <__swhatbuf_r+0x42>
 800f360:	466a      	mov	r2, sp
 800f362:	f000 f96f 	bl	800f644 <_fstat_r>
 800f366:	2800      	cmp	r0, #0
 800f368:	dbf1      	blt.n	800f34e <__swhatbuf_r+0x12>
 800f36a:	9a01      	ldr	r2, [sp, #4]
 800f36c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f370:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f374:	425a      	negs	r2, r3
 800f376:	415a      	adcs	r2, r3
 800f378:	602a      	str	r2, [r5, #0]
 800f37a:	e7ee      	b.n	800f35a <__swhatbuf_r+0x1e>
 800f37c:	2340      	movs	r3, #64	; 0x40
 800f37e:	2000      	movs	r0, #0
 800f380:	6023      	str	r3, [r4, #0]
 800f382:	b016      	add	sp, #88	; 0x58
 800f384:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f388 <__smakebuf_r>:
 800f388:	898b      	ldrh	r3, [r1, #12]
 800f38a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f38c:	079d      	lsls	r5, r3, #30
 800f38e:	4606      	mov	r6, r0
 800f390:	460c      	mov	r4, r1
 800f392:	d507      	bpl.n	800f3a4 <__smakebuf_r+0x1c>
 800f394:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f398:	6023      	str	r3, [r4, #0]
 800f39a:	6123      	str	r3, [r4, #16]
 800f39c:	2301      	movs	r3, #1
 800f39e:	6163      	str	r3, [r4, #20]
 800f3a0:	b002      	add	sp, #8
 800f3a2:	bd70      	pop	{r4, r5, r6, pc}
 800f3a4:	ab01      	add	r3, sp, #4
 800f3a6:	466a      	mov	r2, sp
 800f3a8:	f7ff ffc8 	bl	800f33c <__swhatbuf_r>
 800f3ac:	9900      	ldr	r1, [sp, #0]
 800f3ae:	4605      	mov	r5, r0
 800f3b0:	4630      	mov	r0, r6
 800f3b2:	f7ff fa07 	bl	800e7c4 <_malloc_r>
 800f3b6:	b948      	cbnz	r0, 800f3cc <__smakebuf_r+0x44>
 800f3b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3bc:	059a      	lsls	r2, r3, #22
 800f3be:	d4ef      	bmi.n	800f3a0 <__smakebuf_r+0x18>
 800f3c0:	f023 0303 	bic.w	r3, r3, #3
 800f3c4:	f043 0302 	orr.w	r3, r3, #2
 800f3c8:	81a3      	strh	r3, [r4, #12]
 800f3ca:	e7e3      	b.n	800f394 <__smakebuf_r+0xc>
 800f3cc:	4b0d      	ldr	r3, [pc, #52]	; (800f404 <__smakebuf_r+0x7c>)
 800f3ce:	62b3      	str	r3, [r6, #40]	; 0x28
 800f3d0:	89a3      	ldrh	r3, [r4, #12]
 800f3d2:	6020      	str	r0, [r4, #0]
 800f3d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3d8:	81a3      	strh	r3, [r4, #12]
 800f3da:	9b00      	ldr	r3, [sp, #0]
 800f3dc:	6163      	str	r3, [r4, #20]
 800f3de:	9b01      	ldr	r3, [sp, #4]
 800f3e0:	6120      	str	r0, [r4, #16]
 800f3e2:	b15b      	cbz	r3, 800f3fc <__smakebuf_r+0x74>
 800f3e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f3e8:	4630      	mov	r0, r6
 800f3ea:	f000 f93d 	bl	800f668 <_isatty_r>
 800f3ee:	b128      	cbz	r0, 800f3fc <__smakebuf_r+0x74>
 800f3f0:	89a3      	ldrh	r3, [r4, #12]
 800f3f2:	f023 0303 	bic.w	r3, r3, #3
 800f3f6:	f043 0301 	orr.w	r3, r3, #1
 800f3fa:	81a3      	strh	r3, [r4, #12]
 800f3fc:	89a0      	ldrh	r0, [r4, #12]
 800f3fe:	4305      	orrs	r5, r0
 800f400:	81a5      	strh	r5, [r4, #12]
 800f402:	e7cd      	b.n	800f3a0 <__smakebuf_r+0x18>
 800f404:	0800f195 	.word	0x0800f195

0800f408 <__ascii_mbtowc>:
 800f408:	b082      	sub	sp, #8
 800f40a:	b901      	cbnz	r1, 800f40e <__ascii_mbtowc+0x6>
 800f40c:	a901      	add	r1, sp, #4
 800f40e:	b142      	cbz	r2, 800f422 <__ascii_mbtowc+0x1a>
 800f410:	b14b      	cbz	r3, 800f426 <__ascii_mbtowc+0x1e>
 800f412:	7813      	ldrb	r3, [r2, #0]
 800f414:	600b      	str	r3, [r1, #0]
 800f416:	7812      	ldrb	r2, [r2, #0]
 800f418:	1e10      	subs	r0, r2, #0
 800f41a:	bf18      	it	ne
 800f41c:	2001      	movne	r0, #1
 800f41e:	b002      	add	sp, #8
 800f420:	4770      	bx	lr
 800f422:	4610      	mov	r0, r2
 800f424:	e7fb      	b.n	800f41e <__ascii_mbtowc+0x16>
 800f426:	f06f 0001 	mvn.w	r0, #1
 800f42a:	e7f8      	b.n	800f41e <__ascii_mbtowc+0x16>

0800f42c <memmove>:
 800f42c:	4288      	cmp	r0, r1
 800f42e:	b510      	push	{r4, lr}
 800f430:	eb01 0402 	add.w	r4, r1, r2
 800f434:	d902      	bls.n	800f43c <memmove+0x10>
 800f436:	4284      	cmp	r4, r0
 800f438:	4623      	mov	r3, r4
 800f43a:	d807      	bhi.n	800f44c <memmove+0x20>
 800f43c:	1e43      	subs	r3, r0, #1
 800f43e:	42a1      	cmp	r1, r4
 800f440:	d008      	beq.n	800f454 <memmove+0x28>
 800f442:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f446:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f44a:	e7f8      	b.n	800f43e <memmove+0x12>
 800f44c:	4402      	add	r2, r0
 800f44e:	4601      	mov	r1, r0
 800f450:	428a      	cmp	r2, r1
 800f452:	d100      	bne.n	800f456 <memmove+0x2a>
 800f454:	bd10      	pop	{r4, pc}
 800f456:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f45a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f45e:	e7f7      	b.n	800f450 <memmove+0x24>

0800f460 <__malloc_lock>:
 800f460:	4801      	ldr	r0, [pc, #4]	; (800f468 <__malloc_lock+0x8>)
 800f462:	f7ff bf69 	b.w	800f338 <__retarget_lock_acquire_recursive>
 800f466:	bf00      	nop
 800f468:	20005328 	.word	0x20005328

0800f46c <__malloc_unlock>:
 800f46c:	4801      	ldr	r0, [pc, #4]	; (800f474 <__malloc_unlock+0x8>)
 800f46e:	f7ff bf64 	b.w	800f33a <__retarget_lock_release_recursive>
 800f472:	bf00      	nop
 800f474:	20005328 	.word	0x20005328

0800f478 <_realloc_r>:
 800f478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f47c:	4680      	mov	r8, r0
 800f47e:	4614      	mov	r4, r2
 800f480:	460e      	mov	r6, r1
 800f482:	b921      	cbnz	r1, 800f48e <_realloc_r+0x16>
 800f484:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f488:	4611      	mov	r1, r2
 800f48a:	f7ff b99b 	b.w	800e7c4 <_malloc_r>
 800f48e:	b92a      	cbnz	r2, 800f49c <_realloc_r+0x24>
 800f490:	f7ff f92c 	bl	800e6ec <_free_r>
 800f494:	4625      	mov	r5, r4
 800f496:	4628      	mov	r0, r5
 800f498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f49c:	f000 f906 	bl	800f6ac <_malloc_usable_size_r>
 800f4a0:	4284      	cmp	r4, r0
 800f4a2:	4607      	mov	r7, r0
 800f4a4:	d802      	bhi.n	800f4ac <_realloc_r+0x34>
 800f4a6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f4aa:	d812      	bhi.n	800f4d2 <_realloc_r+0x5a>
 800f4ac:	4621      	mov	r1, r4
 800f4ae:	4640      	mov	r0, r8
 800f4b0:	f7ff f988 	bl	800e7c4 <_malloc_r>
 800f4b4:	4605      	mov	r5, r0
 800f4b6:	2800      	cmp	r0, #0
 800f4b8:	d0ed      	beq.n	800f496 <_realloc_r+0x1e>
 800f4ba:	42bc      	cmp	r4, r7
 800f4bc:	4622      	mov	r2, r4
 800f4be:	4631      	mov	r1, r6
 800f4c0:	bf28      	it	cs
 800f4c2:	463a      	movcs	r2, r7
 800f4c4:	f7fd f938 	bl	800c738 <memcpy>
 800f4c8:	4631      	mov	r1, r6
 800f4ca:	4640      	mov	r0, r8
 800f4cc:	f7ff f90e 	bl	800e6ec <_free_r>
 800f4d0:	e7e1      	b.n	800f496 <_realloc_r+0x1e>
 800f4d2:	4635      	mov	r5, r6
 800f4d4:	e7df      	b.n	800f496 <_realloc_r+0x1e>

0800f4d6 <_raise_r>:
 800f4d6:	291f      	cmp	r1, #31
 800f4d8:	b538      	push	{r3, r4, r5, lr}
 800f4da:	4604      	mov	r4, r0
 800f4dc:	460d      	mov	r5, r1
 800f4de:	d904      	bls.n	800f4ea <_raise_r+0x14>
 800f4e0:	2316      	movs	r3, #22
 800f4e2:	6003      	str	r3, [r0, #0]
 800f4e4:	f04f 30ff 	mov.w	r0, #4294967295
 800f4e8:	bd38      	pop	{r3, r4, r5, pc}
 800f4ea:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f4ec:	b112      	cbz	r2, 800f4f4 <_raise_r+0x1e>
 800f4ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f4f2:	b94b      	cbnz	r3, 800f508 <_raise_r+0x32>
 800f4f4:	4620      	mov	r0, r4
 800f4f6:	f000 f831 	bl	800f55c <_getpid_r>
 800f4fa:	462a      	mov	r2, r5
 800f4fc:	4601      	mov	r1, r0
 800f4fe:	4620      	mov	r0, r4
 800f500:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f504:	f000 b818 	b.w	800f538 <_kill_r>
 800f508:	2b01      	cmp	r3, #1
 800f50a:	d00a      	beq.n	800f522 <_raise_r+0x4c>
 800f50c:	1c59      	adds	r1, r3, #1
 800f50e:	d103      	bne.n	800f518 <_raise_r+0x42>
 800f510:	2316      	movs	r3, #22
 800f512:	6003      	str	r3, [r0, #0]
 800f514:	2001      	movs	r0, #1
 800f516:	e7e7      	b.n	800f4e8 <_raise_r+0x12>
 800f518:	2400      	movs	r4, #0
 800f51a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f51e:	4628      	mov	r0, r5
 800f520:	4798      	blx	r3
 800f522:	2000      	movs	r0, #0
 800f524:	e7e0      	b.n	800f4e8 <_raise_r+0x12>
	...

0800f528 <raise>:
 800f528:	4b02      	ldr	r3, [pc, #8]	; (800f534 <raise+0xc>)
 800f52a:	4601      	mov	r1, r0
 800f52c:	6818      	ldr	r0, [r3, #0]
 800f52e:	f7ff bfd2 	b.w	800f4d6 <_raise_r>
 800f532:	bf00      	nop
 800f534:	20000028 	.word	0x20000028

0800f538 <_kill_r>:
 800f538:	b538      	push	{r3, r4, r5, lr}
 800f53a:	4d07      	ldr	r5, [pc, #28]	; (800f558 <_kill_r+0x20>)
 800f53c:	2300      	movs	r3, #0
 800f53e:	4604      	mov	r4, r0
 800f540:	4608      	mov	r0, r1
 800f542:	4611      	mov	r1, r2
 800f544:	602b      	str	r3, [r5, #0]
 800f546:	f7f5 f847 	bl	80045d8 <_kill>
 800f54a:	1c43      	adds	r3, r0, #1
 800f54c:	d102      	bne.n	800f554 <_kill_r+0x1c>
 800f54e:	682b      	ldr	r3, [r5, #0]
 800f550:	b103      	cbz	r3, 800f554 <_kill_r+0x1c>
 800f552:	6023      	str	r3, [r4, #0]
 800f554:	bd38      	pop	{r3, r4, r5, pc}
 800f556:	bf00      	nop
 800f558:	2000532c 	.word	0x2000532c

0800f55c <_getpid_r>:
 800f55c:	f7f5 b834 	b.w	80045c8 <_getpid>

0800f560 <__sread>:
 800f560:	b510      	push	{r4, lr}
 800f562:	460c      	mov	r4, r1
 800f564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f568:	f000 f8a8 	bl	800f6bc <_read_r>
 800f56c:	2800      	cmp	r0, #0
 800f56e:	bfab      	itete	ge
 800f570:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f572:	89a3      	ldrhlt	r3, [r4, #12]
 800f574:	181b      	addge	r3, r3, r0
 800f576:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f57a:	bfac      	ite	ge
 800f57c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f57e:	81a3      	strhlt	r3, [r4, #12]
 800f580:	bd10      	pop	{r4, pc}

0800f582 <__swrite>:
 800f582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f586:	461f      	mov	r7, r3
 800f588:	898b      	ldrh	r3, [r1, #12]
 800f58a:	05db      	lsls	r3, r3, #23
 800f58c:	4605      	mov	r5, r0
 800f58e:	460c      	mov	r4, r1
 800f590:	4616      	mov	r6, r2
 800f592:	d505      	bpl.n	800f5a0 <__swrite+0x1e>
 800f594:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f598:	2302      	movs	r3, #2
 800f59a:	2200      	movs	r2, #0
 800f59c:	f000 f874 	bl	800f688 <_lseek_r>
 800f5a0:	89a3      	ldrh	r3, [r4, #12]
 800f5a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f5a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f5aa:	81a3      	strh	r3, [r4, #12]
 800f5ac:	4632      	mov	r2, r6
 800f5ae:	463b      	mov	r3, r7
 800f5b0:	4628      	mov	r0, r5
 800f5b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f5b6:	f000 b823 	b.w	800f600 <_write_r>

0800f5ba <__sseek>:
 800f5ba:	b510      	push	{r4, lr}
 800f5bc:	460c      	mov	r4, r1
 800f5be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5c2:	f000 f861 	bl	800f688 <_lseek_r>
 800f5c6:	1c43      	adds	r3, r0, #1
 800f5c8:	89a3      	ldrh	r3, [r4, #12]
 800f5ca:	bf15      	itete	ne
 800f5cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800f5ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f5d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f5d6:	81a3      	strheq	r3, [r4, #12]
 800f5d8:	bf18      	it	ne
 800f5da:	81a3      	strhne	r3, [r4, #12]
 800f5dc:	bd10      	pop	{r4, pc}

0800f5de <__sclose>:
 800f5de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5e2:	f000 b81f 	b.w	800f624 <_close_r>

0800f5e6 <__ascii_wctomb>:
 800f5e6:	b149      	cbz	r1, 800f5fc <__ascii_wctomb+0x16>
 800f5e8:	2aff      	cmp	r2, #255	; 0xff
 800f5ea:	bf85      	ittet	hi
 800f5ec:	238a      	movhi	r3, #138	; 0x8a
 800f5ee:	6003      	strhi	r3, [r0, #0]
 800f5f0:	700a      	strbls	r2, [r1, #0]
 800f5f2:	f04f 30ff 	movhi.w	r0, #4294967295
 800f5f6:	bf98      	it	ls
 800f5f8:	2001      	movls	r0, #1
 800f5fa:	4770      	bx	lr
 800f5fc:	4608      	mov	r0, r1
 800f5fe:	4770      	bx	lr

0800f600 <_write_r>:
 800f600:	b538      	push	{r3, r4, r5, lr}
 800f602:	4d07      	ldr	r5, [pc, #28]	; (800f620 <_write_r+0x20>)
 800f604:	4604      	mov	r4, r0
 800f606:	4608      	mov	r0, r1
 800f608:	4611      	mov	r1, r2
 800f60a:	2200      	movs	r2, #0
 800f60c:	602a      	str	r2, [r5, #0]
 800f60e:	461a      	mov	r2, r3
 800f610:	f7f5 f819 	bl	8004646 <_write>
 800f614:	1c43      	adds	r3, r0, #1
 800f616:	d102      	bne.n	800f61e <_write_r+0x1e>
 800f618:	682b      	ldr	r3, [r5, #0]
 800f61a:	b103      	cbz	r3, 800f61e <_write_r+0x1e>
 800f61c:	6023      	str	r3, [r4, #0]
 800f61e:	bd38      	pop	{r3, r4, r5, pc}
 800f620:	2000532c 	.word	0x2000532c

0800f624 <_close_r>:
 800f624:	b538      	push	{r3, r4, r5, lr}
 800f626:	4d06      	ldr	r5, [pc, #24]	; (800f640 <_close_r+0x1c>)
 800f628:	2300      	movs	r3, #0
 800f62a:	4604      	mov	r4, r0
 800f62c:	4608      	mov	r0, r1
 800f62e:	602b      	str	r3, [r5, #0]
 800f630:	f7f5 f825 	bl	800467e <_close>
 800f634:	1c43      	adds	r3, r0, #1
 800f636:	d102      	bne.n	800f63e <_close_r+0x1a>
 800f638:	682b      	ldr	r3, [r5, #0]
 800f63a:	b103      	cbz	r3, 800f63e <_close_r+0x1a>
 800f63c:	6023      	str	r3, [r4, #0]
 800f63e:	bd38      	pop	{r3, r4, r5, pc}
 800f640:	2000532c 	.word	0x2000532c

0800f644 <_fstat_r>:
 800f644:	b538      	push	{r3, r4, r5, lr}
 800f646:	4d07      	ldr	r5, [pc, #28]	; (800f664 <_fstat_r+0x20>)
 800f648:	2300      	movs	r3, #0
 800f64a:	4604      	mov	r4, r0
 800f64c:	4608      	mov	r0, r1
 800f64e:	4611      	mov	r1, r2
 800f650:	602b      	str	r3, [r5, #0]
 800f652:	f7f5 f820 	bl	8004696 <_fstat>
 800f656:	1c43      	adds	r3, r0, #1
 800f658:	d102      	bne.n	800f660 <_fstat_r+0x1c>
 800f65a:	682b      	ldr	r3, [r5, #0]
 800f65c:	b103      	cbz	r3, 800f660 <_fstat_r+0x1c>
 800f65e:	6023      	str	r3, [r4, #0]
 800f660:	bd38      	pop	{r3, r4, r5, pc}
 800f662:	bf00      	nop
 800f664:	2000532c 	.word	0x2000532c

0800f668 <_isatty_r>:
 800f668:	b538      	push	{r3, r4, r5, lr}
 800f66a:	4d06      	ldr	r5, [pc, #24]	; (800f684 <_isatty_r+0x1c>)
 800f66c:	2300      	movs	r3, #0
 800f66e:	4604      	mov	r4, r0
 800f670:	4608      	mov	r0, r1
 800f672:	602b      	str	r3, [r5, #0]
 800f674:	f7f5 f81f 	bl	80046b6 <_isatty>
 800f678:	1c43      	adds	r3, r0, #1
 800f67a:	d102      	bne.n	800f682 <_isatty_r+0x1a>
 800f67c:	682b      	ldr	r3, [r5, #0]
 800f67e:	b103      	cbz	r3, 800f682 <_isatty_r+0x1a>
 800f680:	6023      	str	r3, [r4, #0]
 800f682:	bd38      	pop	{r3, r4, r5, pc}
 800f684:	2000532c 	.word	0x2000532c

0800f688 <_lseek_r>:
 800f688:	b538      	push	{r3, r4, r5, lr}
 800f68a:	4d07      	ldr	r5, [pc, #28]	; (800f6a8 <_lseek_r+0x20>)
 800f68c:	4604      	mov	r4, r0
 800f68e:	4608      	mov	r0, r1
 800f690:	4611      	mov	r1, r2
 800f692:	2200      	movs	r2, #0
 800f694:	602a      	str	r2, [r5, #0]
 800f696:	461a      	mov	r2, r3
 800f698:	f7f5 f818 	bl	80046cc <_lseek>
 800f69c:	1c43      	adds	r3, r0, #1
 800f69e:	d102      	bne.n	800f6a6 <_lseek_r+0x1e>
 800f6a0:	682b      	ldr	r3, [r5, #0]
 800f6a2:	b103      	cbz	r3, 800f6a6 <_lseek_r+0x1e>
 800f6a4:	6023      	str	r3, [r4, #0]
 800f6a6:	bd38      	pop	{r3, r4, r5, pc}
 800f6a8:	2000532c 	.word	0x2000532c

0800f6ac <_malloc_usable_size_r>:
 800f6ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f6b0:	1f18      	subs	r0, r3, #4
 800f6b2:	2b00      	cmp	r3, #0
 800f6b4:	bfbc      	itt	lt
 800f6b6:	580b      	ldrlt	r3, [r1, r0]
 800f6b8:	18c0      	addlt	r0, r0, r3
 800f6ba:	4770      	bx	lr

0800f6bc <_read_r>:
 800f6bc:	b538      	push	{r3, r4, r5, lr}
 800f6be:	4d07      	ldr	r5, [pc, #28]	; (800f6dc <_read_r+0x20>)
 800f6c0:	4604      	mov	r4, r0
 800f6c2:	4608      	mov	r0, r1
 800f6c4:	4611      	mov	r1, r2
 800f6c6:	2200      	movs	r2, #0
 800f6c8:	602a      	str	r2, [r5, #0]
 800f6ca:	461a      	mov	r2, r3
 800f6cc:	f7f4 ff9e 	bl	800460c <_read>
 800f6d0:	1c43      	adds	r3, r0, #1
 800f6d2:	d102      	bne.n	800f6da <_read_r+0x1e>
 800f6d4:	682b      	ldr	r3, [r5, #0]
 800f6d6:	b103      	cbz	r3, 800f6da <_read_r+0x1e>
 800f6d8:	6023      	str	r3, [r4, #0]
 800f6da:	bd38      	pop	{r3, r4, r5, pc}
 800f6dc:	2000532c 	.word	0x2000532c

0800f6e0 <log10>:
 800f6e0:	b538      	push	{r3, r4, r5, lr}
 800f6e2:	ed2d 8b02 	vpush	{d8}
 800f6e6:	ec55 4b10 	vmov	r4, r5, d0
 800f6ea:	f000 f8a9 	bl	800f840 <__ieee754_log10>
 800f6ee:	4622      	mov	r2, r4
 800f6f0:	462b      	mov	r3, r5
 800f6f2:	4620      	mov	r0, r4
 800f6f4:	4629      	mov	r1, r5
 800f6f6:	eeb0 8a40 	vmov.f32	s16, s0
 800f6fa:	eef0 8a60 	vmov.f32	s17, s1
 800f6fe:	f7f1 fa15 	bl	8000b2c <__aeabi_dcmpun>
 800f702:	b998      	cbnz	r0, 800f72c <log10+0x4c>
 800f704:	2200      	movs	r2, #0
 800f706:	2300      	movs	r3, #0
 800f708:	4620      	mov	r0, r4
 800f70a:	4629      	mov	r1, r5
 800f70c:	f7f1 f9f0 	bl	8000af0 <__aeabi_dcmple>
 800f710:	b160      	cbz	r0, 800f72c <log10+0x4c>
 800f712:	2200      	movs	r2, #0
 800f714:	2300      	movs	r3, #0
 800f716:	4620      	mov	r0, r4
 800f718:	4629      	mov	r1, r5
 800f71a:	f7f1 f9d5 	bl	8000ac8 <__aeabi_dcmpeq>
 800f71e:	b160      	cbz	r0, 800f73a <log10+0x5a>
 800f720:	f7fc ffe0 	bl	800c6e4 <__errno>
 800f724:	ed9f 8b0a 	vldr	d8, [pc, #40]	; 800f750 <log10+0x70>
 800f728:	2322      	movs	r3, #34	; 0x22
 800f72a:	6003      	str	r3, [r0, #0]
 800f72c:	eeb0 0a48 	vmov.f32	s0, s16
 800f730:	eef0 0a68 	vmov.f32	s1, s17
 800f734:	ecbd 8b02 	vpop	{d8}
 800f738:	bd38      	pop	{r3, r4, r5, pc}
 800f73a:	f7fc ffd3 	bl	800c6e4 <__errno>
 800f73e:	ecbd 8b02 	vpop	{d8}
 800f742:	2321      	movs	r3, #33	; 0x21
 800f744:	6003      	str	r3, [r0, #0]
 800f746:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f74a:	4803      	ldr	r0, [pc, #12]	; (800f758 <log10+0x78>)
 800f74c:	f000 bf28 	b.w	80105a0 <nan>
 800f750:	00000000 	.word	0x00000000
 800f754:	fff00000 	.word	0xfff00000
 800f758:	0801182f 	.word	0x0801182f

0800f75c <pow>:
 800f75c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f75e:	ed2d 8b02 	vpush	{d8}
 800f762:	eeb0 8a40 	vmov.f32	s16, s0
 800f766:	eef0 8a60 	vmov.f32	s17, s1
 800f76a:	ec55 4b11 	vmov	r4, r5, d1
 800f76e:	f000 f8f3 	bl	800f958 <__ieee754_pow>
 800f772:	4622      	mov	r2, r4
 800f774:	462b      	mov	r3, r5
 800f776:	4620      	mov	r0, r4
 800f778:	4629      	mov	r1, r5
 800f77a:	ec57 6b10 	vmov	r6, r7, d0
 800f77e:	f7f1 f9d5 	bl	8000b2c <__aeabi_dcmpun>
 800f782:	2800      	cmp	r0, #0
 800f784:	d13b      	bne.n	800f7fe <pow+0xa2>
 800f786:	ec51 0b18 	vmov	r0, r1, d8
 800f78a:	2200      	movs	r2, #0
 800f78c:	2300      	movs	r3, #0
 800f78e:	f7f1 f99b 	bl	8000ac8 <__aeabi_dcmpeq>
 800f792:	b1b8      	cbz	r0, 800f7c4 <pow+0x68>
 800f794:	2200      	movs	r2, #0
 800f796:	2300      	movs	r3, #0
 800f798:	4620      	mov	r0, r4
 800f79a:	4629      	mov	r1, r5
 800f79c:	f7f1 f994 	bl	8000ac8 <__aeabi_dcmpeq>
 800f7a0:	2800      	cmp	r0, #0
 800f7a2:	d146      	bne.n	800f832 <pow+0xd6>
 800f7a4:	ec45 4b10 	vmov	d0, r4, r5
 800f7a8:	f000 feef 	bl	801058a <finite>
 800f7ac:	b338      	cbz	r0, 800f7fe <pow+0xa2>
 800f7ae:	2200      	movs	r2, #0
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	4620      	mov	r0, r4
 800f7b4:	4629      	mov	r1, r5
 800f7b6:	f7f1 f991 	bl	8000adc <__aeabi_dcmplt>
 800f7ba:	b300      	cbz	r0, 800f7fe <pow+0xa2>
 800f7bc:	f7fc ff92 	bl	800c6e4 <__errno>
 800f7c0:	2322      	movs	r3, #34	; 0x22
 800f7c2:	e01b      	b.n	800f7fc <pow+0xa0>
 800f7c4:	ec47 6b10 	vmov	d0, r6, r7
 800f7c8:	f000 fedf 	bl	801058a <finite>
 800f7cc:	b9e0      	cbnz	r0, 800f808 <pow+0xac>
 800f7ce:	eeb0 0a48 	vmov.f32	s0, s16
 800f7d2:	eef0 0a68 	vmov.f32	s1, s17
 800f7d6:	f000 fed8 	bl	801058a <finite>
 800f7da:	b1a8      	cbz	r0, 800f808 <pow+0xac>
 800f7dc:	ec45 4b10 	vmov	d0, r4, r5
 800f7e0:	f000 fed3 	bl	801058a <finite>
 800f7e4:	b180      	cbz	r0, 800f808 <pow+0xac>
 800f7e6:	4632      	mov	r2, r6
 800f7e8:	463b      	mov	r3, r7
 800f7ea:	4630      	mov	r0, r6
 800f7ec:	4639      	mov	r1, r7
 800f7ee:	f7f1 f99d 	bl	8000b2c <__aeabi_dcmpun>
 800f7f2:	2800      	cmp	r0, #0
 800f7f4:	d0e2      	beq.n	800f7bc <pow+0x60>
 800f7f6:	f7fc ff75 	bl	800c6e4 <__errno>
 800f7fa:	2321      	movs	r3, #33	; 0x21
 800f7fc:	6003      	str	r3, [r0, #0]
 800f7fe:	ecbd 8b02 	vpop	{d8}
 800f802:	ec47 6b10 	vmov	d0, r6, r7
 800f806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f808:	2200      	movs	r2, #0
 800f80a:	2300      	movs	r3, #0
 800f80c:	4630      	mov	r0, r6
 800f80e:	4639      	mov	r1, r7
 800f810:	f7f1 f95a 	bl	8000ac8 <__aeabi_dcmpeq>
 800f814:	2800      	cmp	r0, #0
 800f816:	d0f2      	beq.n	800f7fe <pow+0xa2>
 800f818:	eeb0 0a48 	vmov.f32	s0, s16
 800f81c:	eef0 0a68 	vmov.f32	s1, s17
 800f820:	f000 feb3 	bl	801058a <finite>
 800f824:	2800      	cmp	r0, #0
 800f826:	d0ea      	beq.n	800f7fe <pow+0xa2>
 800f828:	ec45 4b10 	vmov	d0, r4, r5
 800f82c:	f000 fead 	bl	801058a <finite>
 800f830:	e7c3      	b.n	800f7ba <pow+0x5e>
 800f832:	4f01      	ldr	r7, [pc, #4]	; (800f838 <pow+0xdc>)
 800f834:	2600      	movs	r6, #0
 800f836:	e7e2      	b.n	800f7fe <pow+0xa2>
 800f838:	3ff00000 	.word	0x3ff00000
 800f83c:	00000000 	.word	0x00000000

0800f840 <__ieee754_log10>:
 800f840:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f844:	ec55 4b10 	vmov	r4, r5, d0
 800f848:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800f84c:	462b      	mov	r3, r5
 800f84e:	da2f      	bge.n	800f8b0 <__ieee754_log10+0x70>
 800f850:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800f854:	4322      	orrs	r2, r4
 800f856:	d109      	bne.n	800f86c <__ieee754_log10+0x2c>
 800f858:	493b      	ldr	r1, [pc, #236]	; (800f948 <__ieee754_log10+0x108>)
 800f85a:	2200      	movs	r2, #0
 800f85c:	2300      	movs	r3, #0
 800f85e:	2000      	movs	r0, #0
 800f860:	f7f0 fff4 	bl	800084c <__aeabi_ddiv>
 800f864:	ec41 0b10 	vmov	d0, r0, r1
 800f868:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f86c:	2d00      	cmp	r5, #0
 800f86e:	da09      	bge.n	800f884 <__ieee754_log10+0x44>
 800f870:	ee10 2a10 	vmov	r2, s0
 800f874:	ee10 0a10 	vmov	r0, s0
 800f878:	4629      	mov	r1, r5
 800f87a:	f7f0 fd05 	bl	8000288 <__aeabi_dsub>
 800f87e:	2200      	movs	r2, #0
 800f880:	2300      	movs	r3, #0
 800f882:	e7ed      	b.n	800f860 <__ieee754_log10+0x20>
 800f884:	4b31      	ldr	r3, [pc, #196]	; (800f94c <__ieee754_log10+0x10c>)
 800f886:	2200      	movs	r2, #0
 800f888:	4629      	mov	r1, r5
 800f88a:	ee10 0a10 	vmov	r0, s0
 800f88e:	f7f0 feb3 	bl	80005f8 <__aeabi_dmul>
 800f892:	f06f 0235 	mvn.w	r2, #53	; 0x35
 800f896:	4604      	mov	r4, r0
 800f898:	460d      	mov	r5, r1
 800f89a:	460b      	mov	r3, r1
 800f89c:	492c      	ldr	r1, [pc, #176]	; (800f950 <__ieee754_log10+0x110>)
 800f89e:	428b      	cmp	r3, r1
 800f8a0:	dd08      	ble.n	800f8b4 <__ieee754_log10+0x74>
 800f8a2:	4622      	mov	r2, r4
 800f8a4:	462b      	mov	r3, r5
 800f8a6:	4620      	mov	r0, r4
 800f8a8:	4629      	mov	r1, r5
 800f8aa:	f7f0 fcef 	bl	800028c <__adddf3>
 800f8ae:	e7d9      	b.n	800f864 <__ieee754_log10+0x24>
 800f8b0:	2200      	movs	r2, #0
 800f8b2:	e7f3      	b.n	800f89c <__ieee754_log10+0x5c>
 800f8b4:	1518      	asrs	r0, r3, #20
 800f8b6:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800f8ba:	4410      	add	r0, r2
 800f8bc:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 800f8c0:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800f8c4:	f3c3 0813 	ubfx	r8, r3, #0, #20
 800f8c8:	f7f0 fe2c 	bl	8000524 <__aeabi_i2d>
 800f8cc:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 800f8d0:	3303      	adds	r3, #3
 800f8d2:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 800f8d6:	ec45 4b10 	vmov	d0, r4, r5
 800f8da:	4606      	mov	r6, r0
 800f8dc:	460f      	mov	r7, r1
 800f8de:	f000 feef 	bl	80106c0 <__ieee754_log>
 800f8e2:	a313      	add	r3, pc, #76	; (adr r3, 800f930 <__ieee754_log10+0xf0>)
 800f8e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8e8:	4630      	mov	r0, r6
 800f8ea:	4639      	mov	r1, r7
 800f8ec:	ec59 8b10 	vmov	r8, r9, d0
 800f8f0:	f7f0 fe82 	bl	80005f8 <__aeabi_dmul>
 800f8f4:	a310      	add	r3, pc, #64	; (adr r3, 800f938 <__ieee754_log10+0xf8>)
 800f8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f8fa:	4604      	mov	r4, r0
 800f8fc:	460d      	mov	r5, r1
 800f8fe:	4640      	mov	r0, r8
 800f900:	4649      	mov	r1, r9
 800f902:	f7f0 fe79 	bl	80005f8 <__aeabi_dmul>
 800f906:	4602      	mov	r2, r0
 800f908:	460b      	mov	r3, r1
 800f90a:	4620      	mov	r0, r4
 800f90c:	4629      	mov	r1, r5
 800f90e:	f7f0 fcbd 	bl	800028c <__adddf3>
 800f912:	a30b      	add	r3, pc, #44	; (adr r3, 800f940 <__ieee754_log10+0x100>)
 800f914:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f918:	4604      	mov	r4, r0
 800f91a:	460d      	mov	r5, r1
 800f91c:	4630      	mov	r0, r6
 800f91e:	4639      	mov	r1, r7
 800f920:	f7f0 fe6a 	bl	80005f8 <__aeabi_dmul>
 800f924:	4602      	mov	r2, r0
 800f926:	460b      	mov	r3, r1
 800f928:	4620      	mov	r0, r4
 800f92a:	4629      	mov	r1, r5
 800f92c:	e7bd      	b.n	800f8aa <__ieee754_log10+0x6a>
 800f92e:	bf00      	nop
 800f930:	11f12b36 	.word	0x11f12b36
 800f934:	3d59fef3 	.word	0x3d59fef3
 800f938:	1526e50e 	.word	0x1526e50e
 800f93c:	3fdbcb7b 	.word	0x3fdbcb7b
 800f940:	509f6000 	.word	0x509f6000
 800f944:	3fd34413 	.word	0x3fd34413
 800f948:	c3500000 	.word	0xc3500000
 800f94c:	43500000 	.word	0x43500000
 800f950:	7fefffff 	.word	0x7fefffff
 800f954:	00000000 	.word	0x00000000

0800f958 <__ieee754_pow>:
 800f958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f95c:	ed2d 8b06 	vpush	{d8-d10}
 800f960:	b089      	sub	sp, #36	; 0x24
 800f962:	ed8d 1b00 	vstr	d1, [sp]
 800f966:	e9dd 2900 	ldrd	r2, r9, [sp]
 800f96a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800f96e:	ea58 0102 	orrs.w	r1, r8, r2
 800f972:	ec57 6b10 	vmov	r6, r7, d0
 800f976:	d115      	bne.n	800f9a4 <__ieee754_pow+0x4c>
 800f978:	19b3      	adds	r3, r6, r6
 800f97a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800f97e:	4152      	adcs	r2, r2
 800f980:	4299      	cmp	r1, r3
 800f982:	4b89      	ldr	r3, [pc, #548]	; (800fba8 <__ieee754_pow+0x250>)
 800f984:	4193      	sbcs	r3, r2
 800f986:	f080 84d2 	bcs.w	801032e <__ieee754_pow+0x9d6>
 800f98a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f98e:	4630      	mov	r0, r6
 800f990:	4639      	mov	r1, r7
 800f992:	f7f0 fc7b 	bl	800028c <__adddf3>
 800f996:	ec41 0b10 	vmov	d0, r0, r1
 800f99a:	b009      	add	sp, #36	; 0x24
 800f99c:	ecbd 8b06 	vpop	{d8-d10}
 800f9a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9a4:	4b81      	ldr	r3, [pc, #516]	; (800fbac <__ieee754_pow+0x254>)
 800f9a6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800f9aa:	429c      	cmp	r4, r3
 800f9ac:	ee10 aa10 	vmov	sl, s0
 800f9b0:	463d      	mov	r5, r7
 800f9b2:	dc06      	bgt.n	800f9c2 <__ieee754_pow+0x6a>
 800f9b4:	d101      	bne.n	800f9ba <__ieee754_pow+0x62>
 800f9b6:	2e00      	cmp	r6, #0
 800f9b8:	d1e7      	bne.n	800f98a <__ieee754_pow+0x32>
 800f9ba:	4598      	cmp	r8, r3
 800f9bc:	dc01      	bgt.n	800f9c2 <__ieee754_pow+0x6a>
 800f9be:	d10f      	bne.n	800f9e0 <__ieee754_pow+0x88>
 800f9c0:	b172      	cbz	r2, 800f9e0 <__ieee754_pow+0x88>
 800f9c2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800f9c6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800f9ca:	ea55 050a 	orrs.w	r5, r5, sl
 800f9ce:	d1dc      	bne.n	800f98a <__ieee754_pow+0x32>
 800f9d0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f9d4:	18db      	adds	r3, r3, r3
 800f9d6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800f9da:	4152      	adcs	r2, r2
 800f9dc:	429d      	cmp	r5, r3
 800f9de:	e7d0      	b.n	800f982 <__ieee754_pow+0x2a>
 800f9e0:	2d00      	cmp	r5, #0
 800f9e2:	da3b      	bge.n	800fa5c <__ieee754_pow+0x104>
 800f9e4:	4b72      	ldr	r3, [pc, #456]	; (800fbb0 <__ieee754_pow+0x258>)
 800f9e6:	4598      	cmp	r8, r3
 800f9e8:	dc51      	bgt.n	800fa8e <__ieee754_pow+0x136>
 800f9ea:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800f9ee:	4598      	cmp	r8, r3
 800f9f0:	f340 84ac 	ble.w	801034c <__ieee754_pow+0x9f4>
 800f9f4:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f9f8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800f9fc:	2b14      	cmp	r3, #20
 800f9fe:	dd0f      	ble.n	800fa20 <__ieee754_pow+0xc8>
 800fa00:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800fa04:	fa22 f103 	lsr.w	r1, r2, r3
 800fa08:	fa01 f303 	lsl.w	r3, r1, r3
 800fa0c:	4293      	cmp	r3, r2
 800fa0e:	f040 849d 	bne.w	801034c <__ieee754_pow+0x9f4>
 800fa12:	f001 0101 	and.w	r1, r1, #1
 800fa16:	f1c1 0302 	rsb	r3, r1, #2
 800fa1a:	9304      	str	r3, [sp, #16]
 800fa1c:	b182      	cbz	r2, 800fa40 <__ieee754_pow+0xe8>
 800fa1e:	e05f      	b.n	800fae0 <__ieee754_pow+0x188>
 800fa20:	2a00      	cmp	r2, #0
 800fa22:	d15b      	bne.n	800fadc <__ieee754_pow+0x184>
 800fa24:	f1c3 0314 	rsb	r3, r3, #20
 800fa28:	fa48 f103 	asr.w	r1, r8, r3
 800fa2c:	fa01 f303 	lsl.w	r3, r1, r3
 800fa30:	4543      	cmp	r3, r8
 800fa32:	f040 8488 	bne.w	8010346 <__ieee754_pow+0x9ee>
 800fa36:	f001 0101 	and.w	r1, r1, #1
 800fa3a:	f1c1 0302 	rsb	r3, r1, #2
 800fa3e:	9304      	str	r3, [sp, #16]
 800fa40:	4b5c      	ldr	r3, [pc, #368]	; (800fbb4 <__ieee754_pow+0x25c>)
 800fa42:	4598      	cmp	r8, r3
 800fa44:	d132      	bne.n	800faac <__ieee754_pow+0x154>
 800fa46:	f1b9 0f00 	cmp.w	r9, #0
 800fa4a:	f280 8478 	bge.w	801033e <__ieee754_pow+0x9e6>
 800fa4e:	4959      	ldr	r1, [pc, #356]	; (800fbb4 <__ieee754_pow+0x25c>)
 800fa50:	4632      	mov	r2, r6
 800fa52:	463b      	mov	r3, r7
 800fa54:	2000      	movs	r0, #0
 800fa56:	f7f0 fef9 	bl	800084c <__aeabi_ddiv>
 800fa5a:	e79c      	b.n	800f996 <__ieee754_pow+0x3e>
 800fa5c:	2300      	movs	r3, #0
 800fa5e:	9304      	str	r3, [sp, #16]
 800fa60:	2a00      	cmp	r2, #0
 800fa62:	d13d      	bne.n	800fae0 <__ieee754_pow+0x188>
 800fa64:	4b51      	ldr	r3, [pc, #324]	; (800fbac <__ieee754_pow+0x254>)
 800fa66:	4598      	cmp	r8, r3
 800fa68:	d1ea      	bne.n	800fa40 <__ieee754_pow+0xe8>
 800fa6a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800fa6e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800fa72:	ea53 030a 	orrs.w	r3, r3, sl
 800fa76:	f000 845a 	beq.w	801032e <__ieee754_pow+0x9d6>
 800fa7a:	4b4f      	ldr	r3, [pc, #316]	; (800fbb8 <__ieee754_pow+0x260>)
 800fa7c:	429c      	cmp	r4, r3
 800fa7e:	dd08      	ble.n	800fa92 <__ieee754_pow+0x13a>
 800fa80:	f1b9 0f00 	cmp.w	r9, #0
 800fa84:	f2c0 8457 	blt.w	8010336 <__ieee754_pow+0x9de>
 800fa88:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fa8c:	e783      	b.n	800f996 <__ieee754_pow+0x3e>
 800fa8e:	2302      	movs	r3, #2
 800fa90:	e7e5      	b.n	800fa5e <__ieee754_pow+0x106>
 800fa92:	f1b9 0f00 	cmp.w	r9, #0
 800fa96:	f04f 0000 	mov.w	r0, #0
 800fa9a:	f04f 0100 	mov.w	r1, #0
 800fa9e:	f6bf af7a 	bge.w	800f996 <__ieee754_pow+0x3e>
 800faa2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800faa6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800faaa:	e774      	b.n	800f996 <__ieee754_pow+0x3e>
 800faac:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800fab0:	d106      	bne.n	800fac0 <__ieee754_pow+0x168>
 800fab2:	4632      	mov	r2, r6
 800fab4:	463b      	mov	r3, r7
 800fab6:	4630      	mov	r0, r6
 800fab8:	4639      	mov	r1, r7
 800faba:	f7f0 fd9d 	bl	80005f8 <__aeabi_dmul>
 800fabe:	e76a      	b.n	800f996 <__ieee754_pow+0x3e>
 800fac0:	4b3e      	ldr	r3, [pc, #248]	; (800fbbc <__ieee754_pow+0x264>)
 800fac2:	4599      	cmp	r9, r3
 800fac4:	d10c      	bne.n	800fae0 <__ieee754_pow+0x188>
 800fac6:	2d00      	cmp	r5, #0
 800fac8:	db0a      	blt.n	800fae0 <__ieee754_pow+0x188>
 800faca:	ec47 6b10 	vmov	d0, r6, r7
 800face:	b009      	add	sp, #36	; 0x24
 800fad0:	ecbd 8b06 	vpop	{d8-d10}
 800fad4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fad8:	f000 bc6c 	b.w	80103b4 <__ieee754_sqrt>
 800fadc:	2300      	movs	r3, #0
 800fade:	9304      	str	r3, [sp, #16]
 800fae0:	ec47 6b10 	vmov	d0, r6, r7
 800fae4:	f000 fd48 	bl	8010578 <fabs>
 800fae8:	ec51 0b10 	vmov	r0, r1, d0
 800faec:	f1ba 0f00 	cmp.w	sl, #0
 800faf0:	d129      	bne.n	800fb46 <__ieee754_pow+0x1ee>
 800faf2:	b124      	cbz	r4, 800fafe <__ieee754_pow+0x1a6>
 800faf4:	4b2f      	ldr	r3, [pc, #188]	; (800fbb4 <__ieee754_pow+0x25c>)
 800faf6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800fafa:	429a      	cmp	r2, r3
 800fafc:	d123      	bne.n	800fb46 <__ieee754_pow+0x1ee>
 800fafe:	f1b9 0f00 	cmp.w	r9, #0
 800fb02:	da05      	bge.n	800fb10 <__ieee754_pow+0x1b8>
 800fb04:	4602      	mov	r2, r0
 800fb06:	460b      	mov	r3, r1
 800fb08:	2000      	movs	r0, #0
 800fb0a:	492a      	ldr	r1, [pc, #168]	; (800fbb4 <__ieee754_pow+0x25c>)
 800fb0c:	f7f0 fe9e 	bl	800084c <__aeabi_ddiv>
 800fb10:	2d00      	cmp	r5, #0
 800fb12:	f6bf af40 	bge.w	800f996 <__ieee754_pow+0x3e>
 800fb16:	9b04      	ldr	r3, [sp, #16]
 800fb18:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800fb1c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800fb20:	4323      	orrs	r3, r4
 800fb22:	d108      	bne.n	800fb36 <__ieee754_pow+0x1de>
 800fb24:	4602      	mov	r2, r0
 800fb26:	460b      	mov	r3, r1
 800fb28:	4610      	mov	r0, r2
 800fb2a:	4619      	mov	r1, r3
 800fb2c:	f7f0 fbac 	bl	8000288 <__aeabi_dsub>
 800fb30:	4602      	mov	r2, r0
 800fb32:	460b      	mov	r3, r1
 800fb34:	e78f      	b.n	800fa56 <__ieee754_pow+0xfe>
 800fb36:	9b04      	ldr	r3, [sp, #16]
 800fb38:	2b01      	cmp	r3, #1
 800fb3a:	f47f af2c 	bne.w	800f996 <__ieee754_pow+0x3e>
 800fb3e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fb42:	4619      	mov	r1, r3
 800fb44:	e727      	b.n	800f996 <__ieee754_pow+0x3e>
 800fb46:	0feb      	lsrs	r3, r5, #31
 800fb48:	3b01      	subs	r3, #1
 800fb4a:	9306      	str	r3, [sp, #24]
 800fb4c:	9a06      	ldr	r2, [sp, #24]
 800fb4e:	9b04      	ldr	r3, [sp, #16]
 800fb50:	4313      	orrs	r3, r2
 800fb52:	d102      	bne.n	800fb5a <__ieee754_pow+0x202>
 800fb54:	4632      	mov	r2, r6
 800fb56:	463b      	mov	r3, r7
 800fb58:	e7e6      	b.n	800fb28 <__ieee754_pow+0x1d0>
 800fb5a:	4b19      	ldr	r3, [pc, #100]	; (800fbc0 <__ieee754_pow+0x268>)
 800fb5c:	4598      	cmp	r8, r3
 800fb5e:	f340 80fb 	ble.w	800fd58 <__ieee754_pow+0x400>
 800fb62:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800fb66:	4598      	cmp	r8, r3
 800fb68:	4b13      	ldr	r3, [pc, #76]	; (800fbb8 <__ieee754_pow+0x260>)
 800fb6a:	dd0c      	ble.n	800fb86 <__ieee754_pow+0x22e>
 800fb6c:	429c      	cmp	r4, r3
 800fb6e:	dc0f      	bgt.n	800fb90 <__ieee754_pow+0x238>
 800fb70:	f1b9 0f00 	cmp.w	r9, #0
 800fb74:	da0f      	bge.n	800fb96 <__ieee754_pow+0x23e>
 800fb76:	2000      	movs	r0, #0
 800fb78:	b009      	add	sp, #36	; 0x24
 800fb7a:	ecbd 8b06 	vpop	{d8-d10}
 800fb7e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb82:	f000 bcf0 	b.w	8010566 <__math_oflow>
 800fb86:	429c      	cmp	r4, r3
 800fb88:	dbf2      	blt.n	800fb70 <__ieee754_pow+0x218>
 800fb8a:	4b0a      	ldr	r3, [pc, #40]	; (800fbb4 <__ieee754_pow+0x25c>)
 800fb8c:	429c      	cmp	r4, r3
 800fb8e:	dd19      	ble.n	800fbc4 <__ieee754_pow+0x26c>
 800fb90:	f1b9 0f00 	cmp.w	r9, #0
 800fb94:	dcef      	bgt.n	800fb76 <__ieee754_pow+0x21e>
 800fb96:	2000      	movs	r0, #0
 800fb98:	b009      	add	sp, #36	; 0x24
 800fb9a:	ecbd 8b06 	vpop	{d8-d10}
 800fb9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fba2:	f000 bcd7 	b.w	8010554 <__math_uflow>
 800fba6:	bf00      	nop
 800fba8:	fff00000 	.word	0xfff00000
 800fbac:	7ff00000 	.word	0x7ff00000
 800fbb0:	433fffff 	.word	0x433fffff
 800fbb4:	3ff00000 	.word	0x3ff00000
 800fbb8:	3fefffff 	.word	0x3fefffff
 800fbbc:	3fe00000 	.word	0x3fe00000
 800fbc0:	41e00000 	.word	0x41e00000
 800fbc4:	4b60      	ldr	r3, [pc, #384]	; (800fd48 <__ieee754_pow+0x3f0>)
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	f7f0 fb5e 	bl	8000288 <__aeabi_dsub>
 800fbcc:	a354      	add	r3, pc, #336	; (adr r3, 800fd20 <__ieee754_pow+0x3c8>)
 800fbce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbd2:	4604      	mov	r4, r0
 800fbd4:	460d      	mov	r5, r1
 800fbd6:	f7f0 fd0f 	bl	80005f8 <__aeabi_dmul>
 800fbda:	a353      	add	r3, pc, #332	; (adr r3, 800fd28 <__ieee754_pow+0x3d0>)
 800fbdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbe0:	4606      	mov	r6, r0
 800fbe2:	460f      	mov	r7, r1
 800fbe4:	4620      	mov	r0, r4
 800fbe6:	4629      	mov	r1, r5
 800fbe8:	f7f0 fd06 	bl	80005f8 <__aeabi_dmul>
 800fbec:	4b57      	ldr	r3, [pc, #348]	; (800fd4c <__ieee754_pow+0x3f4>)
 800fbee:	4682      	mov	sl, r0
 800fbf0:	468b      	mov	fp, r1
 800fbf2:	2200      	movs	r2, #0
 800fbf4:	4620      	mov	r0, r4
 800fbf6:	4629      	mov	r1, r5
 800fbf8:	f7f0 fcfe 	bl	80005f8 <__aeabi_dmul>
 800fbfc:	4602      	mov	r2, r0
 800fbfe:	460b      	mov	r3, r1
 800fc00:	a14b      	add	r1, pc, #300	; (adr r1, 800fd30 <__ieee754_pow+0x3d8>)
 800fc02:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fc06:	f7f0 fb3f 	bl	8000288 <__aeabi_dsub>
 800fc0a:	4622      	mov	r2, r4
 800fc0c:	462b      	mov	r3, r5
 800fc0e:	f7f0 fcf3 	bl	80005f8 <__aeabi_dmul>
 800fc12:	4602      	mov	r2, r0
 800fc14:	460b      	mov	r3, r1
 800fc16:	2000      	movs	r0, #0
 800fc18:	494d      	ldr	r1, [pc, #308]	; (800fd50 <__ieee754_pow+0x3f8>)
 800fc1a:	f7f0 fb35 	bl	8000288 <__aeabi_dsub>
 800fc1e:	4622      	mov	r2, r4
 800fc20:	4680      	mov	r8, r0
 800fc22:	4689      	mov	r9, r1
 800fc24:	462b      	mov	r3, r5
 800fc26:	4620      	mov	r0, r4
 800fc28:	4629      	mov	r1, r5
 800fc2a:	f7f0 fce5 	bl	80005f8 <__aeabi_dmul>
 800fc2e:	4602      	mov	r2, r0
 800fc30:	460b      	mov	r3, r1
 800fc32:	4640      	mov	r0, r8
 800fc34:	4649      	mov	r1, r9
 800fc36:	f7f0 fcdf 	bl	80005f8 <__aeabi_dmul>
 800fc3a:	a33f      	add	r3, pc, #252	; (adr r3, 800fd38 <__ieee754_pow+0x3e0>)
 800fc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc40:	f7f0 fcda 	bl	80005f8 <__aeabi_dmul>
 800fc44:	4602      	mov	r2, r0
 800fc46:	460b      	mov	r3, r1
 800fc48:	4650      	mov	r0, sl
 800fc4a:	4659      	mov	r1, fp
 800fc4c:	f7f0 fb1c 	bl	8000288 <__aeabi_dsub>
 800fc50:	4602      	mov	r2, r0
 800fc52:	460b      	mov	r3, r1
 800fc54:	4680      	mov	r8, r0
 800fc56:	4689      	mov	r9, r1
 800fc58:	4630      	mov	r0, r6
 800fc5a:	4639      	mov	r1, r7
 800fc5c:	f7f0 fb16 	bl	800028c <__adddf3>
 800fc60:	2000      	movs	r0, #0
 800fc62:	4632      	mov	r2, r6
 800fc64:	463b      	mov	r3, r7
 800fc66:	4604      	mov	r4, r0
 800fc68:	460d      	mov	r5, r1
 800fc6a:	f7f0 fb0d 	bl	8000288 <__aeabi_dsub>
 800fc6e:	4602      	mov	r2, r0
 800fc70:	460b      	mov	r3, r1
 800fc72:	4640      	mov	r0, r8
 800fc74:	4649      	mov	r1, r9
 800fc76:	f7f0 fb07 	bl	8000288 <__aeabi_dsub>
 800fc7a:	9b04      	ldr	r3, [sp, #16]
 800fc7c:	9a06      	ldr	r2, [sp, #24]
 800fc7e:	3b01      	subs	r3, #1
 800fc80:	4313      	orrs	r3, r2
 800fc82:	4682      	mov	sl, r0
 800fc84:	468b      	mov	fp, r1
 800fc86:	f040 81e7 	bne.w	8010058 <__ieee754_pow+0x700>
 800fc8a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800fd40 <__ieee754_pow+0x3e8>
 800fc8e:	eeb0 8a47 	vmov.f32	s16, s14
 800fc92:	eef0 8a67 	vmov.f32	s17, s15
 800fc96:	e9dd 6700 	ldrd	r6, r7, [sp]
 800fc9a:	2600      	movs	r6, #0
 800fc9c:	4632      	mov	r2, r6
 800fc9e:	463b      	mov	r3, r7
 800fca0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800fca4:	f7f0 faf0 	bl	8000288 <__aeabi_dsub>
 800fca8:	4622      	mov	r2, r4
 800fcaa:	462b      	mov	r3, r5
 800fcac:	f7f0 fca4 	bl	80005f8 <__aeabi_dmul>
 800fcb0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fcb4:	4680      	mov	r8, r0
 800fcb6:	4689      	mov	r9, r1
 800fcb8:	4650      	mov	r0, sl
 800fcba:	4659      	mov	r1, fp
 800fcbc:	f7f0 fc9c 	bl	80005f8 <__aeabi_dmul>
 800fcc0:	4602      	mov	r2, r0
 800fcc2:	460b      	mov	r3, r1
 800fcc4:	4640      	mov	r0, r8
 800fcc6:	4649      	mov	r1, r9
 800fcc8:	f7f0 fae0 	bl	800028c <__adddf3>
 800fccc:	4632      	mov	r2, r6
 800fcce:	463b      	mov	r3, r7
 800fcd0:	4680      	mov	r8, r0
 800fcd2:	4689      	mov	r9, r1
 800fcd4:	4620      	mov	r0, r4
 800fcd6:	4629      	mov	r1, r5
 800fcd8:	f7f0 fc8e 	bl	80005f8 <__aeabi_dmul>
 800fcdc:	460b      	mov	r3, r1
 800fcde:	4604      	mov	r4, r0
 800fce0:	460d      	mov	r5, r1
 800fce2:	4602      	mov	r2, r0
 800fce4:	4649      	mov	r1, r9
 800fce6:	4640      	mov	r0, r8
 800fce8:	f7f0 fad0 	bl	800028c <__adddf3>
 800fcec:	4b19      	ldr	r3, [pc, #100]	; (800fd54 <__ieee754_pow+0x3fc>)
 800fcee:	4299      	cmp	r1, r3
 800fcf0:	ec45 4b19 	vmov	d9, r4, r5
 800fcf4:	4606      	mov	r6, r0
 800fcf6:	460f      	mov	r7, r1
 800fcf8:	468b      	mov	fp, r1
 800fcfa:	f340 82f1 	ble.w	80102e0 <__ieee754_pow+0x988>
 800fcfe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800fd02:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800fd06:	4303      	orrs	r3, r0
 800fd08:	f000 81e4 	beq.w	80100d4 <__ieee754_pow+0x77c>
 800fd0c:	ec51 0b18 	vmov	r0, r1, d8
 800fd10:	2200      	movs	r2, #0
 800fd12:	2300      	movs	r3, #0
 800fd14:	f7f0 fee2 	bl	8000adc <__aeabi_dcmplt>
 800fd18:	3800      	subs	r0, #0
 800fd1a:	bf18      	it	ne
 800fd1c:	2001      	movne	r0, #1
 800fd1e:	e72b      	b.n	800fb78 <__ieee754_pow+0x220>
 800fd20:	60000000 	.word	0x60000000
 800fd24:	3ff71547 	.word	0x3ff71547
 800fd28:	f85ddf44 	.word	0xf85ddf44
 800fd2c:	3e54ae0b 	.word	0x3e54ae0b
 800fd30:	55555555 	.word	0x55555555
 800fd34:	3fd55555 	.word	0x3fd55555
 800fd38:	652b82fe 	.word	0x652b82fe
 800fd3c:	3ff71547 	.word	0x3ff71547
 800fd40:	00000000 	.word	0x00000000
 800fd44:	bff00000 	.word	0xbff00000
 800fd48:	3ff00000 	.word	0x3ff00000
 800fd4c:	3fd00000 	.word	0x3fd00000
 800fd50:	3fe00000 	.word	0x3fe00000
 800fd54:	408fffff 	.word	0x408fffff
 800fd58:	4bd5      	ldr	r3, [pc, #852]	; (80100b0 <__ieee754_pow+0x758>)
 800fd5a:	402b      	ands	r3, r5
 800fd5c:	2200      	movs	r2, #0
 800fd5e:	b92b      	cbnz	r3, 800fd6c <__ieee754_pow+0x414>
 800fd60:	4bd4      	ldr	r3, [pc, #848]	; (80100b4 <__ieee754_pow+0x75c>)
 800fd62:	f7f0 fc49 	bl	80005f8 <__aeabi_dmul>
 800fd66:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800fd6a:	460c      	mov	r4, r1
 800fd6c:	1523      	asrs	r3, r4, #20
 800fd6e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800fd72:	4413      	add	r3, r2
 800fd74:	9305      	str	r3, [sp, #20]
 800fd76:	4bd0      	ldr	r3, [pc, #832]	; (80100b8 <__ieee754_pow+0x760>)
 800fd78:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800fd7c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800fd80:	429c      	cmp	r4, r3
 800fd82:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800fd86:	dd08      	ble.n	800fd9a <__ieee754_pow+0x442>
 800fd88:	4bcc      	ldr	r3, [pc, #816]	; (80100bc <__ieee754_pow+0x764>)
 800fd8a:	429c      	cmp	r4, r3
 800fd8c:	f340 8162 	ble.w	8010054 <__ieee754_pow+0x6fc>
 800fd90:	9b05      	ldr	r3, [sp, #20]
 800fd92:	3301      	adds	r3, #1
 800fd94:	9305      	str	r3, [sp, #20]
 800fd96:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800fd9a:	2400      	movs	r4, #0
 800fd9c:	00e3      	lsls	r3, r4, #3
 800fd9e:	9307      	str	r3, [sp, #28]
 800fda0:	4bc7      	ldr	r3, [pc, #796]	; (80100c0 <__ieee754_pow+0x768>)
 800fda2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fda6:	ed93 7b00 	vldr	d7, [r3]
 800fdaa:	4629      	mov	r1, r5
 800fdac:	ec53 2b17 	vmov	r2, r3, d7
 800fdb0:	eeb0 9a47 	vmov.f32	s18, s14
 800fdb4:	eef0 9a67 	vmov.f32	s19, s15
 800fdb8:	4682      	mov	sl, r0
 800fdba:	f7f0 fa65 	bl	8000288 <__aeabi_dsub>
 800fdbe:	4652      	mov	r2, sl
 800fdc0:	4606      	mov	r6, r0
 800fdc2:	460f      	mov	r7, r1
 800fdc4:	462b      	mov	r3, r5
 800fdc6:	ec51 0b19 	vmov	r0, r1, d9
 800fdca:	f7f0 fa5f 	bl	800028c <__adddf3>
 800fdce:	4602      	mov	r2, r0
 800fdd0:	460b      	mov	r3, r1
 800fdd2:	2000      	movs	r0, #0
 800fdd4:	49bb      	ldr	r1, [pc, #748]	; (80100c4 <__ieee754_pow+0x76c>)
 800fdd6:	f7f0 fd39 	bl	800084c <__aeabi_ddiv>
 800fdda:	ec41 0b1a 	vmov	d10, r0, r1
 800fdde:	4602      	mov	r2, r0
 800fde0:	460b      	mov	r3, r1
 800fde2:	4630      	mov	r0, r6
 800fde4:	4639      	mov	r1, r7
 800fde6:	f7f0 fc07 	bl	80005f8 <__aeabi_dmul>
 800fdea:	2300      	movs	r3, #0
 800fdec:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fdf0:	9302      	str	r3, [sp, #8]
 800fdf2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800fdf6:	46ab      	mov	fp, r5
 800fdf8:	106d      	asrs	r5, r5, #1
 800fdfa:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800fdfe:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800fe02:	ec41 0b18 	vmov	d8, r0, r1
 800fe06:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800fe0a:	2200      	movs	r2, #0
 800fe0c:	4640      	mov	r0, r8
 800fe0e:	4649      	mov	r1, r9
 800fe10:	4614      	mov	r4, r2
 800fe12:	461d      	mov	r5, r3
 800fe14:	f7f0 fbf0 	bl	80005f8 <__aeabi_dmul>
 800fe18:	4602      	mov	r2, r0
 800fe1a:	460b      	mov	r3, r1
 800fe1c:	4630      	mov	r0, r6
 800fe1e:	4639      	mov	r1, r7
 800fe20:	f7f0 fa32 	bl	8000288 <__aeabi_dsub>
 800fe24:	ec53 2b19 	vmov	r2, r3, d9
 800fe28:	4606      	mov	r6, r0
 800fe2a:	460f      	mov	r7, r1
 800fe2c:	4620      	mov	r0, r4
 800fe2e:	4629      	mov	r1, r5
 800fe30:	f7f0 fa2a 	bl	8000288 <__aeabi_dsub>
 800fe34:	4602      	mov	r2, r0
 800fe36:	460b      	mov	r3, r1
 800fe38:	4650      	mov	r0, sl
 800fe3a:	4659      	mov	r1, fp
 800fe3c:	f7f0 fa24 	bl	8000288 <__aeabi_dsub>
 800fe40:	4642      	mov	r2, r8
 800fe42:	464b      	mov	r3, r9
 800fe44:	f7f0 fbd8 	bl	80005f8 <__aeabi_dmul>
 800fe48:	4602      	mov	r2, r0
 800fe4a:	460b      	mov	r3, r1
 800fe4c:	4630      	mov	r0, r6
 800fe4e:	4639      	mov	r1, r7
 800fe50:	f7f0 fa1a 	bl	8000288 <__aeabi_dsub>
 800fe54:	ec53 2b1a 	vmov	r2, r3, d10
 800fe58:	f7f0 fbce 	bl	80005f8 <__aeabi_dmul>
 800fe5c:	ec53 2b18 	vmov	r2, r3, d8
 800fe60:	ec41 0b19 	vmov	d9, r0, r1
 800fe64:	ec51 0b18 	vmov	r0, r1, d8
 800fe68:	f7f0 fbc6 	bl	80005f8 <__aeabi_dmul>
 800fe6c:	a37c      	add	r3, pc, #496	; (adr r3, 8010060 <__ieee754_pow+0x708>)
 800fe6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe72:	4604      	mov	r4, r0
 800fe74:	460d      	mov	r5, r1
 800fe76:	f7f0 fbbf 	bl	80005f8 <__aeabi_dmul>
 800fe7a:	a37b      	add	r3, pc, #492	; (adr r3, 8010068 <__ieee754_pow+0x710>)
 800fe7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe80:	f7f0 fa04 	bl	800028c <__adddf3>
 800fe84:	4622      	mov	r2, r4
 800fe86:	462b      	mov	r3, r5
 800fe88:	f7f0 fbb6 	bl	80005f8 <__aeabi_dmul>
 800fe8c:	a378      	add	r3, pc, #480	; (adr r3, 8010070 <__ieee754_pow+0x718>)
 800fe8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe92:	f7f0 f9fb 	bl	800028c <__adddf3>
 800fe96:	4622      	mov	r2, r4
 800fe98:	462b      	mov	r3, r5
 800fe9a:	f7f0 fbad 	bl	80005f8 <__aeabi_dmul>
 800fe9e:	a376      	add	r3, pc, #472	; (adr r3, 8010078 <__ieee754_pow+0x720>)
 800fea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fea4:	f7f0 f9f2 	bl	800028c <__adddf3>
 800fea8:	4622      	mov	r2, r4
 800feaa:	462b      	mov	r3, r5
 800feac:	f7f0 fba4 	bl	80005f8 <__aeabi_dmul>
 800feb0:	a373      	add	r3, pc, #460	; (adr r3, 8010080 <__ieee754_pow+0x728>)
 800feb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feb6:	f7f0 f9e9 	bl	800028c <__adddf3>
 800feba:	4622      	mov	r2, r4
 800febc:	462b      	mov	r3, r5
 800febe:	f7f0 fb9b 	bl	80005f8 <__aeabi_dmul>
 800fec2:	a371      	add	r3, pc, #452	; (adr r3, 8010088 <__ieee754_pow+0x730>)
 800fec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fec8:	f7f0 f9e0 	bl	800028c <__adddf3>
 800fecc:	4622      	mov	r2, r4
 800fece:	4606      	mov	r6, r0
 800fed0:	460f      	mov	r7, r1
 800fed2:	462b      	mov	r3, r5
 800fed4:	4620      	mov	r0, r4
 800fed6:	4629      	mov	r1, r5
 800fed8:	f7f0 fb8e 	bl	80005f8 <__aeabi_dmul>
 800fedc:	4602      	mov	r2, r0
 800fede:	460b      	mov	r3, r1
 800fee0:	4630      	mov	r0, r6
 800fee2:	4639      	mov	r1, r7
 800fee4:	f7f0 fb88 	bl	80005f8 <__aeabi_dmul>
 800fee8:	4642      	mov	r2, r8
 800feea:	4604      	mov	r4, r0
 800feec:	460d      	mov	r5, r1
 800feee:	464b      	mov	r3, r9
 800fef0:	ec51 0b18 	vmov	r0, r1, d8
 800fef4:	f7f0 f9ca 	bl	800028c <__adddf3>
 800fef8:	ec53 2b19 	vmov	r2, r3, d9
 800fefc:	f7f0 fb7c 	bl	80005f8 <__aeabi_dmul>
 800ff00:	4622      	mov	r2, r4
 800ff02:	462b      	mov	r3, r5
 800ff04:	f7f0 f9c2 	bl	800028c <__adddf3>
 800ff08:	4642      	mov	r2, r8
 800ff0a:	4682      	mov	sl, r0
 800ff0c:	468b      	mov	fp, r1
 800ff0e:	464b      	mov	r3, r9
 800ff10:	4640      	mov	r0, r8
 800ff12:	4649      	mov	r1, r9
 800ff14:	f7f0 fb70 	bl	80005f8 <__aeabi_dmul>
 800ff18:	4b6b      	ldr	r3, [pc, #428]	; (80100c8 <__ieee754_pow+0x770>)
 800ff1a:	2200      	movs	r2, #0
 800ff1c:	4606      	mov	r6, r0
 800ff1e:	460f      	mov	r7, r1
 800ff20:	f7f0 f9b4 	bl	800028c <__adddf3>
 800ff24:	4652      	mov	r2, sl
 800ff26:	465b      	mov	r3, fp
 800ff28:	f7f0 f9b0 	bl	800028c <__adddf3>
 800ff2c:	2000      	movs	r0, #0
 800ff2e:	4604      	mov	r4, r0
 800ff30:	460d      	mov	r5, r1
 800ff32:	4602      	mov	r2, r0
 800ff34:	460b      	mov	r3, r1
 800ff36:	4640      	mov	r0, r8
 800ff38:	4649      	mov	r1, r9
 800ff3a:	f7f0 fb5d 	bl	80005f8 <__aeabi_dmul>
 800ff3e:	4b62      	ldr	r3, [pc, #392]	; (80100c8 <__ieee754_pow+0x770>)
 800ff40:	4680      	mov	r8, r0
 800ff42:	4689      	mov	r9, r1
 800ff44:	2200      	movs	r2, #0
 800ff46:	4620      	mov	r0, r4
 800ff48:	4629      	mov	r1, r5
 800ff4a:	f7f0 f99d 	bl	8000288 <__aeabi_dsub>
 800ff4e:	4632      	mov	r2, r6
 800ff50:	463b      	mov	r3, r7
 800ff52:	f7f0 f999 	bl	8000288 <__aeabi_dsub>
 800ff56:	4602      	mov	r2, r0
 800ff58:	460b      	mov	r3, r1
 800ff5a:	4650      	mov	r0, sl
 800ff5c:	4659      	mov	r1, fp
 800ff5e:	f7f0 f993 	bl	8000288 <__aeabi_dsub>
 800ff62:	ec53 2b18 	vmov	r2, r3, d8
 800ff66:	f7f0 fb47 	bl	80005f8 <__aeabi_dmul>
 800ff6a:	4622      	mov	r2, r4
 800ff6c:	4606      	mov	r6, r0
 800ff6e:	460f      	mov	r7, r1
 800ff70:	462b      	mov	r3, r5
 800ff72:	ec51 0b19 	vmov	r0, r1, d9
 800ff76:	f7f0 fb3f 	bl	80005f8 <__aeabi_dmul>
 800ff7a:	4602      	mov	r2, r0
 800ff7c:	460b      	mov	r3, r1
 800ff7e:	4630      	mov	r0, r6
 800ff80:	4639      	mov	r1, r7
 800ff82:	f7f0 f983 	bl	800028c <__adddf3>
 800ff86:	4606      	mov	r6, r0
 800ff88:	460f      	mov	r7, r1
 800ff8a:	4602      	mov	r2, r0
 800ff8c:	460b      	mov	r3, r1
 800ff8e:	4640      	mov	r0, r8
 800ff90:	4649      	mov	r1, r9
 800ff92:	f7f0 f97b 	bl	800028c <__adddf3>
 800ff96:	a33e      	add	r3, pc, #248	; (adr r3, 8010090 <__ieee754_pow+0x738>)
 800ff98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff9c:	2000      	movs	r0, #0
 800ff9e:	4604      	mov	r4, r0
 800ffa0:	460d      	mov	r5, r1
 800ffa2:	f7f0 fb29 	bl	80005f8 <__aeabi_dmul>
 800ffa6:	4642      	mov	r2, r8
 800ffa8:	ec41 0b18 	vmov	d8, r0, r1
 800ffac:	464b      	mov	r3, r9
 800ffae:	4620      	mov	r0, r4
 800ffb0:	4629      	mov	r1, r5
 800ffb2:	f7f0 f969 	bl	8000288 <__aeabi_dsub>
 800ffb6:	4602      	mov	r2, r0
 800ffb8:	460b      	mov	r3, r1
 800ffba:	4630      	mov	r0, r6
 800ffbc:	4639      	mov	r1, r7
 800ffbe:	f7f0 f963 	bl	8000288 <__aeabi_dsub>
 800ffc2:	a335      	add	r3, pc, #212	; (adr r3, 8010098 <__ieee754_pow+0x740>)
 800ffc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffc8:	f7f0 fb16 	bl	80005f8 <__aeabi_dmul>
 800ffcc:	a334      	add	r3, pc, #208	; (adr r3, 80100a0 <__ieee754_pow+0x748>)
 800ffce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ffd2:	4606      	mov	r6, r0
 800ffd4:	460f      	mov	r7, r1
 800ffd6:	4620      	mov	r0, r4
 800ffd8:	4629      	mov	r1, r5
 800ffda:	f7f0 fb0d 	bl	80005f8 <__aeabi_dmul>
 800ffde:	4602      	mov	r2, r0
 800ffe0:	460b      	mov	r3, r1
 800ffe2:	4630      	mov	r0, r6
 800ffe4:	4639      	mov	r1, r7
 800ffe6:	f7f0 f951 	bl	800028c <__adddf3>
 800ffea:	9a07      	ldr	r2, [sp, #28]
 800ffec:	4b37      	ldr	r3, [pc, #220]	; (80100cc <__ieee754_pow+0x774>)
 800ffee:	4413      	add	r3, r2
 800fff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fff4:	f7f0 f94a 	bl	800028c <__adddf3>
 800fff8:	4682      	mov	sl, r0
 800fffa:	9805      	ldr	r0, [sp, #20]
 800fffc:	468b      	mov	fp, r1
 800fffe:	f7f0 fa91 	bl	8000524 <__aeabi_i2d>
 8010002:	9a07      	ldr	r2, [sp, #28]
 8010004:	4b32      	ldr	r3, [pc, #200]	; (80100d0 <__ieee754_pow+0x778>)
 8010006:	4413      	add	r3, r2
 8010008:	e9d3 8900 	ldrd	r8, r9, [r3]
 801000c:	4606      	mov	r6, r0
 801000e:	460f      	mov	r7, r1
 8010010:	4652      	mov	r2, sl
 8010012:	465b      	mov	r3, fp
 8010014:	ec51 0b18 	vmov	r0, r1, d8
 8010018:	f7f0 f938 	bl	800028c <__adddf3>
 801001c:	4642      	mov	r2, r8
 801001e:	464b      	mov	r3, r9
 8010020:	f7f0 f934 	bl	800028c <__adddf3>
 8010024:	4632      	mov	r2, r6
 8010026:	463b      	mov	r3, r7
 8010028:	f7f0 f930 	bl	800028c <__adddf3>
 801002c:	2000      	movs	r0, #0
 801002e:	4632      	mov	r2, r6
 8010030:	463b      	mov	r3, r7
 8010032:	4604      	mov	r4, r0
 8010034:	460d      	mov	r5, r1
 8010036:	f7f0 f927 	bl	8000288 <__aeabi_dsub>
 801003a:	4642      	mov	r2, r8
 801003c:	464b      	mov	r3, r9
 801003e:	f7f0 f923 	bl	8000288 <__aeabi_dsub>
 8010042:	ec53 2b18 	vmov	r2, r3, d8
 8010046:	f7f0 f91f 	bl	8000288 <__aeabi_dsub>
 801004a:	4602      	mov	r2, r0
 801004c:	460b      	mov	r3, r1
 801004e:	4650      	mov	r0, sl
 8010050:	4659      	mov	r1, fp
 8010052:	e610      	b.n	800fc76 <__ieee754_pow+0x31e>
 8010054:	2401      	movs	r4, #1
 8010056:	e6a1      	b.n	800fd9c <__ieee754_pow+0x444>
 8010058:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80100a8 <__ieee754_pow+0x750>
 801005c:	e617      	b.n	800fc8e <__ieee754_pow+0x336>
 801005e:	bf00      	nop
 8010060:	4a454eef 	.word	0x4a454eef
 8010064:	3fca7e28 	.word	0x3fca7e28
 8010068:	93c9db65 	.word	0x93c9db65
 801006c:	3fcd864a 	.word	0x3fcd864a
 8010070:	a91d4101 	.word	0xa91d4101
 8010074:	3fd17460 	.word	0x3fd17460
 8010078:	518f264d 	.word	0x518f264d
 801007c:	3fd55555 	.word	0x3fd55555
 8010080:	db6fabff 	.word	0xdb6fabff
 8010084:	3fdb6db6 	.word	0x3fdb6db6
 8010088:	33333303 	.word	0x33333303
 801008c:	3fe33333 	.word	0x3fe33333
 8010090:	e0000000 	.word	0xe0000000
 8010094:	3feec709 	.word	0x3feec709
 8010098:	dc3a03fd 	.word	0xdc3a03fd
 801009c:	3feec709 	.word	0x3feec709
 80100a0:	145b01f5 	.word	0x145b01f5
 80100a4:	be3e2fe0 	.word	0xbe3e2fe0
 80100a8:	00000000 	.word	0x00000000
 80100ac:	3ff00000 	.word	0x3ff00000
 80100b0:	7ff00000 	.word	0x7ff00000
 80100b4:	43400000 	.word	0x43400000
 80100b8:	0003988e 	.word	0x0003988e
 80100bc:	000bb679 	.word	0x000bb679
 80100c0:	08011b88 	.word	0x08011b88
 80100c4:	3ff00000 	.word	0x3ff00000
 80100c8:	40080000 	.word	0x40080000
 80100cc:	08011ba8 	.word	0x08011ba8
 80100d0:	08011b98 	.word	0x08011b98
 80100d4:	a3b5      	add	r3, pc, #724	; (adr r3, 80103ac <__ieee754_pow+0xa54>)
 80100d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100da:	4640      	mov	r0, r8
 80100dc:	4649      	mov	r1, r9
 80100de:	f7f0 f8d5 	bl	800028c <__adddf3>
 80100e2:	4622      	mov	r2, r4
 80100e4:	ec41 0b1a 	vmov	d10, r0, r1
 80100e8:	462b      	mov	r3, r5
 80100ea:	4630      	mov	r0, r6
 80100ec:	4639      	mov	r1, r7
 80100ee:	f7f0 f8cb 	bl	8000288 <__aeabi_dsub>
 80100f2:	4602      	mov	r2, r0
 80100f4:	460b      	mov	r3, r1
 80100f6:	ec51 0b1a 	vmov	r0, r1, d10
 80100fa:	f7f0 fd0d 	bl	8000b18 <__aeabi_dcmpgt>
 80100fe:	2800      	cmp	r0, #0
 8010100:	f47f ae04 	bne.w	800fd0c <__ieee754_pow+0x3b4>
 8010104:	4aa4      	ldr	r2, [pc, #656]	; (8010398 <__ieee754_pow+0xa40>)
 8010106:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801010a:	4293      	cmp	r3, r2
 801010c:	f340 8108 	ble.w	8010320 <__ieee754_pow+0x9c8>
 8010110:	151b      	asrs	r3, r3, #20
 8010112:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8010116:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801011a:	fa4a f303 	asr.w	r3, sl, r3
 801011e:	445b      	add	r3, fp
 8010120:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8010124:	4e9d      	ldr	r6, [pc, #628]	; (801039c <__ieee754_pow+0xa44>)
 8010126:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801012a:	4116      	asrs	r6, r2
 801012c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8010130:	2000      	movs	r0, #0
 8010132:	ea23 0106 	bic.w	r1, r3, r6
 8010136:	f1c2 0214 	rsb	r2, r2, #20
 801013a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801013e:	fa4a fa02 	asr.w	sl, sl, r2
 8010142:	f1bb 0f00 	cmp.w	fp, #0
 8010146:	4602      	mov	r2, r0
 8010148:	460b      	mov	r3, r1
 801014a:	4620      	mov	r0, r4
 801014c:	4629      	mov	r1, r5
 801014e:	bfb8      	it	lt
 8010150:	f1ca 0a00 	rsblt	sl, sl, #0
 8010154:	f7f0 f898 	bl	8000288 <__aeabi_dsub>
 8010158:	ec41 0b19 	vmov	d9, r0, r1
 801015c:	4642      	mov	r2, r8
 801015e:	464b      	mov	r3, r9
 8010160:	ec51 0b19 	vmov	r0, r1, d9
 8010164:	f7f0 f892 	bl	800028c <__adddf3>
 8010168:	a37b      	add	r3, pc, #492	; (adr r3, 8010358 <__ieee754_pow+0xa00>)
 801016a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801016e:	2000      	movs	r0, #0
 8010170:	4604      	mov	r4, r0
 8010172:	460d      	mov	r5, r1
 8010174:	f7f0 fa40 	bl	80005f8 <__aeabi_dmul>
 8010178:	ec53 2b19 	vmov	r2, r3, d9
 801017c:	4606      	mov	r6, r0
 801017e:	460f      	mov	r7, r1
 8010180:	4620      	mov	r0, r4
 8010182:	4629      	mov	r1, r5
 8010184:	f7f0 f880 	bl	8000288 <__aeabi_dsub>
 8010188:	4602      	mov	r2, r0
 801018a:	460b      	mov	r3, r1
 801018c:	4640      	mov	r0, r8
 801018e:	4649      	mov	r1, r9
 8010190:	f7f0 f87a 	bl	8000288 <__aeabi_dsub>
 8010194:	a372      	add	r3, pc, #456	; (adr r3, 8010360 <__ieee754_pow+0xa08>)
 8010196:	e9d3 2300 	ldrd	r2, r3, [r3]
 801019a:	f7f0 fa2d 	bl	80005f8 <__aeabi_dmul>
 801019e:	a372      	add	r3, pc, #456	; (adr r3, 8010368 <__ieee754_pow+0xa10>)
 80101a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101a4:	4680      	mov	r8, r0
 80101a6:	4689      	mov	r9, r1
 80101a8:	4620      	mov	r0, r4
 80101aa:	4629      	mov	r1, r5
 80101ac:	f7f0 fa24 	bl	80005f8 <__aeabi_dmul>
 80101b0:	4602      	mov	r2, r0
 80101b2:	460b      	mov	r3, r1
 80101b4:	4640      	mov	r0, r8
 80101b6:	4649      	mov	r1, r9
 80101b8:	f7f0 f868 	bl	800028c <__adddf3>
 80101bc:	4604      	mov	r4, r0
 80101be:	460d      	mov	r5, r1
 80101c0:	4602      	mov	r2, r0
 80101c2:	460b      	mov	r3, r1
 80101c4:	4630      	mov	r0, r6
 80101c6:	4639      	mov	r1, r7
 80101c8:	f7f0 f860 	bl	800028c <__adddf3>
 80101cc:	4632      	mov	r2, r6
 80101ce:	463b      	mov	r3, r7
 80101d0:	4680      	mov	r8, r0
 80101d2:	4689      	mov	r9, r1
 80101d4:	f7f0 f858 	bl	8000288 <__aeabi_dsub>
 80101d8:	4602      	mov	r2, r0
 80101da:	460b      	mov	r3, r1
 80101dc:	4620      	mov	r0, r4
 80101de:	4629      	mov	r1, r5
 80101e0:	f7f0 f852 	bl	8000288 <__aeabi_dsub>
 80101e4:	4642      	mov	r2, r8
 80101e6:	4606      	mov	r6, r0
 80101e8:	460f      	mov	r7, r1
 80101ea:	464b      	mov	r3, r9
 80101ec:	4640      	mov	r0, r8
 80101ee:	4649      	mov	r1, r9
 80101f0:	f7f0 fa02 	bl	80005f8 <__aeabi_dmul>
 80101f4:	a35e      	add	r3, pc, #376	; (adr r3, 8010370 <__ieee754_pow+0xa18>)
 80101f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101fa:	4604      	mov	r4, r0
 80101fc:	460d      	mov	r5, r1
 80101fe:	f7f0 f9fb 	bl	80005f8 <__aeabi_dmul>
 8010202:	a35d      	add	r3, pc, #372	; (adr r3, 8010378 <__ieee754_pow+0xa20>)
 8010204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010208:	f7f0 f83e 	bl	8000288 <__aeabi_dsub>
 801020c:	4622      	mov	r2, r4
 801020e:	462b      	mov	r3, r5
 8010210:	f7f0 f9f2 	bl	80005f8 <__aeabi_dmul>
 8010214:	a35a      	add	r3, pc, #360	; (adr r3, 8010380 <__ieee754_pow+0xa28>)
 8010216:	e9d3 2300 	ldrd	r2, r3, [r3]
 801021a:	f7f0 f837 	bl	800028c <__adddf3>
 801021e:	4622      	mov	r2, r4
 8010220:	462b      	mov	r3, r5
 8010222:	f7f0 f9e9 	bl	80005f8 <__aeabi_dmul>
 8010226:	a358      	add	r3, pc, #352	; (adr r3, 8010388 <__ieee754_pow+0xa30>)
 8010228:	e9d3 2300 	ldrd	r2, r3, [r3]
 801022c:	f7f0 f82c 	bl	8000288 <__aeabi_dsub>
 8010230:	4622      	mov	r2, r4
 8010232:	462b      	mov	r3, r5
 8010234:	f7f0 f9e0 	bl	80005f8 <__aeabi_dmul>
 8010238:	a355      	add	r3, pc, #340	; (adr r3, 8010390 <__ieee754_pow+0xa38>)
 801023a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801023e:	f7f0 f825 	bl	800028c <__adddf3>
 8010242:	4622      	mov	r2, r4
 8010244:	462b      	mov	r3, r5
 8010246:	f7f0 f9d7 	bl	80005f8 <__aeabi_dmul>
 801024a:	4602      	mov	r2, r0
 801024c:	460b      	mov	r3, r1
 801024e:	4640      	mov	r0, r8
 8010250:	4649      	mov	r1, r9
 8010252:	f7f0 f819 	bl	8000288 <__aeabi_dsub>
 8010256:	4604      	mov	r4, r0
 8010258:	460d      	mov	r5, r1
 801025a:	4602      	mov	r2, r0
 801025c:	460b      	mov	r3, r1
 801025e:	4640      	mov	r0, r8
 8010260:	4649      	mov	r1, r9
 8010262:	f7f0 f9c9 	bl	80005f8 <__aeabi_dmul>
 8010266:	2200      	movs	r2, #0
 8010268:	ec41 0b19 	vmov	d9, r0, r1
 801026c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8010270:	4620      	mov	r0, r4
 8010272:	4629      	mov	r1, r5
 8010274:	f7f0 f808 	bl	8000288 <__aeabi_dsub>
 8010278:	4602      	mov	r2, r0
 801027a:	460b      	mov	r3, r1
 801027c:	ec51 0b19 	vmov	r0, r1, d9
 8010280:	f7f0 fae4 	bl	800084c <__aeabi_ddiv>
 8010284:	4632      	mov	r2, r6
 8010286:	4604      	mov	r4, r0
 8010288:	460d      	mov	r5, r1
 801028a:	463b      	mov	r3, r7
 801028c:	4640      	mov	r0, r8
 801028e:	4649      	mov	r1, r9
 8010290:	f7f0 f9b2 	bl	80005f8 <__aeabi_dmul>
 8010294:	4632      	mov	r2, r6
 8010296:	463b      	mov	r3, r7
 8010298:	f7ef fff8 	bl	800028c <__adddf3>
 801029c:	4602      	mov	r2, r0
 801029e:	460b      	mov	r3, r1
 80102a0:	4620      	mov	r0, r4
 80102a2:	4629      	mov	r1, r5
 80102a4:	f7ef fff0 	bl	8000288 <__aeabi_dsub>
 80102a8:	4642      	mov	r2, r8
 80102aa:	464b      	mov	r3, r9
 80102ac:	f7ef ffec 	bl	8000288 <__aeabi_dsub>
 80102b0:	460b      	mov	r3, r1
 80102b2:	4602      	mov	r2, r0
 80102b4:	493a      	ldr	r1, [pc, #232]	; (80103a0 <__ieee754_pow+0xa48>)
 80102b6:	2000      	movs	r0, #0
 80102b8:	f7ef ffe6 	bl	8000288 <__aeabi_dsub>
 80102bc:	ec41 0b10 	vmov	d0, r0, r1
 80102c0:	ee10 3a90 	vmov	r3, s1
 80102c4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80102c8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80102cc:	da2b      	bge.n	8010326 <__ieee754_pow+0x9ce>
 80102ce:	4650      	mov	r0, sl
 80102d0:	f000 f96e 	bl	80105b0 <scalbn>
 80102d4:	ec51 0b10 	vmov	r0, r1, d0
 80102d8:	ec53 2b18 	vmov	r2, r3, d8
 80102dc:	f7ff bbed 	b.w	800faba <__ieee754_pow+0x162>
 80102e0:	4b30      	ldr	r3, [pc, #192]	; (80103a4 <__ieee754_pow+0xa4c>)
 80102e2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80102e6:	429e      	cmp	r6, r3
 80102e8:	f77f af0c 	ble.w	8010104 <__ieee754_pow+0x7ac>
 80102ec:	4b2e      	ldr	r3, [pc, #184]	; (80103a8 <__ieee754_pow+0xa50>)
 80102ee:	440b      	add	r3, r1
 80102f0:	4303      	orrs	r3, r0
 80102f2:	d009      	beq.n	8010308 <__ieee754_pow+0x9b0>
 80102f4:	ec51 0b18 	vmov	r0, r1, d8
 80102f8:	2200      	movs	r2, #0
 80102fa:	2300      	movs	r3, #0
 80102fc:	f7f0 fbee 	bl	8000adc <__aeabi_dcmplt>
 8010300:	3800      	subs	r0, #0
 8010302:	bf18      	it	ne
 8010304:	2001      	movne	r0, #1
 8010306:	e447      	b.n	800fb98 <__ieee754_pow+0x240>
 8010308:	4622      	mov	r2, r4
 801030a:	462b      	mov	r3, r5
 801030c:	f7ef ffbc 	bl	8000288 <__aeabi_dsub>
 8010310:	4642      	mov	r2, r8
 8010312:	464b      	mov	r3, r9
 8010314:	f7f0 fbf6 	bl	8000b04 <__aeabi_dcmpge>
 8010318:	2800      	cmp	r0, #0
 801031a:	f43f aef3 	beq.w	8010104 <__ieee754_pow+0x7ac>
 801031e:	e7e9      	b.n	80102f4 <__ieee754_pow+0x99c>
 8010320:	f04f 0a00 	mov.w	sl, #0
 8010324:	e71a      	b.n	801015c <__ieee754_pow+0x804>
 8010326:	ec51 0b10 	vmov	r0, r1, d0
 801032a:	4619      	mov	r1, r3
 801032c:	e7d4      	b.n	80102d8 <__ieee754_pow+0x980>
 801032e:	491c      	ldr	r1, [pc, #112]	; (80103a0 <__ieee754_pow+0xa48>)
 8010330:	2000      	movs	r0, #0
 8010332:	f7ff bb30 	b.w	800f996 <__ieee754_pow+0x3e>
 8010336:	2000      	movs	r0, #0
 8010338:	2100      	movs	r1, #0
 801033a:	f7ff bb2c 	b.w	800f996 <__ieee754_pow+0x3e>
 801033e:	4630      	mov	r0, r6
 8010340:	4639      	mov	r1, r7
 8010342:	f7ff bb28 	b.w	800f996 <__ieee754_pow+0x3e>
 8010346:	9204      	str	r2, [sp, #16]
 8010348:	f7ff bb7a 	b.w	800fa40 <__ieee754_pow+0xe8>
 801034c:	2300      	movs	r3, #0
 801034e:	f7ff bb64 	b.w	800fa1a <__ieee754_pow+0xc2>
 8010352:	bf00      	nop
 8010354:	f3af 8000 	nop.w
 8010358:	00000000 	.word	0x00000000
 801035c:	3fe62e43 	.word	0x3fe62e43
 8010360:	fefa39ef 	.word	0xfefa39ef
 8010364:	3fe62e42 	.word	0x3fe62e42
 8010368:	0ca86c39 	.word	0x0ca86c39
 801036c:	be205c61 	.word	0xbe205c61
 8010370:	72bea4d0 	.word	0x72bea4d0
 8010374:	3e663769 	.word	0x3e663769
 8010378:	c5d26bf1 	.word	0xc5d26bf1
 801037c:	3ebbbd41 	.word	0x3ebbbd41
 8010380:	af25de2c 	.word	0xaf25de2c
 8010384:	3f11566a 	.word	0x3f11566a
 8010388:	16bebd93 	.word	0x16bebd93
 801038c:	3f66c16c 	.word	0x3f66c16c
 8010390:	5555553e 	.word	0x5555553e
 8010394:	3fc55555 	.word	0x3fc55555
 8010398:	3fe00000 	.word	0x3fe00000
 801039c:	000fffff 	.word	0x000fffff
 80103a0:	3ff00000 	.word	0x3ff00000
 80103a4:	4090cbff 	.word	0x4090cbff
 80103a8:	3f6f3400 	.word	0x3f6f3400
 80103ac:	652b82fe 	.word	0x652b82fe
 80103b0:	3c971547 	.word	0x3c971547

080103b4 <__ieee754_sqrt>:
 80103b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80103b8:	ec55 4b10 	vmov	r4, r5, d0
 80103bc:	4e55      	ldr	r6, [pc, #340]	; (8010514 <__ieee754_sqrt+0x160>)
 80103be:	43ae      	bics	r6, r5
 80103c0:	ee10 0a10 	vmov	r0, s0
 80103c4:	ee10 3a10 	vmov	r3, s0
 80103c8:	462a      	mov	r2, r5
 80103ca:	4629      	mov	r1, r5
 80103cc:	d110      	bne.n	80103f0 <__ieee754_sqrt+0x3c>
 80103ce:	ee10 2a10 	vmov	r2, s0
 80103d2:	462b      	mov	r3, r5
 80103d4:	f7f0 f910 	bl	80005f8 <__aeabi_dmul>
 80103d8:	4602      	mov	r2, r0
 80103da:	460b      	mov	r3, r1
 80103dc:	4620      	mov	r0, r4
 80103de:	4629      	mov	r1, r5
 80103e0:	f7ef ff54 	bl	800028c <__adddf3>
 80103e4:	4604      	mov	r4, r0
 80103e6:	460d      	mov	r5, r1
 80103e8:	ec45 4b10 	vmov	d0, r4, r5
 80103ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103f0:	2d00      	cmp	r5, #0
 80103f2:	dc10      	bgt.n	8010416 <__ieee754_sqrt+0x62>
 80103f4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80103f8:	4330      	orrs	r0, r6
 80103fa:	d0f5      	beq.n	80103e8 <__ieee754_sqrt+0x34>
 80103fc:	b15d      	cbz	r5, 8010416 <__ieee754_sqrt+0x62>
 80103fe:	ee10 2a10 	vmov	r2, s0
 8010402:	462b      	mov	r3, r5
 8010404:	ee10 0a10 	vmov	r0, s0
 8010408:	f7ef ff3e 	bl	8000288 <__aeabi_dsub>
 801040c:	4602      	mov	r2, r0
 801040e:	460b      	mov	r3, r1
 8010410:	f7f0 fa1c 	bl	800084c <__aeabi_ddiv>
 8010414:	e7e6      	b.n	80103e4 <__ieee754_sqrt+0x30>
 8010416:	1512      	asrs	r2, r2, #20
 8010418:	d074      	beq.n	8010504 <__ieee754_sqrt+0x150>
 801041a:	07d4      	lsls	r4, r2, #31
 801041c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8010420:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8010424:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8010428:	bf5e      	ittt	pl
 801042a:	0fda      	lsrpl	r2, r3, #31
 801042c:	005b      	lslpl	r3, r3, #1
 801042e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8010432:	2400      	movs	r4, #0
 8010434:	0fda      	lsrs	r2, r3, #31
 8010436:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 801043a:	107f      	asrs	r7, r7, #1
 801043c:	005b      	lsls	r3, r3, #1
 801043e:	2516      	movs	r5, #22
 8010440:	4620      	mov	r0, r4
 8010442:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8010446:	1886      	adds	r6, r0, r2
 8010448:	428e      	cmp	r6, r1
 801044a:	bfde      	ittt	le
 801044c:	1b89      	suble	r1, r1, r6
 801044e:	18b0      	addle	r0, r6, r2
 8010450:	18a4      	addle	r4, r4, r2
 8010452:	0049      	lsls	r1, r1, #1
 8010454:	3d01      	subs	r5, #1
 8010456:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 801045a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 801045e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8010462:	d1f0      	bne.n	8010446 <__ieee754_sqrt+0x92>
 8010464:	462a      	mov	r2, r5
 8010466:	f04f 0e20 	mov.w	lr, #32
 801046a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 801046e:	4281      	cmp	r1, r0
 8010470:	eb06 0c05 	add.w	ip, r6, r5
 8010474:	dc02      	bgt.n	801047c <__ieee754_sqrt+0xc8>
 8010476:	d113      	bne.n	80104a0 <__ieee754_sqrt+0xec>
 8010478:	459c      	cmp	ip, r3
 801047a:	d811      	bhi.n	80104a0 <__ieee754_sqrt+0xec>
 801047c:	f1bc 0f00 	cmp.w	ip, #0
 8010480:	eb0c 0506 	add.w	r5, ip, r6
 8010484:	da43      	bge.n	801050e <__ieee754_sqrt+0x15a>
 8010486:	2d00      	cmp	r5, #0
 8010488:	db41      	blt.n	801050e <__ieee754_sqrt+0x15a>
 801048a:	f100 0801 	add.w	r8, r0, #1
 801048e:	1a09      	subs	r1, r1, r0
 8010490:	459c      	cmp	ip, r3
 8010492:	bf88      	it	hi
 8010494:	f101 31ff 	addhi.w	r1, r1, #4294967295
 8010498:	eba3 030c 	sub.w	r3, r3, ip
 801049c:	4432      	add	r2, r6
 801049e:	4640      	mov	r0, r8
 80104a0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80104a4:	f1be 0e01 	subs.w	lr, lr, #1
 80104a8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 80104ac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80104b0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80104b4:	d1db      	bne.n	801046e <__ieee754_sqrt+0xba>
 80104b6:	430b      	orrs	r3, r1
 80104b8:	d006      	beq.n	80104c8 <__ieee754_sqrt+0x114>
 80104ba:	1c50      	adds	r0, r2, #1
 80104bc:	bf13      	iteet	ne
 80104be:	3201      	addne	r2, #1
 80104c0:	3401      	addeq	r4, #1
 80104c2:	4672      	moveq	r2, lr
 80104c4:	f022 0201 	bicne.w	r2, r2, #1
 80104c8:	1063      	asrs	r3, r4, #1
 80104ca:	0852      	lsrs	r2, r2, #1
 80104cc:	07e1      	lsls	r1, r4, #31
 80104ce:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80104d2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80104d6:	bf48      	it	mi
 80104d8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 80104dc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80104e0:	4614      	mov	r4, r2
 80104e2:	e781      	b.n	80103e8 <__ieee754_sqrt+0x34>
 80104e4:	0ad9      	lsrs	r1, r3, #11
 80104e6:	3815      	subs	r0, #21
 80104e8:	055b      	lsls	r3, r3, #21
 80104ea:	2900      	cmp	r1, #0
 80104ec:	d0fa      	beq.n	80104e4 <__ieee754_sqrt+0x130>
 80104ee:	02cd      	lsls	r5, r1, #11
 80104f0:	d50a      	bpl.n	8010508 <__ieee754_sqrt+0x154>
 80104f2:	f1c2 0420 	rsb	r4, r2, #32
 80104f6:	fa23 f404 	lsr.w	r4, r3, r4
 80104fa:	1e55      	subs	r5, r2, #1
 80104fc:	4093      	lsls	r3, r2
 80104fe:	4321      	orrs	r1, r4
 8010500:	1b42      	subs	r2, r0, r5
 8010502:	e78a      	b.n	801041a <__ieee754_sqrt+0x66>
 8010504:	4610      	mov	r0, r2
 8010506:	e7f0      	b.n	80104ea <__ieee754_sqrt+0x136>
 8010508:	0049      	lsls	r1, r1, #1
 801050a:	3201      	adds	r2, #1
 801050c:	e7ef      	b.n	80104ee <__ieee754_sqrt+0x13a>
 801050e:	4680      	mov	r8, r0
 8010510:	e7bd      	b.n	801048e <__ieee754_sqrt+0xda>
 8010512:	bf00      	nop
 8010514:	7ff00000 	.word	0x7ff00000

08010518 <with_errno>:
 8010518:	b570      	push	{r4, r5, r6, lr}
 801051a:	4604      	mov	r4, r0
 801051c:	460d      	mov	r5, r1
 801051e:	4616      	mov	r6, r2
 8010520:	f7fc f8e0 	bl	800c6e4 <__errno>
 8010524:	4629      	mov	r1, r5
 8010526:	6006      	str	r6, [r0, #0]
 8010528:	4620      	mov	r0, r4
 801052a:	bd70      	pop	{r4, r5, r6, pc}

0801052c <xflow>:
 801052c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801052e:	4614      	mov	r4, r2
 8010530:	461d      	mov	r5, r3
 8010532:	b108      	cbz	r0, 8010538 <xflow+0xc>
 8010534:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8010538:	e9cd 2300 	strd	r2, r3, [sp]
 801053c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010540:	4620      	mov	r0, r4
 8010542:	4629      	mov	r1, r5
 8010544:	f7f0 f858 	bl	80005f8 <__aeabi_dmul>
 8010548:	2222      	movs	r2, #34	; 0x22
 801054a:	b003      	add	sp, #12
 801054c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010550:	f7ff bfe2 	b.w	8010518 <with_errno>

08010554 <__math_uflow>:
 8010554:	b508      	push	{r3, lr}
 8010556:	2200      	movs	r2, #0
 8010558:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 801055c:	f7ff ffe6 	bl	801052c <xflow>
 8010560:	ec41 0b10 	vmov	d0, r0, r1
 8010564:	bd08      	pop	{r3, pc}

08010566 <__math_oflow>:
 8010566:	b508      	push	{r3, lr}
 8010568:	2200      	movs	r2, #0
 801056a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801056e:	f7ff ffdd 	bl	801052c <xflow>
 8010572:	ec41 0b10 	vmov	d0, r0, r1
 8010576:	bd08      	pop	{r3, pc}

08010578 <fabs>:
 8010578:	ec51 0b10 	vmov	r0, r1, d0
 801057c:	ee10 2a10 	vmov	r2, s0
 8010580:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010584:	ec43 2b10 	vmov	d0, r2, r3
 8010588:	4770      	bx	lr

0801058a <finite>:
 801058a:	b082      	sub	sp, #8
 801058c:	ed8d 0b00 	vstr	d0, [sp]
 8010590:	9801      	ldr	r0, [sp, #4]
 8010592:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8010596:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801059a:	0fc0      	lsrs	r0, r0, #31
 801059c:	b002      	add	sp, #8
 801059e:	4770      	bx	lr

080105a0 <nan>:
 80105a0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80105a8 <nan+0x8>
 80105a4:	4770      	bx	lr
 80105a6:	bf00      	nop
 80105a8:	00000000 	.word	0x00000000
 80105ac:	7ff80000 	.word	0x7ff80000

080105b0 <scalbn>:
 80105b0:	b570      	push	{r4, r5, r6, lr}
 80105b2:	ec55 4b10 	vmov	r4, r5, d0
 80105b6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80105ba:	4606      	mov	r6, r0
 80105bc:	462b      	mov	r3, r5
 80105be:	b99a      	cbnz	r2, 80105e8 <scalbn+0x38>
 80105c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80105c4:	4323      	orrs	r3, r4
 80105c6:	d036      	beq.n	8010636 <scalbn+0x86>
 80105c8:	4b39      	ldr	r3, [pc, #228]	; (80106b0 <scalbn+0x100>)
 80105ca:	4629      	mov	r1, r5
 80105cc:	ee10 0a10 	vmov	r0, s0
 80105d0:	2200      	movs	r2, #0
 80105d2:	f7f0 f811 	bl	80005f8 <__aeabi_dmul>
 80105d6:	4b37      	ldr	r3, [pc, #220]	; (80106b4 <scalbn+0x104>)
 80105d8:	429e      	cmp	r6, r3
 80105da:	4604      	mov	r4, r0
 80105dc:	460d      	mov	r5, r1
 80105de:	da10      	bge.n	8010602 <scalbn+0x52>
 80105e0:	a32b      	add	r3, pc, #172	; (adr r3, 8010690 <scalbn+0xe0>)
 80105e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105e6:	e03a      	b.n	801065e <scalbn+0xae>
 80105e8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80105ec:	428a      	cmp	r2, r1
 80105ee:	d10c      	bne.n	801060a <scalbn+0x5a>
 80105f0:	ee10 2a10 	vmov	r2, s0
 80105f4:	4620      	mov	r0, r4
 80105f6:	4629      	mov	r1, r5
 80105f8:	f7ef fe48 	bl	800028c <__adddf3>
 80105fc:	4604      	mov	r4, r0
 80105fe:	460d      	mov	r5, r1
 8010600:	e019      	b.n	8010636 <scalbn+0x86>
 8010602:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010606:	460b      	mov	r3, r1
 8010608:	3a36      	subs	r2, #54	; 0x36
 801060a:	4432      	add	r2, r6
 801060c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010610:	428a      	cmp	r2, r1
 8010612:	dd08      	ble.n	8010626 <scalbn+0x76>
 8010614:	2d00      	cmp	r5, #0
 8010616:	a120      	add	r1, pc, #128	; (adr r1, 8010698 <scalbn+0xe8>)
 8010618:	e9d1 0100 	ldrd	r0, r1, [r1]
 801061c:	da1c      	bge.n	8010658 <scalbn+0xa8>
 801061e:	a120      	add	r1, pc, #128	; (adr r1, 80106a0 <scalbn+0xf0>)
 8010620:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010624:	e018      	b.n	8010658 <scalbn+0xa8>
 8010626:	2a00      	cmp	r2, #0
 8010628:	dd08      	ble.n	801063c <scalbn+0x8c>
 801062a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801062e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010632:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8010636:	ec45 4b10 	vmov	d0, r4, r5
 801063a:	bd70      	pop	{r4, r5, r6, pc}
 801063c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010640:	da19      	bge.n	8010676 <scalbn+0xc6>
 8010642:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010646:	429e      	cmp	r6, r3
 8010648:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801064c:	dd0a      	ble.n	8010664 <scalbn+0xb4>
 801064e:	a112      	add	r1, pc, #72	; (adr r1, 8010698 <scalbn+0xe8>)
 8010650:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d1e2      	bne.n	801061e <scalbn+0x6e>
 8010658:	a30f      	add	r3, pc, #60	; (adr r3, 8010698 <scalbn+0xe8>)
 801065a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801065e:	f7ef ffcb 	bl	80005f8 <__aeabi_dmul>
 8010662:	e7cb      	b.n	80105fc <scalbn+0x4c>
 8010664:	a10a      	add	r1, pc, #40	; (adr r1, 8010690 <scalbn+0xe0>)
 8010666:	e9d1 0100 	ldrd	r0, r1, [r1]
 801066a:	2b00      	cmp	r3, #0
 801066c:	d0b8      	beq.n	80105e0 <scalbn+0x30>
 801066e:	a10e      	add	r1, pc, #56	; (adr r1, 80106a8 <scalbn+0xf8>)
 8010670:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010674:	e7b4      	b.n	80105e0 <scalbn+0x30>
 8010676:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801067a:	3236      	adds	r2, #54	; 0x36
 801067c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010680:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010684:	4620      	mov	r0, r4
 8010686:	4b0c      	ldr	r3, [pc, #48]	; (80106b8 <scalbn+0x108>)
 8010688:	2200      	movs	r2, #0
 801068a:	e7e8      	b.n	801065e <scalbn+0xae>
 801068c:	f3af 8000 	nop.w
 8010690:	c2f8f359 	.word	0xc2f8f359
 8010694:	01a56e1f 	.word	0x01a56e1f
 8010698:	8800759c 	.word	0x8800759c
 801069c:	7e37e43c 	.word	0x7e37e43c
 80106a0:	8800759c 	.word	0x8800759c
 80106a4:	fe37e43c 	.word	0xfe37e43c
 80106a8:	c2f8f359 	.word	0xc2f8f359
 80106ac:	81a56e1f 	.word	0x81a56e1f
 80106b0:	43500000 	.word	0x43500000
 80106b4:	ffff3cb0 	.word	0xffff3cb0
 80106b8:	3c900000 	.word	0x3c900000
 80106bc:	00000000 	.word	0x00000000

080106c0 <__ieee754_log>:
 80106c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106c4:	ec51 0b10 	vmov	r0, r1, d0
 80106c8:	ed2d 8b04 	vpush	{d8-d9}
 80106cc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80106d0:	b083      	sub	sp, #12
 80106d2:	460d      	mov	r5, r1
 80106d4:	da29      	bge.n	801072a <__ieee754_log+0x6a>
 80106d6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80106da:	4303      	orrs	r3, r0
 80106dc:	ee10 2a10 	vmov	r2, s0
 80106e0:	d10c      	bne.n	80106fc <__ieee754_log+0x3c>
 80106e2:	49cf      	ldr	r1, [pc, #828]	; (8010a20 <__ieee754_log+0x360>)
 80106e4:	2200      	movs	r2, #0
 80106e6:	2300      	movs	r3, #0
 80106e8:	2000      	movs	r0, #0
 80106ea:	f7f0 f8af 	bl	800084c <__aeabi_ddiv>
 80106ee:	ec41 0b10 	vmov	d0, r0, r1
 80106f2:	b003      	add	sp, #12
 80106f4:	ecbd 8b04 	vpop	{d8-d9}
 80106f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80106fc:	2900      	cmp	r1, #0
 80106fe:	da05      	bge.n	801070c <__ieee754_log+0x4c>
 8010700:	460b      	mov	r3, r1
 8010702:	f7ef fdc1 	bl	8000288 <__aeabi_dsub>
 8010706:	2200      	movs	r2, #0
 8010708:	2300      	movs	r3, #0
 801070a:	e7ee      	b.n	80106ea <__ieee754_log+0x2a>
 801070c:	4bc5      	ldr	r3, [pc, #788]	; (8010a24 <__ieee754_log+0x364>)
 801070e:	2200      	movs	r2, #0
 8010710:	f7ef ff72 	bl	80005f8 <__aeabi_dmul>
 8010714:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8010718:	460d      	mov	r5, r1
 801071a:	4ac3      	ldr	r2, [pc, #780]	; (8010a28 <__ieee754_log+0x368>)
 801071c:	4295      	cmp	r5, r2
 801071e:	dd06      	ble.n	801072e <__ieee754_log+0x6e>
 8010720:	4602      	mov	r2, r0
 8010722:	460b      	mov	r3, r1
 8010724:	f7ef fdb2 	bl	800028c <__adddf3>
 8010728:	e7e1      	b.n	80106ee <__ieee754_log+0x2e>
 801072a:	2300      	movs	r3, #0
 801072c:	e7f5      	b.n	801071a <__ieee754_log+0x5a>
 801072e:	152c      	asrs	r4, r5, #20
 8010730:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8010734:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8010738:	441c      	add	r4, r3
 801073a:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 801073e:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8010742:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010746:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 801074a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 801074e:	ea42 0105 	orr.w	r1, r2, r5
 8010752:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8010756:	2200      	movs	r2, #0
 8010758:	4bb4      	ldr	r3, [pc, #720]	; (8010a2c <__ieee754_log+0x36c>)
 801075a:	f7ef fd95 	bl	8000288 <__aeabi_dsub>
 801075e:	1cab      	adds	r3, r5, #2
 8010760:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8010764:	2b02      	cmp	r3, #2
 8010766:	4682      	mov	sl, r0
 8010768:	468b      	mov	fp, r1
 801076a:	f04f 0200 	mov.w	r2, #0
 801076e:	dc53      	bgt.n	8010818 <__ieee754_log+0x158>
 8010770:	2300      	movs	r3, #0
 8010772:	f7f0 f9a9 	bl	8000ac8 <__aeabi_dcmpeq>
 8010776:	b1d0      	cbz	r0, 80107ae <__ieee754_log+0xee>
 8010778:	2c00      	cmp	r4, #0
 801077a:	f000 8122 	beq.w	80109c2 <__ieee754_log+0x302>
 801077e:	4620      	mov	r0, r4
 8010780:	f7ef fed0 	bl	8000524 <__aeabi_i2d>
 8010784:	a390      	add	r3, pc, #576	; (adr r3, 80109c8 <__ieee754_log+0x308>)
 8010786:	e9d3 2300 	ldrd	r2, r3, [r3]
 801078a:	4606      	mov	r6, r0
 801078c:	460f      	mov	r7, r1
 801078e:	f7ef ff33 	bl	80005f8 <__aeabi_dmul>
 8010792:	a38f      	add	r3, pc, #572	; (adr r3, 80109d0 <__ieee754_log+0x310>)
 8010794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010798:	4604      	mov	r4, r0
 801079a:	460d      	mov	r5, r1
 801079c:	4630      	mov	r0, r6
 801079e:	4639      	mov	r1, r7
 80107a0:	f7ef ff2a 	bl	80005f8 <__aeabi_dmul>
 80107a4:	4602      	mov	r2, r0
 80107a6:	460b      	mov	r3, r1
 80107a8:	4620      	mov	r0, r4
 80107aa:	4629      	mov	r1, r5
 80107ac:	e7ba      	b.n	8010724 <__ieee754_log+0x64>
 80107ae:	a38a      	add	r3, pc, #552	; (adr r3, 80109d8 <__ieee754_log+0x318>)
 80107b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107b4:	4650      	mov	r0, sl
 80107b6:	4659      	mov	r1, fp
 80107b8:	f7ef ff1e 	bl	80005f8 <__aeabi_dmul>
 80107bc:	4602      	mov	r2, r0
 80107be:	460b      	mov	r3, r1
 80107c0:	2000      	movs	r0, #0
 80107c2:	499b      	ldr	r1, [pc, #620]	; (8010a30 <__ieee754_log+0x370>)
 80107c4:	f7ef fd60 	bl	8000288 <__aeabi_dsub>
 80107c8:	4652      	mov	r2, sl
 80107ca:	4606      	mov	r6, r0
 80107cc:	460f      	mov	r7, r1
 80107ce:	465b      	mov	r3, fp
 80107d0:	4650      	mov	r0, sl
 80107d2:	4659      	mov	r1, fp
 80107d4:	f7ef ff10 	bl	80005f8 <__aeabi_dmul>
 80107d8:	4602      	mov	r2, r0
 80107da:	460b      	mov	r3, r1
 80107dc:	4630      	mov	r0, r6
 80107de:	4639      	mov	r1, r7
 80107e0:	f7ef ff0a 	bl	80005f8 <__aeabi_dmul>
 80107e4:	4606      	mov	r6, r0
 80107e6:	460f      	mov	r7, r1
 80107e8:	b914      	cbnz	r4, 80107f0 <__ieee754_log+0x130>
 80107ea:	4632      	mov	r2, r6
 80107ec:	463b      	mov	r3, r7
 80107ee:	e0a2      	b.n	8010936 <__ieee754_log+0x276>
 80107f0:	4620      	mov	r0, r4
 80107f2:	f7ef fe97 	bl	8000524 <__aeabi_i2d>
 80107f6:	a374      	add	r3, pc, #464	; (adr r3, 80109c8 <__ieee754_log+0x308>)
 80107f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80107fc:	4680      	mov	r8, r0
 80107fe:	4689      	mov	r9, r1
 8010800:	f7ef fefa 	bl	80005f8 <__aeabi_dmul>
 8010804:	a372      	add	r3, pc, #456	; (adr r3, 80109d0 <__ieee754_log+0x310>)
 8010806:	e9d3 2300 	ldrd	r2, r3, [r3]
 801080a:	4604      	mov	r4, r0
 801080c:	460d      	mov	r5, r1
 801080e:	4640      	mov	r0, r8
 8010810:	4649      	mov	r1, r9
 8010812:	f7ef fef1 	bl	80005f8 <__aeabi_dmul>
 8010816:	e0a7      	b.n	8010968 <__ieee754_log+0x2a8>
 8010818:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 801081c:	f7ef fd36 	bl	800028c <__adddf3>
 8010820:	4602      	mov	r2, r0
 8010822:	460b      	mov	r3, r1
 8010824:	4650      	mov	r0, sl
 8010826:	4659      	mov	r1, fp
 8010828:	f7f0 f810 	bl	800084c <__aeabi_ddiv>
 801082c:	ec41 0b18 	vmov	d8, r0, r1
 8010830:	4620      	mov	r0, r4
 8010832:	f7ef fe77 	bl	8000524 <__aeabi_i2d>
 8010836:	ec53 2b18 	vmov	r2, r3, d8
 801083a:	ec41 0b19 	vmov	d9, r0, r1
 801083e:	ec51 0b18 	vmov	r0, r1, d8
 8010842:	f7ef fed9 	bl	80005f8 <__aeabi_dmul>
 8010846:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 801084a:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 801084e:	9301      	str	r3, [sp, #4]
 8010850:	4602      	mov	r2, r0
 8010852:	460b      	mov	r3, r1
 8010854:	4680      	mov	r8, r0
 8010856:	4689      	mov	r9, r1
 8010858:	f7ef fece 	bl	80005f8 <__aeabi_dmul>
 801085c:	a360      	add	r3, pc, #384	; (adr r3, 80109e0 <__ieee754_log+0x320>)
 801085e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010862:	4606      	mov	r6, r0
 8010864:	460f      	mov	r7, r1
 8010866:	f7ef fec7 	bl	80005f8 <__aeabi_dmul>
 801086a:	a35f      	add	r3, pc, #380	; (adr r3, 80109e8 <__ieee754_log+0x328>)
 801086c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010870:	f7ef fd0c 	bl	800028c <__adddf3>
 8010874:	4632      	mov	r2, r6
 8010876:	463b      	mov	r3, r7
 8010878:	f7ef febe 	bl	80005f8 <__aeabi_dmul>
 801087c:	a35c      	add	r3, pc, #368	; (adr r3, 80109f0 <__ieee754_log+0x330>)
 801087e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010882:	f7ef fd03 	bl	800028c <__adddf3>
 8010886:	4632      	mov	r2, r6
 8010888:	463b      	mov	r3, r7
 801088a:	f7ef feb5 	bl	80005f8 <__aeabi_dmul>
 801088e:	a35a      	add	r3, pc, #360	; (adr r3, 80109f8 <__ieee754_log+0x338>)
 8010890:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010894:	f7ef fcfa 	bl	800028c <__adddf3>
 8010898:	4642      	mov	r2, r8
 801089a:	464b      	mov	r3, r9
 801089c:	f7ef feac 	bl	80005f8 <__aeabi_dmul>
 80108a0:	a357      	add	r3, pc, #348	; (adr r3, 8010a00 <__ieee754_log+0x340>)
 80108a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108a6:	4680      	mov	r8, r0
 80108a8:	4689      	mov	r9, r1
 80108aa:	4630      	mov	r0, r6
 80108ac:	4639      	mov	r1, r7
 80108ae:	f7ef fea3 	bl	80005f8 <__aeabi_dmul>
 80108b2:	a355      	add	r3, pc, #340	; (adr r3, 8010a08 <__ieee754_log+0x348>)
 80108b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108b8:	f7ef fce8 	bl	800028c <__adddf3>
 80108bc:	4632      	mov	r2, r6
 80108be:	463b      	mov	r3, r7
 80108c0:	f7ef fe9a 	bl	80005f8 <__aeabi_dmul>
 80108c4:	a352      	add	r3, pc, #328	; (adr r3, 8010a10 <__ieee754_log+0x350>)
 80108c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ca:	f7ef fcdf 	bl	800028c <__adddf3>
 80108ce:	4632      	mov	r2, r6
 80108d0:	463b      	mov	r3, r7
 80108d2:	f7ef fe91 	bl	80005f8 <__aeabi_dmul>
 80108d6:	460b      	mov	r3, r1
 80108d8:	4602      	mov	r2, r0
 80108da:	4649      	mov	r1, r9
 80108dc:	4640      	mov	r0, r8
 80108de:	f7ef fcd5 	bl	800028c <__adddf3>
 80108e2:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80108e6:	9b01      	ldr	r3, [sp, #4]
 80108e8:	3551      	adds	r5, #81	; 0x51
 80108ea:	431d      	orrs	r5, r3
 80108ec:	2d00      	cmp	r5, #0
 80108ee:	4680      	mov	r8, r0
 80108f0:	4689      	mov	r9, r1
 80108f2:	dd48      	ble.n	8010986 <__ieee754_log+0x2c6>
 80108f4:	4b4e      	ldr	r3, [pc, #312]	; (8010a30 <__ieee754_log+0x370>)
 80108f6:	2200      	movs	r2, #0
 80108f8:	4650      	mov	r0, sl
 80108fa:	4659      	mov	r1, fp
 80108fc:	f7ef fe7c 	bl	80005f8 <__aeabi_dmul>
 8010900:	4652      	mov	r2, sl
 8010902:	465b      	mov	r3, fp
 8010904:	f7ef fe78 	bl	80005f8 <__aeabi_dmul>
 8010908:	4602      	mov	r2, r0
 801090a:	460b      	mov	r3, r1
 801090c:	4606      	mov	r6, r0
 801090e:	460f      	mov	r7, r1
 8010910:	4640      	mov	r0, r8
 8010912:	4649      	mov	r1, r9
 8010914:	f7ef fcba 	bl	800028c <__adddf3>
 8010918:	ec53 2b18 	vmov	r2, r3, d8
 801091c:	f7ef fe6c 	bl	80005f8 <__aeabi_dmul>
 8010920:	4680      	mov	r8, r0
 8010922:	4689      	mov	r9, r1
 8010924:	b964      	cbnz	r4, 8010940 <__ieee754_log+0x280>
 8010926:	4602      	mov	r2, r0
 8010928:	460b      	mov	r3, r1
 801092a:	4630      	mov	r0, r6
 801092c:	4639      	mov	r1, r7
 801092e:	f7ef fcab 	bl	8000288 <__aeabi_dsub>
 8010932:	4602      	mov	r2, r0
 8010934:	460b      	mov	r3, r1
 8010936:	4650      	mov	r0, sl
 8010938:	4659      	mov	r1, fp
 801093a:	f7ef fca5 	bl	8000288 <__aeabi_dsub>
 801093e:	e6d6      	b.n	80106ee <__ieee754_log+0x2e>
 8010940:	a321      	add	r3, pc, #132	; (adr r3, 80109c8 <__ieee754_log+0x308>)
 8010942:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010946:	ec51 0b19 	vmov	r0, r1, d9
 801094a:	f7ef fe55 	bl	80005f8 <__aeabi_dmul>
 801094e:	a320      	add	r3, pc, #128	; (adr r3, 80109d0 <__ieee754_log+0x310>)
 8010950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010954:	4604      	mov	r4, r0
 8010956:	460d      	mov	r5, r1
 8010958:	ec51 0b19 	vmov	r0, r1, d9
 801095c:	f7ef fe4c 	bl	80005f8 <__aeabi_dmul>
 8010960:	4642      	mov	r2, r8
 8010962:	464b      	mov	r3, r9
 8010964:	f7ef fc92 	bl	800028c <__adddf3>
 8010968:	4602      	mov	r2, r0
 801096a:	460b      	mov	r3, r1
 801096c:	4630      	mov	r0, r6
 801096e:	4639      	mov	r1, r7
 8010970:	f7ef fc8a 	bl	8000288 <__aeabi_dsub>
 8010974:	4652      	mov	r2, sl
 8010976:	465b      	mov	r3, fp
 8010978:	f7ef fc86 	bl	8000288 <__aeabi_dsub>
 801097c:	4602      	mov	r2, r0
 801097e:	460b      	mov	r3, r1
 8010980:	4620      	mov	r0, r4
 8010982:	4629      	mov	r1, r5
 8010984:	e7d9      	b.n	801093a <__ieee754_log+0x27a>
 8010986:	4602      	mov	r2, r0
 8010988:	460b      	mov	r3, r1
 801098a:	4650      	mov	r0, sl
 801098c:	4659      	mov	r1, fp
 801098e:	f7ef fc7b 	bl	8000288 <__aeabi_dsub>
 8010992:	ec53 2b18 	vmov	r2, r3, d8
 8010996:	f7ef fe2f 	bl	80005f8 <__aeabi_dmul>
 801099a:	4606      	mov	r6, r0
 801099c:	460f      	mov	r7, r1
 801099e:	2c00      	cmp	r4, #0
 80109a0:	f43f af23 	beq.w	80107ea <__ieee754_log+0x12a>
 80109a4:	a308      	add	r3, pc, #32	; (adr r3, 80109c8 <__ieee754_log+0x308>)
 80109a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109aa:	ec51 0b19 	vmov	r0, r1, d9
 80109ae:	f7ef fe23 	bl	80005f8 <__aeabi_dmul>
 80109b2:	a307      	add	r3, pc, #28	; (adr r3, 80109d0 <__ieee754_log+0x310>)
 80109b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109b8:	4604      	mov	r4, r0
 80109ba:	460d      	mov	r5, r1
 80109bc:	ec51 0b19 	vmov	r0, r1, d9
 80109c0:	e727      	b.n	8010812 <__ieee754_log+0x152>
 80109c2:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8010a18 <__ieee754_log+0x358>
 80109c6:	e694      	b.n	80106f2 <__ieee754_log+0x32>
 80109c8:	fee00000 	.word	0xfee00000
 80109cc:	3fe62e42 	.word	0x3fe62e42
 80109d0:	35793c76 	.word	0x35793c76
 80109d4:	3dea39ef 	.word	0x3dea39ef
 80109d8:	55555555 	.word	0x55555555
 80109dc:	3fd55555 	.word	0x3fd55555
 80109e0:	df3e5244 	.word	0xdf3e5244
 80109e4:	3fc2f112 	.word	0x3fc2f112
 80109e8:	96cb03de 	.word	0x96cb03de
 80109ec:	3fc74664 	.word	0x3fc74664
 80109f0:	94229359 	.word	0x94229359
 80109f4:	3fd24924 	.word	0x3fd24924
 80109f8:	55555593 	.word	0x55555593
 80109fc:	3fe55555 	.word	0x3fe55555
 8010a00:	d078c69f 	.word	0xd078c69f
 8010a04:	3fc39a09 	.word	0x3fc39a09
 8010a08:	1d8e78af 	.word	0x1d8e78af
 8010a0c:	3fcc71c5 	.word	0x3fcc71c5
 8010a10:	9997fa04 	.word	0x9997fa04
 8010a14:	3fd99999 	.word	0x3fd99999
	...
 8010a20:	c3500000 	.word	0xc3500000
 8010a24:	43500000 	.word	0x43500000
 8010a28:	7fefffff 	.word	0x7fefffff
 8010a2c:	3ff00000 	.word	0x3ff00000
 8010a30:	3fe00000 	.word	0x3fe00000

08010a34 <_init>:
 8010a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a36:	bf00      	nop
 8010a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a3a:	bc08      	pop	{r3}
 8010a3c:	469e      	mov	lr, r3
 8010a3e:	4770      	bx	lr

08010a40 <_fini>:
 8010a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a42:	bf00      	nop
 8010a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a46:	bc08      	pop	{r3}
 8010a48:	469e      	mov	lr, r3
 8010a4a:	4770      	bx	lr
